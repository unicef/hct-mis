trigger:
  batch: true
  branches:
    include:
    - develop
    - staging
    - master
    - ops/*
    - feature/payment-module
  paths:
    exclude:
    -  docs/*
pr: none
resources:
  - repo: self

variables:
  # ========================================================================
  #                          Mandatory variables 
  # ========================================================================
  Docker.backend.repository: "hope-backend"
  Docker.frontend.repository: "hope-frontend"
  Docker.registryConnection.trn: "ICTD-HOPE-DEV-ACR"
  Docker.url.trn: "uniappsakshopedev.azurecr.io"
  ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
    Docker.registryConnection: "ICTD-HOPE-DEV-ACR"
    Docker.url: "uniappsakshopedev.azurecr.io"
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    Docker.registryConnection: "ICTD-HOPE-PRD-ACR"
    Docker.url: "uniappsakshope.azurecr.io"
  ${{ if eq(variables['Build.SourceBranchName'], 'develop') }}:
    Sentry.frontend.dsn: $(DEV_SENTRY_FRONTEND_DSN)
  ${{ elseif eq(variables['Build.SourceBranchName'], 'staging') }}:
    Sentry.frontend.dsn: $(STG_SENTRY_FRONTEND_DSN)
  ${{ elseif eq(variables['Build.SourceBranchName'], 'master') }}:
    Sentry.frontend.dsn: $(PRD_SENTRY_FRONTEND_DSN)
    Sentry.frontend.trn_dsn: $(TRN_SENTRY_FRONTEND_DSN)
  ${{ else }}:
    Sentry.frontend.dsn: ''
  isTraining: $[eq(variables['Build.SourceBranchName'], 'master')]
  tag: $(Build.SourceVersion)
  additionalTag: $(Build.SourceBranchName)

stages:
  - stage: test_frontend
    displayName: Test-Frontend
    jobs:
      - job: django_tests
        pool:
          vmImage: ubuntu-latest
        displayName: "[FRONTEND TEST]"
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "14.x"
            displayName: "Install Node.js"
          - task: Cache@2
            inputs:
              key: $(Build.SourcesDirectory)/frontend/yarn.lock
              path: $(Build.SourcesDirectory)/frontend/node_modules
            displayName: Cache Yarn packages
          - script: yarn install --frozen-lockfile
            displayName: "Yarn Install"
            workingDirectory: 'frontend'
          - script: yarn test --watchAll=false
            workingDirectory: 'frontend'
            displayName: "Test"

  - stage: build_and_push_backend
    dependsOn: []
    displayName: BUILD and PUSH
    jobs:
      - job: build_push_backend
        pool:
          vmImage: ubuntu-latest
        displayName: "[BACKEND_BUILD]"
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: '$(Docker.registryConnection)'
              command: 'login'
          - task: Docker@2
            condition: and(succeeded(), eq(variables.isTraining, true))
            inputs:
              containerRegistry: '$(Docker.registryConnection.trn)'
              command: 'login'
          - script: |
              docker buildx create --use
              docker buildx build \
              --cache-from=$(Docker.url)/$(Docker.backend.repository)-cache:$(additionalTag) \
              --cache-from=$(Docker.url)/$(Docker.backend.repository)-cache:latest \
              --cache-to=$(Docker.url)/$(Docker.backend.repository)-cache:$(additionalTag) \
              --cache-to=$(Docker.url)/$(Docker.backend.repository)-cache:latest \
              -t $(Docker.url)/$(Docker.backend.repository):$(tag) \
              -t $(Docker.url)/$(Docker.backend.repository):latest \
              --push \
              ./backend
            displayName: Docker build
          - script: |
              docker buildx create --use
              docker buildx build \
              --cache-from=$(Docker.url)/$(Docker.backend.repository)-cache:$(additionalTag) \
              --cache-from=$(Docker.url)/$(Docker.backend.repository)-cache:latest \
              -t $(Docker.url.trn)/$(Docker.backend.repository):$(tag) \
              -t $(Docker.url.trn)/$(Docker.backend.repository):latest \
              --push \
              ./backend
            displayName: Docker build trn
            condition: and(succeeded(), eq(variables.isTraining, true))

  - stage: build_and_push_frontend
    dependsOn: []
    displayName: BUILD and PUSH frontend
    jobs:
      - job: build_and_push
        pool:
          vmImage: ubuntu-latest
        displayName: "[FRONTEND_BUILD]"
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: '$(Docker.registry)'
              command: 'login'
          - task: Docker@2
            condition: and(succeeded(), eq(variables.isTraining, true))
            inputs:
              containerRegistry: '$(Docker.registryConnection.trn)'
              command: 'login'
          - script: |
              docker buildx create --use
              docker buildx build \
              --cache-from=$(Docker.url)/$(Docker.frontend.repository)-cache:$(additionalTag) \
              --cache-from=$(Docker.url)/$(Docker.frontend.repository)-cache:latest \
              --cache-to=$(Docker.url)/$(Docker.frontend.repository)-cache:$(additionalTag) \
              --cache-to=$(Docker.url)/$(Docker.frontend.repository)-cache:latest \
              -t $(Docker.url)/$(Docker.frontend.repository):$(tag) \
              -t $(Docker.url)/$(Docker.frontend.repository):latest \
              --build-arg SENTRY_FRONTEND_DSN=$(Sentry.frontend.dsn) \
              --push \
              ./frontend
            displayName: Docker build
          - script: |
              docker buildx create --use
              docker buildx build \
              --cache-from=$(Docker.url)/$(Docker.frontend.repository)-cache:$(additionalTag) \
              --cache-from=$(Docker.url)/$(Docker.frontend.repository)-cache:latest \
              -t $(Docker.url.trn)/$(Docker.frontend.repository):$(tag) \
              -t $(Docker.url.trn)/$(Docker.frontend.repository):latest \
              --build-arg SENTRY_FRONTEND_DSN=$(Sentry.frontend.trn_dsn) \
              --push \
              ./frontend
            displayName: Docker build trn
            condition: and(succeeded(), eq(variables.isTraining, true))

  - stage: test
    displayName: TEST
    dependsOn: build_and_push_backend
    jobs:
      - job: django_tests
        pool:
          vmImage: ubuntu-latest
        displayName: "[DJANGO TEST]"
        steps:
          - task: Docker@2
            displayName: "[ACR] Login"
            inputs:
              command: login
              containerRegistry: $(Docker.registry)
          - task: DockerCompose@0
            displayName: "Run tests"
            inputs:
              containerregistrytype: 'Azure Container Registry'
              azureContainerRegistry: $(Docker.registryConnection)
              dockerComposeFile: '**/docker-compose.tst.yml'
              action: 'Run a Docker Compose command'
              dockerComposeCommand: 'run backend test'
              dockerComposeFileArgs: |
                backend_image=$(Docker.url)/$(Docker.backend.repository):$(Build.SourceVersion)
          - task: PublishTestResults@2
            displayName: "Publish Test Result"
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '*.xml'
              searchFolder: 'backend/test-results/'
              mergeTestResults: true
              failTaskOnFailedTests: true
              testRunTitle: 'TEST Results'
