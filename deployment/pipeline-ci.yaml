trigger:
  batch: true
  branches:
    include:
    - develop
    - staging
    - master
    - global-program-filter
    - testing-ephemeral
    - ops/*
    - cicd-tests
  paths:
    exclude:
    -  docs/*
pr: none
resources:
  - repo: self

variables:
  # ========================================================================
  #                          Mandatory variables 
  # ========================================================================
  Docker.backend.repository: "hope-backend"
  Docker.frontend.repository: "hope-frontend"
  Docker.registryConnection.trn: "ICTD-HOPE-DEV-ACR"
  Docker.url.trn: "uniappsakshopedev.azurecr.io"
  ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
    Docker.registryConnection: "ICTD-HOPE-DEV-ACR"
    Docker.url: "uniappsakshopedev.azurecr.io"
    sentryEnvironment: "dev"
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    Docker.registryConnection: "ICTD-HOPE-PRD-ACR"
    Docker.url: "uniappsakshope.azurecr.io"
    sentryEnvironment: "production"
  isTraining: $[eq(variables['Build.SourceBranchName'], 'master')]
  isStaging: $[eq(variables['Build.SourceBranchName'], 'staging')]
  isEphemeral: $[eq(variables['Build.SourceBranchName'], 'global-program-filter')]
  isDev: $[eq(variables['Build.SourceBranchName'], 'develop')]
  tag: $(Build.SourceVersion)
  additionalTag: $(Build.SourceBranchName)
  ${{ if contains(variables['Build.SourceVersionMessage'], 'skip-tests') }}:
    skipTests: true
  ${{ if not(contains(variables['Build.SourceVersionMessage'], 'skip-tests')) }}:
    skipTests: false

stages:
  - stage: publish_artifacts
    displayName: PUBLISH_ARTIFACTS
    condition: and(succeeded(), ne(variables['skipTests'], 'true'))
    jobs:
      - job: publish_artifacts
        pool:
          vmImage: ubuntu-latest
        displayName: "[PUBLISH_ARTIFACTS]"
        steps:
          - script: |
              mkdir -p $(Build.ArtifactStagingDirectory)/tag 
              echo $(tag)
              echo $(tag) > $(Build.ArtifactStagingDirectory)/tag/hope.txt
            displayName: "Save tag to file"
          - task: PublishPipelineArtifact@1
            inputs:
              pathToPublish: "$(Build.ArtifactStagingDirectory)/tag"
              artifact: $(Build.SourceBranchName)
              publishLocation: 'pipeline'
            displayName: "Publish tag"
            condition: and(succeeded(), ne(variables['skipTests'], 'true'))