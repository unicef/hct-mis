trigger: none
pr: none
resources:
  pipelines:
  - pipeline: ci-hope
    source: '[CI] HOPE'
    trigger: 
      branches:
      - master

variables:
  # ========================================================================
  #                          Mandatory variables 
  # ========================================================================
  Kubernetes.serviceConnection: "ICTD-HOPE-TRN-uni-apps-aks-hope-dev-ictd-hope-trn-1616938354772"
  Kubernetes.namespace: "ictd-hope-trn"
  Docker.backend.repository: "hope-backend"
  Docker.frontend.repository: "hope-frontend"
  Docker.registry: "uniappsakshopedev.azurecr.io"

stages:
  - stage: deploy
    displayName: DEPLOY
    jobs:
      - job: deploy_hope
        pool:
          vmImage: 'ubuntu-latest'
        displayName: "[HOPE] Deployment"
        steps:
          - task: HelmDeploy@0
            displayName: "Update Chart dependencies"
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: $(Kubernetes.serviceConnection)     
              command: package
              updatedependency: true
              chartPath: '**/deployment/hope'
          - task: HelmDeploy@0
            displayName: "DEPLOY"
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: $(Kubernetes.serviceConnection)
              namespace: $(Kubernetes.namespace)
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '**/deployment/hope'
              releaseName: 'hope'
              install: true
              waitForExecution: false
              failOnStderr: false
              valueFile: '**/deployment/pipeline-cd-trn.values.yaml'
              arguments: "--timeout 600s"
              overrideValues: "
                backend.image=$(Docker.registry)/$(Docker.backend.repository):$(Build.SourceVersion),\
                celery.image=$(Docker.registry)/$(Docker.backend.repository):$(Build.SourceVersion),\
<<<<<<< HEAD
                frontend.image=$(Docker.registry)/$(Docker.frontend.repository):$(Build.SourceVersion)-trn,\
=======
                frontend.image=$(Docker.registry)/$(Docker.frontend.repository):$(Build.SourceVersion),\
>>>>>>> origin
                backend.secret.AZURE_CLIENT_ID=$(AZURE_CLIENT_ID),\
                backend.secret.SECRET_KEY=$(SECRET_KEY),\
                backend.secret.STORAGE_AZURE_ACCOUNT_KEY=$(STORAGE_AZURE_ACCOUNT_KEY),\
                backend.secret.AZURE_CLIENT_SECRET=$(AZURE_CLIENT_SECRET),\
                backend.secret.AZURE_TENANT_KEY=$(AZURE_TENANT_KEY),\
                backend.secret.SENTRY_DSN=$(SENTRY_DSN),\
                backend.secret.ROOT_ACCESS_TOKEN=$(ROOT_ACCESS_TOKEN),\
                backend.secret.EXCHANGE_RATES_API_KEY=$(EXCHANGE_RATES_API_KEY),\
                backend.secret.KOBO_APP_API_TOKEN=$(KOBO_APP_API_TOKEN),\
<<<<<<< HEAD
                postgresql.postgresqlPassword=$(POSTGRES_PASSWORD),\
                registrationdatahubpostgresql.postgresqlPassword=$(REGISTRATION_DATAHUB_POSTGRES_PASSWORD),\
=======
                postgresql.externalDatabase.password=$(POSTGRES_PASSWORD),\
                registrationdatahubpostgresql.externalDatabase.password=$(REGISTRATION_DATAHUB_POSTGRES_PASSWORD),\
>>>>>>> origin
                cashassistdatahubpostgresql.externalDatabase.password=$(CASH_ASSIST_DATAHUB_POSTGRES_PASSWORD),\
                celeryflower.secret.FLOWER_BASIC_AUTH=$(FLOWER_BASIC_AUTH)"
