trigger: none
pr:
  - master
  - develop
  - staging
  - global-program-filter
  - feature/*
resources:
  - repo: self

variables:
  # ========================================================================
  #                          Mandatory variables 
  # ========================================================================
  Docker.registryConnection: "ICTD-HOPE-DEV-ACR"
  tag: '$(System.PullRequest.PullRequestId)'
  Docker.backend.repository: "hope-backend"
  Docker.url: "uniappsakshopedev.azurecr.io"
  DOCKER_BUILDKIT: 1

stages:
  - stage: test_frontend
    displayName: FE tests
    jobs:
      - job: frontend_tests
        pool:
          vmImage: ubuntu-latest
        displayName: "[FE tests]"
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "18.19.x"
            displayName: "Install Node.js"
          - task: Cache@2
            inputs:
              key: $(Build.SourcesDirectory)/frontend/yarn.lock
              path: $(Build.SourcesDirectory)/frontend/node_modules
            displayName: Cache Yarn packages
          - script: yarn install --frozen-lockfile
            displayName: "Yarn Install"
            workingDirectory: 'frontend'
          - script: yarn test --watchAll=false
            workingDirectory: 'frontend'
            displayName: "Test"

  - stage: build_and_push_backend
    displayName: BE build & push
    dependsOn: []
    jobs:
      - job: build_push_backend
        pool:
          vmImage: ubuntu-latest
        displayName: "[BE build & push]"
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: '$(Docker.registryConnection)'
              command: 'login'
            displayName: Docker login
          - script: |
              docker buildx create --use
              docker buildx build \
                --cache-from type=registry,ref=$(Docker.url)/$(Docker.backend.repository)-cache:$(tag) \
                --cache-from type=registry,ref=$(Docker.url)/$(Docker.backend.repository)-cache:latest \
                --cache-to type=registry,ref=$(Docker.url)/$(Docker.backend.repository)-cache:$(tag),mode=max \
                --cache-to type=registry,ref=$(Docker.url)/$(Docker.backend.repository)-cache:latest,mode=max \
                -t $(Docker.url)/$(Docker.backend.repository):$(tag) \
                -t $(Docker.url)/$(Docker.backend.repository):latest \
                --push \
                -f ./docker/Dockerfile \
                ./
            displayName: Docker build dist image
          - script: |
              docker buildx create --use
              docker buildx build \
                --cache-from=$(Docker.url)/$(Docker.backend.repository)-cache:dev-$(tag) \
                --cache-from=$(Docker.url)/$(Docker.backend.repository)-cache:dev-latest \
                --cache-from=$(Docker.url)/$(Docker.backend.repository)-cache:latest \
                --cache-to type=registry,ref=$(Docker.url)/$(Docker.backend.repository)-cache:dev-$(tag),mode=max \
                --cache-to type=registry,ref=$(Docker.url)/$(Docker.backend.repository)-cache:dev-latest,mode=max \
                -t $(Docker.url)/$(Docker.backend.repository):dev-$(tag) \
                -t $(Docker.url)/$(Docker.backend.repository):dev-latest \
                --push --target dev \
                -f ./docker/Dockerfile \
                ./
            displayName: Docker build dev image

  - stage: lint_backend
    dependsOn: build_and_push_backend
    displayName: BE lint
    jobs:
      - job: django_lint
        pool:
          vmImage: ubuntu-latest
        displayName: "[BE lint]"
        steps:
          - task: Docker@2
            displayName: "ACR Login"
            inputs:
              command: login
              containerRegistry: $(Docker.registryConnection)

          - task: DockerCompose@0
            displayName: "Run linter"
            inputs:
              containerregistrytype: 'Azure Container Registry'
              azureContainerRegistry: $(Docker.registryConnection)
              dockerComposeFile: '**/docker-compose.tst.yml'
              action: 'Run a Docker Compose command'
              dockerComposeCommand: 'run --no-deps backend ./dev.sh lint'
              dockerComposeFileArgs: |
               backend_image=$(Docker.url)/$(Docker.backend.repository):dev-$(tag)

          - task: PublishTestResults@2
            displayName: "Publish lint result"
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '*.xml'
              searchFolder: 'backend/lint-results/'
              mergeTestResults: true
              failTaskOnFailedTests: true
              testRunTitle: 'Lint results'

  - stage: mypy_backend
    dependsOn: build_and_push_backend
    displayName: BE mypy
    jobs:
      - job: django_mypy
        pool:
          vmImage: ubuntu-latest
        displayName: "[BE mypy]"
        steps:
          - task: Docker@2
            displayName: "ACR Login"
            inputs:
              command: login
              containerRegistry: $(Docker.registryConnection)

          - task: DockerCompose@0
            displayName: "Run mypy"
            inputs:
              containerregistrytype: 'Azure Container Registry'
              azureContainerRegistry: $(Docker.registryConnection)
              dockerComposeFile: '**/docker-compose.tst.yml'
              action: 'Run a Docker Compose command'
              dockerComposeCommand: 'run --no-deps backend ./dev.sh mypy'
              dockerComposeFileArgs: |
               backend_image=$(Docker.url)/$(Docker.backend.repository):dev-$(tag)

          - task: PublishTestResults@2
            displayName: "Publish mypy result"
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '*.xml'
              searchFolder: 'backend/mypy-results/'
              mergeTestResults: true
              failTaskOnFailedTests: true
              testRunTitle: 'Mypy results'

  - stage: format_backend
    dependsOn: [build_and_push_backend]
    displayName: BE format
    jobs:
      - job: django_black
        pool:
          vmImage: ubuntu-latest
        displayName: "[BE format]"
        steps:
          - task: Docker@2
            displayName: "ACR Login"
            inputs:
              command: login
              containerRegistry: $(Docker.registryConnection)

          - task: DockerCompose@0
            displayName: "Run formatter"
            inputs:
              containerregistrytype: 'Azure Container Registry'
              azureContainerRegistry: $(Docker.registryConnection)
              dockerComposeFile: '**/docker-compose.tst.yml'
              action: 'Run a Docker Compose command'
              dockerComposeCommand: 'run --no-deps backend ./dev.sh black . --check'
              dockerComposeFileArgs: |
               backend_image=$(Docker.url)/$(Docker.backend.repository):dev-$(tag)

  - stage: test_backend
    dependsOn: [format_backend, lint_backend, mypy_backend]
    displayName: BE tests
    jobs:
      - job: django_tests
        pool:
          vmImage: ubuntu-latest
        displayName: "[BE tests]"
        steps:
          - task: Docker@2
            displayName: "ACR Login"
            inputs:
              command: login
              containerRegistry: $(Docker.registryConnection)
          - task: DockerCompose@0
            displayName: "Run tests"
            retryCountOnTaskFailure: 2
            inputs:
              containerregistrytype: 'Azure Container Registry'
              azureContainerRegistry: $(Docker.registryConnection)
              dockerComposeFile: '**/docker-compose.tst.yml'
              action: 'Run a Docker Compose command'
              dockerComposeCommand: 'run backend ./dev.sh test'
              dockerComposeFileArgs: |
               backend_image=$(Docker.url)/$(Docker.backend.repository):dev-$(tag)
          - task: PublishTestResults@2
            displayName: "Publish tests result"
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '*.xml'
              searchFolder: 'backend/test-results/'
              mergeTestResults: true
              failTaskOnFailedTests: true
              testRunTitle: 'TEST Results'
          - script: |
              sed -i 's|/code/hct_mis_api|backend/hct_mis_api|g' backend/coverage.xml
            displayName: "Fix coverage.xml"
          - task: PublishCodeCoverageResults@2
            inputs:
              summaryFileLocation: 'backend/coverage.xml'
          - task: DownloadPipelineArtifact@2
            continueOnError: true # if the artifact doesn't exist, don't fail the build
            inputs:
              source: 'specific'
              project: 'ICTD-HCT-MIS'
              pipeline: '525'
              runVersion: 'latestFromBranch'
              branchName: refs/heads/$(System.PullRequest.TargetBranch)
              artifact: 'BackendLineCoverage'
              path: '$(System.ArtifactsDirectory)/old_coverage'
          - task: PythonScript@0
            displayName: 'Check coverage'
            continueOnError: true
            inputs:
              scriptSource: 'filePath'
              scriptPath: './backend/compare_coverage.py'
              arguments: 'backend/coverage.xml $(System.ArtifactsDirectory)/old_coverage/coverage.xml'
              pythonInterpreter: 'python3'

  - stage: trivy
    dependsOn: [build_and_push_backend]
    displayName: BE Trivy
    jobs:
      - job: run_trivy
        pool:
          vmImage: ubuntu-latest
        displayName: "[BE Trivy]"
        steps:
          - task: Docker@2
            displayName: "ACR Login"
            inputs:
              command: login
              containerRegistry: $(Docker.registryConnection)
          - script: |
              docker pull $(Docker.url)/$(Docker.backend.repository):$(tag)
              docker run -v /var/run/docker.sock:/var/run/docker.sock -e TRIVY_EXIT_CODE=2 -e TRIVY_SEVERITY=HIGH,CRITICAL aquasec/trivy:0.47.0 image $(Docker.url)/$(Docker.backend.repository):$(tag)
            continueOnError: true

  - stage: e2e_tests
    dependsOn: [build_and_push_backend, test_frontend]
    displayName: E2E-Tests
    jobs:
      - job: selenium_tests
        pool:
          vmImage: ubuntu-latest
        displayName: "[Selenium tests]"
        steps:
          - task: Docker@2
            displayName: "ACR Login"
            inputs:
              command: login
              containerRegistry: $(Docker.registryConnection)
          - task: DockerCompose@0
            displayName: "Run selenium tests"
            retryCountOnTaskFailure: 1
            inputs:
              containerregistrytype: 'Azure Container Registry'
              azureContainerRegistry: $(Docker.registryConnection)
              dockerComposeFile: '**/docker-compose.selenium.yml'
              action: 'Run a Docker Compose command'
              dockerComposeCommand: '--verbose run selenium'
              dockerComposeFileArgs: |
               dev_backend_image=$(Docker.url)/$(Docker.backend.repository):dev-$(tag)
               dist_backend_image=$(Docker.url)/$(Docker.backend.repository):$(tag)
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Test Report Artifacts'
            condition: always()
            inputs:
              PathtoPublish: './backend/report/'
