trigger: none
pr:
  - master
  - develop
  - global-program-filter
  - feature/*
resources:
  - repo: self

variables:
  # ========================================================================
  #                          Mandatory variables 
  # ========================================================================
  Docker.registryConnection: "ICTD-HOPE-DEV-ACR"
  tag: '$(System.PullRequest.PullRequestId)'
  Docker.backend.repository: "hope-backend"
  Docker.frontend.repository: "hope-frontend"
  Docker.cypress.repository: "hope-cypress"
  Docker.url: "uniappsakshopedev.azurecr.io"
  DOCKER_BUILDKIT: 1

stages:
  - stage: test_frontend
    displayName: Test-Frontend
    jobs:
      - job: frontend_tests
        pool:
          vmImage: ubuntu-latest
        displayName: "[FRONTEND TEST]"
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "14.x"
            displayName: "Install Node.js"
          - task: Cache@2
            inputs:
              key: $(Build.SourcesDirectory)/frontend/yarn.lock
              path: $(Build.SourcesDirectory)/frontend/node_modules
            displayName: Cache Yarn packages
          - script: yarn install --frozen-lockfile
            displayName: "Yarn Install"
            workingDirectory: 'frontend'
          - script: yarn test --watchAll=false
            workingDirectory: 'frontend'
            displayName: "Test"

  - stage: check_format
    dependsOn: []
    displayName: Check BE format
    jobs:
      - job: check_format
        pool:
          vmImage: ubuntu-latest
        displayName: "[CHECK FORMAT]"
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: "3.9"
            displayName: "Use Python 3.9"
          - script: pip install black==23.1 isort==5.12
          # remember to update this if you change the version of black/isort in pyproject.toml
            displayName: "Install tools"
          - script: black --check .
            workingDirectory: 'backend'
            displayName: "Check format"
          - script: isort --check-only .
            workingDirectory: 'backend'
            displayName: "Check imports order"


  - stage: build_and_push
    dependsOn: check_format
    displayName: BUILD and PUSH
    jobs:
      - job: build_push_backend
        pool:
          vmImage: ubuntu-latest
        displayName: "[Build]"
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: '$(Docker.registryConnection)'
              command: 'login'
            displayName: Docker Login
          - script: |
              docker buildx create --use
              docker buildx build \
              --cache-from=$(Docker.url)/$(Docker.backend.repository)-cache:$(tag) \
              --cache-from=$(Docker.url)/$(Docker.backend.repository)-cache:latest \
              --cache-to=$(Docker.url)/$(Docker.backend.repository)-cache:$(tag) \
              --cache-to=$(Docker.url)/$(Docker.backend.repository)-cache:latest \
              -t $(Docker.url)/$(Docker.backend.repository):$(tag) \
              -t $(Docker.url)/$(Docker.backend.repository):latest \
              --push \
              ./backend
            displayName: Docker build
          - script: |
              docker buildx create --use
              docker buildx build \
              --cache-from=$(Docker.url)/$(Docker.backend.repository)-cache:dev-$(tag) \
              --cache-from=$(Docker.url)/$(Docker.backend.repository)-cache:dev-latest \
              --cache-to=$(Docker.url)/$(Docker.backend.repository)-cache:dev-$(tag) \
              --cache-to=$(Docker.url)/$(Docker.backend.repository)-cache:dev-latest \
              -t $(Docker.url)/$(Docker.backend.repository):dev-$(tag) \
              --push --target dev \
              ./backend
            displayName: Docker build dev

  - stage: build_and_push_frontend
    dependsOn: test_frontend
    displayName: BUILD and PUSH Frontend
    jobs:
      - job: build_and_push_frontend
        pool:
          vmImage: ubuntu-latest
        displayName: "[Build_Frontend]"
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: '$(Docker.registryConnection)'
              command: 'login'
          - script: |
              docker buildx create --use
              docker buildx build \
              --cache-from=$(Docker.url)/$(Docker.frontend.repository)-cache:$(tag) \
              --cache-from=$(Docker.url)/$(Docker.frontend.repository)-cache:latest \
              --cache-to=$(Docker.url)/$(Docker.frontend.repository)-cache:$(tag) \
              --cache-to=$(Docker.url)/$(Docker.frontend.repository)-cache:latest \
              -t $(Docker.url)/$(Docker.frontend.repository):$(tag) \
              -t $(Docker.url)/$(Docker.frontend.repository):latest \
              --push \
              ./frontend
            displayName: Docker build

  - stage: build_and_push_cypress
    dependsOn: test_frontend
    displayName: BUILD and PUSH cypress
    jobs:
      - job: build_and_push_cypress
        pool:
          vmImage: ubuntu-latest
        displayName: "[Build_Cypress]"
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: '$(Docker.registryConnection)'
              command: 'login'
          - script: |
              docker buildx create --use
              docker buildx build \
              --cache-from=$(Docker.url)/$(Docker.cypress.repository)-cache:$(tag) \
              --cache-from=$(Docker.url)/$(Docker.cypress.repository)-cache:latest \
              --cache-to=$(Docker.url)/$(Docker.cypress.repository)-cache:$(tag) \
              --cache-to=$(Docker.url)/$(Docker.cypress.repository)-cache:latest \
              -t $(Docker.url)/$(Docker.cypress.repository):$(tag) \
              -t $(Docker.url)/$(Docker.cypress.repository):latest \
              --push \
              ./cypress
            displayName: Docker build

  - stage: lint_backend
    dependsOn: build_and_push
    displayName: Lint-Backend
    jobs:
      - job: django_lint
        pool:
          vmImage: ubuntu-latest
        displayName: "[DJANGO LINT]"
        steps:
          - task: Docker@2
            displayName: "[ACR] Login"
            inputs:
              command: login
              containerRegistry: $(Docker.registryConnection)

          - task: DockerCompose@0
            displayName: "Run tests"
            inputs:
              containerregistrytype: 'Azure Container Registry'
              azureContainerRegistry: $(Docker.registryConnection)
              dockerComposeFile: '**/docker-compose.tst.yml'
              action: 'Run a Docker Compose command'
              dockerComposeCommand: 'run --no-deps backend lint'
              dockerComposeFileArgs: |
               backend_image=$(Docker.url)/$(Docker.backend.repository):dev-$(tag)

          - task: PublishTestResults@2
            displayName: "Publish lint result"
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '*.xml'
              searchFolder: 'backend/lint-results/'
              mergeTestResults: true
              failTaskOnFailedTests: true
              testRunTitle: 'Lint results'

  - stage: mypy_backend
    dependsOn: build_and_push
    displayName: Mypy-Backend
    jobs:
      - job: django_mypy
        pool:
          vmImage: ubuntu-latest
        displayName: "[DJANGO MYPY]"
        steps:
          - task: Docker@2
            displayName: "[ACR] Login"
            inputs:
              command: login
              containerRegistry: $(Docker.registryConnection)

          - task: DockerCompose@0
            displayName: "Run tests"
            inputs:
              containerregistrytype: 'Azure Container Registry'
              azureContainerRegistry: $(Docker.registryConnection)
              dockerComposeFile: '**/docker-compose.tst.yml'
              action: 'Run a Docker Compose command'
              dockerComposeCommand: 'run --no-deps backend mypy'
              dockerComposeFileArgs: |
               backend_image=$(Docker.url)/$(Docker.backend.repository):dev-$(tag)

          - task: PublishTestResults@2
            displayName: "Publish mypy result"
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '*.xml'
              searchFolder: 'backend/mypy-results/'
              mergeTestResults: true
              failTaskOnFailedTests: true
              testRunTitle: 'Mypy results'

  - stage: test_backend
    dependsOn: [lint_backend, mypy_backend]
    displayName: Test-Backend
    jobs:
      - job: django_tests
        pool:
          vmImage: ubuntu-latest
        displayName: "[DJANGO TEST]"
        steps:
          - task: Docker@2
            displayName: "[ACR] Login"
            inputs:
              command: login
              containerRegistry: $(Docker.registryConnection)
          - task: DockerCompose@0
            displayName: "Run tests"
            inputs:
              containerregistrytype: 'Azure Container Registry'
              azureContainerRegistry: $(Docker.registryConnection)
              dockerComposeFile: '**/docker-compose.tst.yml'
              action: 'Run a Docker Compose command'
              dockerComposeCommand: run -e RANDOM_SEED=$(RANDOM_SEED) backend test
              dockerComposeFileArgs: |
               backend_image=$(Docker.url)/$(Docker.backend.repository):dev-$(tag)
          - task: PublishTestResults@2
            displayName: "Publish Test Result"
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '*.xml'
              searchFolder: 'backend/test-results/'
              mergeTestResults: true
              failTaskOnFailedTests: true
              testRunTitle: 'TEST Results'
          - script: |
              sed -i 's|/code/hct_mis_api|backend/hct_mis_api|g' backend/coverage.xml
            displayName: "fix coverage.xml"
          - task: PublishCodeCoverageResults@2
            inputs:
              summaryFileLocation: 'backend/coverage.xml'
          - task: DownloadPipelineArtifact@2
            continueOnError: true # if the artifact doesn't exist, don't fail the build
            inputs:
              source: 'specific'
              project: 'ICTD-HCT-MIS'
              pipeline: '525'
              runVersion: 'latestFromBranch'
              branchName: refs/heads/$(System.PullRequest.TargetBranch)
              artifact: 'BackendLineCoverage'
              path: '$(System.ArtifactsDirectory)/old_coverage'
          - task: PythonScript@0
            displayName: 'Check Coverage'
            continueOnError: true
            inputs:
              scriptSource: 'filePath'
              scriptPath: './backend/compare_coverage.py'
              arguments: 'backend/coverage.xml $(System.ArtifactsDirectory)/old_coverage/coverage.xml'
              pythonInterpreter: 'python3'




  - stage: e2e_tests
    dependsOn: [build_and_push, build_and_push_frontend, test_frontend, build_and_push_cypress]
    displayName: E2E-Tests
    jobs:
      - job: cypress_tests
        pool:
          vmImage: ubuntu-latest
        displayName: "[CYPRESS TEST]"
        steps:
          - task: Docker@2
            displayName: "[ACR] Login"
            inputs:
              command: login
              containerRegistry: $(Docker.registryConnection)
          - script: |
              mkdir -p cypress-results cypress-reports
          - task: DockerCompose@0
            displayName: "Run tests"
            inputs:
              containerregistrytype: 'Azure Container Registry'
              azureContainerRegistry: $(Docker.registryConnection)
              dockerComposeFile: '**/docker-compose.cy.yml'
              action: 'Run a Docker Compose command'
              dockerComposeCommand: 'run cypress ci-test'
              dockerComposeFileArgs: |
               BACKEND_IMAGE=$(Docker.url)/$(Docker.backend.repository):$(tag)
               FRONTEND_IMAGE=$(Docker.url)/$(Docker.frontend.repository):$(tag)
               CYPRESS_IMAGE=$(Docker.url)/$(Docker.cypress.repository):$(tag)
               BRANCH_NAME=$(System.PullRequest.SourceBranch)
               BUILD_ID=$(Build.BuildId)
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Test Report Artifacts'
            condition: always()
            inputs:
              PathtoPublish: './cypress-reports'
          - task: PublishTestResults@2
            displayName: "Publish Test Result"
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '*.xml'
              searchFolder: './cypress-results/'
              mergeTestResults: true
              failTaskOnFailedTests: true
              testRunTitle: 'TEST E2E Results'
