# Default values for hope.
# This is a YAML-formatted file.

global:
  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""
  env: "dev"
  storageClass: "standard"
  imagePullPolicy: Always
  init: true

backend:
  image: backend:latest

  replicaCount: 6
  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000


  tolerations: []

  resources:
    requests:
      cpu: 300m
      memory: 1G
    limits:
      cpu: 1100m
      memory: 1.5G

  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: hope/service
              operator: In
              values:
              - backend
          topologyKey: "kubernetes.io/hostname"

  service:
    type: ClusterIP
    port: 8000

  config:
    STORAGE_AZURE_ACCOUNT_NAME: ""
    AZURE_CLIENT_ID: ""
    POSTGRES_SQL: ""
    EMAIL_HOST: ""
    POSTGRES_SSL: ""
    KOBO_API_URL: ""

  secret:
    SECRET_KEY: ""
    STORAGE_AZURE_ACCOUNT_KEY: ""
    AZURE_CLIENT_SECRET: ""
    AZURE_TENANT_KEY: ""
    SENTRY_DSN: ""
    
frontend:
  image: fronted:latest

  replicaCount: 1
  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000


  tolerations: []

  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: hope/service
              operator: In
              values:
              - frontend
          topologyKey: "kubernetes.io/hostname"
  resources:
    requests:
      cpu: 5m
      memory: 3M
    limits:
      cpu: 10m
      memory: 40M
  nodeSelector: {}

  service:
    type: ClusterIP
    port: 80

  secret:
    SENTRY_FRONTEND_DSN: ""

ingress:
  enabled: true
  annotations: []
    # kubernetes.io/ingress.class: azure/application-gateway
    # appgw.ingress.kubernetes.io/ssl-redirect: "true"
  host: hope-dev.test
  tls: false
  tlsSecret: "aks-unitst-tls"


serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

postgresql:
  enabled: true
  postgresqlDatabase: backend-db
  postgresqlUsername: postgres
  postgresqlPassword: ""
  # Script for adding postgis
  # Don't modify
  initdbScripts:
    init_script.sh: |
      #!/bin/sh
      psql -U postgres backend-db -c "create extension if not exists postgis;"

  externalDatabase:
    host: ""
    db: ""
    port: "5432"
    user: ""
    password: ""

  image:
    tag: 10.12.0

registrationdatahubpostgresql:
  enabled: true
  postgresqlDatabase: registration-datahub-db
  postgresqlUsername: postgres
  postgresqlPassword: ""
  # Script for adding postgis
  # Don't modify
  initdbScripts:
    init_script.sh: |
      #!/bin/sh
      psql -U postgres registration-datahub-db -c "create extension if not exists postgis;"

  externalDatabase:
    host: ""
    db: ""
    port: "5432"
    user: ""
    postgresqlDatabase: ""
    password: ""

  image:
    tag: 10.12.0

cashassistdatahubpostgresql:
  enabled: true
  postgresqlDatabase: cashassist-datahub-hub
  postgresqlUsername: postgres
  postgresqlPassword: ""

  # Script for adding postgis
  # Don't modify
  initdbScripts:
    init_script.sh: |
      #!/bin/sh
      psql -U postgres cashassist-datahub-hub -c "create extension if not exists postgis;"

  externalDatabase:
    host: ""
    db: ""
    port: "5432"
    user: ""
    password: ""
  image:
    tag: 10.12.0

redis:
  enabled: true
  fullnameOverride: hope-main-redis
  persistence.enabled: true
  usePassword: false
  redis:
    usePassword: false
  cluster:
    slaveCount: 0
    enabled: false
  image:
    tag: 4.0.14

elasticsearch:
  enabled: true
  master:
    replicas: 1
    resources:
      limits:
        cpu: 100m
        memory: 1500Mi
      requests:
        cpu: 25m
        memory: 256Mi
  coordinating:
    replicas: 1
    resources:
      limits:
        cpu: 100m
        memory: 1000Mi
      requests:
        cpu: 25m
        memory: 256Mi
  data:
    resources:
      limits:
        cpu: 100m
        memory: 2500Mi
      requests:
        cpu: 25m
        memory: 2048Mi


  sysctlImage:
    replicas: 1
  plugins: "analysis-phonetic"
  externalElasticsearch:
    host: ""

celery:
  image: backend:latest
  replicaCount: 3
  podAnnotations: {}
  podSecurityContext: {}

  securityContext: {}
  resources:
    requests:
      cpu: 300m
      memory: 500Mi
    limits:
      cpu: 1100m
      memory: 1Gi

  tolerations: []
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: hope/service
              operator: In
              values:
              - celery-worker
          topologyKey: "kubernetes.io/hostname"

celeryflower:
  image: saxix/flower:1.6
  replicaCount: 1
  podAnnotations: {}
  podSecurityContext: {}

  securityContext: {}

  tolerations: []
  affinity: {}
  service:
    type: ClusterIP
    port: 8000

  config:
    FLOWER_URL_PREFIX: flower

  secret:
    FLOWER_BASIC_AUTH: "use-azure-devops:variables-to-set"
