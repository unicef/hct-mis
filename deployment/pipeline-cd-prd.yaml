trigger: none
pr: none
resources:
  pipelines:
  - pipeline: ci-hope
    source: '[CI] HOPE'
    trigger: 
      branches:
      - master


variables:
  # ========================================================================
  #                          Mandatory variables 
  # ========================================================================
  Kubernetes.serviceConnection: "ICTD-HOPE-PRD-uni-apps-aks-hope-prd-ictd-hope-prd-1617968749291"
  Kubernetes.namespace: "ictd-hope-prd"
  Docker.backend.repository: "hope-backend"
  Docker.frontend.repository: "hope-frontend"
  Docker.registry: "uniappsakshopedev.azurecr.io"

stages:
  - stage: deploy
    displayName: DEPLOY
    jobs:
      - job: deploy_hope
        displayName: "[HOPE] Deployment"
        steps:
          - task: HelmDeploy@0
            displayName: "Update Chart dependencies"
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: $(Kubernetes.serviceConnection)     
              command: package
              updatedependency: true
              chartPath: '**/deployment/hope'
          - task: HelmDeploy@0
            displayName: "DEPLOY"
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: $(Kubernetes.serviceConnection)
              namespace: $(Kubernetes.namespace)
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '**/deployment/hope'
              releaseName: 'hope'
              install: true
              waitForExecution: false
              failOnStderr: false
              valueFile: '**/deployment/aks-values.yaml'
              arguments: "--timeout 600s"
              overrideValues: "
                global.env=prod,\
                global.storageClass=default,\
                global.init=false,\
                backend.image=$(Docker.registry)/$(Docker.backend.repository):$(Build.SourceVersion),\
                celery.image=$(Docker.registry)/$(Docker.backend.repository):$(Build.SourceVersion),\
                backend.config.AZURE_CLIENT_ID=$(AZURE_CLIENT_ID),\
                backend.secret.AZURE_CLIENT_SECRET=$(AZURE_CLIENT_SECRET),\
                backend.secret.AZURE_TENANT_KEY=$(AZURE_TENANT_KEY),\
                backend.config.POSTGRES_SSL='true',\
                backend.secret.SECRET_KEY=$(SECRET_KEY),\
                backend.config.STATIC_STORAGE_AZURE_ACCOUNT_NAME=$(STATIC_STORAGE_AZURE_ACCOUNT_NAME),\
                backend.secret.STATIC_STORAGE_AZURE_ACCOUNT_KEY=$(STATIC_STORAGE_AZURE_ACCOUNT_KEY),\
                backend.config.MEDIA_STORAGE_AZURE_ACCOUNT_NAME=$(MEDIA_STORAGE_AZURE_ACCOUNT_NAME),\
                backend.secret.MEDIA_STORAGE_AZURE_ACCOUNT_KEY=$(MEDIA_STORAGE_AZURE_ACCOUNT_KEY),\
                backend.secret.SENTRY_DSN=$(SENTRY_DSN),\
                backend.secret.EMAIL_HOST=$(EMAIL_HOST),\
                backend.secret.KOBO_API_URL=$(KOBO_API_URL),\
                backend.secret.KOBO_MASTER_API_TOKEN=$(KOBO_MASTER_API_TOKEN),\
                backend.secret.DATAMART_USER=$(DATAMART_USER),\
                backend.secret.DATAMART_PASSWORD=$(DATAMART_PASSWORD),\
                backend.secret.DATAMART_URL=$(DATAMART_URL),\
                frontend.image=$(Docker.registry)/$(Docker.frontend.repository):$(Build.SourceVersion),\
                ingress.host=hope.unicef.org,\
                ingress.tls=true,\
                postgresql.enabled=false,\
                postgresql.postgresqlPassword=$(POSTGRES_PASSWORD),\
                postgresql.externalDatabase.host=$(POSTGRES_HOST),\
                postgresql.externalDatabase.user=$(POSTGRES_USER),\
                postgresql.externalDatabase.password=$(POSTGRES_PASSWORD),\
                postgresql.externalDatabase.db=$(POSTGRES_DB),\
                registrationdatahubpostgresql.enabled=false,\
                registrationdatahubpostgresql.externalDatabase.host=$(REGISTRATION_DATAHUB_POSTGRES_HOST),\
                registrationdatahubpostgresql.externalDatabase.user=$(REGISTRATION_DATAHUB_POSTGRES_USER),\
                registrationdatahubpostgresql.externalDatabase.password=$(REGISTRATION_DATAHUB_POSTGRES_PASSWORD),\
                registrationdatahubpostgresql.externalDatabase.db=$(REGISTRATION_DATAHUB_POSTGRES_DB),\
                cashassistdatahubpostgresql.enabled=false,\
                cashassistdatahubpostgresql.externalDatabase.host=$(CASH_ASSIST_DATAHUB_POSTGRES_HOST),\
                cashassistdatahubpostgresql.externalDatabase.user=$(CASH_ASSIST_DATAHUB_POSTGRES_USER),\
                cashassistdatahubpostgresql.externalDatabase.password=$(CASH_ASSIST_DATAHUB_POSTGRES_PASSWORD),\
                cashassistdatahubpostgresql.externalDatabase.db=$(CASH_ASSIST_DATAHUB_POSTGRES_DB),\
                celeryflower.secret.FLOWER_BASIC_AUTH=$(FLOWER_BASIC_AUTH),"
