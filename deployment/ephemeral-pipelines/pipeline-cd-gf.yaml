trigger: none
pr: none
resources:
  repositories:
  - repository: hct-mis-helm
    type: github
    endpoint: "unicef (2)"
    name: unicef/hct-mis-helm
  pipelines:
  - pipeline: ci-hope
    source: '[CI] HOPE'
    trigger: 
      branches:
      - master

variables:
  # ========================================================================
  #                          Mandatory variables 
  # ========================================================================
  Kubernetes.serviceConnection: "aks-hope-pm-azure-devops-sa"
  Kubernetes.namespace: "ictd-hope-pm"
  Docker.backend.repository: "hope-backend"
  Docker.frontend.repository: "hope-frontend"
  Docker.registry: "uniappsakshopedev.azurecr.io"

stages:
  - stage: deploy
    displayName: DEPLOY
    jobs:
      - job: deploy_hope
        pool:
          vmImage: 'ubuntu-latest'
        displayName: "[HOPE] Deployment"
        steps:
          - checkout: self
          - checkout: hct-mis-helm
          - task: Kubernetes@1
            inputs:
              connectionType: 'Kubernetes Service Connection' 
              kubernetesServiceEndpoint: $(Kubernetes.serviceConnection)
              command: 'login'
          - task: HelmDeploy@0
            displayName: "DEPLOY"
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: $(Kubernetes.serviceConnection)
              namespace: $(Kubernetes.namespace)
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: 'hct-mis-helm/pkg/hope-$(CHART_VERSION).tgz'
              releaseName: 'hope'
              install: true
              waitForExecution: false
              failOnStderr: false
              force: $[not(empty(variables['REDEPLOY']))]
              valueFile: 'hct-mis/deployment/ephemeral-pipelines/pipeline-cd-eph.values.yaml'
              arguments: "--timeout 600s"
              overrideValues: "
                git.sha=$(Build.SourceVersion),\
                backend.image=$(Docker.registry)/$(Docker.backend.repository):$(Build.SourceVersion),\
                celery.image=$(Docker.registry)/$(Docker.backend.repository):$(Build.SourceVersion),\
                backend.secret.AZURE_CLIENT_ID=$(AZURE_CLIENT_ID),\
                backend.secret.SECRET_KEY=$(SECRET_KEY),\
                backend.config.SENTRY_DSN=$(SENTRY_DSN),\
                backend.config.SENTRY_ENVIRONMENT=$(SENTRY_ENVIRONMENT),\
                backend.secret.STORAGE_AZURE_ACCOUNT_KEY=$(STORAGE_AZURE_ACCOUNT_KEY),\
                backend.secret.AZURE_CLIENT_SECRET=$(AZURE_CLIENT_SECRET),\
                backend.secret.AZURE_TENANT_KEY=$(AZURE_TENANT_KEY),\
                backend.secret.EXCHANGE_RATES_API_KEY=$(EXCHANGE_RATES_API_KEY),\
                backend.secret.ROOT_ACCESS_TOKEN=$(ROOT_ACCESS_TOKEN),\
                backend.secret.KOBO_APP_API_TOKEN=$(KOBO_APP_API_TOKEN),\
                frontend.image=$(Docker.registry)/$(Docker.frontend.repository):$(Build.SourceVersion),\
                postgresql.password=$(POSTGRES_PASSWORD),\
                registrationdatahubpostgresql.password=$(REGISTRATION_DATAHUB_POSTGRES_PASSWORD),\
                cashassistdatahubpostgresql.password=$(CASH_ASSIST_DATAHUB_POSTGRES_PASSWORD),\
                pgadmin.password=$(PGADMIN_PASSWORD),\
                celeryflower.secret.FLOWER_BASIC_AUTH=$(FLOWER_BASIC_AUTH)"
          - script: |
              timeout 120 kubectl -n $(Kubernetes.namespace) logs -l git/sha=$(Build.SourceVersion) -l hope/job=upgrade \
              --tail=-1 --prefix | awk '/Upgrade succeeded/{print $0;exit} /.*/{print $0;}'
            displayName: "TAIL UPGRADE JOB"
            condition: always()
          - script: |
              timeout 120 kubectl -n $(Kubernetes.namespace) logs -l git/sha=$(Build.SourceVersion) -l hope/service=backend \
              --tail=-1 --prefix | awk '/Worker spawned/{print $0;exit} /.*/{print $0;}'
            displayName: "TAIL BACKEND"
            condition: succeeded()
