trigger:
  batch: true
  branches:
    include:
    - develop
  paths:
    exclude:
    -  docs/*
pr: none
resources:
  - repo: self

variables:
  # ========================================================================
  #                          Mandatory variables 
  # ========================================================================
  Docker.backend.filePath: "**/backend/Dockerfile"
  Docker.frontend.filePath: "**/frontend/Dockerfile"
  Docker.airflow.filePath: "**/airflow/Dockerfile"
  Docker.backend.repository: "hope-backend"
  Docker.frontend.repository: "hope-frontend"
  Docker.airflow.repository: "hope-airflow"
  Docker.registry: "uniappsk8sdevacr"
  Kubernetes.serviceConnection: "ICTD-HOPE-DEV-uni-apps-aks-dev-ictd-hope-dev-1593457625386"
  Kubernetes.namespace: "ictd-hope-dev"

stages:
  - stage: build_and_push
    displayName: BUILD and PUSH
    jobs:
      - job: build_push_backend
        displayName: "[BACKEND]"
        steps:
          - task: Docker@2
            displayName: Build&Push
            inputs:
              command: buildAndPush
              dockerfile: $(Docker.backend.filePath)
              repository: $(Docker.backend.repository)
              containerRegistry: $(Docker.registry)
              tags: |
                $(Build.BuildId)
                dev-latest

      - job: build_push_airflow
        displayName: "[AIRFLOW]"
        steps:
          - task: Docker@2
            displayName: Build&Push
            inputs:
              command: buildAndPush
              dockerfile: $(Docker.airflow.filePath)
              repository: $(Docker.airflow.repository)
              containerRegistry: $(Docker.registry)
              buildContext: "$(Build.SourcesDirectory)"
              tags: |
                $(Build.BuildId)
                dev-latest

      - job: build_push_frontend
        displayName: "[FRONTEND]"
        steps:
          - task: Docker@2
            displayName: Build&Push
            inputs:
              command: buildAndPush
              dockerfile: $(Docker.frontend.filePath)
              repository: $(Docker.frontend.repository)
              containerRegistry: $(Docker.registry)
              tags: |
                $(Build.BuildId)
                dev-latest


  - stage: test
    displayName: TEST
    jobs:
      - job: django_tests
        displayName: "[DJANGO TEST]"
        variables:
          airflow_image: uniappsk8sdevacr.azurecr.io/$(Docker.airflow.repository):$(Build.BuildId)
          backend_image: uniappsk8sdevacr.azurecr.io/$(Docker.backend.repository):$(Build.BuildId)
        steps:
          - task: Docker@2
            displayName: "[ACR] Login"
            inputs:
              command: login
              containerRegistry: $(Docker.registry)
          - task: DownloadSecureFile@1
            inputs:
              secureFile: '.env-django-test'
          - task: CmdLine@2
            displayName: "Setup .env and docker-compose.tst.yml"
            inputs:
              script: |
               mv deployment/docker-compose.tst.yml docker-compose.tst.yml
               mv $(Agent.TempDirectory)/.env-django-test .env
               cp .env airflow/config/.env_airflow
               echo $(Docker.backend.repository)
          - task: DockerCompose@0
              displayName: "Run tests"
              inputs:
                containerregistrytype: 'Azure Container Registry'
                azureContainerRegistry: $(Docker.registry)
                dockerComposeFile: '**/docker-compose.tst.yml'
                action: 'Run a Docker Compose command'
                dockerComposeCommand: 'up'
                dockerComposeFileArgs: |
                  airflow_image=uniappsk8sdevacr.azurecr.io/$(Docker.airflow.repository):$(Build.BuildId)
                  backend_image=uniappsk8sdevacr.azurecr.io/$(Docker.backend.repository):$(Build.BuildId)

          - task: PublishTestResults@2
            displayName: "Publish Test Result"
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '*.xml'
              searchFolder: 'backend/test-results/'
              mergeTestResults: true
              failTaskOnFailedTests: true
              testRunTitle: 'TEST Results'

  - stage: deploy
    displayName: DEPLOY
    jobs:
      - job: deploy_hope
        displayName: "[HOPE]"
        steps:
          - task: HelmDeploy@0
            displayName: "[HOPE] Update Chart dependencies"
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: $(Kubernetes.serviceConnection)     
              command: package
              updatedependency: true
              chartPath: '**/deployment/hope'
          - task: HelmDeploy@0
            displayName: "[HOPE] DEPLOY"
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: $(Kubernetes.serviceConnection)
              namespace: $(Kubernetes.namespace)
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '**/deployment/hope'
              releaseName: 'hope'
              install: true
              waitForExecution: false
              failOnStderr: false
              arguments: "--timeout 600s"
              valueFile: '**/deployment/azure-values.yaml'
              overrideValues: "
                global.env=staging,\
                global.storageClass=default,\
                backend.image=uniappsk8sdevacr.azurecr.io/$(Docker.backend.repository):$(Build.BuildId),\
                backend.config.STORAGE_AZURE_ACCOUNT_NAME=$(STORAGE_AZURE_ACCOUNT_NAME),\
                backend.config.AZURE_CLIENT_ID=$(AZURE_CLIENT_ID),\
                backend.secret.SECRET_KEY=$(SECRET_KEY),\
                backend.secret.STORAGE_AZURE_ACCOUNT_KEY=$(STORAGE_AZURE_ACCOUNT_KEY),\
                backend.secret.AZURE_CLIENT_SECRET=$(AZURE_CLIENT_SECRET),\
                backend.secret.AZURE_TENANT_KEY=$(AZURE_TENANT_KEY),\
                backend.secret.SENTRY_DSN=$(SENTRY_DSN),\
                backend.secret.EMAIL_HOST=$(EMAIL_HOST),\
                frontend.image=uniappsk8sdevacr.azurecr.io/$(Docker.frontend.repository):$(Build.BuildId),\
                ingress.host=dev-hope.unitst.org,\
                ingress.tls=true,\
                airflow.baseUrl=dev-hope.unitst.org/airflow,\
                airflow.airflow.baseUrl=dev-hope.unitst.org/airflow,\
                airflow.airflow.image.repository=uniappsk8sdevacr.azurecr.io/$(Docker.airflow.repository),\
                airflow.airflow.image.tag=$(Build.BuildId),\
                airflow.ingress.hosts.0.name=airflow-hope-dev.unitst.org,\
                airflow.ingress.hosts.0.tls=true,\
                airflow.ingress.hosts.0.path=/,\
                airflow.ingress.hosts.0.tlsSecret=aks-unitst-tls,\
                postgresql.postgresqlPassword=$(POSTGRES_PASSWORD),\
                registrationdatahubpostgresql.postgresqlPassword=$(REGISTRATION_DATAHUB_POSTGRES_PASSWORD),\
                cashassistdatahubpostgresql.postgresqlPassword=$(CASH_ASSIST_REGISTRATION_DATAHUB_POSTGRES_PASSWORD),\
                airflow.externalDatabase.password=$(POSTGRES_PASSWORD),"

