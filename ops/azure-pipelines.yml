trigger:
  batch: true
  branches:
    include:
    - master
    - develop
  paths:
    exclude:
    -  docs/*

resources:
  - repo: self

variables:
  frontendDockerFilePath: "**/frontend/Dockerfile"
  backendDockerFilePath: "**/backend/Dockerfile"
  kubernetesServiceConnection: 'ICTD-HCT-MIS-Demo-uni-apps-K8s-dev-hct-ims-dev-1574767480012'
  backendImageRepository: "hct-mis-backend"
  frontendImageRepository: "hct-mis-frontend"
  containerRegistry: "uniappsk8sdevacr"

stages:
  - stage: Build
    displayName: Build and push images
    jobs:
      - job: Build
        displayName: Build
        steps:
          - task: Docker@2
            displayName: Build and push backend image
            inputs:
              command: buildAndPush
              dockerfile: $(backendDockerFilePath)
              repository: $(backendImageRepository)
              containerRegistry: $(containerRegistry)
              tags: |
                $(Build.BuildId)

          - task: Docker@2
            displayName: Build and push frontend image
            inputs:
              command: buildAndPush
              dockerfile: $(frontendDockerFilePath)
              imageName: frontend
              repository: $(frontendImageRepository)
              containerRegistry: $(containerRegistry)
              tags: |
                $(Build.BuildId)

  - stage: Deploy
    displayName: Deploy app to K8S cluster.
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    jobs:
      - job: Deploy
        displayName: Deploy helm chart
        steps:
          - task: HelmDeploy@0
            displayName: Deploy Helm chart
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: 'ICTD-HCT-MIS-Demo-uni-apps-K8s-dev-hct-ims-dev-1574767480012'
              namespace: 'hct-ims-dev'
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '**/ops/helm'
              releaseName: 'hct-mis'
              install: true
              force: true
              overrideValues: >-
                backend.staticStorage.secretName=$(staticStorageSecretName),
                backend.staticStorage.accountName=$(staticStorageAccountName),
                frontend.image=uniappsk8sdevacr.azurecr.io/$(frontendImageRepository):$(Build.BuildId),
                namespace=hct-ims-dev,
                env=DEV,
                backend.secret.env=DEV,
                revision="$(Build.BuildId)",
                backend.image=uniappsk8sdevacr.azurecr.io/$(backendImageRepository):$(Build.BuildId),
                backend.secret.SECRET_KEY=$(SECRET_KEY),
                backend.secret.ENV=$(ENV),
                backend.secret.POSTGRES_DB=$(POSTGRES_DB),
                backend.secret.POSTGRES_USER=$(POSTGRES_USER),
                backend.secret.POSTGRES_PASSWORD=$(POSTGRES_PASSWORD),
                backend.secret.POSTGRES_HOST=$(POSTGRES_HOST),
                backend.secret.DJANGO_ALLOWED_HOST=$(DJANGO_ALLOWED_HOST),
                backend.secret.DOMAIN=$(DOMAIN),
                backend.secret.POSTGRES_REGISTRATION_DATAHUB_DB=$(REGISTRATION_DATAHUB_POSTGRES_DB),
                backend.secret.POSTGRES_REGISTRATION_DATAHUB_USER=$(REGISTRATION_DATAHUB_POSTGRES_USER),
                backend.secret.POSTGRES_REGISTRATION_DATAHUB_PASSWORD=$(REGISTRATION_DATAHUB_POSTGRES_PASSWORD),
                backend.secret.POSTGRES_CASHASSIST_DATAHUB_DB=$(CASH_ASSIST_DATAHUB_POSTGRES_DB),
                backend.secret.POSTGRES_CASHASSIST_DATAHUB_USER=$(CASH_ASSIST_REGISTRATION_DATAHUB_POSTGRES_USER),
                backend.secret.POSTGRES_CASHASSIST_DATAHUB_PASSWORD=$(CASH_ASSIST_REGISTRATION_DATAHUB_POSTGRES_PASSWORD),
                databases.backendDB.secret.POSTGRES_DB=$(POSTGRES_DB),
                databases.backendDB.secret.POSTGRES_USER=$(POSTGRES_USER),
                databases.backendDB.secret.POSTGRES_PASSWORD=$(POSTGRES_PASSWORD),
                databases.registrationDatahubDB.secret.POSTGRES_DB=$(REGISTRATION_DATAHUB_POSTGRES_DB),
                databases.registrationDatahubDB.secret.POSTGRES_USER=$(REGISTRATION_DATAHUB_POSTGRES_USER),
                databases.registrationDatahubDB.secret.POSTGRES_PASSWORD=$(REGISTRATION_DATAHUB_POSTGRES_PASSWORD),
                databases.postgresCashAssistDatahubDB.secret.POSTGRES_DB=$(CASH_ASSIST_DATAHUB_POSTGRES_DB),
                databases.postgresCashAssistDatahubDB.secret.POSTGRES_USER=$(CASH_ASSIST_REGISTRATION_DATAHUB_POSTGRES_USER),
                databases.postgresCashAssistDatahubDB.secret.POSTGRES_PASSWORD=$(CASH_ASSIST_REGISTRATION_DATAHUB_POSTGRES_PASSWORD),

    POSTGRES_CASHASSIST_DATAHUB_HOST: "postgresCashAssistDatahubDB"
    POSTGRES_REGISTRATION_DATAHUB_DB: ""
    POSTGRES_REGISTRATION_DATAHUB_USER: ""
    POSTGRES_REGISTRATION_DATAHUB_PASSWORD: ""
    POSTGRES_REGISTRATION_DATAHUB_HOST: "registrationDatahubDB"
        : ""
   : ""
    