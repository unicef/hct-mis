trigger:
  batch: true
  branches:
    include:
    - develop
  paths:
    exclude:
    -  docs/*

resources:
  - repo: self

variables:
  frontendDockerFilePath: "**/frontend/Dockerfile"
  backendDockerFilePath: "**/backend/Dockerfile"
  airflowDockerFilePath: "**/airflow/Dockerfile"
  kubernetesServiceConnection: 'ICTD-HCT-MIS-Demo-uni-apps-K8s-dev-hct-ims-dev-1574767480012'
  backendImageRepository: "hct-mis-backend"
  frontendImageRepository: "hct-mis-frontend"
  airflowImageRepository: "hct-mis-airflow"
  containerRegistry: "uniappsk8sdevacr"

stages:
  - stage: build_and_push
    displayName: BUILD and PUSH
    jobs:
      - job: build_push_backend
        displayName: "[BACKEND]"
        steps:
          - task: Docker@2
            displayName: Build&Push
            inputs:
              command: buildAndPush
              dockerfile: $(backendDockerFilePath)
              repository: $(backendImageRepository)
              containerRegistry: $(containerRegistry)
              tags: |
                $(Build.BuildId)
                dev-latest

      - job: build_push_airflow
        displayName: "[AIRFLOW]"
        steps:
          - task: Docker@2
            displayName: Build&Push
            inputs:
              command: buildAndPush
              dockerfile: $(airflowDockerFilePath)
              repository: $(airflowImageRepository)
              buildContext: "$(Build.SourcesDirectory)"
              containerRegistry: $(containerRegistry)
              tags: |
                $(Build.BuildId)
                dev-latest

      - job: build_push_frontend
        displayName: "[FRONTEND]"
        steps:
          - task: Docker@2
            displayName: Build&Push
            inputs:
              command: buildAndPush
              dockerfile: $(frontendDockerFilePath)
              imageName: frontend
              repository: $(frontendImageRepository)
              containerRegistry: $(containerRegistry)
              tags: |
                $(Build.BuildId)
                dev-latest

  - stage: test
    displayName: TEST
    jobs:
      - job: cypress_e2e
        displayName: "[CYPRESS]"
        variables:
          airflow_image: uniappsk8sdevacr.azurecr.io/$(airflowImageRepository):$(Build.BuildId)
          frontend_image: uniappsk8sdevacr.azurecr.io/$(frontendImageRepository):$(Build.BuildId)
          backend_image: uniappsk8sdevacr.azurecr.io/$(backendImageRepository):$(Build.BuildId)
        steps:
          - task: Docker@2
            displayName: "[ACR] Login"
            inputs:
              command: login
              containerRegistry: $(containerRegistry)

          - task: DownloadSecureFile@1
            inputs:
              secureFile: '.env-tst'

          - task: DownloadSecureFile@1
            inputs:
              secureFile: 'cypress.env.json'

          - task: CmdLine@2
            displayName: "Setup .env and docker-compose.tst.yml"
            inputs:
              script: |
                mv ops/docker-compose.tst.yml docker-compose.yml
                mv  $(Agent.TempDirectory)/.env-tst .env
                cp .env airflow/config/.env_airflow
                cp $(Agent.TempDirectory)/cypress.env.json cypress_testing_service/cypress.env.json

          - task: DockerCompose@0
            displayName: "Start testing environment"
            inputs:
              containerregistrytype: 'Azure Container Registry'
              azureContainerRegistry: "$(containerRegistry)"
              dockerComposeFile: '**/docker-compose.yml'
              action: 'Run a Docker Compose command'
              dockerComposeCommand: 'up -d'
              dockerComposeFileArgs: |
                airflow_image=uniappsk8sdevacr.azurecr.io/$(airflowImageRepository):$(Build.BuildId)
                frontend_image=uniappsk8sdevacr.azurecr.io/$(frontendImageRepository):$(Build.BuildId)
                backend_image=uniappsk8sdevacr.azurecr.io/$(backendImageRepository):$(Build.BuildId)

          - task: CmdLine@2
            displayName: "Install Cypress plugins"
            inputs:
              script: |
                cd cypress_testing_service
                yarn install
                cd ..

          - task: CmdLine@2
            displayName: "Setup testing environment"
            inputs:
              script: |
                docker exec unicefhct-mis_backend_1 ./manage.py migratealldb
                docker exec unicefhct-mis_backend_1 ./manage.py loadbusinessareas
                docker exec unicefhct-mis_backend_1 ./manage.py loadflexfieldsattributes
                docker exec unicefhct-mis_backend_1 ./manage.py generatefixtures --noinput

          - task: CmdLine@2
            displayName: "Run Cypress"
            inputs:
              script: |
                cd cypress_testing_service
                yarn cy:run

          - task: PublishTestResults@2
            displayName: "Publish Test Result"
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '*.xml'
              searchFolder: '$(Agent.BuildDirectory)/s/cypress_testing_service/cypress/reports/junit'
              mergeTestResults: true
              failTaskOnFailedTests: true
              testRunTitle: 'TEST Results'

  - stage: deploy
    displayName: DEPLOY
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    jobs:

      - job: deploy_hct_mis
        displayName: "[HCT-MIS]"
        steps:
          - task: HelmDeploy@0
            displayName: "[HCT-MIS] DEPLOY"
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: 'ICTD-HCT-MIS-Demo-uni-apps-K8s-dev-hct-ims-dev-1574767480012'
              namespace: 'hct-ims-dev'
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '**/ops/helm'
              releaseName: 'hct-mis'
              install: true
              force: true
              waitForExecution: false
              arguments: "--timeout 600s"
              overrideValues: "
                podDB=true,\
                backend.staticStorage.secretName=$(staticStorageSecretName),\
                backend.staticStorage.accountName=$(staticStorageAccountName),\
                frontend.image=uniappsk8sdevacr.azurecr.io/$(frontendImageRepository):$(Build.BuildId),\
                namespace=hct-ims-dev,\
                env=DEV,\
                domain=$(DOMAIN),\
                backend.secret.env=DEV,\
                revision=\"$(Build.BuildId)\",\
                backend.image=uniappsk8sdevacr.azurecr.io/$(backendImageRepository):$(Build.BuildId),\
                backend.secret.SECRET_KEY=$(SECRET_KEY),\
                backend.secret.ENV=$(ENV),\
                backend.secret.POSTGRES_DB=$(POSTGRES_DB),\
                backend.secret.POSTGRES_USER=$(POSTGRES_USER),\
                backend.secret.POSTGRES_PASSWORD=$(POSTGRES_PASSWORD),\
                backend.secret.POSTGRES_HOST=$(POSTGRES_HOST),\
                backend.secret.DJANGO_ALLOWED_HOST=$(DJANGO_ALLOWED_HOST),\
                backend.secret.DOMAIN=$(DOMAIN),\
                backend.secret.AZURE_CLIENT_ID=$(AZURE_CLIENT_ID),\
                backend.secret.AZURE_CLIENT_SECRET=$(AZURE_CLIENT_SECRET),\
                backend.secret.AZURE_TENANT_KEY=$(AZURE_TENANT_KEY),\
                backend.secret.SENTRY_DSN=$(SENTRY_DSN),\
                backend.secret.POSTGRES_REGISTRATION_DATAHUB_DB=$(REGISTRATION_DATAHUB_POSTGRES_DB),\
                backend.secret.POSTGRES_REGISTRATION_DATAHUB_USER=$(REGISTRATION_DATAHUB_POSTGRES_USER),\
                backend.secret.POSTGRES_REGISTRATION_DATAHUB_PASSWORD=$(REGISTRATION_DATAHUB_POSTGRES_PASSWORD),\
                backend.secret.POSTGRES_CASHASSIST_DATAHUB_DB=$(CASH_ASSIST_DATAHUB_POSTGRES_DB),\
                backend.secret.POSTGRES_CASHASSIST_DATAHUB_USER=$(CASH_ASSIST_REGISTRATION_DATAHUB_POSTGRES_USER),\
                backend.secret.POSTGRES_CASHASSIST_DATAHUB_PASSWORD=$(CASH_ASSIST_REGISTRATION_DATAHUB_POSTGRES_PASSWORD),\
                databases.backend-db.secret.POSTGRES_DB=$(POSTGRES_DB),\
                databases.backend-db.secret.POSTGRES_USER=$(POSTGRES_USER),\
                databases.backend-db.secret.POSTGRES_PASSWORD=$(POSTGRES_PASSWORD),\
                databases.registration-datahub-db.secret.POSTGRES_DB=$(REGISTRATION_DATAHUB_POSTGRES_DB),\
                databases.registration-datahub-db.secret.POSTGRES_USER=$(REGISTRATION_DATAHUB_POSTGRES_USER),\
                databases.registration-datahub-db.secret.POSTGRES_PASSWORD=$(REGISTRATION_DATAHUB_POSTGRES_PASSWORD),\
                databases.postgres-cash-assist-datahub-db.secret.POSTGRES_DB=$(CASH_ASSIST_DATAHUB_POSTGRES_DB),\
                databases.postgres-cash-assist-datahub-db.secret.POSTGRES_USER=$(CASH_ASSIST_REGISTRATION_DATAHUB_POSTGRES_USER),\
                databases.postgres-cash-assist-datahub-db.secret.POSTGRES_PASSWORD=$(CASH_ASSIST_REGISTRATION_DATAHUB_POSTGRES_PASSWORD),"

      - job: deploy_airflow
        displayName: "[AIRFLOW]"
        steps:
        - task: HelmDeploy@0
          displayName: "[HELM] Add STABLE repo"
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceConnection: 'ICTD-HCT-MIS-Demo-uni-apps-K8s-dev-hct-ims-dev-1574767480012'
            command: repo
            namespace: 'hct-ims-dev'
            arguments: add stable https://kubernetes-charts.storage.googleapis.com

        - task: HelmDeploy@0
          displayName: "[HELM] Update repo"
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceConnection: 'ICTD-HCT-MIS-Demo-uni-apps-K8s-dev-hct-ims-dev-1574767480012'
            command: repo
            namespace: 'hct-ims-dev'
            arguments: update

        - task: HelmDeploy@0
          displayName: "[AIRFLOW] DEPLOY"
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceConnection: 'ICTD-HCT-MIS-Demo-uni-apps-K8s-dev-hct-ims-dev-1574767480012'
            namespace: 'hct-ims-dev'
            command: 'upgrade'
            chartName: "stable/airflow"
            releaseName: 'hct-mis-airflow'
            valueFile: "**/ops/airflow-values.yaml"
            install: true
            force: false
            waitForExecution: false
            arguments: '--timeout 600s --version "6.10.4"'
            overrideValues: "
            airflow.image.repository=uniappsk8sdevacr.azurecr.io/$(airflowImageRepository),\
            airflow.image.tag=$(Build.BuildId),"
