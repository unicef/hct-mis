import { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
import gql from 'graphql-tag';
import * as ApolloReactCommon from '@apollo/react-common';
import * as React from 'react';
import * as ApolloReactComponents from '@apollo/react-components';
import * as ApolloReactHoc from '@apollo/react-hoc';
import * as ApolloReactHooks from '@apollo/react-hooks';
export type Maybe<T> = T | null;
export type RequireFields<T, K extends keyof T> = { [X in Exclude<keyof T, K>]?: T[X] } & { [P in K]-?: NonNullable<T[P]> };
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
  DateTime: any,
  BigInt: any,
  Date: any,
  UUID: any,
  JSONString: any,
  Decimal: any,
  Arg: any,
  GeoJSON: any,
  FlexFieldsScalar: any,
  Upload: any,
};

export type _DatasetsNode = {
   __typename?: '_DatasetsNode',
  data?: Maybe<Array<Maybe<Scalars['Float']>>>,
};

export type _DetailedDatasetsNode = {
   __typename?: '_DetailedDatasetsNode',
  label?: Maybe<Scalars['String']>,
  data?: Maybe<Array<Maybe<Scalars['Float']>>>,
};

export type _TableTotalCashTransferredDataNode = {
   __typename?: '_TableTotalCashTransferredDataNode',
  id?: Maybe<Scalars['String']>,
  admin2?: Maybe<Scalars['String']>,
  totalCashTransferred?: Maybe<Scalars['Float']>,
  totalHouseholds?: Maybe<Scalars['Int']>,
};

export type AccountabilityCommunicationMessageAgeInput = {
  min?: Maybe<Scalars['Int']>,
  max?: Maybe<Scalars['Int']>,
};

export type AccountabilityFullListArguments = {
  excludedAdminAreas?: Maybe<Array<Maybe<Scalars['String']>>>,
};

export type AccountabilityRandomSamplingArguments = {
  excludedAdminAreas?: Maybe<Array<Maybe<Scalars['String']>>>,
  confidenceInterval: Scalars['Float'],
  marginOfError: Scalars['Float'],
  age?: Maybe<AccountabilityCommunicationMessageAgeInput>,
  sex?: Maybe<Scalars['String']>,
};

export type AccountabilitySampleSizeInput = {
  targetPopulation?: Maybe<Scalars['ID']>,
  program?: Maybe<Scalars['ID']>,
  samplingType: Scalars['String'],
  fullListArguments?: Maybe<AccountabilityFullListArguments>,
  randomSamplingArguments?: Maybe<AccountabilityRandomSamplingArguments>,
};

export type AccountabilitySampleSizeNode = {
   __typename?: 'AccountabilitySampleSizeNode',
  numberOfRecipients?: Maybe<Scalars['Int']>,
  sampleSize?: Maybe<Scalars['Int']>,
};

export enum Action {
  Lock = 'LOCK',
  LockFsp = 'LOCK_FSP',
  Unlock = 'UNLOCK',
  UnlockFsp = 'UNLOCK_FSP',
  SendForApproval = 'SEND_FOR_APPROVAL',
  Approve = 'APPROVE',
  Authorize = 'AUTHORIZE',
  Review = 'REVIEW',
  Reject = 'REJECT',
  Finish = 'FINISH'
}

export type ActionPaymentPlanInput = {
  paymentPlanId: Scalars['ID'],
  action: Action,
  comment?: Maybe<Scalars['String']>,
};

export type ActionPaymentPlanMutation = {
   __typename?: 'ActionPaymentPlanMutation',
  paymentPlan?: Maybe<PaymentPlanNode>,
};

export type ActivatePaymentVerificationPlan = {
   __typename?: 'ActivatePaymentVerificationPlan',
  validationErrors?: Maybe<Scalars['Arg']>,
  paymentPlan?: Maybe<GenericPaymentPlanNode>,
};

export type AddIndividualDataObjectType = {
  fullName: Scalars['String'],
  givenName?: Maybe<Scalars['String']>,
  middleName?: Maybe<Scalars['String']>,
  familyName?: Maybe<Scalars['String']>,
  sex: Scalars['String'],
  birthDate: Scalars['Date'],
  estimatedBirthDate: Scalars['Boolean'],
  maritalStatus?: Maybe<Scalars['String']>,
  phoneNo?: Maybe<Scalars['String']>,
  phoneNoAlternative?: Maybe<Scalars['String']>,
  email?: Maybe<Scalars['String']>,
  relationship: Scalars['String'],
  disability?: Maybe<Scalars['Boolean']>,
  workStatus?: Maybe<Scalars['String']>,
  enrolledInNutritionProgramme?: Maybe<Scalars['Boolean']>,
  administrationOfRutf?: Maybe<Scalars['Boolean']>,
  pregnant?: Maybe<Scalars['Boolean']>,
  observedDisability?: Maybe<Array<Maybe<Scalars['String']>>>,
  seeingDisability?: Maybe<Scalars['String']>,
  hearingDisability?: Maybe<Scalars['String']>,
  physicalDisability?: Maybe<Scalars['String']>,
  memoryDisability?: Maybe<Scalars['String']>,
  selfcareDisability?: Maybe<Scalars['String']>,
  commsDisability?: Maybe<Scalars['String']>,
  whoAnswersPhone?: Maybe<Scalars['String']>,
  whoAnswersAltPhone?: Maybe<Scalars['String']>,
  role: Scalars['String'],
  documents?: Maybe<Array<Maybe<IndividualDocumentObjectType>>>,
  identities?: Maybe<Array<Maybe<IndividualIdentityObjectType>>>,
  paymentChannels?: Maybe<Array<Maybe<BankTransferObjectType>>>,
  businessArea?: Maybe<Scalars['String']>,
  flexFields?: Maybe<Scalars['Arg']>,
};

export type AddIndividualIssueTypeExtras = {
  household: Scalars['ID'],
  individualData: AddIndividualDataObjectType,
};

export type AgeFilterObject = {
   __typename?: 'AgeFilterObject',
  min?: Maybe<Scalars['Int']>,
  max?: Maybe<Scalars['Int']>,
};

export type AgeInput = {
  min?: Maybe<Scalars['Int']>,
  max?: Maybe<Scalars['Int']>,
};

export type ApprovalNode = {
   __typename?: 'ApprovalNode',
  createdAt: Scalars['DateTime'],
  comment?: Maybe<Scalars['String']>,
  createdBy?: Maybe<UserNode>,
  info?: Maybe<Scalars['String']>,
};

export type ApprovalProcessNode = Node & {
   __typename?: 'ApprovalProcessNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  sentForApprovalBy?: Maybe<UserNode>,
  sentForApprovalDate?: Maybe<Scalars['DateTime']>,
  sentForAuthorizationBy?: Maybe<UserNode>,
  sentForAuthorizationDate?: Maybe<Scalars['DateTime']>,
  sentForFinanceReleaseBy?: Maybe<UserNode>,
  sentForFinanceReleaseDate?: Maybe<Scalars['DateTime']>,
  paymentPlan: PaymentPlanNode,
  approvalNumberRequired: Scalars['Int'],
  authorizationNumberRequired: Scalars['Int'],
  financeReleaseNumberRequired: Scalars['Int'],
  rejectedOn?: Maybe<Scalars['String']>,
  actions?: Maybe<FilteredActionsListNode>,
};

export type ApprovalProcessNodeConnection = {
   __typename?: 'ApprovalProcessNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<ApprovalProcessNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type ApprovalProcessNodeEdge = {
   __typename?: 'ApprovalProcessNodeEdge',
  node?: Maybe<ApprovalProcessNode>,
  cursor: Scalars['String'],
};

export type AreaNode = Node & {
   __typename?: 'AreaNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  originalId?: Maybe<Scalars['UUID']>,
  name: Scalars['String'],
  parent?: Maybe<AreaNode>,
  pCode?: Maybe<Scalars['String']>,
  areaType: AreaTypeNode,
  validFrom?: Maybe<Scalars['DateTime']>,
  validUntil?: Maybe<Scalars['DateTime']>,
  extras: Scalars['JSONString'],
  lft: Scalars['Int'],
  rght: Scalars['Int'],
  treeId: Scalars['Int'],
  level: Scalars['Int'],
  areaSet: AreaNodeConnection,
  householdSet: HouseholdNodeConnection,
  grievanceticketSet: GrievanceTicketNodeConnection,
  programs: ProgramNodeConnection,
  reports: ReportNodeConnection,
  feedbackSet: FeedbackNodeConnection,
};


export type AreaNodeAreaSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  name?: Maybe<Scalars['String']>
};


export type AreaNodeHouseholdSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type AreaNodeGrievanceticketSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type AreaNodeProgramsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  name?: Maybe<Scalars['String']>
};


export type AreaNodeReportsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type AreaNodeFeedbackSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};

export type AreaNodeConnection = {
   __typename?: 'AreaNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<AreaNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type AreaNodeEdge = {
   __typename?: 'AreaNodeEdge',
  node?: Maybe<AreaNode>,
  cursor: Scalars['String'],
};

export type AreaTypeNode = Node & {
   __typename?: 'AreaTypeNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  originalId?: Maybe<Scalars['UUID']>,
  name: Scalars['String'],
  areaLevel: Scalars['Int'],
  parent?: Maybe<AreaTypeNode>,
  validFrom?: Maybe<Scalars['DateTime']>,
  validUntil?: Maybe<Scalars['DateTime']>,
  extras: Scalars['JSONString'],
  lft: Scalars['Int'],
  rght: Scalars['Int'],
  treeId: Scalars['Int'],
  level: Scalars['Int'],
  areatypeSet: AreaTypeNodeConnection,
  areaSet: AreaNodeConnection,
};


export type AreaTypeNodeAreatypeSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type AreaTypeNodeAreaSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  name?: Maybe<Scalars['String']>
};

export type AreaTypeNodeConnection = {
   __typename?: 'AreaTypeNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<AreaTypeNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type AreaTypeNodeEdge = {
   __typename?: 'AreaTypeNodeEdge',
  node?: Maybe<AreaTypeNode>,
  cursor: Scalars['String'],
};


export type AssignFspToDeliveryMechanismInput = {
  paymentPlanId: Scalars['ID'],
  mappings: Array<Maybe<FspToDeliveryMechanismMappingInput>>,
};

export type AssignFspToDeliveryMechanismMutation = {
   __typename?: 'AssignFspToDeliveryMechanismMutation',
  paymentPlan?: Maybe<PaymentPlanNode>,
};

export type AvailableFspsForDeliveryMechanismsInput = {
  paymentPlanId: Scalars['ID'],
};

export type BankAccountInfoNode = Node & {
   __typename?: 'BankAccountInfoNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  isRemoved: Scalars['Boolean'],
  removedDate?: Maybe<Scalars['DateTime']>,
  lastSyncAt?: Maybe<Scalars['DateTime']>,
  individual: IndividualNode,
  bankName: Scalars['String'],
  bankAccountNumber: Scalars['String'],
  type?: Maybe<Scalars['String']>,
};

export type BankTransferObjectType = {
  type: Scalars['String'],
  bankName: Scalars['String'],
  bankAccountNumber: Scalars['String'],
};


export type BulkUpdateGrievanceTicketsAssigneesMutation = {
   __typename?: 'BulkUpdateGrievanceTicketsAssigneesMutation',
  grievanceTickets?: Maybe<Array<Maybe<GrievanceTicketNode>>>,
};

export type BusinessAreaNode = Node & {
   __typename?: 'BusinessAreaNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  code: Scalars['String'],
  name: Scalars['String'],
  longName: Scalars['String'],
  regionCode: Scalars['String'],
  regionName: Scalars['String'],
  koboUsername?: Maybe<Scalars['String']>,
  koboToken?: Maybe<Scalars['String']>,
  koboUrl?: Maybe<Scalars['String']>,
  rapidProHost?: Maybe<Scalars['String']>,
  rapidProPaymentVerificationToken?: Maybe<Scalars['String']>,
  rapidProMessagesToken?: Maybe<Scalars['String']>,
  rapidProSurveyToken?: Maybe<Scalars['String']>,
  slug: Scalars['String'],
  customFields: Scalars['JSONString'],
  hasDataSharingAgreement: Scalars['Boolean'],
  parent?: Maybe<UserBusinessAreaNode>,
  isSplit: Scalars['Boolean'],
  postponeDeduplication: Scalars['Boolean'],
  deduplicationDuplicateScore: Scalars['Float'],
  deduplicationPossibleDuplicateScore: Scalars['Float'],
  deduplicationBatchDuplicatesPercentage: Scalars['Int'],
  deduplicationBatchDuplicatesAllowed: Scalars['Int'],
  deduplicationGoldenRecordDuplicatesPercentage: Scalars['Int'],
  deduplicationGoldenRecordDuplicatesAllowed: Scalars['Int'],
  screenBeneficiary: Scalars['Boolean'],
  deduplicationIgnoreWithdraw: Scalars['Boolean'],
  isPaymentPlanApplicable: Scalars['Boolean'],
  isAccountabilityApplicable?: Maybe<Scalars['Boolean']>,
  active: Scalars['Boolean'],
  children: UserBusinessAreaNodeConnection,
  userRoles: Array<UserRoleNode>,
  householdSet: HouseholdNodeConnection,
  individualSet: IndividualNodeConnection,
  registrationdataimportSet: RegistrationDataImportNodeConnection,
  paymentplanSet: PaymentPlanNodeConnection,
  cashplanSet: CashPlanNodeConnection,
  paymentrecordSet: PaymentRecordNodeConnection,
  paymentSet: PaymentNodeConnection,
  serviceproviderSet: ServiceProviderNodeConnection,
  tickets: GrievanceTicketNodeConnection,
  programSet: ProgramNodeConnection,
  targetpopulationSet: TargetPopulationNodeConnection,
  reports: ReportNodeConnection,
  logentrySet: PaymentVerificationLogEntryNodeConnection,
  messageSet: CommunicationMessageNodeConnection,
  feedbackSet: FeedbackNodeConnection,
  surveySet: SurveyNodeConnection,
};


export type BusinessAreaNodeChildrenArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  id?: Maybe<Scalars['UUID']>
};


export type BusinessAreaNodeHouseholdSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type BusinessAreaNodeIndividualSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type BusinessAreaNodeRegistrationdataimportSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type BusinessAreaNodePaymentplanSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type BusinessAreaNodeCashplanSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type BusinessAreaNodePaymentrecordSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type BusinessAreaNodePaymentSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type BusinessAreaNodeServiceproviderSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type BusinessAreaNodeTicketsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type BusinessAreaNodeProgramSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  name?: Maybe<Scalars['String']>
};


export type BusinessAreaNodeTargetpopulationSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  program?: Maybe<Scalars['ID']>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_Lte?: Maybe<Scalars['DateTime']>,
  createdAt_Gte?: Maybe<Scalars['DateTime']>,
  updatedAt?: Maybe<Scalars['DateTime']>,
  updatedAt_Lte?: Maybe<Scalars['DateTime']>,
  updatedAt_Gte?: Maybe<Scalars['DateTime']>,
  status?: Maybe<Scalars['String']>,
  households?: Maybe<Array<Maybe<Scalars['ID']>>>,
  name?: Maybe<Scalars['String']>,
  createdByName?: Maybe<Scalars['String']>,
  totalHouseholdsCountMin?: Maybe<Scalars['Int']>,
  totalHouseholdsCountMax?: Maybe<Scalars['Int']>,
  totalIndividualsCountMin?: Maybe<Scalars['Int']>,
  totalIndividualsCountMax?: Maybe<Scalars['Int']>,
  businessArea?: Maybe<Scalars['String']>,
  createdAtRange?: Maybe<Scalars['String']>,
  paymentPlanApplicable?: Maybe<Scalars['Boolean']>,
  orderBy?: Maybe<Scalars['String']>
};


export type BusinessAreaNodeReportsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type BusinessAreaNodeLogentrySetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type BusinessAreaNodeMessageSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type BusinessAreaNodeFeedbackSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type BusinessAreaNodeSurveySetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};

export type BusinessAreaNodeConnection = {
   __typename?: 'BusinessAreaNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<BusinessAreaNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type BusinessAreaNodeEdge = {
   __typename?: 'BusinessAreaNodeEdge',
  node?: Maybe<BusinessAreaNode>,
  cursor: Scalars['String'],
};

export type CashPlanAndPaymentPlanEdges = {
   __typename?: 'CashPlanAndPaymentPlanEdges',
  cursor?: Maybe<Scalars['String']>,
  node?: Maybe<CashPlanAndPaymentPlanNode>,
};

export type CashPlanAndPaymentPlanNode = {
   __typename?: 'CashPlanAndPaymentPlanNode',
  objType?: Maybe<Scalars['String']>,
  id?: Maybe<Scalars['String']>,
  unicefId?: Maybe<Scalars['String']>,
  verificationStatus?: Maybe<Scalars['String']>,
  currency?: Maybe<Scalars['String']>,
  totalDeliveredQuantity?: Maybe<Scalars['Float']>,
  startDate?: Maybe<Scalars['String']>,
  endDate?: Maybe<Scalars['String']>,
  programName?: Maybe<Scalars['String']>,
  updatedAt?: Maybe<Scalars['String']>,
  verificationPlans?: Maybe<Array<Maybe<PaymentVerificationPlanNode>>>,
  totalNumberOfHouseholds?: Maybe<Scalars['Int']>,
  totalEntitledQuantity?: Maybe<Scalars['Float']>,
  totalUndeliveredQuantity?: Maybe<Scalars['Float']>,
  assistanceMeasurement?: Maybe<Scalars['String']>,
  dispersionDate?: Maybe<Scalars['String']>,
  serviceProviderFullName?: Maybe<Scalars['String']>,
};

export type CashPlanNode = Node & {
   __typename?: 'CashPlanNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  version: Scalars['BigInt'],
  businessArea: UserBusinessAreaNode,
  statusDate: Scalars['DateTime'],
  startDate: Scalars['DateTime'],
  endDate: Scalars['DateTime'],
  program: ProgramNode,
  exchangeRate?: Maybe<Scalars['Float']>,
  totalEntitledQuantity?: Maybe<Scalars['Float']>,
  totalEntitledQuantityUsd?: Maybe<Scalars['Float']>,
  totalEntitledQuantityRevised?: Maybe<Scalars['Float']>,
  totalEntitledQuantityRevisedUsd?: Maybe<Scalars['Float']>,
  totalDeliveredQuantity?: Maybe<Scalars['Float']>,
  totalDeliveredQuantityUsd?: Maybe<Scalars['Float']>,
  totalUndeliveredQuantity?: Maybe<Scalars['Float']>,
  totalUndeliveredQuantityUsd?: Maybe<Scalars['Float']>,
  name: Scalars['String'],
  caId?: Maybe<Scalars['String']>,
  caHashId?: Maybe<Scalars['UUID']>,
  status: CashPlanStatus,
  distributionLevel: Scalars['String'],
  dispersionDate: Scalars['DateTime'],
  coverageDuration: Scalars['Int'],
  coverageUnit: Scalars['String'],
  comments?: Maybe<Scalars['String']>,
  deliveryType?: Maybe<Scalars['String']>,
  assistanceMeasurement: Scalars['String'],
  assistanceThrough: Scalars['String'],
  serviceProvider?: Maybe<ServiceProviderNode>,
  visionId?: Maybe<Scalars['String']>,
  fundsCommitment?: Maybe<Scalars['String']>,
  downPayment?: Maybe<Scalars['String']>,
  validationAlertsCount: Scalars['Int'],
  totalPersonsCovered: Scalars['Int'],
  totalPersonsCoveredRevised: Scalars['Int'],
  paymentItems: PaymentRecordNodeConnection,
  bankReconciliationSuccess?: Maybe<Scalars['Int']>,
  bankReconciliationError?: Maybe<Scalars['Int']>,
  totalNumberOfHouseholds?: Maybe<Scalars['Int']>,
  currency?: Maybe<Scalars['String']>,
  canCreatePaymentVerificationPlan?: Maybe<Scalars['Boolean']>,
  availablePaymentRecordsCount?: Maybe<Scalars['Int']>,
  verificationPlans?: Maybe<PaymentVerificationPlanNodeConnection>,
  paymentVerificationSummary?: Maybe<PaymentVerificationSummaryNode>,
  unicefId?: Maybe<Scalars['String']>,
};


export type CashPlanNodePaymentItemsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type CashPlanNodeVerificationPlansArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  programId?: Maybe<Scalars['String']>
};

export type CashPlanNodeConnection = {
   __typename?: 'CashPlanNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<CashPlanNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type CashPlanNodeEdge = {
   __typename?: 'CashPlanNodeEdge',
  node?: Maybe<CashPlanNode>,
  cursor: Scalars['String'],
};

export enum CashPlanStatus {
  DistributionCompleted = 'DISTRIBUTION_COMPLETED',
  DistributionCompletedWithErrors = 'DISTRIBUTION_COMPLETED_WITH_ERRORS',
  TransactionCompleted = 'TRANSACTION_COMPLETED',
  TransactionCompletedWithErrors = 'TRANSACTION_COMPLETED_WITH_ERRORS'
}

export type CategoryExtrasInput = {
  sensitiveGrievanceTicketExtras?: Maybe<SensitiveGrievanceTicketExtras>,
  grievanceComplaintTicketExtras?: Maybe<GrievanceComplaintTicketExtras>,
  positiveFeedbackTicketExtras?: Maybe<PositiveFeedbackTicketExtras>,
  negativeFeedbackTicketExtras?: Maybe<NegativeFeedbackTicketExtras>,
  referralTicketExtras?: Maybe<ReferralTicketExtras>,
};

export type ChartDatasetNode = {
   __typename?: 'ChartDatasetNode',
  labels?: Maybe<Array<Maybe<Scalars['String']>>>,
  datasets?: Maybe<Array<Maybe<_DatasetsNode>>>,
};

export type ChartDetailedDatasetsNode = {
   __typename?: 'ChartDetailedDatasetsNode',
  labels?: Maybe<Array<Maybe<Scalars['String']>>>,
  datasets?: Maybe<Array<Maybe<_DetailedDatasetsNode>>>,
};

export type ChartGrievanceTicketsNode = {
   __typename?: 'ChartGrievanceTicketsNode',
  labels?: Maybe<Array<Maybe<Scalars['String']>>>,
  datasets?: Maybe<Array<Maybe<_DatasetsNode>>>,
  totalNumberOfGrievances?: Maybe<Scalars['Int']>,
  totalNumberOfFeedback?: Maybe<Scalars['Int']>,
  totalNumberOfOpenSensitive?: Maybe<Scalars['Int']>,
};

export type ChartPaymentVerification = {
   __typename?: 'ChartPaymentVerification',
  labels?: Maybe<Array<Maybe<Scalars['String']>>>,
  datasets?: Maybe<Array<Maybe<_DetailedDatasetsNode>>>,
  households?: Maybe<Scalars['Int']>,
  averageSampleSize?: Maybe<Scalars['Float']>,
};

export type CheckAgainstSanctionListMutation = {
   __typename?: 'CheckAgainstSanctionListMutation',
  ok?: Maybe<Scalars['Boolean']>,
  errors?: Maybe<Array<Maybe<XlsxRowErrorNode>>>,
};

export type ChoiceObject = {
   __typename?: 'ChoiceObject',
  name?: Maybe<Scalars['String']>,
  value?: Maybe<Scalars['String']>,
};

export type ChoiceObjectInt = {
   __typename?: 'ChoiceObjectInt',
  name?: Maybe<Scalars['String']>,
  value?: Maybe<Scalars['Int']>,
};

export type ChooseDeliveryMechanismsForPaymentPlanInput = {
  paymentPlanId: Scalars['ID'],
  deliveryMechanisms: Array<Maybe<Scalars['String']>>,
};

export type ChooseDeliveryMechanismsForPaymentPlanMutation = {
   __typename?: 'ChooseDeliveryMechanismsForPaymentPlanMutation',
  paymentPlan?: Maybe<PaymentPlanNode>,
};

export type CommunicationMessageNode = Node & {
   __typename?: 'CommunicationMessageNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  unicefId?: Maybe<Scalars['String']>,
  title: Scalars['String'],
  body: Scalars['String'],
  createdBy?: Maybe<UserNode>,
  numberOfRecipients: Scalars['Int'],
  businessArea: UserBusinessAreaNode,
  households: HouseholdNodeConnection,
  targetPopulation?: Maybe<TargetPopulationNode>,
  registrationDataImport?: Maybe<RegistrationDataImportNode>,
  samplingType: MessageSamplingType,
  fullListArguments?: Maybe<Scalars['JSONString']>,
  randomSamplingArguments?: Maybe<Scalars['JSONString']>,
  sampleSize: Scalars['Int'],
  program?: Maybe<ProgramNode>,
};


export type CommunicationMessageNodeHouseholdsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};

export type CommunicationMessageNodeConnection = {
   __typename?: 'CommunicationMessageNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<CommunicationMessageNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type CommunicationMessageNodeEdge = {
   __typename?: 'CommunicationMessageNodeEdge',
  node?: Maybe<CommunicationMessageNode>,
  cursor: Scalars['String'],
};

export type CommunicationMessageRecipientMapNode = Node & {
   __typename?: 'CommunicationMessageRecipientMapNode',
  id: Scalars['ID'],
  size?: Maybe<Scalars['Int']>,
  headOfHousehold: IndividualNode,
};

export type CommunicationMessageRecipientMapNodeConnection = {
   __typename?: 'CommunicationMessageRecipientMapNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<CommunicationMessageRecipientMapNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type CommunicationMessageRecipientMapNodeEdge = {
   __typename?: 'CommunicationMessageRecipientMapNodeEdge',
  node?: Maybe<CommunicationMessageRecipientMapNode>,
  cursor: Scalars['String'],
};

export type ContentTypeObjectType = {
   __typename?: 'ContentTypeObjectType',
  id: Scalars['ID'],
  appLabel: Scalars['String'],
  model: Scalars['String'],
  paymentverificationplanSet: PaymentVerificationPlanNodeConnection,
  paymentverificationSet: PaymentVerificationNodeConnection,
  paymentverificationsummarySet: PaymentVerificationSummaryNodeConnection,
  ticketcomplaintdetailsSet: TicketComplaintDetailsNodeConnection,
  ticketsensitivedetailsSet: TicketSensitiveDetailsNodeConnection,
  logEntries: PaymentVerificationLogEntryNodeConnection,
  name?: Maybe<Scalars['String']>,
};


export type ContentTypeObjectTypePaymentverificationplanSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type ContentTypeObjectTypePaymentverificationSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type ContentTypeObjectTypePaymentverificationsummarySetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type ContentTypeObjectTypeTicketcomplaintdetailsSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type ContentTypeObjectTypeTicketsensitivedetailsSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type ContentTypeObjectTypeLogEntriesArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};

export type CopyProgram = {
   __typename?: 'CopyProgram',
  validationErrors?: Maybe<Scalars['Arg']>,
  program?: Maybe<ProgramNode>,
};

export type CopyProgramInput = {
  id: Scalars['String'],
  name?: Maybe<Scalars['String']>,
  startDate?: Maybe<Scalars['Date']>,
  endDate?: Maybe<Scalars['Date']>,
  description?: Maybe<Scalars['String']>,
  budget?: Maybe<Scalars['Decimal']>,
  frequencyOfPayments?: Maybe<Scalars['String']>,
  sector?: Maybe<Scalars['String']>,
  scope?: Maybe<Scalars['String']>,
  cashPlus?: Maybe<Scalars['Boolean']>,
  populationGoal?: Maybe<Scalars['Int']>,
  administrativeAreasOfImplementation?: Maybe<Scalars['String']>,
  businessAreaSlug?: Maybe<Scalars['String']>,
  individualDataNeeded?: Maybe<Scalars['Boolean']>,
};

export type CopyTargetPopulationInput = {
  id?: Maybe<Scalars['ID']>,
  name?: Maybe<Scalars['String']>,
};

export type CopyTargetPopulationMutationInput = {
  targetPopulationData?: Maybe<CopyTargetPopulationInput>,
  clientMutationId?: Maybe<Scalars['String']>,
};

export type CopyTargetPopulationMutationPayload = {
   __typename?: 'CopyTargetPopulationMutationPayload',
  targetPopulation?: Maybe<TargetPopulationNode>,
  validationErrors?: Maybe<Scalars['Arg']>,
  clientMutationId?: Maybe<Scalars['String']>,
};

export type CoreFieldChoiceObject = {
   __typename?: 'CoreFieldChoiceObject',
  labels?: Maybe<Array<Maybe<LabelNode>>>,
  labelEn?: Maybe<Scalars['String']>,
  value?: Maybe<Scalars['String']>,
  admin?: Maybe<Scalars['String']>,
  listName?: Maybe<Scalars['String']>,
};

export type CountAndPercentageNode = {
   __typename?: 'CountAndPercentageNode',
  count?: Maybe<Scalars['Int']>,
  percentage?: Maybe<Scalars['Float']>,
};

export type CreateAccountabilityCommunicationMessageInput = {
  households?: Maybe<Array<Maybe<Scalars['ID']>>>,
  targetPopulation?: Maybe<Scalars['ID']>,
  registrationDataImport?: Maybe<Scalars['ID']>,
  samplingType: SamplingChoices,
  fullListArguments?: Maybe<AccountabilityFullListArguments>,
  randomSamplingArguments?: Maybe<AccountabilityRandomSamplingArguments>,
  title: Scalars['String'],
  body: Scalars['String'],
};

export type CreateCommunicationMessageMutation = {
   __typename?: 'CreateCommunicationMessageMutation',
  message?: Maybe<CommunicationMessageNode>,
};

export type CreateDashboardReport = {
   __typename?: 'CreateDashboardReport',
  success?: Maybe<Scalars['Boolean']>,
};

export type CreateDashboardReportInput = {
  reportTypes: Array<Maybe<Scalars['String']>>,
  businessAreaSlug: Scalars['String'],
  year: Scalars['Int'],
  adminArea?: Maybe<Scalars['ID']>,
  program?: Maybe<Scalars['ID']>,
};

export type CreateFeedbackInput = {
  issueType: Scalars['String'],
  householdLookup?: Maybe<Scalars['ID']>,
  individualLookup?: Maybe<Scalars['ID']>,
  description: Scalars['String'],
  comments?: Maybe<Scalars['String']>,
  admin2?: Maybe<Scalars['ID']>,
  area?: Maybe<Scalars['String']>,
  language?: Maybe<Scalars['String']>,
  consent?: Maybe<Scalars['Boolean']>,
  program?: Maybe<Scalars['ID']>,
};

export type CreateFeedbackMessageInput = {
  description: Scalars['String'],
  feedback: Scalars['ID'],
};

export type CreateFeedbackMessageMutation = {
   __typename?: 'CreateFeedbackMessageMutation',
  feedbackMessage?: Maybe<FeedbackMessageNode>,
};

export type CreateFeedbackMutation = {
   __typename?: 'CreateFeedbackMutation',
  feedback?: Maybe<FeedbackNode>,
};

export type CreateFollowUpPaymentPlanMutation = {
   __typename?: 'CreateFollowUpPaymentPlanMutation',
  paymentPlan?: Maybe<PaymentPlanNode>,
};

export type CreateGrievanceTicketExtrasInput = {
  category?: Maybe<CategoryExtrasInput>,
  issueType?: Maybe<IssueTypeExtrasInput>,
};

export type CreateGrievanceTicketInput = {
  description: Scalars['String'],
  assignedTo?: Maybe<Scalars['ID']>,
  category: Scalars['Int'],
  issueType?: Maybe<Scalars['Int']>,
  admin?: Maybe<Scalars['String']>,
  area?: Maybe<Scalars['String']>,
  language: Scalars['String'],
  consent: Scalars['Boolean'],
  businessArea: Scalars['ID'],
  linkedTickets?: Maybe<Array<Maybe<Scalars['ID']>>>,
  extras?: Maybe<CreateGrievanceTicketExtrasInput>,
  priority?: Maybe<Scalars['Int']>,
  urgency?: Maybe<Scalars['Int']>,
  partner?: Maybe<Scalars['Int']>,
  program?: Maybe<Scalars['ID']>,
  comments?: Maybe<Scalars['String']>,
  linkedFeedbackId?: Maybe<Scalars['ID']>,
  documentation?: Maybe<Array<Maybe<GrievanceDocumentInput>>>,
};

export type CreateGrievanceTicketMutation = {
   __typename?: 'CreateGrievanceTicketMutation',
  grievanceTickets?: Maybe<Array<Maybe<GrievanceTicketNode>>>,
};

export type CreatePaymentPlanInput = {
  businessAreaSlug: Scalars['String'],
  targetingId: Scalars['ID'],
  startDate: Scalars['Date'],
  endDate: Scalars['Date'],
  dispersionStartDate: Scalars['Date'],
  dispersionEndDate: Scalars['Date'],
  currency: Scalars['String'],
};

export type CreatePaymentPlanMutation = {
   __typename?: 'CreatePaymentPlanMutation',
  paymentPlan?: Maybe<PaymentPlanNode>,
};

export type CreatePaymentVerificationInput = {
  sampling: Scalars['String'],
  verificationChannel: Scalars['String'],
  businessAreaSlug: Scalars['String'],
  fullListArguments?: Maybe<FullListArguments>,
  randomSamplingArguments?: Maybe<RandomSamplingArguments>,
  rapidProArguments?: Maybe<RapidProArguments>,
  cashOrPaymentPlanId: Scalars['ID'],
};

export type CreateProgram = {
   __typename?: 'CreateProgram',
  validationErrors?: Maybe<Scalars['Arg']>,
  program?: Maybe<ProgramNode>,
};

export type CreateProgramInput = {
  name?: Maybe<Scalars['String']>,
  startDate?: Maybe<Scalars['Date']>,
  endDate?: Maybe<Scalars['Date']>,
  description?: Maybe<Scalars['String']>,
  budget?: Maybe<Scalars['Decimal']>,
  frequencyOfPayments?: Maybe<Scalars['String']>,
  sector?: Maybe<Scalars['String']>,
  scope?: Maybe<Scalars['String']>,
  cashPlus?: Maybe<Scalars['Boolean']>,
  populationGoal?: Maybe<Scalars['Int']>,
  administrativeAreasOfImplementation?: Maybe<Scalars['String']>,
  businessAreaSlug?: Maybe<Scalars['String']>,
  individualDataNeeded?: Maybe<Scalars['Boolean']>,
};

export type CreateReport = {
   __typename?: 'CreateReport',
  report?: Maybe<ReportNode>,
};

export type CreateReportInput = {
  reportType: Scalars['Int'],
  businessAreaSlug: Scalars['String'],
  dateFrom: Scalars['Date'],
  dateTo: Scalars['Date'],
  program?: Maybe<Scalars['ID']>,
  adminArea1?: Maybe<Scalars['ID']>,
  adminArea2?: Maybe<Array<Maybe<Scalars['ID']>>>,
};

export type CreateSurveyInput = {
  title: Scalars['String'],
  body?: Maybe<Scalars['String']>,
  category: Scalars['String'],
  targetPopulation?: Maybe<Scalars['ID']>,
  program?: Maybe<Scalars['ID']>,
  samplingType: Scalars['String'],
  fullListArguments?: Maybe<AccountabilityFullListArguments>,
  randomSamplingArguments?: Maybe<AccountabilityRandomSamplingArguments>,
  flow: Scalars['String'],
};

export type CreateSurveyMutation = {
   __typename?: 'CreateSurveyMutation',
  survey?: Maybe<SurveyNode>,
};

export type CreateTargetPopulationInput = {
  name: Scalars['String'],
  targetingCriteria: TargetingCriteriaObjectType,
  businessAreaSlug: Scalars['String'],
  programId: Scalars['ID'],
  excludedIds: Scalars['String'],
  exclusionReason?: Maybe<Scalars['String']>,
};

export type CreateTargetPopulationMutation = {
   __typename?: 'CreateTargetPopulationMutation',
  validationErrors?: Maybe<Scalars['Arg']>,
  targetPopulation?: Maybe<TargetPopulationNode>,
};

export type CreateTicketNoteInput = {
  description: Scalars['String'],
  ticket: Scalars['ID'],
};

export type CreateTicketNoteMutation = {
   __typename?: 'CreateTicketNoteMutation',
  grievanceTicketNote?: Maybe<TicketNoteNode>,
};

export type CreateVerificationPlanMutation = {
   __typename?: 'CreateVerificationPlanMutation',
  paymentPlan?: Maybe<GenericPaymentPlanNode>,
};




export type DeduplicationResultNode = {
   __typename?: 'DeduplicationResultNode',
  hitId?: Maybe<Scalars['ID']>,
  fullName?: Maybe<Scalars['String']>,
  score?: Maybe<Scalars['Float']>,
  proximityToScore?: Maybe<Scalars['Float']>,
  location?: Maybe<Scalars['String']>,
  age?: Maybe<Scalars['Int']>,
};

export type DeleteHouseholdApproveMutation = {
   __typename?: 'DeleteHouseholdApproveMutation',
  grievanceTicket?: Maybe<GrievanceTicketNode>,
};

export type DeletePaymentPlanMutation = {
   __typename?: 'DeletePaymentPlanMutation',
  paymentPlan?: Maybe<PaymentPlanNode>,
};

export type DeletePaymentVerificationPlan = {
   __typename?: 'DeletePaymentVerificationPlan',
  paymentPlan?: Maybe<GenericPaymentPlanNode>,
};

export type DeleteProgram = {
   __typename?: 'DeleteProgram',
  ok?: Maybe<Scalars['Boolean']>,
};

export type DeleteRegistrationDataImport = {
   __typename?: 'DeleteRegistrationDataImport',
  ok?: Maybe<Scalars['Boolean']>,
};

export type DeleteTargetPopulationMutationInput = {
  targetId: Scalars['ID'],
  clientMutationId?: Maybe<Scalars['String']>,
};

export type DeleteTargetPopulationMutationPayload = {
   __typename?: 'DeleteTargetPopulationMutationPayload',
  ok?: Maybe<Scalars['Boolean']>,
  clientMutationId?: Maybe<Scalars['String']>,
};

export type DeliveredQuantityNode = {
   __typename?: 'DeliveredQuantityNode',
  totalDeliveredQuantity?: Maybe<Scalars['Decimal']>,
  currency?: Maybe<Scalars['String']>,
};

export type DeliveryMechanismNode = Node & {
   __typename?: 'DeliveryMechanismNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  paymentPlan: PaymentPlanNode,
  financialServiceProvider?: Maybe<FinancialServiceProviderNode>,
  createdBy: UserNode,
  sentDate: Scalars['DateTime'],
  sentBy?: Maybe<UserNode>,
  status: Scalars['String'],
  deliveryMechanism?: Maybe<DeliveryMechanismPerPaymentPlanDeliveryMechanism>,
  deliveryMechanismOrder: Scalars['Int'],
  name?: Maybe<Scalars['String']>,
  order?: Maybe<Scalars['Int']>,
  fsp?: Maybe<FinancialServiceProviderNode>,
};

export type DeliveryMechanismNodeConnection = {
   __typename?: 'DeliveryMechanismNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<DeliveryMechanismNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type DeliveryMechanismNodeEdge = {
   __typename?: 'DeliveryMechanismNodeEdge',
  node?: Maybe<DeliveryMechanismNode>,
  cursor: Scalars['String'],
};

export enum DeliveryMechanismPerPaymentPlanDeliveryMechanism {
  CardlessCashWithdrawal = 'CARDLESS_CASH_WITHDRAWAL',
  Cash = 'CASH',
  CashByFsp = 'CASH_BY_FSP',
  Cheque = 'CHEQUE',
  DepositToCard = 'DEPOSIT_TO_CARD',
  MobileMoney = 'MOBILE_MONEY',
  PrePaidCard = 'PRE_PAID_CARD',
  Referral = 'REFERRAL',
  Transfer = 'TRANSFER',
  TransferToAccount = 'TRANSFER_TO_ACCOUNT',
  Voucher = 'VOUCHER'
}

export type DiscardPaymentVerificationPlan = {
   __typename?: 'DiscardPaymentVerificationPlan',
  paymentPlan?: Maybe<GenericPaymentPlanNode>,
};

export type DjangoDebug = {
   __typename?: 'DjangoDebug',
  sql?: Maybe<Array<Maybe<DjangoDebugSql>>>,
};

export type DjangoDebugSql = {
   __typename?: 'DjangoDebugSQL',
  vendor: Scalars['String'],
  alias: Scalars['String'],
  sql?: Maybe<Scalars['String']>,
  duration: Scalars['Float'],
  rawSql: Scalars['String'],
  params: Scalars['String'],
  startTime: Scalars['Float'],
  stopTime: Scalars['Float'],
  isSlow: Scalars['Boolean'],
  isSelect: Scalars['Boolean'],
  transId?: Maybe<Scalars['String']>,
  transStatus?: Maybe<Scalars['String']>,
  isoLevel?: Maybe<Scalars['String']>,
  encoding?: Maybe<Scalars['String']>,
};

export type DocumentNode = Node & {
   __typename?: 'DocumentNode',
  isRemoved: Scalars['Boolean'],
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  lastSyncAt?: Maybe<Scalars['DateTime']>,
  documentNumber: Scalars['String'],
  photo?: Maybe<Scalars['String']>,
  individual: IndividualNode,
  type: DocumentTypeNode,
  country?: Maybe<Scalars['String']>,
  status: DocumentStatus,
  cleared: Scalars['Boolean'],
  clearedDate: Scalars['DateTime'],
  clearedBy?: Maybe<UserNode>,
  issuanceDate?: Maybe<Scalars['DateTime']>,
  expiryDate?: Maybe<Scalars['DateTime']>,
  program?: Maybe<ProgramNode>,
  countryIso3?: Maybe<Scalars['String']>,
};

export type DocumentNodeConnection = {
   __typename?: 'DocumentNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<DocumentNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type DocumentNodeEdge = {
   __typename?: 'DocumentNodeEdge',
  node?: Maybe<DocumentNode>,
  cursor: Scalars['String'],
};

export enum DocumentStatus {
  Pending = 'PENDING',
  Valid = 'VALID',
  NeedInvestigation = 'NEED_INVESTIGATION',
  Invalid = 'INVALID'
}

export type DocumentTypeNode = {
   __typename?: 'DocumentTypeNode',
  id: Scalars['UUID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  label: Scalars['String'],
  key: Scalars['String'],
  isIdentityDocument: Scalars['Boolean'],
  uniqueForIndividual: Scalars['Boolean'],
  validForDeduplication: Scalars['Boolean'],
  documents: DocumentNodeConnection,
};


export type DocumentTypeNodeDocumentsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};

export type EditBankTransferObjectType = {
  id: Scalars['ID'],
  type: Scalars['String'],
  bankName: Scalars['String'],
  bankAccountNumber: Scalars['String'],
};

export type EditIndividualDocumentObjectType = {
  id: Scalars['ID'],
  country: Scalars['String'],
  key: Scalars['String'],
  number: Scalars['String'],
  photo?: Maybe<Scalars['Arg']>,
  photoraw?: Maybe<Scalars['Arg']>,
};

export type EditIndividualIdentityObjectType = {
  id: Scalars['ID'],
  country: Scalars['String'],
  partner: Scalars['String'],
  number: Scalars['String'],
};

export type EditPaymentVerificationInput = {
  sampling: Scalars['String'],
  verificationChannel: Scalars['String'],
  businessAreaSlug: Scalars['String'],
  fullListArguments?: Maybe<FullListArguments>,
  randomSamplingArguments?: Maybe<RandomSamplingArguments>,
  rapidProArguments?: Maybe<RapidProArguments>,
  paymentVerificationPlanId: Scalars['ID'],
};

export type EditPaymentVerificationMutation = {
   __typename?: 'EditPaymentVerificationMutation',
  paymentPlan?: Maybe<GenericPaymentPlanNode>,
};

export type EraseRegistrationDataImportMutation = {
   __typename?: 'EraseRegistrationDataImportMutation',
  registrationDataImport?: Maybe<RegistrationDataImportNode>,
};

export type ExcludeHouseholdsMutation = {
   __typename?: 'ExcludeHouseholdsMutation',
  paymentPlan?: Maybe<PaymentPlanNode>,
};

export type ExportPdfPaymentPlanSummaryMutation = {
   __typename?: 'ExportPDFPaymentPlanSummaryMutation',
  paymentPlan?: Maybe<PaymentPlanNode>,
};

export type ExportSurveySampleMutationMutation = {
   __typename?: 'ExportSurveySampleMutationMutation',
  survey?: Maybe<SurveyNode>,
};

export type ExportXlsxPaymentPlanPaymentListMutation = {
   __typename?: 'ExportXLSXPaymentPlanPaymentListMutation',
  paymentPlan?: Maybe<PaymentPlanNode>,
};

export type ExportXlsxPaymentPlanPaymentListPerFspMutation = {
   __typename?: 'ExportXLSXPaymentPlanPaymentListPerFSPMutation',
  paymentPlan?: Maybe<PaymentPlanNode>,
};

export type ExportXlsxPaymentVerificationPlanFile = {
   __typename?: 'ExportXlsxPaymentVerificationPlanFile',
  paymentPlan?: Maybe<GenericPaymentPlanNode>,
};

export enum FeedbackIssueType {
  PositiveFeedback = 'POSITIVE_FEEDBACK',
  NegativeFeedback = 'NEGATIVE_FEEDBACK'
}

export type FeedbackMessageNode = Node & {
   __typename?: 'FeedbackMessageNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  description: Scalars['String'],
  createdBy?: Maybe<UserNode>,
};

export type FeedbackMessageNodeConnection = {
   __typename?: 'FeedbackMessageNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<FeedbackMessageNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type FeedbackMessageNodeEdge = {
   __typename?: 'FeedbackMessageNodeEdge',
  node?: Maybe<FeedbackMessageNode>,
  cursor: Scalars['String'],
};

export type FeedbackNode = Node & {
   __typename?: 'FeedbackNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  unicefId?: Maybe<Scalars['String']>,
  businessArea: UserBusinessAreaNode,
  issueType: FeedbackIssueType,
  householdLookup?: Maybe<HouseholdNode>,
  individualLookup?: Maybe<IndividualNode>,
  description: Scalars['String'],
  comments?: Maybe<Scalars['String']>,
  admin2?: Maybe<AreaNode>,
  area: Scalars['String'],
  language: Scalars['String'],
  consent: Scalars['Boolean'],
  program?: Maybe<ProgramNode>,
  createdBy?: Maybe<UserNode>,
  linkedGrievance?: Maybe<GrievanceTicketNode>,
  feedbackMessages: FeedbackMessageNodeConnection,
};


export type FeedbackNodeFeedbackMessagesArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};

export type FeedbackNodeConnection = {
   __typename?: 'FeedbackNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<FeedbackNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type FeedbackNodeEdge = {
   __typename?: 'FeedbackNodeEdge',
  node?: Maybe<FeedbackNode>,
  cursor: Scalars['String'],
};

export type FieldAttributeNode = {
   __typename?: 'FieldAttributeNode',
  id?: Maybe<Scalars['String']>,
  type?: Maybe<Scalars['String']>,
  name?: Maybe<Scalars['String']>,
  labels?: Maybe<Array<Maybe<LabelNode>>>,
  labelEn?: Maybe<Scalars['String']>,
  hint?: Maybe<Scalars['String']>,
  required?: Maybe<Scalars['Boolean']>,
  choices?: Maybe<Array<Maybe<CoreFieldChoiceObject>>>,
  associatedWith?: Maybe<Scalars['String']>,
  isFlexField?: Maybe<Scalars['Boolean']>,
};

export type FilteredActionsListNode = {
   __typename?: 'FilteredActionsListNode',
  approval?: Maybe<Array<Maybe<ApprovalNode>>>,
  authorization?: Maybe<Array<Maybe<ApprovalNode>>>,
  financeRelease?: Maybe<Array<Maybe<ApprovalNode>>>,
  reject?: Maybe<Array<Maybe<ApprovalNode>>>,
};

export type FinalizeTargetPopulationMutation = {
   __typename?: 'FinalizeTargetPopulationMutation',
  targetPopulation?: Maybe<TargetPopulationNode>,
};

export enum FinancialServiceProviderCommunicationChannel {
  Api = 'API',
  Sftp = 'SFTP',
  Xlsx = 'XLSX'
}

export type FinancialServiceProviderNode = Node & {
   __typename?: 'FinancialServiceProviderNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  createdBy?: Maybe<UserNode>,
  name: Scalars['String'],
  visionVendorNumber: Scalars['String'],
  deliveryMechanisms: Array<Scalars['String']>,
  distributionLimit?: Maybe<Scalars['Float']>,
  communicationChannel: FinancialServiceProviderCommunicationChannel,
  dataTransferConfiguration?: Maybe<Scalars['JSONString']>,
  xlsxTemplates: FinancialServiceProviderXlsxTemplateNodeConnection,
  financialserviceproviderxlsxreportSet: FinancialServiceProviderXlsxReportNodeConnection,
  deliveryMechanismsPerPaymentPlan: DeliveryMechanismNodeConnection,
  paymentSet: PaymentNodeConnection,
  fullName?: Maybe<Scalars['String']>,
};


export type FinancialServiceProviderNodeXlsxTemplatesArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type FinancialServiceProviderNodeFinancialserviceproviderxlsxreportSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type FinancialServiceProviderNodeDeliveryMechanismsPerPaymentPlanArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type FinancialServiceProviderNodePaymentSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};

export type FinancialServiceProviderNodeConnection = {
   __typename?: 'FinancialServiceProviderNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<FinancialServiceProviderNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type FinancialServiceProviderNodeEdge = {
   __typename?: 'FinancialServiceProviderNodeEdge',
  node?: Maybe<FinancialServiceProviderNode>,
  cursor: Scalars['String'],
};

export type FinancialServiceProviderXlsxReportNode = Node & {
   __typename?: 'FinancialServiceProviderXlsxReportNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  financialServiceProvider: FinancialServiceProviderNode,
  status?: Maybe<Scalars['Int']>,
  reportUrl?: Maybe<Scalars['String']>,
};

export type FinancialServiceProviderXlsxReportNodeConnection = {
   __typename?: 'FinancialServiceProviderXlsxReportNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<FinancialServiceProviderXlsxReportNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type FinancialServiceProviderXlsxReportNodeEdge = {
   __typename?: 'FinancialServiceProviderXlsxReportNodeEdge',
  node?: Maybe<FinancialServiceProviderXlsxReportNode>,
  cursor: Scalars['String'],
};

export type FinancialServiceProviderXlsxTemplateNode = Node & {
   __typename?: 'FinancialServiceProviderXlsxTemplateNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  createdBy?: Maybe<UserNode>,
  name: Scalars['String'],
  columns?: Maybe<Array<Maybe<Scalars['String']>>>,
  coreFields: Array<Scalars['String']>,
  financialServiceProviders: FinancialServiceProviderNodeConnection,
};


export type FinancialServiceProviderXlsxTemplateNodeFinancialServiceProvidersArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};

export type FinancialServiceProviderXlsxTemplateNodeConnection = {
   __typename?: 'FinancialServiceProviderXlsxTemplateNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<FinancialServiceProviderXlsxTemplateNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type FinancialServiceProviderXlsxTemplateNodeEdge = {
   __typename?: 'FinancialServiceProviderXlsxTemplateNodeEdge',
  node?: Maybe<FinancialServiceProviderXlsxTemplateNode>,
  cursor: Scalars['String'],
};

export type FinishPaymentVerificationPlan = {
   __typename?: 'FinishPaymentVerificationPlan',
  paymentPlan?: Maybe<GenericPaymentPlanNode>,
};


export type FspChoice = {
   __typename?: 'FspChoice',
  id?: Maybe<Scalars['String']>,
  name?: Maybe<Scalars['String']>,
};

export type FspChoices = {
   __typename?: 'FspChoices',
  deliveryMechanism?: Maybe<Scalars['String']>,
  fsps?: Maybe<Array<Maybe<FspChoice>>>,
};

export type FspToDeliveryMechanismMappingInput = {
  fspId: Scalars['ID'],
  deliveryMechanism: Scalars['String'],
  order: Scalars['Int'],
};

export type FullListArguments = {
  excludedAdminAreas?: Maybe<Array<Maybe<Scalars['String']>>>,
};

export type GenericPaymentNode = {
   __typename?: 'GenericPaymentNode',
  id?: Maybe<Scalars['String']>,
  objType?: Maybe<Scalars['String']>,
  unicefId?: Maybe<Scalars['String']>,
  currency?: Maybe<Scalars['String']>,
  deliveredQuantity?: Maybe<Scalars['Float']>,
  deliveredQuantityUsd?: Maybe<Scalars['Float']>,
  household?: Maybe<HouseholdNode>,
};

export type GenericPaymentPlanNode = {
   __typename?: 'GenericPaymentPlanNode',
  id?: Maybe<Scalars['String']>,
  objType?: Maybe<Scalars['String']>,
  paymentVerificationSummary?: Maybe<PaymentVerificationSummaryNode>,
  availablePaymentRecordsCount?: Maybe<Scalars['Int']>,
  verificationPlans?: Maybe<PaymentVerificationPlanNodeConnection>,
  statusDate?: Maybe<Scalars['DateTime']>,
  status?: Maybe<Scalars['String']>,
  bankReconciliationSuccess?: Maybe<Scalars['Int']>,
  bankReconciliationError?: Maybe<Scalars['Int']>,
  deliveryType?: Maybe<Scalars['String']>,
  totalNumberOfHouseholds?: Maybe<Scalars['Int']>,
  currency?: Maybe<Scalars['String']>,
  totalDeliveredQuantity?: Maybe<Scalars['Float']>,
  totalEntitledQuantity?: Maybe<Scalars['Float']>,
  totalUndeliveredQuantity?: Maybe<Scalars['Float']>,
  canCreatePaymentVerificationPlan?: Maybe<Scalars['Boolean']>,
};


export type GenericPaymentPlanNodeVerificationPlansArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  programId?: Maybe<Scalars['String']>
};


export type GetAccountabilityCommunicationMessageSampleSizeInput = {
  households?: Maybe<Array<Maybe<Scalars['ID']>>>,
  targetPopulation?: Maybe<Scalars['ID']>,
  registrationDataImport?: Maybe<Scalars['ID']>,
  samplingType: SamplingChoices,
  fullListArguments?: Maybe<AccountabilityFullListArguments>,
  randomSamplingArguments?: Maybe<AccountabilityRandomSamplingArguments>,
};

export type GetCashplanVerificationSampleSizeInput = {
  cashOrPaymentPlanId?: Maybe<Scalars['ID']>,
  paymentVerificationPlanId?: Maybe<Scalars['ID']>,
  sampling: Scalars['String'],
  verificationChannel: Scalars['String'],
  businessAreaSlug: Scalars['String'],
  fullListArguments?: Maybe<FullListArguments>,
  randomSamplingArguments?: Maybe<RandomSamplingArguments>,
  rapidProArguments?: Maybe<RapidProArguments>,
};

export type GetCashplanVerificationSampleSizeObject = {
   __typename?: 'GetCashplanVerificationSampleSizeObject',
  paymentRecordCount?: Maybe<Scalars['Int']>,
  sampleSize?: Maybe<Scalars['Int']>,
};

export type GetCommunicationMessageSampleSizeNode = {
   __typename?: 'GetCommunicationMessageSampleSizeNode',
  numberOfRecipients?: Maybe<Scalars['Int']>,
  sampleSize?: Maybe<Scalars['Int']>,
};

export type GrievanceComplaintTicketExtras = {
  household?: Maybe<Scalars['ID']>,
  individual?: Maybe<Scalars['ID']>,
  paymentRecord?: Maybe<Array<Maybe<Scalars['ID']>>>,
};

export type GrievanceDocumentInput = {
  name: Scalars['String'],
  file: Scalars['Upload'],
};

export type GrievanceDocumentNode = Node & {
   __typename?: 'GrievanceDocumentNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  name?: Maybe<Scalars['String']>,
  createdBy?: Maybe<UserNode>,
  grievanceTicket?: Maybe<GrievanceTicketNode>,
  fileSize?: Maybe<Scalars['Int']>,
  contentType: Scalars['String'],
  filePath?: Maybe<Scalars['String']>,
  fileName?: Maybe<Scalars['String']>,
};

export type GrievanceDocumentNodeConnection = {
   __typename?: 'GrievanceDocumentNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<GrievanceDocumentNodeEdge>>,
};

export type GrievanceDocumentNodeEdge = {
   __typename?: 'GrievanceDocumentNodeEdge',
  node?: Maybe<GrievanceDocumentNode>,
  cursor: Scalars['String'],
};

export type GrievanceDocumentUpdateInput = {
  id: Scalars['ID'],
  name?: Maybe<Scalars['String']>,
  file?: Maybe<Scalars['Upload']>,
};

export type GrievanceStatusChangeMutation = {
   __typename?: 'GrievanceStatusChangeMutation',
  grievanceTicket?: Maybe<GrievanceTicketNode>,
};

export type GrievanceTicketNode = Node & {
   __typename?: 'GrievanceTicketNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  version: Scalars['BigInt'],
  unicefId?: Maybe<Scalars['String']>,
  userModified?: Maybe<Scalars['DateTime']>,
  lastNotificationSent?: Maybe<Scalars['DateTime']>,
  createdBy?: Maybe<UserNode>,
  assignedTo?: Maybe<UserNode>,
  status: Scalars['Int'],
  category: Scalars['Int'],
  issueType?: Maybe<Scalars['Int']>,
  description: Scalars['String'],
  admin2?: Maybe<AreaNode>,
  area: Scalars['String'],
  language: Scalars['String'],
  consent: Scalars['Boolean'],
  businessArea: UserBusinessAreaNode,
  linkedTickets?: Maybe<Array<Maybe<GrievanceTicketNode>>>,
  registrationDataImport?: Maybe<RegistrationDataImportNode>,
  extras: Scalars['JSONString'],
  ignored: Scalars['Boolean'],
  householdUnicefId?: Maybe<Scalars['String']>,
  priority?: Maybe<Scalars['Int']>,
  urgency?: Maybe<Scalars['Int']>,
  partner?: Maybe<PartnerType>,
  programs?: Maybe<Array<Maybe<ProgramNode>>>,
  comments?: Maybe<Scalars['String']>,
  ticketNotes: TicketNoteNodeConnection,
  complaintTicketDetails?: Maybe<TicketComplaintDetailsNode>,
  sensitiveTicketDetails?: Maybe<TicketSensitiveDetailsNode>,
  householdDataUpdateTicketDetails?: Maybe<TicketHouseholdDataUpdateDetailsNode>,
  individualDataUpdateTicketDetails?: Maybe<TicketIndividualDataUpdateDetailsNode>,
  addIndividualTicketDetails?: Maybe<TicketAddIndividualDetailsNode>,
  deleteIndividualTicketDetails?: Maybe<TicketDeleteIndividualDetailsNode>,
  deleteHouseholdTicketDetails?: Maybe<TicketDeleteHouseholdDetailsNode>,
  systemFlaggingTicketDetails?: Maybe<TicketSystemFlaggingDetailsNode>,
  needsAdjudicationTicketDetails?: Maybe<TicketNeedsAdjudicationDetailsNode>,
  paymentVerificationTicketDetails?: Maybe<TicketPaymentVerificationDetailsNode>,
  positiveFeedbackTicketDetails?: Maybe<TicketPositiveFeedbackDetailsNode>,
  negativeFeedbackTicketDetails?: Maybe<TicketNegativeFeedbackDetailsNode>,
  referralTicketDetails?: Maybe<TicketReferralDetailsNode>,
  supportDocuments: GrievanceDocumentNodeConnection,
  feedback?: Maybe<FeedbackNode>,
  household?: Maybe<HouseholdNode>,
  individual?: Maybe<IndividualNode>,
  paymentRecord?: Maybe<PaymentRecordAndPaymentNode>,
  admin?: Maybe<Scalars['String']>,
  existingTickets?: Maybe<Array<Maybe<GrievanceTicketNode>>>,
  relatedTickets?: Maybe<Array<Maybe<GrievanceTicketNode>>>,
  totalDays?: Maybe<Scalars['String']>,
  documentation?: Maybe<Array<Maybe<GrievanceDocumentNode>>>,
};


export type GrievanceTicketNodeTicketNotesArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type GrievanceTicketNodeSupportDocumentsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};

export type GrievanceTicketNodeConnection = {
   __typename?: 'GrievanceTicketNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<GrievanceTicketNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type GrievanceTicketNodeEdge = {
   __typename?: 'GrievanceTicketNodeEdge',
  node?: Maybe<GrievanceTicketNode>,
  cursor: Scalars['String'],
};

export type GroupAttributeNode = {
   __typename?: 'GroupAttributeNode',
  id: Scalars['UUID'],
  name: Scalars['String'],
  label: Scalars['JSONString'],
  flexAttributes?: Maybe<Array<Maybe<FieldAttributeNode>>>,
  labelEn?: Maybe<Scalars['String']>,
};


export type GroupAttributeNodeFlexAttributesArgs = {
  flexField?: Maybe<Scalars['Boolean']>
};

export enum HouseholdCollectIndividualData {
  A = 'A_',
  A_2 = 'A_2',
  A_1 = 'A_1',
  A_3 = 'A_3',
  A_0 = 'A_0'
}

export type HouseholdDataChangeApproveMutation = {
   __typename?: 'HouseholdDataChangeApproveMutation',
  grievanceTicket?: Maybe<GrievanceTicketNode>,
};

export type HouseholdDataUpdateIssueTypeExtras = {
  household: Scalars['ID'],
  householdData: HouseholdUpdateDataObjectType,
};

export type HouseholdDeleteIssueTypeExtras = {
  household: Scalars['ID'],
};

export type HouseholdNode = Node & {
   __typename?: 'HouseholdNode',
  id: Scalars['ID'],
  size?: Maybe<Scalars['Int']>,
  headOfHousehold: IndividualNode,
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  isRemoved: Scalars['Boolean'],
  removedDate?: Maybe<Scalars['DateTime']>,
  lastSyncAt?: Maybe<Scalars['DateTime']>,
  version: Scalars['BigInt'],
  unicefId?: Maybe<Scalars['String']>,
  withdrawn: Scalars['Boolean'],
  withdrawnDate?: Maybe<Scalars['DateTime']>,
  consentSign: Scalars['String'],
  consent?: Maybe<Scalars['Boolean']>,
  consentSharing?: Maybe<Array<Maybe<Scalars['String']>>>,
  residenceStatus: HouseholdResidenceStatus,
  countryOrigin?: Maybe<Scalars['String']>,
  country?: Maybe<Scalars['String']>,
  address: Scalars['String'],
  zipCode?: Maybe<Scalars['String']>,
  adminArea?: Maybe<AreaNode>,
  admin1?: Maybe<AreaNode>,
  admin2?: Maybe<AreaNode>,
  admin3?: Maybe<AreaNode>,
  admin4?: Maybe<AreaNode>,
  geopoint?: Maybe<Scalars['GeoJSON']>,
  representatives: IndividualNodeConnection,
  femaleAgeGroup05Count?: Maybe<Scalars['Int']>,
  femaleAgeGroup611Count?: Maybe<Scalars['Int']>,
  femaleAgeGroup1217Count?: Maybe<Scalars['Int']>,
  femaleAgeGroup1859Count?: Maybe<Scalars['Int']>,
  femaleAgeGroup60Count?: Maybe<Scalars['Int']>,
  pregnantCount?: Maybe<Scalars['Int']>,
  maleAgeGroup05Count?: Maybe<Scalars['Int']>,
  maleAgeGroup611Count?: Maybe<Scalars['Int']>,
  maleAgeGroup1217Count?: Maybe<Scalars['Int']>,
  maleAgeGroup1859Count?: Maybe<Scalars['Int']>,
  maleAgeGroup60Count?: Maybe<Scalars['Int']>,
  femaleAgeGroup05DisabledCount?: Maybe<Scalars['Int']>,
  femaleAgeGroup611DisabledCount?: Maybe<Scalars['Int']>,
  femaleAgeGroup1217DisabledCount?: Maybe<Scalars['Int']>,
  femaleAgeGroup1859DisabledCount?: Maybe<Scalars['Int']>,
  femaleAgeGroup60DisabledCount?: Maybe<Scalars['Int']>,
  maleAgeGroup05DisabledCount?: Maybe<Scalars['Int']>,
  maleAgeGroup611DisabledCount?: Maybe<Scalars['Int']>,
  maleAgeGroup1217DisabledCount?: Maybe<Scalars['Int']>,
  maleAgeGroup1859DisabledCount?: Maybe<Scalars['Int']>,
  maleAgeGroup60DisabledCount?: Maybe<Scalars['Int']>,
  childrenCount?: Maybe<Scalars['Int']>,
  maleChildrenCount?: Maybe<Scalars['Int']>,
  femaleChildrenCount?: Maybe<Scalars['Int']>,
  childrenDisabledCount?: Maybe<Scalars['Int']>,
  maleChildrenDisabledCount?: Maybe<Scalars['Int']>,
  femaleChildrenDisabledCount?: Maybe<Scalars['Int']>,
  registrationDataImport?: Maybe<RegistrationDataImportNode>,
  programs: ProgramNodeConnection,
  returnee?: Maybe<Scalars['Boolean']>,
  flexFields?: Maybe<Scalars['FlexFieldsScalar']>,
  firstRegistrationDate: Scalars['DateTime'],
  lastRegistrationDate: Scalars['DateTime'],
  fchildHoh?: Maybe<Scalars['Boolean']>,
  childHoh?: Maybe<Scalars['Boolean']>,
  businessArea: UserBusinessAreaNode,
  start?: Maybe<Scalars['DateTime']>,
  deviceid: Scalars['String'],
  nameEnumerator: Scalars['String'],
  orgEnumerator: HouseholdOrgEnumerator,
  orgNameEnumerator: Scalars['String'],
  village: Scalars['String'],
  registrationMethod: HouseholdRegistrationMethod,
  collectIndividualData: HouseholdCollectIndividualData,
  currency?: Maybe<Scalars['String']>,
  unhcrId: Scalars['String'],
  userFields: Scalars['JSONString'],
  koboAssetId: Scalars['String'],
  rowId?: Maybe<Scalars['Int']>,
  registrationId?: Maybe<Scalars['Int']>,
  totalCashReceivedUsd?: Maybe<Scalars['Decimal']>,
  totalCashReceived?: Maybe<Scalars['Decimal']>,
  familyId?: Maybe<Scalars['String']>,
  program?: Maybe<ProgramNode>,
  copiedFrom?: Maybe<HouseholdNode>,
  originUnicefId?: Maybe<Scalars['String']>,
  copiedTo: HouseholdNodeConnection,
  individualsAndRoles: Array<IndividualRoleInHouseholdNode>,
  individuals?: Maybe<IndividualNodeConnection>,
  paymentrecordSet: PaymentRecordNodeConnection,
  paymentSet: PaymentNodeConnection,
  complaintTicketDetails: TicketComplaintDetailsNodeConnection,
  sensitiveTicketDetails: TicketSensitiveDetailsNodeConnection,
  householdDataUpdateTicketDetails: TicketHouseholdDataUpdateDetailsNodeConnection,
  addIndividualTicketDetails: TicketAddIndividualDetailsNodeConnection,
  deleteHouseholdTicketDetails: TicketDeleteHouseholdDetailsNodeConnection,
  positiveFeedbackTicketDetails: TicketPositiveFeedbackDetailsNodeConnection,
  negativeFeedbackTicketDetails: TicketNegativeFeedbackDetailsNodeConnection,
  referralTicketDetails: TicketReferralDetailsNodeConnection,
  targetPopulations: TargetPopulationNodeConnection,
  selections: Array<HouseholdSelectionNode>,
  messages: CommunicationMessageNodeConnection,
  feedbacks: FeedbackNodeConnection,
  surveys: SurveyNodeConnection,
  selection?: Maybe<HouseholdSelectionNode>,
  sanctionListPossibleMatch?: Maybe<Scalars['Boolean']>,
  sanctionListConfirmedMatch?: Maybe<Scalars['Boolean']>,
  hasDuplicates?: Maybe<Scalars['Boolean']>,
  adminAreaTitle?: Maybe<Scalars['String']>,
  status?: Maybe<Scalars['String']>,
  programsWithDeliveredQuantity?: Maybe<Array<Maybe<ProgramsWithDeliveredQuantityNode>>>,
  activeIndividualsCount?: Maybe<Scalars['Int']>,
};


export type HouseholdNodeRepresentativesArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type HouseholdNodeProgramsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  name?: Maybe<Scalars['String']>
};


export type HouseholdNodeCopiedToArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type HouseholdNodeIndividualsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  household_Id?: Maybe<Scalars['UUID']>,
  businessArea?: Maybe<Scalars['String']>,
  fullName?: Maybe<Scalars['String']>,
  fullName_Startswith?: Maybe<Scalars['String']>,
  fullName_Endswith?: Maybe<Scalars['String']>,
  sex?: Maybe<Array<Maybe<Scalars['String']>>>,
  household_AdminArea?: Maybe<Scalars['ID']>,
  withdrawn?: Maybe<Scalars['Boolean']>,
  age?: Maybe<Scalars['String']>,
  programs?: Maybe<Array<Maybe<Scalars['ID']>>>,
  search?: Maybe<Scalars['String']>,
  lastRegistrationDate?: Maybe<Scalars['String']>,
  admin2?: Maybe<Array<Maybe<Scalars['ID']>>>,
  status?: Maybe<Array<Maybe<Scalars['String']>>>,
  excludedId?: Maybe<Scalars['String']>,
  flags?: Maybe<Array<Maybe<Scalars['String']>>>,
  orderBy?: Maybe<Scalars['String']>
};


export type HouseholdNodePaymentrecordSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type HouseholdNodePaymentSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type HouseholdNodeComplaintTicketDetailsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type HouseholdNodeSensitiveTicketDetailsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type HouseholdNodeHouseholdDataUpdateTicketDetailsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type HouseholdNodeAddIndividualTicketDetailsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type HouseholdNodeDeleteHouseholdTicketDetailsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type HouseholdNodePositiveFeedbackTicketDetailsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type HouseholdNodeNegativeFeedbackTicketDetailsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type HouseholdNodeReferralTicketDetailsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type HouseholdNodeTargetPopulationsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  program?: Maybe<Scalars['ID']>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_Lte?: Maybe<Scalars['DateTime']>,
  createdAt_Gte?: Maybe<Scalars['DateTime']>,
  updatedAt?: Maybe<Scalars['DateTime']>,
  updatedAt_Lte?: Maybe<Scalars['DateTime']>,
  updatedAt_Gte?: Maybe<Scalars['DateTime']>,
  status?: Maybe<Scalars['String']>,
  households?: Maybe<Array<Maybe<Scalars['ID']>>>,
  name?: Maybe<Scalars['String']>,
  createdByName?: Maybe<Scalars['String']>,
  totalHouseholdsCountMin?: Maybe<Scalars['Int']>,
  totalHouseholdsCountMax?: Maybe<Scalars['Int']>,
  totalIndividualsCountMin?: Maybe<Scalars['Int']>,
  totalIndividualsCountMax?: Maybe<Scalars['Int']>,
  businessArea?: Maybe<Scalars['String']>,
  createdAtRange?: Maybe<Scalars['String']>,
  paymentPlanApplicable?: Maybe<Scalars['Boolean']>,
  orderBy?: Maybe<Scalars['String']>
};


export type HouseholdNodeMessagesArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type HouseholdNodeFeedbacksArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type HouseholdNodeSurveysArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};

export type HouseholdNodeConnection = {
   __typename?: 'HouseholdNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<HouseholdNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  individualsCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type HouseholdNodeEdge = {
   __typename?: 'HouseholdNodeEdge',
  node?: Maybe<HouseholdNode>,
  cursor: Scalars['String'],
};

export enum HouseholdOrgEnumerator {
  A = 'A_',
  Partner = 'PARTNER',
  Unicef = 'UNICEF'
}

export enum HouseholdRegistrationMethod {
  A = 'A_',
  Community = 'COMMUNITY',
  HhRegistration = 'HH_REGISTRATION'
}

export enum HouseholdResidenceStatus {
  A = 'A_',
  Idp = 'IDP',
  Refugee = 'REFUGEE',
  OthersOfConcern = 'OTHERS_OF_CONCERN',
  Host = 'HOST',
  NonHost = 'NON_HOST'
}

export type HouseholdSelectionNode = {
   __typename?: 'HouseholdSelectionNode',
  id: Scalars['UUID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  household: HouseholdNode,
  targetPopulation: TargetPopulationNode,
  vulnerabilityScore?: Maybe<Scalars['Float']>,
};

export type HouseholdUpdateDataObjectType = {
  adminAreaTitle?: Maybe<Scalars['String']>,
  status?: Maybe<Scalars['String']>,
  consent?: Maybe<Scalars['Boolean']>,
  consentSharing?: Maybe<Array<Maybe<Scalars['String']>>>,
  residenceStatus?: Maybe<Scalars['String']>,
  countryOrigin?: Maybe<Scalars['String']>,
  country?: Maybe<Scalars['String']>,
  size?: Maybe<Scalars['Int']>,
  address?: Maybe<Scalars['String']>,
  femaleAgeGroup05Count?: Maybe<Scalars['Int']>,
  femaleAgeGroup611Count?: Maybe<Scalars['Int']>,
  femaleAgeGroup1217Count?: Maybe<Scalars['Int']>,
  femaleAgeGroup1859Count?: Maybe<Scalars['Int']>,
  femaleAgeGroup60Count?: Maybe<Scalars['Int']>,
  pregnantCount?: Maybe<Scalars['Int']>,
  maleAgeGroup05Count?: Maybe<Scalars['Int']>,
  maleAgeGroup611Count?: Maybe<Scalars['Int']>,
  maleAgeGroup1217Count?: Maybe<Scalars['Int']>,
  maleAgeGroup1859Count?: Maybe<Scalars['Int']>,
  maleAgeGroup60Count?: Maybe<Scalars['Int']>,
  femaleAgeGroup05DisabledCount?: Maybe<Scalars['Int']>,
  femaleAgeGroup611DisabledCount?: Maybe<Scalars['Int']>,
  femaleAgeGroup1217DisabledCount?: Maybe<Scalars['Int']>,
  femaleAgeGroup1859DisabledCount?: Maybe<Scalars['Int']>,
  femaleAgeGroup60DisabledCount?: Maybe<Scalars['Int']>,
  maleAgeGroup05DisabledCount?: Maybe<Scalars['Int']>,
  maleAgeGroup611DisabledCount?: Maybe<Scalars['Int']>,
  maleAgeGroup1217DisabledCount?: Maybe<Scalars['Int']>,
  maleAgeGroup1859DisabledCount?: Maybe<Scalars['Int']>,
  maleAgeGroup60DisabledCount?: Maybe<Scalars['Int']>,
  returnee?: Maybe<Scalars['Boolean']>,
  fchildHoh?: Maybe<Scalars['Boolean']>,
  childHoh?: Maybe<Scalars['Boolean']>,
  start?: Maybe<Scalars['DateTime']>,
  end?: Maybe<Scalars['DateTime']>,
  nameEnumerator?: Maybe<Scalars['String']>,
  orgEnumerator?: Maybe<Scalars['String']>,
  orgNameEnumerator?: Maybe<Scalars['String']>,
  village?: Maybe<Scalars['String']>,
  registrationMethod?: Maybe<Scalars['String']>,
  collectIndividualData?: Maybe<Scalars['String']>,
  currency?: Maybe<Scalars['String']>,
  unhcrId?: Maybe<Scalars['String']>,
  flexFields?: Maybe<Scalars['Arg']>,
};

export enum ImportDataDataType {
  Xlsx = 'XLSX',
  Json = 'JSON',
  Flex = 'FLEX',
  Diia = 'DIIA'
}

export type ImportDataNode = Node & {
   __typename?: 'ImportDataNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  status: ImportDataStatus,
  businessAreaSlug: Scalars['String'],
  file?: Maybe<Scalars['String']>,
  dataType: ImportDataDataType,
  numberOfHouseholds?: Maybe<Scalars['Int']>,
  numberOfIndividuals?: Maybe<Scalars['Int']>,
  error: Scalars['String'],
  validationErrors: Scalars['String'],
  createdById?: Maybe<Scalars['UUID']>,
  registrationDataImport?: Maybe<RegistrationDataImportDatahubNode>,
  koboimportdata?: Maybe<KoboImportDataNode>,
  xlsxValidationErrors?: Maybe<Array<Maybe<XlsxRowErrorNode>>>,
};

export enum ImportDataStatus {
  Pending = 'PENDING',
  Running = 'RUNNING',
  Finished = 'FINISHED',
  Error = 'ERROR',
  ValidationError = 'VALIDATION_ERROR'
}

export type ImportedDocumentNode = Node & {
   __typename?: 'ImportedDocumentNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  documentNumber: Scalars['String'],
  photo?: Maybe<Scalars['String']>,
  individual: ImportedIndividualNode,
  type: ImportedDocumentTypeNode,
  country?: Maybe<Scalars['String']>,
  docDate?: Maybe<Scalars['Date']>,
  issuanceDate?: Maybe<Scalars['Date']>,
  expiryDate?: Maybe<Scalars['Date']>,
};

export type ImportedDocumentNodeConnection = {
   __typename?: 'ImportedDocumentNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<ImportedDocumentNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type ImportedDocumentNodeEdge = {
   __typename?: 'ImportedDocumentNodeEdge',
  node?: Maybe<ImportedDocumentNode>,
  cursor: Scalars['String'],
};

export type ImportedDocumentTypeNode = {
   __typename?: 'ImportedDocumentTypeNode',
  id: Scalars['UUID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  label: Scalars['String'],
  key: Scalars['String'],
  isIdentityDocument: Scalars['Boolean'],
  documents: ImportedDocumentNodeConnection,
};


export type ImportedDocumentTypeNodeDocumentsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};

export enum ImportedHouseholdCollectIndividualData {
  A = 'A_',
  A_2 = 'A_2',
  A_1 = 'A_1',
  A_0 = 'A_0'
}

export enum ImportedHouseholdConsentSharing {
  A = 'A_',
  GovernmentPartner = 'GOVERNMENT_PARTNER',
  HumanitarianPartner = 'HUMANITARIAN_PARTNER',
  PrivatePartner = 'PRIVATE_PARTNER',
  Unicef = 'UNICEF'
}

export enum ImportedHouseholdCurrency {
  A = 'A_',
  Aed = 'AED',
  Afn = 'AFN',
  All = 'ALL',
  Amd = 'AMD',
  Ang = 'ANG',
  Aoa = 'AOA',
  Ars = 'ARS',
  Aud = 'AUD',
  Awg = 'AWG',
  Azn = 'AZN',
  Bam = 'BAM',
  Bbd = 'BBD',
  Bdt = 'BDT',
  Bgn = 'BGN',
  Bhd = 'BHD',
  Bif = 'BIF',
  Bmd = 'BMD',
  Bnd = 'BND',
  Bob = 'BOB',
  Bov = 'BOV',
  Brl = 'BRL',
  Bsd = 'BSD',
  Btn = 'BTN',
  Bwp = 'BWP',
  Byn = 'BYN',
  Bzd = 'BZD',
  Cad = 'CAD',
  Cdf = 'CDF',
  Chf = 'CHF',
  Clp = 'CLP',
  Cny = 'CNY',
  Cop = 'COP',
  Crc = 'CRC',
  Cuc = 'CUC',
  Cup = 'CUP',
  Cve = 'CVE',
  Czk = 'CZK',
  Djf = 'DJF',
  Dkk = 'DKK',
  Dop = 'DOP',
  Dzd = 'DZD',
  Egp = 'EGP',
  Ern = 'ERN',
  Etb = 'ETB',
  Eur = 'EUR',
  Fjd = 'FJD',
  Fkp = 'FKP',
  Gbp = 'GBP',
  Gel = 'GEL',
  Ghs = 'GHS',
  Gip = 'GIP',
  Gmd = 'GMD',
  Gnf = 'GNF',
  Gtq = 'GTQ',
  Gyd = 'GYD',
  Hkd = 'HKD',
  Hnl = 'HNL',
  Hrk = 'HRK',
  Htg = 'HTG',
  Huf = 'HUF',
  Idr = 'IDR',
  Ils = 'ILS',
  Inr = 'INR',
  Iqd = 'IQD',
  Irr = 'IRR',
  Isk = 'ISK',
  Jmd = 'JMD',
  Jod = 'JOD',
  Jpy = 'JPY',
  Kes = 'KES',
  Kgs = 'KGS',
  Khr = 'KHR',
  Kmf = 'KMF',
  Kpw = 'KPW',
  Krw = 'KRW',
  Kwd = 'KWD',
  Kyd = 'KYD',
  Kzt = 'KZT',
  Lak = 'LAK',
  Lbp = 'LBP',
  Lkr = 'LKR',
  Lrd = 'LRD',
  Lsl = 'LSL',
  Lyd = 'LYD',
  Mad = 'MAD',
  Mdl = 'MDL',
  Mga = 'MGA',
  Mkd = 'MKD',
  Mmk = 'MMK',
  Mnt = 'MNT',
  Mop = 'MOP',
  Mru = 'MRU',
  Mur = 'MUR',
  Mvr = 'MVR',
  Mwk = 'MWK',
  Mxn = 'MXN',
  Myr = 'MYR',
  Mzn = 'MZN',
  Nad = 'NAD',
  Ngn = 'NGN',
  Nio = 'NIO',
  Nok = 'NOK',
  Npr = 'NPR',
  Nzd = 'NZD',
  Omr = 'OMR',
  Pab = 'PAB',
  Pen = 'PEN',
  Pgk = 'PGK',
  Php = 'PHP',
  Pkr = 'PKR',
  Pln = 'PLN',
  Pyg = 'PYG',
  Qar = 'QAR',
  Ron = 'RON',
  Rsd = 'RSD',
  Rub = 'RUB',
  Rwf = 'RWF',
  Sar = 'SAR',
  Sbd = 'SBD',
  Scr = 'SCR',
  Sdg = 'SDG',
  Sek = 'SEK',
  Sgd = 'SGD',
  Shp = 'SHP',
  Sll = 'SLL',
  Sos = 'SOS',
  Srd = 'SRD',
  Ssp = 'SSP',
  Stn = 'STN',
  Svc = 'SVC',
  Syp = 'SYP',
  Szl = 'SZL',
  Thb = 'THB',
  Tjs = 'TJS',
  Tmt = 'TMT',
  Tnd = 'TND',
  Top = 'TOP',
  Try = 'TRY',
  Ttd = 'TTD',
  Twd = 'TWD',
  Tzs = 'TZS',
  Uah = 'UAH',
  Ugx = 'UGX',
  Usd = 'USD',
  Uyu = 'UYU',
  Uyw = 'UYW',
  Uzs = 'UZS',
  Ves = 'VES',
  Vnd = 'VND',
  Vuv = 'VUV',
  Wst = 'WST',
  Xaf = 'XAF',
  Xag = 'XAG',
  Xau = 'XAU',
  Xcd = 'XCD',
  Xof = 'XOF',
  Xpf = 'XPF',
  Yer = 'YER',
  Zar = 'ZAR',
  Zmw = 'ZMW',
  Zwl = 'ZWL'
}

export type ImportedHouseholdNode = Node & {
   __typename?: 'ImportedHouseholdNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  consentSign: Scalars['String'],
  consent?: Maybe<Scalars['Boolean']>,
  consentSharing: ImportedHouseholdConsentSharing,
  residenceStatus: ImportedHouseholdResidenceStatus,
  countryOrigin?: Maybe<Scalars['String']>,
  size: Scalars['Int'],
  address: Scalars['String'],
  country?: Maybe<Scalars['String']>,
  zipCode?: Maybe<Scalars['String']>,
  adminArea: Scalars['String'],
  adminAreaTitle: Scalars['String'],
  admin1: Scalars['String'],
  admin1Title: Scalars['String'],
  admin2: Scalars['String'],
  admin2Title: Scalars['String'],
  admin3: Scalars['String'],
  admin3Title: Scalars['String'],
  admin4: Scalars['String'],
  admin4Title: Scalars['String'],
  geopoint?: Maybe<Scalars['GeoJSON']>,
  femaleAgeGroup05Count?: Maybe<Scalars['Int']>,
  femaleAgeGroup611Count?: Maybe<Scalars['Int']>,
  femaleAgeGroup1217Count?: Maybe<Scalars['Int']>,
  femaleAgeGroup1859Count?: Maybe<Scalars['Int']>,
  femaleAgeGroup60Count?: Maybe<Scalars['Int']>,
  pregnantCount?: Maybe<Scalars['Int']>,
  maleAgeGroup05Count?: Maybe<Scalars['Int']>,
  maleAgeGroup611Count?: Maybe<Scalars['Int']>,
  maleAgeGroup1217Count?: Maybe<Scalars['Int']>,
  maleAgeGroup1859Count?: Maybe<Scalars['Int']>,
  maleAgeGroup60Count?: Maybe<Scalars['Int']>,
  femaleAgeGroup05DisabledCount?: Maybe<Scalars['Int']>,
  femaleAgeGroup611DisabledCount?: Maybe<Scalars['Int']>,
  femaleAgeGroup1217DisabledCount?: Maybe<Scalars['Int']>,
  femaleAgeGroup1859DisabledCount?: Maybe<Scalars['Int']>,
  femaleAgeGroup60DisabledCount?: Maybe<Scalars['Int']>,
  maleAgeGroup05DisabledCount?: Maybe<Scalars['Int']>,
  maleAgeGroup611DisabledCount?: Maybe<Scalars['Int']>,
  maleAgeGroup1217DisabledCount?: Maybe<Scalars['Int']>,
  maleAgeGroup1859DisabledCount?: Maybe<Scalars['Int']>,
  maleAgeGroup60DisabledCount?: Maybe<Scalars['Int']>,
  headOfHousehold?: Maybe<ImportedIndividualNode>,
  fchildHoh?: Maybe<Scalars['Boolean']>,
  childHoh?: Maybe<Scalars['Boolean']>,
  registrationDataImport: RegistrationDataImportDatahubNode,
  firstRegistrationDate: Scalars['DateTime'],
  lastRegistrationDate: Scalars['DateTime'],
  returnee?: Maybe<Scalars['Boolean']>,
  flexFields?: Maybe<Scalars['Arg']>,
  start?: Maybe<Scalars['DateTime']>,
  deviceid: Scalars['String'],
  nameEnumerator: Scalars['String'],
  orgEnumerator?: Maybe<ImportedHouseholdOrgEnumerator>,
  orgNameEnumerator: Scalars['String'],
  village: Scalars['String'],
  registrationMethod: ImportedHouseholdRegistrationMethod,
  collectIndividualData: ImportedHouseholdCollectIndividualData,
  currency: ImportedHouseholdCurrency,
  unhcrId: Scalars['String'],
  koboSubmissionUuid?: Maybe<Scalars['UUID']>,
  koboAssetId: Scalars['String'],
  koboSubmissionTime?: Maybe<Scalars['DateTime']>,
  rowId?: Maybe<Scalars['Int']>,
  diiaRecId: Scalars['String'],
  enumeratorRecId?: Maybe<Scalars['Int']>,
  misUnicefId?: Maybe<Scalars['String']>,
  programId?: Maybe<Scalars['UUID']>,
  individuals: ImportedIndividualNodeConnection,
  hasDuplicates?: Maybe<Scalars['Boolean']>,
  importId?: Maybe<Scalars['String']>,
};


export type ImportedHouseholdNodeIndividualsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};

export type ImportedHouseholdNodeConnection = {
   __typename?: 'ImportedHouseholdNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<ImportedHouseholdNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type ImportedHouseholdNodeEdge = {
   __typename?: 'ImportedHouseholdNodeEdge',
  node?: Maybe<ImportedHouseholdNode>,
  cursor: Scalars['String'],
};

export enum ImportedHouseholdOrgEnumerator {
  A = 'A_',
  Partner = 'PARTNER',
  Unicef = 'UNICEF'
}

export enum ImportedHouseholdRegistrationMethod {
  A = 'A_',
  Community = 'COMMUNITY',
  HhRegistration = 'HH_REGISTRATION'
}

export enum ImportedHouseholdResidenceStatus {
  A = 'A_',
  Idp = 'IDP',
  Refugee = 'REFUGEE',
  OthersOfConcern = 'OTHERS_OF_CONCERN',
  Host = 'HOST',
  NonHost = 'NON_HOST'
}

export enum ImportedIndividualDeduplicationBatchStatus {
  SimilarInBatch = 'SIMILAR_IN_BATCH',
  DuplicateInBatch = 'DUPLICATE_IN_BATCH',
  UniqueInBatch = 'UNIQUE_IN_BATCH',
  NotProcessed = 'NOT_PROCESSED'
}

export enum ImportedIndividualDeduplicationGoldenRecordStatus {
  Duplicate = 'DUPLICATE',
  NeedsAdjudication = 'NEEDS_ADJUDICATION',
  NotProcessed = 'NOT_PROCESSED',
  Postpone = 'POSTPONE',
  Unique = 'UNIQUE'
}

export enum ImportedIndividualDisability {
  Disabled = 'DISABLED',
  NotDisabled = 'NOT_DISABLED'
}

export type ImportedIndividualIdentityNode = Node & {
   __typename?: 'ImportedIndividualIdentityNode',
  id: Scalars['ID'],
  individual: ImportedIndividualNode,
  documentNumber: Scalars['String'],
  country?: Maybe<Scalars['String']>,
  partner?: Maybe<Scalars['String']>,
};

export type ImportedIndividualIdentityNodeConnection = {
   __typename?: 'ImportedIndividualIdentityNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<ImportedIndividualIdentityNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type ImportedIndividualIdentityNodeEdge = {
   __typename?: 'ImportedIndividualIdentityNodeEdge',
  node?: Maybe<ImportedIndividualIdentityNode>,
  cursor: Scalars['String'],
};

export enum ImportedIndividualMaritalStatus {
  A = 'A_',
  Divorced = 'DIVORCED',
  Married = 'MARRIED',
  Separated = 'SEPARATED',
  Single = 'SINGLE',
  Widowed = 'WIDOWED'
}

export type ImportedIndividualNode = Node & {
   __typename?: 'ImportedIndividualNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  individualId: Scalars['String'],
  photo: Scalars['String'],
  fullName: Scalars['String'],
  givenName: Scalars['String'],
  middleName: Scalars['String'],
  familyName: Scalars['String'],
  relationship?: Maybe<Scalars['String']>,
  sex: ImportedIndividualSex,
  birthDate: Scalars['Date'],
  estimatedBirthDate?: Maybe<Scalars['Boolean']>,
  maritalStatus: ImportedIndividualMaritalStatus,
  phoneNo: Scalars['String'],
  phoneNoValid?: Maybe<Scalars['Boolean']>,
  phoneNoAlternative: Scalars['String'],
  phoneNoAlternativeValid?: Maybe<Scalars['Boolean']>,
  email?: Maybe<Scalars['String']>,
  household?: Maybe<ImportedHouseholdNode>,
  registrationDataImport: RegistrationDataImportDatahubNode,
  disability: ImportedIndividualDisability,
  workStatus: Scalars['String'],
  firstRegistrationDate: Scalars['Date'],
  lastRegistrationDate: Scalars['Date'],
  deduplicationBatchStatus?: Maybe<ImportedIndividualDeduplicationBatchStatus>,
  deduplicationGoldenRecordStatus?: Maybe<ImportedIndividualDeduplicationGoldenRecordStatus>,
  deduplicationBatchResults?: Maybe<Array<Maybe<DeduplicationResultNode>>>,
  deduplicationGoldenRecordResults?: Maybe<Array<Maybe<DeduplicationResultNode>>>,
  flexFields?: Maybe<Scalars['FlexFieldsScalar']>,
  pregnant?: Maybe<Scalars['Boolean']>,
  observedDisability?: Maybe<Array<Maybe<Scalars['String']>>>,
  seeingDisability: Scalars['String'],
  hearingDisability: Scalars['String'],
  physicalDisability: Scalars['String'],
  memoryDisability: Scalars['String'],
  selfcareDisability: Scalars['String'],
  commsDisability: Scalars['String'],
  whoAnswersPhone: Scalars['String'],
  whoAnswersAltPhone: Scalars['String'],
  koboAssetId: Scalars['String'],
  rowId?: Maybe<Scalars['Int']>,
  disabilityCertificatePicture?: Maybe<Scalars['String']>,
  preferredLanguage?: Maybe<Scalars['String']>,
  misUnicefId?: Maybe<Scalars['String']>,
  programId?: Maybe<Scalars['UUID']>,
  ageAtRegistration?: Maybe<Scalars['Int']>,
  importedhousehold?: Maybe<ImportedHouseholdNode>,
  documents: ImportedDocumentNodeConnection,
  identities: ImportedIndividualIdentityNodeConnection,
  role?: Maybe<Scalars['String']>,
  age?: Maybe<Scalars['Int']>,
  importId?: Maybe<Scalars['String']>,
};


export type ImportedIndividualNodeDocumentsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type ImportedIndividualNodeIdentitiesArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};

export type ImportedIndividualNodeConnection = {
   __typename?: 'ImportedIndividualNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<ImportedIndividualNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type ImportedIndividualNodeEdge = {
   __typename?: 'ImportedIndividualNodeEdge',
  node?: Maybe<ImportedIndividualNode>,
  cursor: Scalars['String'],
};

export enum ImportedIndividualSex {
  Male = 'MALE',
  Female = 'FEMALE'
}

export type ImportXlsxPaymentPlanPaymentListMutation = {
   __typename?: 'ImportXLSXPaymentPlanPaymentListMutation',
  paymentPlan?: Maybe<PaymentPlanNode>,
  errors?: Maybe<Array<Maybe<XlsxErrorNode>>>,
};

export type ImportXlsxPaymentPlanPaymentListPerFspMutation = {
   __typename?: 'ImportXLSXPaymentPlanPaymentListPerFSPMutation',
  paymentPlan?: Maybe<PaymentPlanNode>,
  errors?: Maybe<Array<Maybe<XlsxErrorNode>>>,
};

export type ImportXlsxPaymentVerificationPlanFile = {
   __typename?: 'ImportXlsxPaymentVerificationPlanFile',
  paymentPlan?: Maybe<GenericPaymentPlanNode>,
  errors?: Maybe<Array<Maybe<XlsxErrorNode>>>,
};

export type IndividualDataChangeApproveMutation = {
   __typename?: 'IndividualDataChangeApproveMutation',
  grievanceTicket?: Maybe<GrievanceTicketNode>,
};

export type IndividualDataUpdateIssueTypeExtras = {
  individual: Scalars['ID'],
  individualData: IndividualUpdateDataObjectType,
};

export enum IndividualDeduplicationBatchStatus {
  DuplicateInBatch = 'DUPLICATE_IN_BATCH',
  NotProcessed = 'NOT_PROCESSED',
  SimilarInBatch = 'SIMILAR_IN_BATCH',
  UniqueInBatch = 'UNIQUE_IN_BATCH'
}

export enum IndividualDeduplicationGoldenRecordStatus {
  Duplicate = 'DUPLICATE',
  NeedsAdjudication = 'NEEDS_ADJUDICATION',
  NotProcessed = 'NOT_PROCESSED',
  Postpone = 'POSTPONE',
  Unique = 'UNIQUE'
}

export type IndividualDeleteIssueTypeExtras = {
  individual: Scalars['ID'],
};

export enum IndividualDisability {
  Disabled = 'DISABLED',
  NotDisabled = 'NOT_DISABLED'
}

export type IndividualDocumentObjectType = {
  country: Scalars['String'],
  key: Scalars['String'],
  number: Scalars['String'],
  photo?: Maybe<Scalars['Arg']>,
  photoraw?: Maybe<Scalars['Arg']>,
};

export type IndividualIdentityNode = Node & {
   __typename?: 'IndividualIdentityNode',
  id: Scalars['ID'],
  individual: IndividualNode,
  number: Scalars['String'],
  partner?: Maybe<Scalars['String']>,
  country?: Maybe<Scalars['String']>,
  countryIso3?: Maybe<Scalars['String']>,
};

export type IndividualIdentityNodeConnection = {
   __typename?: 'IndividualIdentityNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<IndividualIdentityNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type IndividualIdentityNodeEdge = {
   __typename?: 'IndividualIdentityNodeEdge',
  node?: Maybe<IndividualIdentityNode>,
  cursor: Scalars['String'],
};

export type IndividualIdentityObjectType = {
  country: Scalars['String'],
  partner: Scalars['String'],
  number: Scalars['String'],
};

export enum IndividualMaritalStatus {
  A = 'A_',
  Divorced = 'DIVORCED',
  Married = 'MARRIED',
  Separated = 'SEPARATED',
  Single = 'SINGLE',
  Widowed = 'WIDOWED'
}

export type IndividualNode = Node & {
   __typename?: 'IndividualNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  isRemoved: Scalars['Boolean'],
  removedDate?: Maybe<Scalars['DateTime']>,
  lastSyncAt?: Maybe<Scalars['DateTime']>,
  version: Scalars['BigInt'],
  unicefId?: Maybe<Scalars['String']>,
  duplicate: Scalars['Boolean'],
  duplicateDate?: Maybe<Scalars['DateTime']>,
  withdrawn: Scalars['Boolean'],
  withdrawnDate?: Maybe<Scalars['DateTime']>,
  individualId: Scalars['String'],
  photo?: Maybe<Scalars['String']>,
  fullName: Scalars['String'],
  givenName: Scalars['String'],
  middleName: Scalars['String'],
  familyName: Scalars['String'],
  sex: IndividualSex,
  birthDate: Scalars['Date'],
  estimatedBirthDate?: Maybe<Scalars['Boolean']>,
  maritalStatus: IndividualMaritalStatus,
  phoneNo: Scalars['String'],
  phoneNoValid?: Maybe<Scalars['Boolean']>,
  phoneNoAlternative: Scalars['String'],
  phoneNoAlternativeValid?: Maybe<Scalars['Boolean']>,
  email: Scalars['String'],
  relationship?: Maybe<IndividualRelationship>,
  household?: Maybe<HouseholdNode>,
  registrationDataImport?: Maybe<RegistrationDataImportNode>,
  disability: IndividualDisability,
  workStatus: Scalars['String'],
  firstRegistrationDate: Scalars['Date'],
  lastRegistrationDate: Scalars['Date'],
  flexFields?: Maybe<Scalars['FlexFieldsScalar']>,
  userFields: Scalars['JSONString'],
  enrolledInNutritionProgramme?: Maybe<Scalars['Boolean']>,
  administrationOfRutf?: Maybe<Scalars['Boolean']>,
  deduplicationGoldenRecordStatus: IndividualDeduplicationGoldenRecordStatus,
  deduplicationBatchStatus: IndividualDeduplicationBatchStatus,
  deduplicationGoldenRecordResults?: Maybe<Array<Maybe<DeduplicationResultNode>>>,
  deduplicationBatchResults?: Maybe<Array<Maybe<DeduplicationResultNode>>>,
  importedIndividualId?: Maybe<Scalars['UUID']>,
  sanctionListPossibleMatch: Scalars['Boolean'],
  sanctionListConfirmedMatch: Scalars['Boolean'],
  pregnant?: Maybe<Scalars['Boolean']>,
  observedDisability?: Maybe<Array<Maybe<Scalars['String']>>>,
  seeingDisability: Scalars['String'],
  hearingDisability: Scalars['String'],
  physicalDisability: Scalars['String'],
  memoryDisability: Scalars['String'],
  selfcareDisability: Scalars['String'],
  commsDisability: Scalars['String'],
  whoAnswersPhone: Scalars['String'],
  whoAnswersAltPhone: Scalars['String'],
  businessArea: UserBusinessAreaNode,
  fchildHoh: Scalars['Boolean'],
  childHoh: Scalars['Boolean'],
  koboAssetId: Scalars['String'],
  rowId?: Maybe<Scalars['Int']>,
  registrationId?: Maybe<Scalars['Int']>,
  disabilityCertificatePicture?: Maybe<Scalars['String']>,
  preferredLanguage?: Maybe<Scalars['String']>,
  relationshipConfirmed: Scalars['Boolean'],
  program?: Maybe<ProgramNode>,
  copiedFrom?: Maybe<IndividualNode>,
  originUnicefId?: Maybe<Scalars['String']>,
  ageAtRegistration?: Maybe<Scalars['Int']>,
  representedHouseholds: HouseholdNodeConnection,
  headingHousehold?: Maybe<HouseholdNode>,
  documents: DocumentNodeConnection,
  identities: IndividualIdentityNodeConnection,
  householdsAndRoles: Array<IndividualRoleInHouseholdNode>,
  copiedTo: IndividualNodeConnection,
  bankAccountInfo?: Maybe<BankAccountInfoNode>,
  paymentrecordSet: PaymentRecordNodeConnection,
  collectorPayments: PaymentNodeConnection,
  paymentSet: PaymentNodeConnection,
  complaintTicketDetails: TicketComplaintDetailsNodeConnection,
  sensitiveTicketDetails: TicketSensitiveDetailsNodeConnection,
  individualDataUpdateTicketDetails: TicketIndividualDataUpdateDetailsNodeConnection,
  deleteIndividualTicketDetails: TicketDeleteIndividualDetailsNodeConnection,
  ticketsystemflaggingdetailsSet: TicketSystemFlaggingDetailsNodeConnection,
  ticketGoldenRecords: TicketNeedsAdjudicationDetailsNodeConnection,
  ticketDuplicates: TicketNeedsAdjudicationDetailsNodeConnection,
  ticketSelected: TicketNeedsAdjudicationDetailsNodeConnection,
  positiveFeedbackTicketDetails: TicketPositiveFeedbackDetailsNodeConnection,
  negativeFeedbackTicketDetails: TicketNegativeFeedbackDetailsNodeConnection,
  referralTicketDetails: TicketReferralDetailsNodeConnection,
  feedbacks: FeedbackNodeConnection,
  status?: Maybe<Scalars['String']>,
  role?: Maybe<Scalars['String']>,
  age?: Maybe<Scalars['Int']>,
  sanctionListLastCheck?: Maybe<Scalars['DateTime']>,
  paymentChannels?: Maybe<Array<Maybe<BankAccountInfoNode>>>,
};


export type IndividualNodeRepresentedHouseholdsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type IndividualNodeDocumentsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type IndividualNodeIdentitiesArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type IndividualNodeCopiedToArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type IndividualNodePaymentrecordSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type IndividualNodeCollectorPaymentsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type IndividualNodePaymentSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type IndividualNodeComplaintTicketDetailsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type IndividualNodeSensitiveTicketDetailsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type IndividualNodeIndividualDataUpdateTicketDetailsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type IndividualNodeDeleteIndividualTicketDetailsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type IndividualNodeTicketsystemflaggingdetailsSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type IndividualNodeTicketGoldenRecordsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type IndividualNodeTicketDuplicatesArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type IndividualNodeTicketSelectedArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type IndividualNodePositiveFeedbackTicketDetailsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type IndividualNodeNegativeFeedbackTicketDetailsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type IndividualNodeReferralTicketDetailsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type IndividualNodeFeedbacksArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};

export type IndividualNodeConnection = {
   __typename?: 'IndividualNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<IndividualNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type IndividualNodeEdge = {
   __typename?: 'IndividualNodeEdge',
  node?: Maybe<IndividualNode>,
  cursor: Scalars['String'],
};

export enum IndividualRelationship {
  Unknown = 'UNKNOWN',
  AuntUncle = 'AUNT_UNCLE',
  BrotherSister = 'BROTHER_SISTER',
  Cousin = 'COUSIN',
  DaughterinlawSoninlaw = 'DAUGHTERINLAW_SONINLAW',
  GranddaughterGrandson = 'GRANDDAUGHTER_GRANDSON',
  GrandmotherGrandfather = 'GRANDMOTHER_GRANDFATHER',
  Head = 'HEAD',
  MotherFather = 'MOTHER_FATHER',
  MotherinlawFatherinlaw = 'MOTHERINLAW_FATHERINLAW',
  NephewNiece = 'NEPHEW_NIECE',
  NonBeneficiary = 'NON_BENEFICIARY',
  Other = 'OTHER',
  SisterinlawBrotherinlaw = 'SISTERINLAW_BROTHERINLAW',
  SonDaughter = 'SON_DAUGHTER',
  WifeHusband = 'WIFE_HUSBAND',
  FosterChild = 'FOSTER_CHILD',
  FreeUnion = 'FREE_UNION'
}

export type IndividualRoleInHouseholdNode = {
   __typename?: 'IndividualRoleInHouseholdNode',
  id: Scalars['UUID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  lastSyncAt?: Maybe<Scalars['DateTime']>,
  individual: IndividualNode,
  household: HouseholdNode,
  role?: Maybe<IndividualRoleInHouseholdRole>,
};

export enum IndividualRoleInHouseholdRole {
  NoRole = 'NO_ROLE',
  Alternate = 'ALTERNATE',
  Primary = 'PRIMARY'
}

export enum IndividualSex {
  Male = 'MALE',
  Female = 'FEMALE'
}

export type IndividualUpdateDataObjectType = {
  status?: Maybe<Scalars['String']>,
  fullName?: Maybe<Scalars['String']>,
  givenName?: Maybe<Scalars['String']>,
  middleName?: Maybe<Scalars['String']>,
  familyName?: Maybe<Scalars['String']>,
  sex?: Maybe<Scalars['String']>,
  birthDate?: Maybe<Scalars['Date']>,
  estimatedBirthDate?: Maybe<Scalars['Boolean']>,
  maritalStatus?: Maybe<Scalars['String']>,
  phoneNo?: Maybe<Scalars['String']>,
  phoneNoAlternative?: Maybe<Scalars['String']>,
  email?: Maybe<Scalars['String']>,
  relationship?: Maybe<Scalars['String']>,
  disability?: Maybe<Scalars['String']>,
  workStatus?: Maybe<Scalars['String']>,
  enrolledInNutritionProgramme?: Maybe<Scalars['Boolean']>,
  administrationOfRutf?: Maybe<Scalars['Boolean']>,
  pregnant?: Maybe<Scalars['Boolean']>,
  observedDisability?: Maybe<Array<Maybe<Scalars['String']>>>,
  seeingDisability?: Maybe<Scalars['String']>,
  hearingDisability?: Maybe<Scalars['String']>,
  physicalDisability?: Maybe<Scalars['String']>,
  memoryDisability?: Maybe<Scalars['String']>,
  selfcareDisability?: Maybe<Scalars['String']>,
  commsDisability?: Maybe<Scalars['String']>,
  whoAnswersPhone?: Maybe<Scalars['String']>,
  whoAnswersAltPhone?: Maybe<Scalars['String']>,
  role?: Maybe<Scalars['String']>,
  documents?: Maybe<Array<Maybe<IndividualDocumentObjectType>>>,
  documentsToRemove?: Maybe<Array<Maybe<Scalars['ID']>>>,
  documentsToEdit?: Maybe<Array<Maybe<EditIndividualDocumentObjectType>>>,
  identities?: Maybe<Array<Maybe<IndividualIdentityObjectType>>>,
  identitiesToRemove?: Maybe<Array<Maybe<Scalars['ID']>>>,
  identitiesToEdit?: Maybe<Array<Maybe<EditIndividualIdentityObjectType>>>,
  paymentChannels?: Maybe<Array<Maybe<BankTransferObjectType>>>,
  paymentChannelsToEdit?: Maybe<Array<Maybe<EditBankTransferObjectType>>>,
  paymentChannelsToRemove?: Maybe<Array<Maybe<Scalars['ID']>>>,
  flexFields?: Maybe<Scalars['Arg']>,
};

export type InvalidPaymentVerificationPlan = {
   __typename?: 'InvalidPaymentVerificationPlan',
  paymentPlan?: Maybe<GenericPaymentPlanNode>,
};

export type IssueTypeExtrasInput = {
  householdDataUpdateIssueTypeExtras?: Maybe<HouseholdDataUpdateIssueTypeExtras>,
  individualDataUpdateIssueTypeExtras?: Maybe<IndividualDataUpdateIssueTypeExtras>,
  individualDeleteIssueTypeExtras?: Maybe<IndividualDeleteIssueTypeExtras>,
  householdDeleteIssueTypeExtras?: Maybe<HouseholdDeleteIssueTypeExtras>,
  addIndividualIssueTypeExtras?: Maybe<AddIndividualIssueTypeExtras>,
};

export type IssueTypesObject = {
   __typename?: 'IssueTypesObject',
  category?: Maybe<Scalars['String']>,
  label?: Maybe<Scalars['String']>,
  subCategories?: Maybe<Array<Maybe<ChoiceObject>>>,
};


export type KoboAssetObject = {
   __typename?: 'KoboAssetObject',
  id?: Maybe<Scalars['String']>,
  name?: Maybe<Scalars['String']>,
  sector?: Maybe<Scalars['String']>,
  country?: Maybe<Scalars['String']>,
  assetType?: Maybe<Scalars['String']>,
  dateModified?: Maybe<Scalars['DateTime']>,
  deploymentActive?: Maybe<Scalars['Boolean']>,
  hasDeployment?: Maybe<Scalars['Boolean']>,
  xlsLink?: Maybe<Scalars['String']>,
};

export type KoboAssetObjectConnection = {
   __typename?: 'KoboAssetObjectConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<KoboAssetObjectEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
};

export type KoboAssetObjectEdge = {
   __typename?: 'KoboAssetObjectEdge',
  node?: Maybe<KoboAssetObject>,
  cursor: Scalars['String'],
};

export type KoboErrorNode = {
   __typename?: 'KoboErrorNode',
  header?: Maybe<Scalars['String']>,
  message?: Maybe<Scalars['String']>,
};

export type KoboImportDataNode = Node & {
   __typename?: 'KoboImportDataNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  status: ImportDataStatus,
  businessAreaSlug: Scalars['String'],
  file?: Maybe<Scalars['String']>,
  dataType: ImportDataDataType,
  numberOfHouseholds?: Maybe<Scalars['Int']>,
  numberOfIndividuals?: Maybe<Scalars['Int']>,
  error: Scalars['String'],
  validationErrors: Scalars['String'],
  createdById?: Maybe<Scalars['UUID']>,
  importdataPtr: ImportDataNode,
  koboAssetId: Scalars['String'],
  onlyActiveSubmissions: Scalars['Boolean'],
  koboValidationErrors?: Maybe<Array<Maybe<KoboErrorNode>>>,
};

export type LabelNode = {
   __typename?: 'LabelNode',
  language?: Maybe<Scalars['String']>,
  label?: Maybe<Scalars['String']>,
};

export type LanguageObject = {
   __typename?: 'LanguageObject',
  english?: Maybe<Scalars['String']>,
  code?: Maybe<Scalars['String']>,
};

export type LanguageObjectConnection = {
   __typename?: 'LanguageObjectConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<LanguageObjectEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
};

export type LanguageObjectEdge = {
   __typename?: 'LanguageObjectEdge',
  node?: Maybe<LanguageObject>,
  cursor: Scalars['String'],
};

export type LockTargetPopulationMutation = {
   __typename?: 'LockTargetPopulationMutation',
  targetPopulation?: Maybe<TargetPopulationNode>,
};

export enum LogEntryAction {
  Create = 'CREATE',
  Update = 'UPDATE',
  Delete = 'DELETE',
  SoftDelete = 'SOFT_DELETE'
}

export type LogEntryNode = Node & {
   __typename?: 'LogEntryNode',
  id: Scalars['ID'],
  contentType?: Maybe<ContentTypeObjectType>,
  objectId?: Maybe<Scalars['UUID']>,
  action: LogEntryAction,
  objectRepr: Scalars['String'],
  changes?: Maybe<Scalars['Arg']>,
  user?: Maybe<UserNode>,
  businessArea?: Maybe<UserBusinessAreaNode>,
  programs: ProgramNodeConnection,
  timestamp?: Maybe<Scalars['DateTime']>,
  isUserGenerated?: Maybe<Scalars['Boolean']>,
};


export type LogEntryNodeProgramsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  name?: Maybe<Scalars['String']>
};

export type LogEntryNodeConnection = {
   __typename?: 'LogEntryNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<LogEntryNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type LogEntryNodeEdge = {
   __typename?: 'LogEntryNodeEdge',
  node?: Maybe<LogEntryNode>,
  cursor: Scalars['String'],
};

export type MarkPaymentAsFailedMutation = {
   __typename?: 'MarkPaymentAsFailedMutation',
  payment?: Maybe<PaymentNode>,
};

export type MarkPaymentRecordAsFailedMutation = {
   __typename?: 'MarkPaymentRecordAsFailedMutation',
  paymentRecord?: Maybe<PaymentRecordNode>,
};

export type MergeRegistrationDataImportMutation = {
   __typename?: 'MergeRegistrationDataImportMutation',
  registrationDataImport?: Maybe<RegistrationDataImportNode>,
};

export enum MessageSamplingType {
  FullList = 'FULL_LIST',
  Random = 'RANDOM'
}

export type Mutations = {
   __typename?: 'Mutations',
  createAccountabilityCommunicationMessage?: Maybe<CreateCommunicationMessageMutation>,
  createFeedback?: Maybe<CreateFeedbackMutation>,
  updateFeedback?: Maybe<UpdateFeedbackMutation>,
  createFeedbackMessage?: Maybe<CreateFeedbackMessageMutation>,
  createSurvey?: Maybe<CreateSurveyMutation>,
  exportSurveySample?: Maybe<ExportSurveySampleMutationMutation>,
  createReport?: Maybe<CreateReport>,
  restartCreateReport?: Maybe<RestartCreateReport>,
  createDashboardReport?: Maybe<CreateDashboardReport>,
  createGrievanceTicket?: Maybe<CreateGrievanceTicketMutation>,
  updateGrievanceTicket?: Maybe<UpdateGrievanceTicketMutation>,
  grievanceStatusChange?: Maybe<GrievanceStatusChangeMutation>,
  bulkUpdateGrievanceAssignee?: Maybe<BulkUpdateGrievanceTicketsAssigneesMutation>,
  createTicketNote?: Maybe<CreateTicketNoteMutation>,
  approveIndividualDataChange?: Maybe<IndividualDataChangeApproveMutation>,
  approveHouseholdDataChange?: Maybe<HouseholdDataChangeApproveMutation>,
  approveAddIndividual?: Maybe<SimpleApproveMutation>,
  approveDeleteIndividual?: Maybe<SimpleApproveMutation>,
  approveDeleteHousehold?: Maybe<DeleteHouseholdApproveMutation>,
  approveSystemFlagging?: Maybe<SimpleApproveMutation>,
  approveNeedsAdjudication?: Maybe<NeedsAdjudicationApproveMutation>,
  approvePaymentDetails?: Maybe<PaymentDetailsApproveMutation>,
  reassignRole?: Maybe<ReassignRoleMutation>,
  createPaymentVerificationPlan?: Maybe<CreateVerificationPlanMutation>,
  editPaymentVerificationPlan?: Maybe<EditPaymentVerificationMutation>,
  exportXlsxPaymentVerificationPlanFile?: Maybe<ExportXlsxPaymentVerificationPlanFile>,
  importXlsxPaymentVerificationPlanFile?: Maybe<ImportXlsxPaymentVerificationPlanFile>,
  activatePaymentVerificationPlan?: Maybe<ActivatePaymentVerificationPlan>,
  finishPaymentVerificationPlan?: Maybe<FinishPaymentVerificationPlan>,
  discardPaymentVerificationPlan?: Maybe<DiscardPaymentVerificationPlan>,
  invalidPaymentVerificationPlan?: Maybe<InvalidPaymentVerificationPlan>,
  deletePaymentVerificationPlan?: Maybe<DeletePaymentVerificationPlan>,
  updatePaymentVerificationStatusAndReceivedAmount?: Maybe<UpdatePaymentVerificationStatusAndReceivedAmount>,
  markPaymentRecordAsFailed?: Maybe<MarkPaymentRecordAsFailedMutation>,
  revertMarkPaymentRecordAsFailed?: Maybe<RevertMarkPaymentRecordAsFailedMutation>,
  markPaymentAsFailed?: Maybe<MarkPaymentAsFailedMutation>,
  revertMarkPaymentAsFailed?: Maybe<RevertMarkPaymentAsFailedMutation>,
  updatePaymentVerificationReceivedAndReceivedAmount?: Maybe<UpdatePaymentVerificationReceivedAndReceivedAmount>,
  actionPaymentPlanMutation?: Maybe<ActionPaymentPlanMutation>,
  createPaymentPlan?: Maybe<CreatePaymentPlanMutation>,
  createFollowUpPaymentPlan?: Maybe<CreateFollowUpPaymentPlanMutation>,
  updatePaymentPlan?: Maybe<UpdatePaymentPlanMutation>,
  deletePaymentPlan?: Maybe<DeletePaymentPlanMutation>,
  chooseDeliveryMechanismsForPaymentPlan?: Maybe<ChooseDeliveryMechanismsForPaymentPlanMutation>,
  assignFspToDeliveryMechanism?: Maybe<AssignFspToDeliveryMechanismMutation>,
  exportXlsxPaymentPlanPaymentList?: Maybe<ExportXlsxPaymentPlanPaymentListMutation>,
  exportXlsxPaymentPlanPaymentListPerFsp?: Maybe<ExportXlsxPaymentPlanPaymentListPerFspMutation>,
  importXlsxPaymentPlanPaymentList?: Maybe<ImportXlsxPaymentPlanPaymentListMutation>,
  importXlsxPaymentPlanPaymentListPerFsp?: Maybe<ImportXlsxPaymentPlanPaymentListPerFspMutation>,
  setSteficonRuleOnPaymentPlanPaymentList?: Maybe<SetSteficonRuleOnPaymentPlanPaymentListMutation>,
  excludeHouseholds?: Maybe<ExcludeHouseholdsMutation>,
  exportPdfPaymentPlanSummary?: Maybe<ExportPdfPaymentPlanSummaryMutation>,
  createTargetPopulation?: Maybe<CreateTargetPopulationMutation>,
  updateTargetPopulation?: Maybe<UpdateTargetPopulationMutation>,
  copyTargetPopulation?: Maybe<CopyTargetPopulationMutationPayload>,
  deleteTargetPopulation?: Maybe<DeleteTargetPopulationMutationPayload>,
  lockTargetPopulation?: Maybe<LockTargetPopulationMutation>,
  unlockTargetPopulation?: Maybe<UnlockTargetPopulationMutation>,
  finalizeTargetPopulation?: Maybe<FinalizeTargetPopulationMutation>,
  setSteficonRuleOnTargetPopulation?: Maybe<SetSteficonRuleOnTargetPopulationMutationPayload>,
  targetPopulationRebuild?: Maybe<RebuildTargetPopulationMutation>,
  createProgram?: Maybe<CreateProgram>,
  updateProgram?: Maybe<UpdateProgram>,
  deleteProgram?: Maybe<DeleteProgram>,
  copyProgram?: Maybe<CopyProgram>,
  uploadImportDataXlsxFileAsync?: Maybe<UploadImportDataXlsxFileAsync>,
  deleteRegistrationDataImport?: Maybe<DeleteRegistrationDataImport>,
  registrationXlsxImport?: Maybe<RegistrationXlsxImportMutation>,
  registrationKoboImport?: Maybe<RegistrationKoboImportMutation>,
  saveKoboImportDataAsync?: Maybe<SaveKoboProjectImportDataAsync>,
  mergeRegistrationDataImport?: Maybe<MergeRegistrationDataImportMutation>,
  refuseRegistrationDataImport?: Maybe<RefuseRegistrationDataImportMutation>,
  rerunDedupe?: Maybe<RegistrationDeduplicationMutation>,
  eraseRegistrationDataImport?: Maybe<EraseRegistrationDataImportMutation>,
  checkAgainstSanctionList?: Maybe<CheckAgainstSanctionListMutation>,
};


export type MutationsCreateAccountabilityCommunicationMessageArgs = {
  input: CreateAccountabilityCommunicationMessageInput
};


export type MutationsCreateFeedbackArgs = {
  input: CreateFeedbackInput
};


export type MutationsUpdateFeedbackArgs = {
  input: UpdateFeedbackInput
};


export type MutationsCreateFeedbackMessageArgs = {
  input: CreateFeedbackMessageInput
};


export type MutationsCreateSurveyArgs = {
  input: CreateSurveyInput
};


export type MutationsExportSurveySampleArgs = {
  surveyId: Scalars['ID']
};


export type MutationsCreateReportArgs = {
  reportData: CreateReportInput
};


export type MutationsRestartCreateReportArgs = {
  reportData: RestartCreateReportInput
};


export type MutationsCreateDashboardReportArgs = {
  reportData: CreateDashboardReportInput
};


export type MutationsCreateGrievanceTicketArgs = {
  input: CreateGrievanceTicketInput
};


export type MutationsUpdateGrievanceTicketArgs = {
  input: UpdateGrievanceTicketInput,
  version?: Maybe<Scalars['BigInt']>
};


export type MutationsGrievanceStatusChangeArgs = {
  grievanceTicketId?: Maybe<Scalars['ID']>,
  status?: Maybe<Scalars['Int']>,
  version?: Maybe<Scalars['BigInt']>
};


export type MutationsBulkUpdateGrievanceAssigneeArgs = {
  assignedTo?: Maybe<Scalars['String']>,
  businessAreaSlug: Scalars['String'],
  grievanceTicketUnicefIds?: Maybe<Array<Maybe<Scalars['ID']>>>
};


export type MutationsCreateTicketNoteArgs = {
  noteInput: CreateTicketNoteInput,
  version?: Maybe<Scalars['BigInt']>
};


export type MutationsApproveIndividualDataChangeArgs = {
  approvedDocumentsToCreate?: Maybe<Array<Maybe<Scalars['Int']>>>,
  approvedDocumentsToEdit?: Maybe<Array<Maybe<Scalars['Int']>>>,
  approvedDocumentsToRemove?: Maybe<Array<Maybe<Scalars['Int']>>>,
  approvedIdentitiesToCreate?: Maybe<Array<Maybe<Scalars['Int']>>>,
  approvedIdentitiesToEdit?: Maybe<Array<Maybe<Scalars['Int']>>>,
  approvedIdentitiesToRemove?: Maybe<Array<Maybe<Scalars['Int']>>>,
  approvedPaymentChannelsToCreate?: Maybe<Array<Maybe<Scalars['Int']>>>,
  approvedPaymentChannelsToEdit?: Maybe<Array<Maybe<Scalars['Int']>>>,
  approvedPaymentChannelsToRemove?: Maybe<Array<Maybe<Scalars['Int']>>>,
  flexFieldsApproveData?: Maybe<Scalars['JSONString']>,
  grievanceTicketId: Scalars['ID'],
  individualApproveData?: Maybe<Scalars['JSONString']>,
  version?: Maybe<Scalars['BigInt']>
};


export type MutationsApproveHouseholdDataChangeArgs = {
  flexFieldsApproveData?: Maybe<Scalars['JSONString']>,
  grievanceTicketId: Scalars['ID'],
  householdApproveData?: Maybe<Scalars['JSONString']>,
  version?: Maybe<Scalars['BigInt']>
};


export type MutationsApproveAddIndividualArgs = {
  approveStatus: Scalars['Boolean'],
  grievanceTicketId: Scalars['ID'],
  version?: Maybe<Scalars['BigInt']>
};


export type MutationsApproveDeleteIndividualArgs = {
  approveStatus: Scalars['Boolean'],
  grievanceTicketId: Scalars['ID'],
  version?: Maybe<Scalars['BigInt']>
};


export type MutationsApproveDeleteHouseholdArgs = {
  approveStatus: Scalars['Boolean'],
  grievanceTicketId: Scalars['ID'],
  reasonHhId?: Maybe<Scalars['String']>,
  version?: Maybe<Scalars['BigInt']>
};


export type MutationsApproveSystemFlaggingArgs = {
  approveStatus: Scalars['Boolean'],
  grievanceTicketId: Scalars['ID'],
  version?: Maybe<Scalars['BigInt']>
};


export type MutationsApproveNeedsAdjudicationArgs = {
  grievanceTicketId: Scalars['ID'],
  selectedIndividualId?: Maybe<Scalars['ID']>,
  selectedIndividualIds?: Maybe<Array<Maybe<Scalars['ID']>>>,
  version?: Maybe<Scalars['BigInt']>
};


export type MutationsApprovePaymentDetailsArgs = {
  approveStatus: Scalars['Boolean'],
  grievanceTicketId: Scalars['ID'],
  version?: Maybe<Scalars['BigInt']>
};


export type MutationsReassignRoleArgs = {
  grievanceTicketId: Scalars['ID'],
  householdId: Scalars['ID'],
  householdVersion?: Maybe<Scalars['BigInt']>,
  individualId: Scalars['ID'],
  individualVersion?: Maybe<Scalars['BigInt']>,
  newIndividualId?: Maybe<Scalars['ID']>,
  role: Scalars['String'],
  version?: Maybe<Scalars['BigInt']>
};


export type MutationsCreatePaymentVerificationPlanArgs = {
  input: CreatePaymentVerificationInput,
  version?: Maybe<Scalars['BigInt']>
};


export type MutationsEditPaymentVerificationPlanArgs = {
  input: EditPaymentVerificationInput,
  version?: Maybe<Scalars['BigInt']>
};


export type MutationsExportXlsxPaymentVerificationPlanFileArgs = {
  paymentVerificationPlanId: Scalars['ID']
};


export type MutationsImportXlsxPaymentVerificationPlanFileArgs = {
  file: Scalars['Upload'],
  paymentVerificationPlanId: Scalars['ID']
};


export type MutationsActivatePaymentVerificationPlanArgs = {
  paymentVerificationPlanId: Scalars['ID'],
  version?: Maybe<Scalars['BigInt']>
};


export type MutationsFinishPaymentVerificationPlanArgs = {
  paymentVerificationPlanId: Scalars['ID'],
  version?: Maybe<Scalars['BigInt']>
};


export type MutationsDiscardPaymentVerificationPlanArgs = {
  paymentVerificationPlanId: Scalars['ID'],
  version?: Maybe<Scalars['BigInt']>
};


export type MutationsInvalidPaymentVerificationPlanArgs = {
  paymentVerificationPlanId: Scalars['ID'],
  version?: Maybe<Scalars['BigInt']>
};


export type MutationsDeletePaymentVerificationPlanArgs = {
  paymentVerificationPlanId: Scalars['ID'],
  version?: Maybe<Scalars['BigInt']>
};


export type MutationsUpdatePaymentVerificationStatusAndReceivedAmountArgs = {
  paymentVerificationId: Scalars['ID'],
  receivedAmount: Scalars['Decimal'],
  status?: Maybe<PaymentVerificationStatusForUpdate>,
  version?: Maybe<Scalars['BigInt']>
};


export type MutationsMarkPaymentRecordAsFailedArgs = {
  paymentRecordId: Scalars['ID']
};


export type MutationsRevertMarkPaymentRecordAsFailedArgs = {
  deliveredQuantity: Scalars['Decimal'],
  deliveryDate: Scalars['Date'],
  paymentRecordId: Scalars['ID']
};


export type MutationsMarkPaymentAsFailedArgs = {
  paymentId: Scalars['ID']
};


export type MutationsRevertMarkPaymentAsFailedArgs = {
  deliveredQuantity: Scalars['Decimal'],
  deliveryDate: Scalars['Date'],
  paymentId: Scalars['ID']
};


export type MutationsUpdatePaymentVerificationReceivedAndReceivedAmountArgs = {
  paymentVerificationId: Scalars['ID'],
  received: Scalars['Boolean'],
  receivedAmount: Scalars['Decimal'],
  version?: Maybe<Scalars['BigInt']>
};


export type MutationsActionPaymentPlanMutationArgs = {
  input: ActionPaymentPlanInput
};


export type MutationsCreatePaymentPlanArgs = {
  input: CreatePaymentPlanInput
};


export type MutationsCreateFollowUpPaymentPlanArgs = {
  dispersionEndDate: Scalars['Date'],
  dispersionStartDate: Scalars['Date'],
  paymentPlanId: Scalars['ID']
};


export type MutationsUpdatePaymentPlanArgs = {
  input: UpdatePaymentPlanInput
};


export type MutationsDeletePaymentPlanArgs = {
  paymentPlanId: Scalars['ID']
};


export type MutationsChooseDeliveryMechanismsForPaymentPlanArgs = {
  input: ChooseDeliveryMechanismsForPaymentPlanInput
};


export type MutationsAssignFspToDeliveryMechanismArgs = {
  input: AssignFspToDeliveryMechanismInput
};


export type MutationsExportXlsxPaymentPlanPaymentListArgs = {
  paymentPlanId: Scalars['ID']
};


export type MutationsExportXlsxPaymentPlanPaymentListPerFspArgs = {
  paymentPlanId: Scalars['ID']
};


export type MutationsImportXlsxPaymentPlanPaymentListArgs = {
  file: Scalars['Upload'],
  paymentPlanId: Scalars['ID']
};


export type MutationsImportXlsxPaymentPlanPaymentListPerFspArgs = {
  file: Scalars['Upload'],
  paymentPlanId: Scalars['ID']
};


export type MutationsSetSteficonRuleOnPaymentPlanPaymentListArgs = {
  paymentPlanId: Scalars['ID'],
  steficonRuleId: Scalars['ID']
};


export type MutationsExcludeHouseholdsArgs = {
  excludedHouseholdsIds: Array<Maybe<Scalars['String']>>,
  exclusionReason?: Maybe<Scalars['String']>,
  paymentPlanId: Scalars['ID']
};


export type MutationsExportPdfPaymentPlanSummaryArgs = {
  paymentPlanId: Scalars['ID']
};


export type MutationsCreateTargetPopulationArgs = {
  input: CreateTargetPopulationInput
};


export type MutationsUpdateTargetPopulationArgs = {
  input: UpdateTargetPopulationInput,
  version?: Maybe<Scalars['BigInt']>
};


export type MutationsCopyTargetPopulationArgs = {
  input: CopyTargetPopulationMutationInput
};


export type MutationsDeleteTargetPopulationArgs = {
  input: DeleteTargetPopulationMutationInput
};


export type MutationsLockTargetPopulationArgs = {
  id: Scalars['ID'],
  version?: Maybe<Scalars['BigInt']>
};


export type MutationsUnlockTargetPopulationArgs = {
  id: Scalars['ID'],
  version?: Maybe<Scalars['BigInt']>
};


export type MutationsFinalizeTargetPopulationArgs = {
  id: Scalars['ID'],
  version?: Maybe<Scalars['BigInt']>
};


export type MutationsSetSteficonRuleOnTargetPopulationArgs = {
  input: SetSteficonRuleOnTargetPopulationMutationInput
};


export type MutationsTargetPopulationRebuildArgs = {
  id: Scalars['ID']
};


export type MutationsCreateProgramArgs = {
  programData: CreateProgramInput
};


export type MutationsUpdateProgramArgs = {
  programData?: Maybe<UpdateProgramInput>,
  version?: Maybe<Scalars['BigInt']>
};


export type MutationsDeleteProgramArgs = {
  programId: Scalars['String']
};


export type MutationsCopyProgramArgs = {
  programData: CopyProgramInput
};


export type MutationsUploadImportDataXlsxFileAsyncArgs = {
  businessAreaSlug: Scalars['String'],
  file: Scalars['Upload'],
  programId?: Maybe<Scalars['String']>
};


export type MutationsDeleteRegistrationDataImportArgs = {
  registrationDataImportId: Scalars['String']
};


export type MutationsRegistrationXlsxImportArgs = {
  registrationDataImportData: RegistrationXlsxImportMutationInput
};


export type MutationsRegistrationKoboImportArgs = {
  registrationDataImportData: RegistrationKoboImportMutationInput
};


export type MutationsSaveKoboImportDataAsyncArgs = {
  businessAreaSlug: Scalars['String'],
  onlyActiveSubmissions: Scalars['Boolean'],
  uid: Scalars['Upload']
};


export type MutationsMergeRegistrationDataImportArgs = {
  id: Scalars['ID'],
  version?: Maybe<Scalars['BigInt']>
};


export type MutationsRefuseRegistrationDataImportArgs = {
  id: Scalars['ID'],
  refuseReason?: Maybe<Scalars['String']>,
  version?: Maybe<Scalars['BigInt']>
};


export type MutationsRerunDedupeArgs = {
  registrationDataImportDatahubId: Scalars['ID'],
  version?: Maybe<Scalars['BigInt']>
};


export type MutationsEraseRegistrationDataImportArgs = {
  id: Scalars['ID'],
  version?: Maybe<Scalars['BigInt']>
};


export type MutationsCheckAgainstSanctionListArgs = {
  file: Scalars['Upload']
};

export type NeedsAdjudicationApproveMutation = {
   __typename?: 'NeedsAdjudicationApproveMutation',
  grievanceTicket?: Maybe<GrievanceTicketNode>,
};

export type NegativeFeedbackTicketExtras = {
  household?: Maybe<Scalars['ID']>,
  individual?: Maybe<Scalars['ID']>,
};

export type Node = {
  id: Scalars['ID'],
};

export type PageInfo = {
   __typename?: 'PageInfo',
  hasNextPage: Scalars['Boolean'],
  hasPreviousPage: Scalars['Boolean'],
  startCursor?: Maybe<Scalars['String']>,
  endCursor?: Maybe<Scalars['String']>,
};

export type PageInfoNode = {
   __typename?: 'PageInfoNode',
  startCursor?: Maybe<Scalars['String']>,
  endCursor?: Maybe<Scalars['String']>,
  hasNextPage?: Maybe<Scalars['Boolean']>,
  hasPreviousPage?: Maybe<Scalars['Boolean']>,
};

export type PaginatedCashPlanAndPaymentPlanNode = {
   __typename?: 'PaginatedCashPlanAndPaymentPlanNode',
  pageInfo?: Maybe<PageInfoNode>,
  edges?: Maybe<Array<Maybe<CashPlanAndPaymentPlanEdges>>>,
  totalCount?: Maybe<Scalars['Int']>,
};

export type PaginatedPaymentRecordsAndPaymentsNode = {
   __typename?: 'PaginatedPaymentRecordsAndPaymentsNode',
  pageInfo?: Maybe<PageInfoNode>,
  edges?: Maybe<Array<Maybe<PaymentRecordsAndPaymentsEdges>>>,
  totalCount?: Maybe<Scalars['Int']>,
};

export type PartnerType = {
   __typename?: 'PartnerType',
  id: Scalars['ID'],
  name: Scalars['String'],
  isUn: Scalars['Boolean'],
  userSet: UserNodeConnection,
  individualIdentities: IndividualIdentityNodeConnection,
  grievanceticketSet: GrievanceTicketNodeConnection,
};


export type PartnerTypeUserSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type PartnerTypeIndividualIdentitiesArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type PartnerTypeGrievanceticketSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};

export type PaymentConflictDataNode = {
   __typename?: 'PaymentConflictDataNode',
  paymentPlanId?: Maybe<Scalars['String']>,
  paymentPlanUnicefId?: Maybe<Scalars['String']>,
  paymentPlanStartDate?: Maybe<Scalars['String']>,
  paymentPlanEndDate?: Maybe<Scalars['String']>,
  paymentPlanStatus?: Maybe<Scalars['String']>,
  paymentId?: Maybe<Scalars['String']>,
  paymentUnicefId?: Maybe<Scalars['String']>,
};

export enum PaymentDeliveryType {
  CardlessCashWithdrawal = 'CARDLESS_CASH_WITHDRAWAL',
  Cash = 'CASH',
  CashByFsp = 'CASH_BY_FSP',
  Cheque = 'CHEQUE',
  DepositToCard = 'DEPOSIT_TO_CARD',
  MobileMoney = 'MOBILE_MONEY',
  PrePaidCard = 'PRE_PAID_CARD',
  Referral = 'REFERRAL',
  Transfer = 'TRANSFER',
  TransferToAccount = 'TRANSFER_TO_ACCOUNT',
  Voucher = 'VOUCHER'
}

export type PaymentDetailsApproveMutation = {
   __typename?: 'PaymentDetailsApproveMutation',
  grievanceTicket?: Maybe<GrievanceTicketNode>,
};

export type PaymentHouseholdSnapshotNode = Node & {
   __typename?: 'PaymentHouseholdSnapshotNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  snapshotData: Scalars['JSONString'],
  householdId: Scalars['UUID'],
  payment: PaymentNode,
};

export type PaymentNode = Node & {
   __typename?: 'PaymentNode',
  isRemoved: Scalars['Boolean'],
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  unicefId?: Maybe<Scalars['String']>,
  businessArea: UserBusinessAreaNode,
  status: PaymentStatus,
  statusDate: Scalars['DateTime'],
  household: HouseholdNode,
  headOfHousehold?: Maybe<IndividualNode>,
  deliveryType?: Maybe<PaymentDeliveryType>,
  currency: Scalars['String'],
  entitlementQuantity?: Maybe<Scalars['Float']>,
  entitlementQuantityUsd?: Maybe<Scalars['Float']>,
  deliveredQuantity?: Maybe<Scalars['Float']>,
  deliveredQuantityUsd?: Maybe<Scalars['Float']>,
  deliveryDate?: Maybe<Scalars['DateTime']>,
  transactionReferenceId?: Maybe<Scalars['String']>,
  parent: PaymentPlanNode,
  conflicted: Scalars['Boolean'],
  excluded: Scalars['Boolean'],
  entitlementDate?: Maybe<Scalars['DateTime']>,
  financialServiceProvider?: Maybe<FinancialServiceProviderNode>,
  collector: IndividualNode,
  sourcePayment?: Maybe<PaymentNode>,
  isFollowUp: Scalars['Boolean'],
  reasonForUnsuccessfulPayment?: Maybe<Scalars['String']>,
  program?: Maybe<ProgramNode>,
  orderNumber?: Maybe<Scalars['Int']>,
  tokenNumber?: Maybe<Scalars['Int']>,
  followUps: PaymentNodeConnection,
  householdSnapshot?: Maybe<PaymentHouseholdSnapshotNode>,
  paymentPlanHardConflicted?: Maybe<Scalars['Boolean']>,
  paymentPlanHardConflictedData?: Maybe<Array<Maybe<PaymentConflictDataNode>>>,
  paymentPlanSoftConflicted?: Maybe<Scalars['Boolean']>,
  paymentPlanSoftConflictedData?: Maybe<Array<Maybe<PaymentConflictDataNode>>>,
  fullName?: Maybe<Scalars['String']>,
  targetPopulation?: Maybe<TargetPopulationNode>,
  verification?: Maybe<PaymentVerificationNode>,
  distributionModality?: Maybe<Scalars['String']>,
  totalPersonsCovered?: Maybe<Scalars['Int']>,
  serviceProvider?: Maybe<FinancialServiceProviderNode>,
};


export type PaymentNodeFollowUpsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};

export type PaymentNodeConnection = {
   __typename?: 'PaymentNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<PaymentNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type PaymentNodeEdge = {
   __typename?: 'PaymentNodeEdge',
  node?: Maybe<PaymentNode>,
  cursor: Scalars['String'],
};

export enum PaymentPlanBackgroundActionStatus {
  RuleEngineRun = 'RULE_ENGINE_RUN',
  RuleEngineError = 'RULE_ENGINE_ERROR',
  XlsxExporting = 'XLSX_EXPORTING',
  XlsxExportError = 'XLSX_EXPORT_ERROR',
  XlsxImportError = 'XLSX_IMPORT_ERROR',
  XlsxImportingEntitlements = 'XLSX_IMPORTING_ENTITLEMENTS',
  XlsxImportingReconciliation = 'XLSX_IMPORTING_RECONCILIATION',
  ExcludeBeneficiaries = 'EXCLUDE_BENEFICIARIES',
  ExcludeBeneficiariesError = 'EXCLUDE_BENEFICIARIES_ERROR'
}

export enum PaymentPlanCurrency {
  A = 'A_',
  Aed = 'AED',
  Afn = 'AFN',
  All = 'ALL',
  Amd = 'AMD',
  Ang = 'ANG',
  Aoa = 'AOA',
  Ars = 'ARS',
  Aud = 'AUD',
  Awg = 'AWG',
  Azn = 'AZN',
  Bam = 'BAM',
  Bbd = 'BBD',
  Bdt = 'BDT',
  Bgn = 'BGN',
  Bhd = 'BHD',
  Bif = 'BIF',
  Bmd = 'BMD',
  Bnd = 'BND',
  Bob = 'BOB',
  Bov = 'BOV',
  Brl = 'BRL',
  Bsd = 'BSD',
  Btn = 'BTN',
  Bwp = 'BWP',
  Byn = 'BYN',
  Bzd = 'BZD',
  Cad = 'CAD',
  Cdf = 'CDF',
  Chf = 'CHF',
  Clp = 'CLP',
  Cny = 'CNY',
  Cop = 'COP',
  Crc = 'CRC',
  Cuc = 'CUC',
  Cup = 'CUP',
  Cve = 'CVE',
  Czk = 'CZK',
  Djf = 'DJF',
  Dkk = 'DKK',
  Dop = 'DOP',
  Dzd = 'DZD',
  Egp = 'EGP',
  Ern = 'ERN',
  Etb = 'ETB',
  Eur = 'EUR',
  Fjd = 'FJD',
  Fkp = 'FKP',
  Gbp = 'GBP',
  Gel = 'GEL',
  Ghs = 'GHS',
  Gip = 'GIP',
  Gmd = 'GMD',
  Gnf = 'GNF',
  Gtq = 'GTQ',
  Gyd = 'GYD',
  Hkd = 'HKD',
  Hnl = 'HNL',
  Hrk = 'HRK',
  Htg = 'HTG',
  Huf = 'HUF',
  Idr = 'IDR',
  Ils = 'ILS',
  Inr = 'INR',
  Iqd = 'IQD',
  Irr = 'IRR',
  Isk = 'ISK',
  Jmd = 'JMD',
  Jod = 'JOD',
  Jpy = 'JPY',
  Kes = 'KES',
  Kgs = 'KGS',
  Khr = 'KHR',
  Kmf = 'KMF',
  Kpw = 'KPW',
  Krw = 'KRW',
  Kwd = 'KWD',
  Kyd = 'KYD',
  Kzt = 'KZT',
  Lak = 'LAK',
  Lbp = 'LBP',
  Lkr = 'LKR',
  Lrd = 'LRD',
  Lsl = 'LSL',
  Lyd = 'LYD',
  Mad = 'MAD',
  Mdl = 'MDL',
  Mga = 'MGA',
  Mkd = 'MKD',
  Mmk = 'MMK',
  Mnt = 'MNT',
  Mop = 'MOP',
  Mru = 'MRU',
  Mur = 'MUR',
  Mvr = 'MVR',
  Mwk = 'MWK',
  Mxn = 'MXN',
  Myr = 'MYR',
  Mzn = 'MZN',
  Nad = 'NAD',
  Ngn = 'NGN',
  Nio = 'NIO',
  Nok = 'NOK',
  Npr = 'NPR',
  Nzd = 'NZD',
  Omr = 'OMR',
  Pab = 'PAB',
  Pen = 'PEN',
  Pgk = 'PGK',
  Php = 'PHP',
  Pkr = 'PKR',
  Pln = 'PLN',
  Pyg = 'PYG',
  Qar = 'QAR',
  Ron = 'RON',
  Rsd = 'RSD',
  Rub = 'RUB',
  Rwf = 'RWF',
  Sar = 'SAR',
  Sbd = 'SBD',
  Scr = 'SCR',
  Sdg = 'SDG',
  Sek = 'SEK',
  Sgd = 'SGD',
  Shp = 'SHP',
  Sll = 'SLL',
  Sos = 'SOS',
  Srd = 'SRD',
  Ssp = 'SSP',
  Stn = 'STN',
  Svc = 'SVC',
  Syp = 'SYP',
  Szl = 'SZL',
  Thb = 'THB',
  Tjs = 'TJS',
  Tmt = 'TMT',
  Tnd = 'TND',
  Top = 'TOP',
  Try = 'TRY',
  Ttd = 'TTD',
  Twd = 'TWD',
  Tzs = 'TZS',
  Uah = 'UAH',
  Ugx = 'UGX',
  Usd = 'USD',
  Uyu = 'UYU',
  Uyw = 'UYW',
  Uzs = 'UZS',
  Ves = 'VES',
  Vnd = 'VND',
  Vuv = 'VUV',
  Wst = 'WST',
  Xaf = 'XAF',
  Xag = 'XAG',
  Xau = 'XAU',
  Xcd = 'XCD',
  Xof = 'XOF',
  Xpf = 'XPF',
  Yer = 'YER',
  Zar = 'ZAR',
  Zmw = 'ZMW',
  Zwl = 'ZWL'
}

export type PaymentPlanNode = Node & {
   __typename?: 'PaymentPlanNode',
  isRemoved: Scalars['Boolean'],
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  version: Scalars['BigInt'],
  unicefId?: Maybe<Scalars['String']>,
  businessArea: UserBusinessAreaNode,
  statusDate: Scalars['DateTime'],
  startDate?: Maybe<Scalars['Date']>,
  endDate?: Maybe<Scalars['Date']>,
  program: ProgramNode,
  exchangeRate?: Maybe<Scalars['Float']>,
  totalEntitledQuantity?: Maybe<Scalars['Float']>,
  totalEntitledQuantityUsd?: Maybe<Scalars['Float']>,
  totalEntitledQuantityRevised?: Maybe<Scalars['Float']>,
  totalEntitledQuantityRevisedUsd?: Maybe<Scalars['Float']>,
  totalDeliveredQuantity?: Maybe<Scalars['Float']>,
  totalDeliveredQuantityUsd?: Maybe<Scalars['Float']>,
  totalUndeliveredQuantity?: Maybe<Scalars['Float']>,
  totalUndeliveredQuantityUsd?: Maybe<Scalars['Float']>,
  createdBy: UserNode,
  status: PaymentPlanStatus,
  backgroundActionStatus?: Maybe<PaymentPlanBackgroundActionStatus>,
  targetPopulation: TargetPopulationNode,
  currency: PaymentPlanCurrency,
  dispersionStartDate?: Maybe<Scalars['Date']>,
  dispersionEndDate?: Maybe<Scalars['Date']>,
  femaleChildrenCount: Scalars['Int'],
  maleChildrenCount: Scalars['Int'],
  femaleAdultsCount: Scalars['Int'],
  maleAdultsCount: Scalars['Int'],
  totalHouseholdsCount: Scalars['Int'],
  totalIndividualsCount: Scalars['Int'],
  importedFileDate?: Maybe<Scalars['DateTime']>,
  steficonRule?: Maybe<RuleCommitNode>,
  steficonAppliedDate?: Maybe<Scalars['DateTime']>,
  sourcePaymentPlan?: Maybe<PaymentPlanNode>,
  isFollowUp: Scalars['Boolean'],
  exclusionReason: Scalars['String'],
  excludeHouseholdError: Scalars['String'],
  followUps: PaymentPlanNodeConnection,
  deliveryMechanisms?: Maybe<Array<Maybe<DeliveryMechanismNode>>>,
  paymentItems: PaymentNodeConnection,
  approvalProcess: ApprovalProcessNodeConnection,
  currencyName?: Maybe<Scalars['String']>,
  hasPaymentListExportFile?: Maybe<Scalars['Boolean']>,
  hasFspDeliveryMechanismXlsxTemplate?: Maybe<Scalars['Boolean']>,
  importedFileName?: Maybe<Scalars['String']>,
  paymentsConflictsCount?: Maybe<Scalars['Int']>,
  volumeByDeliveryMechanism?: Maybe<Array<Maybe<VolumeByDeliveryMechanismNode>>>,
  verificationPlans?: Maybe<PaymentVerificationPlanNodeConnection>,
  paymentVerificationSummary?: Maybe<PaymentVerificationSummaryNode>,
  bankReconciliationSuccess?: Maybe<Scalars['Int']>,
  bankReconciliationError?: Maybe<Scalars['Int']>,
  canCreatePaymentVerificationPlan?: Maybe<Scalars['Boolean']>,
  availablePaymentRecordsCount?: Maybe<Scalars['Int']>,
  reconciliationSummary?: Maybe<ReconciliationSummaryNode>,
  excludedHouseholds?: Maybe<Array<Maybe<HouseholdNode>>>,
  canCreateFollowUp?: Maybe<Scalars['Boolean']>,
  totalWithdrawnHouseholdsCount?: Maybe<Scalars['Int']>,
  unsuccessfulPaymentsCount?: Maybe<Scalars['Int']>,
};


export type PaymentPlanNodeFollowUpsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type PaymentPlanNodePaymentItemsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type PaymentPlanNodeApprovalProcessArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type PaymentPlanNodeVerificationPlansArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  programId?: Maybe<Scalars['String']>
};

export type PaymentPlanNodeConnection = {
   __typename?: 'PaymentPlanNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<PaymentPlanNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type PaymentPlanNodeEdge = {
   __typename?: 'PaymentPlanNodeEdge',
  node?: Maybe<PaymentPlanNode>,
  cursor: Scalars['String'],
};

export enum PaymentPlanStatus {
  Preparing = 'PREPARING',
  Open = 'OPEN',
  Locked = 'LOCKED',
  LockedFsp = 'LOCKED_FSP',
  InApproval = 'IN_APPROVAL',
  InAuthorization = 'IN_AUTHORIZATION',
  InReview = 'IN_REVIEW',
  Accepted = 'ACCEPTED',
  Finished = 'FINISHED'
}

export type PaymentRecordAndPaymentNode = {
   __typename?: 'PaymentRecordAndPaymentNode',
  objType?: Maybe<Scalars['String']>,
  id?: Maybe<Scalars['String']>,
  caId?: Maybe<Scalars['String']>,
  status?: Maybe<Scalars['String']>,
  fullName?: Maybe<Scalars['String']>,
  parent?: Maybe<CashPlanAndPaymentPlanNode>,
  entitlementQuantity?: Maybe<Scalars['Float']>,
  deliveredQuantity?: Maybe<Scalars['Float']>,
  deliveredQuantityUsd?: Maybe<Scalars['Float']>,
  currency?: Maybe<Scalars['String']>,
  deliveryDate?: Maybe<Scalars['String']>,
  verification?: Maybe<PaymentVerificationNode>,
};

export enum PaymentRecordDeliveryType {
  CardlessCashWithdrawal = 'CARDLESS_CASH_WITHDRAWAL',
  Cash = 'CASH',
  CashByFsp = 'CASH_BY_FSP',
  Cheque = 'CHEQUE',
  DepositToCard = 'DEPOSIT_TO_CARD',
  MobileMoney = 'MOBILE_MONEY',
  PrePaidCard = 'PRE_PAID_CARD',
  Referral = 'REFERRAL',
  Transfer = 'TRANSFER',
  TransferToAccount = 'TRANSFER_TO_ACCOUNT',
  Voucher = 'VOUCHER'
}

export enum PaymentRecordEntitlementCardStatus {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE'
}

export type PaymentRecordNode = Node & {
   __typename?: 'PaymentRecordNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  version: Scalars['BigInt'],
  businessArea: UserBusinessAreaNode,
  status: PaymentRecordStatus,
  statusDate: Scalars['DateTime'],
  household: HouseholdNode,
  headOfHousehold?: Maybe<IndividualNode>,
  deliveryType?: Maybe<PaymentRecordDeliveryType>,
  currency: Scalars['String'],
  entitlementQuantity?: Maybe<Scalars['Float']>,
  entitlementQuantityUsd?: Maybe<Scalars['Float']>,
  deliveredQuantity?: Maybe<Scalars['Float']>,
  deliveredQuantityUsd?: Maybe<Scalars['Float']>,
  deliveryDate?: Maybe<Scalars['DateTime']>,
  transactionReferenceId?: Maybe<Scalars['String']>,
  caId?: Maybe<Scalars['String']>,
  caHashId?: Maybe<Scalars['UUID']>,
  parent?: Maybe<CashPlanNode>,
  fullName: Scalars['String'],
  totalPersonsCovered: Scalars['Int'],
  distributionModality: Scalars['String'],
  targetPopulation: TargetPopulationNode,
  targetPopulationCashAssistId: Scalars['String'],
  entitlementCardNumber?: Maybe<Scalars['String']>,
  entitlementCardStatus?: Maybe<PaymentRecordEntitlementCardStatus>,
  entitlementCardIssueDate?: Maybe<Scalars['Date']>,
  visionId?: Maybe<Scalars['String']>,
  registrationCaId?: Maybe<Scalars['String']>,
  serviceProvider: ServiceProviderNode,
  verification?: Maybe<PaymentVerificationNode>,
  unicefId?: Maybe<Scalars['String']>,
};

export type PaymentRecordNodeConnection = {
   __typename?: 'PaymentRecordNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<PaymentRecordNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type PaymentRecordNodeEdge = {
   __typename?: 'PaymentRecordNodeEdge',
  node?: Maybe<PaymentRecordNode>,
  cursor: Scalars['String'],
};

export type PaymentRecordsAndPaymentsEdges = {
   __typename?: 'PaymentRecordsAndPaymentsEdges',
  cursor?: Maybe<Scalars['String']>,
  node?: Maybe<PaymentRecordAndPaymentNode>,
};

export enum PaymentRecordStatus {
  DistributionSuccessful = 'DISTRIBUTION_SUCCESSFUL',
  NotDistributed = 'NOT_DISTRIBUTED',
  TransactionSuccessful = 'TRANSACTION_SUCCESSFUL',
  TransactionErroneous = 'TRANSACTION_ERRONEOUS',
  ForceFailed = 'FORCE_FAILED',
  PartiallyDistributed = 'PARTIALLY_DISTRIBUTED',
  Pending = 'PENDING'
}

export enum PaymentStatus {
  DistributionSuccessful = 'DISTRIBUTION_SUCCESSFUL',
  NotDistributed = 'NOT_DISTRIBUTED',
  TransactionSuccessful = 'TRANSACTION_SUCCESSFUL',
  TransactionErroneous = 'TRANSACTION_ERRONEOUS',
  ForceFailed = 'FORCE_FAILED',
  PartiallyDistributed = 'PARTIALLY_DISTRIBUTED',
  Pending = 'PENDING'
}

export type PaymentVerificationLogEntryNode = Node & {
   __typename?: 'PaymentVerificationLogEntryNode',
  id: Scalars['ID'],
  contentType?: Maybe<ContentTypeObjectType>,
  objectId?: Maybe<Scalars['UUID']>,
  action: LogEntryAction,
  objectRepr: Scalars['String'],
  changes?: Maybe<Scalars['Arg']>,
  user?: Maybe<UserNode>,
  businessArea?: Maybe<UserBusinessAreaNode>,
  programs: ProgramNodeConnection,
  timestamp?: Maybe<Scalars['DateTime']>,
  isUserGenerated?: Maybe<Scalars['Boolean']>,
  contentObject?: Maybe<PaymentVerificationPlanNode>,
};


export type PaymentVerificationLogEntryNodeProgramsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  name?: Maybe<Scalars['String']>
};

export type PaymentVerificationLogEntryNodeConnection = {
   __typename?: 'PaymentVerificationLogEntryNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<PaymentVerificationLogEntryNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type PaymentVerificationLogEntryNodeEdge = {
   __typename?: 'PaymentVerificationLogEntryNodeEdge',
  node?: Maybe<PaymentVerificationLogEntryNode>,
  cursor: Scalars['String'],
};

export type PaymentVerificationNode = Node & {
   __typename?: 'PaymentVerificationNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  version: Scalars['BigInt'],
  paymentVerificationPlan: PaymentVerificationPlanNode,
  paymentContentType: ContentTypeObjectType,
  paymentObjectId: Scalars['UUID'],
  status: PaymentVerificationStatus,
  statusDate?: Maybe<Scalars['DateTime']>,
  receivedAmount?: Maybe<Scalars['Float']>,
  sentToRapidPro: Scalars['Boolean'],
  ticketDetails: TicketPaymentVerificationDetailsNodeConnection,
  ticketDetail: TicketPaymentVerificationDetailsNodeConnection,
  isManuallyEditable?: Maybe<Scalars['Boolean']>,
  payment?: Maybe<GenericPaymentNode>,
};


export type PaymentVerificationNodeTicketDetailsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type PaymentVerificationNodeTicketDetailArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};

export type PaymentVerificationNodeConnection = {
   __typename?: 'PaymentVerificationNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<PaymentVerificationNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type PaymentVerificationNodeEdge = {
   __typename?: 'PaymentVerificationNodeEdge',
  node?: Maybe<PaymentVerificationNode>,
  cursor: Scalars['String'],
};

export type PaymentVerificationPlanNode = Node & {
   __typename?: 'PaymentVerificationPlanNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  version: Scalars['BigInt'],
  unicefId?: Maybe<Scalars['String']>,
  status: PaymentVerificationPlanStatus,
  paymentPlanContentType: ContentTypeObjectType,
  paymentPlanObjectId: Scalars['UUID'],
  sampling: PaymentVerificationPlanSampling,
  verificationChannel: PaymentVerificationPlanVerificationChannel,
  sampleSize?: Maybe<Scalars['Int']>,
  respondedCount?: Maybe<Scalars['Int']>,
  receivedCount?: Maybe<Scalars['Int']>,
  notReceivedCount?: Maybe<Scalars['Int']>,
  receivedWithProblemsCount?: Maybe<Scalars['Int']>,
  confidenceInterval?: Maybe<Scalars['Float']>,
  marginOfError?: Maybe<Scalars['Float']>,
  rapidProFlowId: Scalars['String'],
  rapidProFlowStartUuids: Array<Scalars['String']>,
  ageFilter?: Maybe<AgeFilterObject>,
  excludedAdminAreasFilter?: Maybe<Array<Maybe<Scalars['String']>>>,
  sexFilter?: Maybe<Scalars['String']>,
  activationDate?: Maybe<Scalars['DateTime']>,
  completionDate?: Maybe<Scalars['DateTime']>,
  xlsxFileExporting: Scalars['Boolean'],
  xlsxFileImported: Scalars['Boolean'],
  error?: Maybe<Scalars['String']>,
  paymentRecordVerifications: PaymentVerificationNodeConnection,
  xlsxFileWasDownloaded?: Maybe<Scalars['Boolean']>,
  hasXlsxFile?: Maybe<Scalars['Boolean']>,
  paymentPlan?: Maybe<PaymentPlanNode>,
};


export type PaymentVerificationPlanNodePaymentRecordVerificationsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};

export type PaymentVerificationPlanNodeConnection = {
   __typename?: 'PaymentVerificationPlanNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<PaymentVerificationPlanNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type PaymentVerificationPlanNodeEdge = {
   __typename?: 'PaymentVerificationPlanNodeEdge',
  node?: Maybe<PaymentVerificationPlanNode>,
  cursor: Scalars['String'],
};

export enum PaymentVerificationPlanSampling {
  FullList = 'FULL_LIST',
  Random = 'RANDOM'
}

export enum PaymentVerificationPlanStatus {
  Active = 'ACTIVE',
  Finished = 'FINISHED',
  Pending = 'PENDING',
  Invalid = 'INVALID',
  RapidProError = 'RAPID_PRO_ERROR'
}

export enum PaymentVerificationPlanVerificationChannel {
  Manual = 'MANUAL',
  Rapidpro = 'RAPIDPRO',
  Xlsx = 'XLSX'
}

export enum PaymentVerificationStatus {
  NotReceived = 'NOT_RECEIVED',
  Pending = 'PENDING',
  Received = 'RECEIVED',
  ReceivedWithIssues = 'RECEIVED_WITH_ISSUES'
}

export enum PaymentVerificationStatusForUpdate {
  NotReceived = 'NOT_RECEIVED',
  Pending = 'PENDING',
  Received = 'RECEIVED',
  ReceivedWithIssues = 'RECEIVED_WITH_ISSUES'
}

export type PaymentVerificationSummaryNode = Node & {
   __typename?: 'PaymentVerificationSummaryNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  status: PaymentVerificationSummaryStatus,
  activationDate?: Maybe<Scalars['DateTime']>,
  completionDate?: Maybe<Scalars['DateTime']>,
  paymentPlanContentType: ContentTypeObjectType,
  paymentPlanObjectId: Scalars['UUID'],
};

export type PaymentVerificationSummaryNodeConnection = {
   __typename?: 'PaymentVerificationSummaryNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<PaymentVerificationSummaryNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type PaymentVerificationSummaryNodeEdge = {
   __typename?: 'PaymentVerificationSummaryNodeEdge',
  node?: Maybe<PaymentVerificationSummaryNode>,
  cursor: Scalars['String'],
};

export enum PaymentVerificationSummaryStatus {
  Active = 'ACTIVE',
  Finished = 'FINISHED',
  Pending = 'PENDING'
}

export type PositiveFeedbackTicketExtras = {
  household?: Maybe<Scalars['ID']>,
  individual?: Maybe<Scalars['ID']>,
};

export enum ProgramFrequencyOfPayments {
  OneOff = 'ONE_OFF',
  Regular = 'REGULAR'
}

export type ProgramNode = Node & {
   __typename?: 'ProgramNode',
  isRemoved: Scalars['Boolean'],
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  lastSyncAt?: Maybe<Scalars['DateTime']>,
  version: Scalars['BigInt'],
  name: Scalars['String'],
  status: ProgramStatus,
  startDate: Scalars['Date'],
  endDate: Scalars['Date'],
  description: Scalars['String'],
  caId?: Maybe<Scalars['String']>,
  caHashId?: Maybe<Scalars['String']>,
  adminAreas: AreaNodeConnection,
  businessArea: UserBusinessAreaNode,
  budget?: Maybe<Scalars['Decimal']>,
  frequencyOfPayments: ProgramFrequencyOfPayments,
  sector: ProgramSector,
  scope: ProgramScope,
  cashPlus: Scalars['Boolean'],
  populationGoal: Scalars['Int'],
  administrativeAreasOfImplementation: Scalars['String'],
  individualDataNeeded?: Maybe<Scalars['Boolean']>,
  households: HouseholdNodeConnection,
  householdSet: HouseholdNodeConnection,
  individuals: IndividualNodeConnection,
  registrationImports: RegistrationDataImportNodeConnection,
  registrationDataImports: RegistrationDataImportNodeConnection,
  paymentplanSet: PaymentPlanNodeConnection,
  cashplanSet: CashPlanNodeConnection,
  paymentSet: PaymentNodeConnection,
  grievanceTickets: GrievanceTicketNodeConnection,
  targetpopulationSet: TargetPopulationNodeConnection,
  reports: ReportNodeConnection,
  activityLogs: PaymentVerificationLogEntryNodeConnection,
  messages: CommunicationMessageNodeConnection,
  feedbackSet: FeedbackNodeConnection,
  surveys: SurveyNodeConnection,
  totalEntitledQuantity?: Maybe<Scalars['Decimal']>,
  totalDeliveredQuantity?: Maybe<Scalars['Decimal']>,
  totalUndeliveredQuantity?: Maybe<Scalars['Decimal']>,
  totalNumberOfHouseholds?: Maybe<Scalars['Int']>,
};


export type ProgramNodeAdminAreasArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  name?: Maybe<Scalars['String']>
};


export type ProgramNodeHouseholdsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type ProgramNodeHouseholdSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type ProgramNodeIndividualsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type ProgramNodeRegistrationImportsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type ProgramNodeRegistrationDataImportsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type ProgramNodePaymentplanSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type ProgramNodeCashplanSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type ProgramNodePaymentSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type ProgramNodeGrievanceTicketsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type ProgramNodeTargetpopulationSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  program?: Maybe<Scalars['ID']>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_Lte?: Maybe<Scalars['DateTime']>,
  createdAt_Gte?: Maybe<Scalars['DateTime']>,
  updatedAt?: Maybe<Scalars['DateTime']>,
  updatedAt_Lte?: Maybe<Scalars['DateTime']>,
  updatedAt_Gte?: Maybe<Scalars['DateTime']>,
  status?: Maybe<Scalars['String']>,
  households?: Maybe<Array<Maybe<Scalars['ID']>>>,
  name?: Maybe<Scalars['String']>,
  createdByName?: Maybe<Scalars['String']>,
  totalHouseholdsCountMin?: Maybe<Scalars['Int']>,
  totalHouseholdsCountMax?: Maybe<Scalars['Int']>,
  totalIndividualsCountMin?: Maybe<Scalars['Int']>,
  totalIndividualsCountMax?: Maybe<Scalars['Int']>,
  businessArea?: Maybe<Scalars['String']>,
  createdAtRange?: Maybe<Scalars['String']>,
  paymentPlanApplicable?: Maybe<Scalars['Boolean']>,
  orderBy?: Maybe<Scalars['String']>
};


export type ProgramNodeReportsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type ProgramNodeActivityLogsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type ProgramNodeMessagesArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type ProgramNodeFeedbackSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type ProgramNodeSurveysArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};

export type ProgramNodeConnection = {
   __typename?: 'ProgramNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<ProgramNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type ProgramNodeEdge = {
   __typename?: 'ProgramNodeEdge',
  node?: Maybe<ProgramNode>,
  cursor: Scalars['String'],
};

export enum ProgramScope {
  ForPartners = 'FOR_PARTNERS',
  Unicef = 'UNICEF'
}

export enum ProgramSector {
  ChildProtection = 'CHILD_PROTECTION',
  Education = 'EDUCATION',
  Health = 'HEALTH',
  MultiPurpose = 'MULTI_PURPOSE',
  Nutrition = 'NUTRITION',
  SocialPolicy = 'SOCIAL_POLICY',
  Wash = 'WASH'
}

export enum ProgramStatus {
  Active = 'ACTIVE',
  Draft = 'DRAFT',
  Finished = 'FINISHED'
}

export type ProgramsWithDeliveredQuantityNode = {
   __typename?: 'ProgramsWithDeliveredQuantityNode',
  id?: Maybe<Scalars['ID']>,
  name?: Maybe<Scalars['String']>,
  quantity?: Maybe<Array<Maybe<DeliveredQuantityNode>>>,
};

export type Query = {
   __typename?: 'Query',
  accountabilityCommunicationMessage?: Maybe<CommunicationMessageNode>,
  allAccountabilityCommunicationMessages?: Maybe<CommunicationMessageNodeConnection>,
  allAccountabilityCommunicationMessageRecipients?: Maybe<CommunicationMessageRecipientMapNodeConnection>,
  accountabilityCommunicationMessageSampleSize?: Maybe<GetCommunicationMessageSampleSizeNode>,
  feedback?: Maybe<FeedbackNode>,
  allFeedbacks?: Maybe<FeedbackNodeConnection>,
  feedbackIssueTypeChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  survey?: Maybe<SurveyNode>,
  allSurveys?: Maybe<SurveyNodeConnection>,
  recipients?: Maybe<RecipientNodeConnection>,
  accountabilitySampleSize?: Maybe<AccountabilitySampleSizeNode>,
  surveyCategoryChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  surveyAvailableFlows?: Maybe<Array<Maybe<RapidProFlowNode>>>,
  adminArea?: Maybe<AreaNode>,
  allAdminAreas?: Maybe<AreaNodeConnection>,
  allLogEntries?: Maybe<LogEntryNodeConnection>,
  logEntryActionChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  report?: Maybe<ReportNode>,
  allReports?: Maybe<ReportNodeConnection>,
  reportTypesChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  reportStatusChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  dashboardReportTypesChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  dashboardYearsChoices?: Maybe<Array<Maybe<Scalars['String']>>>,
  sanctionListIndividual?: Maybe<SanctionListIndividualNode>,
  allSanctionListIndividuals?: Maybe<SanctionListIndividualNodeConnection>,
  ticketsByType?: Maybe<TicketByType>,
  ticketsByCategory?: Maybe<ChartDatasetNode>,
  ticketsByStatus?: Maybe<ChartDatasetNode>,
  ticketsByLocationAndCategory?: Maybe<ChartDetailedDatasetsNode>,
  grievanceTicket?: Maybe<GrievanceTicketNode>,
  allGrievanceTicket?: Maybe<GrievanceTicketNodeConnection>,
  existingGrievanceTickets?: Maybe<GrievanceTicketNodeConnection>,
  allTicketNotes?: Maybe<TicketNoteNodeConnection>,
  chartGrievances?: Maybe<ChartGrievanceTicketsNode>,
  allAddIndividualsFieldsAttributes?: Maybe<Array<Maybe<FieldAttributeNode>>>,
  allEditHouseholdFieldsAttributes?: Maybe<Array<Maybe<FieldAttributeNode>>>,
  grievanceTicketStatusChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  grievanceTicketCategoryChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  grievanceTicketManualCategoryChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  grievanceTicketSystemCategoryChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  grievanceTicketIssueTypeChoices?: Maybe<Array<Maybe<IssueTypesObject>>>,
  grievanceTicketPriorityChoices?: Maybe<Array<Maybe<ChoiceObjectInt>>>,
  grievanceTicketUrgencyChoices?: Maybe<Array<Maybe<ChoiceObjectInt>>>,
  grievanceTicketSearchTypesChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  allSteficonRules?: Maybe<SteficonRuleNodeConnection>,
  payment?: Maybe<PaymentNode>,
  allPayments?: Maybe<PaymentNodeConnection>,
  paymentRecord?: Maybe<PaymentRecordNode>,
  allPaymentRecords?: Maybe<PaymentRecordNodeConnection>,
  allPaymentRecordsAndPayments?: Maybe<PaginatedPaymentRecordsAndPaymentsNode>,
  financialServiceProviderXlsxTemplate?: Maybe<FinancialServiceProviderXlsxTemplateNode>,
  allFinancialServiceProviderXlsxTemplates?: Maybe<FinancialServiceProviderXlsxTemplateNodeConnection>,
  financialServiceProviderXlsxReport?: Maybe<FinancialServiceProviderXlsxReportNode>,
  allFinancialServiceProviderXlsxReports?: Maybe<FinancialServiceProviderXlsxReportNodeConnection>,
  financialServiceProvider?: Maybe<FinancialServiceProviderNode>,
  allFinancialServiceProviders?: Maybe<FinancialServiceProviderNodeConnection>,
  paymentRecordVerification?: Maybe<PaymentVerificationNode>,
  allPaymentVerifications?: Maybe<PaymentVerificationNodeConnection>,
  paymentVerificationPlan?: Maybe<PaymentVerificationPlanNode>,
  allPaymentVerificationPlan?: Maybe<PaymentVerificationPlanNodeConnection>,
  chartPaymentVerification?: Maybe<ChartPaymentVerification>,
  chartVolumeByDeliveryMechanism?: Maybe<ChartDatasetNode>,
  chartPayment?: Maybe<ChartDatasetNode>,
  sectionTotalTransferred?: Maybe<SectionTotalNode>,
  tableTotalCashTransferredByAdministrativeArea?: Maybe<TableTotalCashTransferred>,
  chartTotalTransferredCashByCountry?: Maybe<ChartDetailedDatasetsNode>,
  paymentRecordStatusChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  paymentRecordEntitlementCardStatusChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  paymentRecordDeliveryTypeChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  cashPlanVerificationStatusChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  cashPlanVerificationSamplingChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  cashPlanVerificationVerificationChannelChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  paymentVerificationStatusChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  allRapidProFlows?: Maybe<Array<Maybe<RapidProFlow>>>,
  sampleSize?: Maybe<GetCashplanVerificationSampleSizeObject>,
  allPaymentVerificationLogEntries?: Maybe<PaymentVerificationLogEntryNodeConnection>,
  paymentPlan?: Maybe<PaymentPlanNode>,
  allPaymentPlans?: Maybe<PaymentPlanNodeConnection>,
  paymentPlanStatusChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  currencyChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  allDeliveryMechanisms?: Maybe<Array<Maybe<ChoiceObject>>>,
  paymentPlanBackgroundActionStatusChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  availableFspsForDeliveryMechanisms?: Maybe<Array<Maybe<FspChoices>>>,
  allCashPlansAndPaymentPlans?: Maybe<PaginatedCashPlanAndPaymentPlanNode>,
  businessArea?: Maybe<BusinessAreaNode>,
  allBusinessAreas?: Maybe<BusinessAreaNodeConnection>,
  allFieldsAttributes?: Maybe<Array<Maybe<FieldAttributeNode>>>,
  allGroupsWithFields?: Maybe<Array<Maybe<GroupAttributeNode>>>,
  koboProject?: Maybe<KoboAssetObject>,
  allKoboProjects?: Maybe<KoboAssetObjectConnection>,
  cashAssistUrlPrefix?: Maybe<Scalars['String']>,
  allLanguages?: Maybe<LanguageObjectConnection>,
  program?: Maybe<ProgramNode>,
  allPrograms?: Maybe<ProgramNodeConnection>,
  chartProgrammesBySector?: Maybe<ChartDetailedDatasetsNode>,
  chartTotalTransferredByMonth?: Maybe<ChartDetailedDatasetsNode>,
  cashPlan?: Maybe<CashPlanNode>,
  allCashPlans?: Maybe<CashPlanNodeConnection>,
  programStatusChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  programFrequencyOfPaymentsChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  programSectorChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  programScopeChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  cashPlanStatusChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  allActivePrograms?: Maybe<ProgramNodeConnection>,
  targetPopulation?: Maybe<TargetPopulationNode>,
  allTargetPopulation?: Maybe<TargetPopulationNodeConnection>,
  targetPopulationHouseholds?: Maybe<HouseholdNodeConnection>,
  targetPopulationStatusChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  allActiveTargetPopulations?: Maybe<TargetPopulationNodeConnection>,
  household?: Maybe<HouseholdNode>,
  allHouseholds?: Maybe<HouseholdNodeConnection>,
  individual?: Maybe<IndividualNode>,
  allIndividuals?: Maybe<IndividualNodeConnection>,
  allMergedHouseholds?: Maybe<HouseholdNodeConnection>,
  allMergedIndividuals?: Maybe<IndividualNodeConnection>,
  sectionHouseholdsReached?: Maybe<SectionTotalNode>,
  sectionIndividualsReached?: Maybe<SectionTotalNode>,
  sectionChildReached?: Maybe<SectionTotalNode>,
  chartIndividualsReachedByAgeAndGender?: Maybe<ChartDatasetNode>,
  chartIndividualsWithDisabilityReachedByAge?: Maybe<ChartDetailedDatasetsNode>,
  residenceStatusChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  sexChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  maritalStatusChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  workStatusChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  relationshipChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  roleChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  documentTypeChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  identityTypeChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  countriesChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  observedDisabilityChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  severityOfDisabilityChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  flagChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  allHouseholdsFlexFieldsAttributes?: Maybe<Array<Maybe<FieldAttributeNode>>>,
  allIndividualsFlexFieldsAttributes?: Maybe<Array<Maybe<FieldAttributeNode>>>,
  me?: Maybe<UserNode>,
  allUsers?: Maybe<UserNodeConnection>,
  userRolesChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  userStatusChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  userPartnerChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  hasAvailableUsersToExport?: Maybe<Scalars['Boolean']>,
  importedHousehold?: Maybe<ImportedHouseholdNode>,
  allImportedHouseholds?: Maybe<ImportedHouseholdNodeConnection>,
  registrationDataImportDatahub?: Maybe<RegistrationDataImportDatahubNode>,
  allRegistrationDataImportsDatahub?: Maybe<RegistrationDataImportDatahubNodeConnection>,
  importedIndividual?: Maybe<ImportedIndividualNode>,
  allImportedIndividuals?: Maybe<ImportedIndividualNodeConnection>,
  importData?: Maybe<ImportDataNode>,
  koboImportData?: Maybe<KoboImportDataNode>,
  deduplicationBatchStatusChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  deduplicationGoldenRecordStatusChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  registrationDataImport?: Maybe<RegistrationDataImportNode>,
  allRegistrationDataImports?: Maybe<RegistrationDataImportNodeConnection>,
  registrationDataStatusChoices?: Maybe<Array<Maybe<ChoiceObject>>>,
  _debug?: Maybe<DjangoDebug>,
};


export type QueryAccountabilityCommunicationMessageArgs = {
  id: Scalars['ID']
};


export type QueryAllAccountabilityCommunicationMessagesArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  numberOfRecipients?: Maybe<Scalars['Int']>,
  numberOfRecipients_Gte?: Maybe<Scalars['Int']>,
  numberOfRecipients_Lte?: Maybe<Scalars['Int']>,
  targetPopulation?: Maybe<Scalars['ID']>,
  createdBy?: Maybe<Scalars['ID']>,
  program?: Maybe<Scalars['String']>,
  createdAtRange?: Maybe<Scalars['String']>,
  title?: Maybe<Scalars['String']>,
  body?: Maybe<Scalars['String']>,
  samplingType?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>
};


export type QueryAllAccountabilityCommunicationMessageRecipientsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  messageId: Scalars['String'],
  recipientId?: Maybe<Scalars['String']>,
  fullName?: Maybe<Scalars['String']>,
  phoneNo?: Maybe<Scalars['String']>,
  sex?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>
};


export type QueryAccountabilityCommunicationMessageSampleSizeArgs = {
  input?: Maybe<GetAccountabilityCommunicationMessageSampleSizeInput>
};


export type QueryFeedbackArgs = {
  id: Scalars['ID']
};


export type QueryAllFeedbacksArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  issueType?: Maybe<Scalars['String']>,
  createdAtRange?: Maybe<Scalars['String']>,
  createdBy?: Maybe<Scalars['String']>,
  feedbackId?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>
};


export type QuerySurveyArgs = {
  id: Scalars['ID']
};


export type QueryAllSurveysArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  program?: Maybe<Scalars['ID']>,
  targetPopulation?: Maybe<Scalars['ID']>,
  createdBy?: Maybe<Scalars['ID']>,
  createdAtRange?: Maybe<Scalars['String']>,
  search?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>
};


export type QueryRecipientsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  survey: Scalars['String'],
  orderBy?: Maybe<Scalars['String']>
};


export type QueryAccountabilitySampleSizeArgs = {
  input?: Maybe<AccountabilitySampleSizeInput>
};


export type QueryAdminAreaArgs = {
  id: Scalars['ID']
};


export type QueryAllAdminAreasArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  name?: Maybe<Scalars['String']>,
  name_Istartswith?: Maybe<Scalars['String']>,
  businessArea?: Maybe<Scalars['String']>,
  level?: Maybe<Scalars['Int']>,
  parentId?: Maybe<Scalars['String']>
};


export type QueryAllLogEntriesArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  objectId?: Maybe<Scalars['UUID']>,
  user?: Maybe<Scalars['ID']>,
  businessArea: Scalars['String'],
  search?: Maybe<Scalars['String']>,
  module?: Maybe<Scalars['String']>,
  userId?: Maybe<Scalars['String']>,
  programId?: Maybe<Scalars['String']>
};


export type QueryReportArgs = {
  id: Scalars['ID']
};


export type QueryAllReportsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  createdBy?: Maybe<Scalars['ID']>,
  reportType?: Maybe<Array<Maybe<Scalars['String']>>>,
  status?: Maybe<Array<Maybe<Scalars['String']>>>,
  businessArea: Scalars['String'],
  createdFrom?: Maybe<Scalars['DateTime']>,
  createdTo?: Maybe<Scalars['DateTime']>,
  orderBy?: Maybe<Scalars['String']>
};


export type QueryDashboardReportTypesChoicesArgs = {
  businessAreaSlug: Scalars['String']
};


export type QueryDashboardYearsChoicesArgs = {
  businessAreaSlug: Scalars['String']
};


export type QuerySanctionListIndividualArgs = {
  id: Scalars['ID']
};


export type QueryAllSanctionListIndividualsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  id?: Maybe<Scalars['UUID']>,
  fullName?: Maybe<Scalars['String']>,
  fullName_Startswith?: Maybe<Scalars['String']>,
  referenceNumber?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>
};


export type QueryTicketsByTypeArgs = {
  businessAreaSlug: Scalars['String']
};


export type QueryTicketsByCategoryArgs = {
  businessAreaSlug: Scalars['String']
};


export type QueryTicketsByStatusArgs = {
  businessAreaSlug: Scalars['String']
};


export type QueryTicketsByLocationAndCategoryArgs = {
  businessAreaSlug: Scalars['String']
};


export type QueryGrievanceTicketArgs = {
  id: Scalars['ID']
};


export type QueryAllGrievanceTicketArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  id?: Maybe<Scalars['UUID']>,
  id_Startswith?: Maybe<Scalars['UUID']>,
  category?: Maybe<Scalars['String']>,
  area?: Maybe<Scalars['String']>,
  area_Startswith?: Maybe<Scalars['String']>,
  assignedTo?: Maybe<Scalars['ID']>,
  registrationDataImport?: Maybe<Scalars['ID']>,
  admin2?: Maybe<Scalars['ID']>,
  createdBy?: Maybe<Scalars['ID']>,
  businessArea: Scalars['String'],
  search?: Maybe<Scalars['String']>,
  status?: Maybe<Array<Maybe<Scalars['String']>>>,
  fsp?: Maybe<Scalars['String']>,
  cashPlan?: Maybe<Scalars['String']>,
  createdAtRange?: Maybe<Scalars['String']>,
  permissions?: Maybe<Array<Maybe<Scalars['String']>>>,
  issueType?: Maybe<Scalars['String']>,
  scoreMin?: Maybe<Scalars['String']>,
  scoreMax?: Maybe<Scalars['String']>,
  household?: Maybe<Scalars['String']>,
  preferredLanguage?: Maybe<Scalars['String']>,
  priority?: Maybe<Scalars['String']>,
  urgency?: Maybe<Scalars['String']>,
  grievanceType?: Maybe<Scalars['String']>,
  grievanceStatus?: Maybe<Scalars['String']>,
  totalDays?: Maybe<Scalars['Int']>,
  program?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>
};


export type QueryExistingGrievanceTicketsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  id?: Maybe<Scalars['UUID']>,
  businessArea: Scalars['String'],
  category?: Maybe<Scalars['String']>,
  issueType?: Maybe<Scalars['String']>,
  household?: Maybe<Scalars['ID']>,
  individual?: Maybe<Scalars['ID']>,
  paymentRecord?: Maybe<Array<Maybe<Scalars['ID']>>>,
  permissions?: Maybe<Array<Maybe<Scalars['String']>>>,
  orderBy?: Maybe<Scalars['String']>
};


export type QueryAllTicketNotesArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  id?: Maybe<Scalars['UUID']>,
  ticket: Scalars['UUID']
};


export type QueryChartGrievancesArgs = {
  businessAreaSlug: Scalars['String'],
  year: Scalars['Int'],
  administrativeArea?: Maybe<Scalars['String']>
};


export type QueryAllSteficonRulesArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  enabled?: Maybe<Scalars['Boolean']>,
  deprecated?: Maybe<Scalars['Boolean']>,
  type: Scalars['String']
};


export type QueryPaymentArgs = {
  id: Scalars['ID']
};


export type QueryAllPaymentsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  businessArea: Scalars['String'],
  paymentPlanId: Scalars['String'],
  programId?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>
};


export type QueryPaymentRecordArgs = {
  id: Scalars['ID']
};


export type QueryAllPaymentRecordsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  parent?: Maybe<Scalars['ID']>,
  household?: Maybe<Scalars['ID']>,
  individual?: Maybe<Scalars['String']>,
  businessArea?: Maybe<Scalars['String']>,
  programId?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>
};


export type QueryAllPaymentRecordsAndPaymentsArgs = {
  businessArea: Scalars['String'],
  program?: Maybe<Scalars['String']>,
  household?: Maybe<Scalars['ID']>,
  orderBy?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>
};


export type QueryFinancialServiceProviderXlsxTemplateArgs = {
  id: Scalars['ID']
};


export type QueryAllFinancialServiceProviderXlsxTemplatesArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  name?: Maybe<Scalars['String']>,
  createdBy?: Maybe<Scalars['ID']>,
  orderBy?: Maybe<Scalars['String']>
};


export type QueryFinancialServiceProviderXlsxReportArgs = {
  id: Scalars['ID']
};


export type QueryAllFinancialServiceProviderXlsxReportsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  status?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>
};


export type QueryFinancialServiceProviderArgs = {
  id: Scalars['ID']
};


export type QueryAllFinancialServiceProvidersArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  createdBy?: Maybe<Scalars['ID']>,
  name?: Maybe<Scalars['String']>,
  visionVendorNumber?: Maybe<Scalars['String']>,
  deliveryMechanisms?: Maybe<Array<Maybe<Scalars['String']>>>,
  distributionLimit?: Maybe<Scalars['Float']>,
  communicationChannel?: Maybe<Scalars['String']>,
  xlsxTemplates?: Maybe<Array<Maybe<Scalars['ID']>>>,
  orderBy?: Maybe<Scalars['String']>
};


export type QueryPaymentRecordVerificationArgs = {
  id: Scalars['ID']
};


export type QueryAllPaymentVerificationsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  paymentVerificationPlan?: Maybe<Scalars['ID']>,
  status?: Maybe<Scalars['String']>,
  paymentPlanId?: Maybe<Scalars['String']>,
  search?: Maybe<Scalars['String']>,
  businessArea: Scalars['String'],
  verificationChannel?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>
};


export type QueryPaymentVerificationPlanArgs = {
  id: Scalars['ID']
};


export type QueryAllPaymentVerificationPlanArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  programId?: Maybe<Scalars['String']>
};


export type QueryChartPaymentVerificationArgs = {
  businessAreaSlug: Scalars['String'],
  year: Scalars['Int'],
  program?: Maybe<Scalars['String']>,
  administrativeArea?: Maybe<Scalars['String']>
};


export type QueryChartVolumeByDeliveryMechanismArgs = {
  businessAreaSlug: Scalars['String'],
  year: Scalars['Int'],
  program?: Maybe<Scalars['String']>,
  administrativeArea?: Maybe<Scalars['String']>
};


export type QueryChartPaymentArgs = {
  businessAreaSlug: Scalars['String'],
  year: Scalars['Int'],
  program?: Maybe<Scalars['String']>,
  administrativeArea?: Maybe<Scalars['String']>
};


export type QuerySectionTotalTransferredArgs = {
  businessAreaSlug: Scalars['String'],
  year: Scalars['Int'],
  program?: Maybe<Scalars['String']>,
  administrativeArea?: Maybe<Scalars['String']>
};


export type QueryTableTotalCashTransferredByAdministrativeAreaArgs = {
  businessAreaSlug: Scalars['String'],
  year: Scalars['Int'],
  program?: Maybe<Scalars['String']>,
  administrativeArea?: Maybe<Scalars['String']>,
  order?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>
};


export type QueryChartTotalTransferredCashByCountryArgs = {
  year: Scalars['Int']
};


export type QueryAllRapidProFlowsArgs = {
  businessAreaSlug: Scalars['String']
};


export type QuerySampleSizeArgs = {
  input?: Maybe<GetCashplanVerificationSampleSizeInput>
};


export type QueryAllPaymentVerificationLogEntriesArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  objectId?: Maybe<Scalars['UUID']>,
  user?: Maybe<Scalars['ID']>,
  businessArea: Scalars['String'],
  search?: Maybe<Scalars['String']>,
  module?: Maybe<Scalars['String']>,
  userId?: Maybe<Scalars['String']>,
  programId?: Maybe<Scalars['String']>,
  objectType?: Maybe<Scalars['String']>
};


export type QueryPaymentPlanArgs = {
  id: Scalars['ID']
};


export type QueryAllPaymentPlansArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  businessArea: Scalars['String'],
  search?: Maybe<Scalars['String']>,
  status?: Maybe<Array<Maybe<Scalars['String']>>>,
  totalEntitledQuantityFrom?: Maybe<Scalars['Float']>,
  totalEntitledQuantityTo?: Maybe<Scalars['Float']>,
  dispersionStartDate?: Maybe<Scalars['Date']>,
  dispersionEndDate?: Maybe<Scalars['Date']>,
  isFollowUp?: Maybe<Scalars['Boolean']>,
  sourcePaymentPlanId?: Maybe<Scalars['String']>,
  program?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>
};


export type QueryAvailableFspsForDeliveryMechanismsArgs = {
  input?: Maybe<AvailableFspsForDeliveryMechanismsInput>
};


export type QueryAllCashPlansAndPaymentPlansArgs = {
  businessArea: Scalars['String'],
  program?: Maybe<Scalars['String']>,
  search?: Maybe<Scalars['String']>,
  serviceProvider?: Maybe<Scalars['String']>,
  deliveryType?: Maybe<Array<Maybe<Scalars['String']>>>,
  verificationStatus?: Maybe<Array<Maybe<Scalars['String']>>>,
  startDateGte?: Maybe<Scalars['String']>,
  endDateLte?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>
};


export type QueryBusinessAreaArgs = {
  businessAreaSlug: Scalars['String']
};


export type QueryAllBusinessAreasArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  id?: Maybe<Scalars['UUID']>,
  slug?: Maybe<Scalars['String']>
};


export type QueryAllFieldsAttributesArgs = {
  flexField?: Maybe<Scalars['Boolean']>,
  businessAreaSlug?: Maybe<Scalars['String']>
};


export type QueryKoboProjectArgs = {
  uid: Scalars['String'],
  businessAreaSlug: Scalars['String']
};


export type QueryAllKoboProjectsArgs = {
  businessAreaSlug: Scalars['String'],
  onlyDeployed?: Maybe<Scalars['Boolean']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type QueryAllLanguagesArgs = {
  code?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type QueryProgramArgs = {
  id: Scalars['ID']
};


export type QueryAllProgramsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  businessArea: Scalars['String'],
  search?: Maybe<Scalars['String']>,
  status?: Maybe<Array<Maybe<Scalars['String']>>>,
  sector?: Maybe<Array<Maybe<Scalars['String']>>>,
  numberOfHouseholds?: Maybe<Scalars['String']>,
  budget?: Maybe<Scalars['String']>,
  startDate?: Maybe<Scalars['Date']>,
  endDate?: Maybe<Scalars['Date']>,
  orderBy?: Maybe<Scalars['String']>
};


export type QueryChartProgrammesBySectorArgs = {
  businessAreaSlug: Scalars['String'],
  year: Scalars['Int'],
  program?: Maybe<Scalars['String']>,
  administrativeArea?: Maybe<Scalars['String']>
};


export type QueryChartTotalTransferredByMonthArgs = {
  businessAreaSlug: Scalars['String'],
  year: Scalars['Int'],
  program?: Maybe<Scalars['String']>,
  administrativeArea?: Maybe<Scalars['String']>
};


export type QueryCashPlanArgs = {
  id: Scalars['ID']
};


export type QueryAllCashPlansArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  program?: Maybe<Scalars['ID']>,
  assistanceThrough?: Maybe<Scalars['String']>,
  assistanceThrough_Startswith?: Maybe<Scalars['String']>,
  serviceProvider_FullName?: Maybe<Scalars['String']>,
  serviceProvider_FullName_Startswith?: Maybe<Scalars['String']>,
  startDate?: Maybe<Scalars['DateTime']>,
  startDate_Lte?: Maybe<Scalars['DateTime']>,
  startDate_Gte?: Maybe<Scalars['DateTime']>,
  endDate?: Maybe<Scalars['DateTime']>,
  endDate_Lte?: Maybe<Scalars['DateTime']>,
  endDate_Gte?: Maybe<Scalars['DateTime']>,
  businessArea?: Maybe<Scalars['String']>,
  search?: Maybe<Scalars['String']>,
  deliveryType?: Maybe<Array<Maybe<Scalars['String']>>>,
  verificationStatus?: Maybe<Array<Maybe<Scalars['String']>>>,
  orderBy?: Maybe<Scalars['String']>
};


export type QueryAllActiveProgramsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  businessArea: Scalars['String'],
  search?: Maybe<Scalars['String']>,
  status?: Maybe<Array<Maybe<Scalars['String']>>>,
  sector?: Maybe<Array<Maybe<Scalars['String']>>>,
  numberOfHouseholds?: Maybe<Scalars['String']>,
  budget?: Maybe<Scalars['String']>,
  startDate?: Maybe<Scalars['Date']>,
  endDate?: Maybe<Scalars['Date']>,
  orderBy?: Maybe<Scalars['String']>
};


export type QueryTargetPopulationArgs = {
  id: Scalars['ID']
};


export type QueryAllTargetPopulationArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  program?: Maybe<Scalars['ID']>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_Lte?: Maybe<Scalars['DateTime']>,
  createdAt_Gte?: Maybe<Scalars['DateTime']>,
  updatedAt?: Maybe<Scalars['DateTime']>,
  updatedAt_Lte?: Maybe<Scalars['DateTime']>,
  updatedAt_Gte?: Maybe<Scalars['DateTime']>,
  status?: Maybe<Scalars['String']>,
  households?: Maybe<Array<Maybe<Scalars['ID']>>>,
  name?: Maybe<Scalars['String']>,
  createdByName?: Maybe<Scalars['String']>,
  totalHouseholdsCountMin?: Maybe<Scalars['Int']>,
  totalHouseholdsCountMax?: Maybe<Scalars['Int']>,
  totalIndividualsCountMin?: Maybe<Scalars['Int']>,
  totalIndividualsCountMax?: Maybe<Scalars['Int']>,
  businessArea?: Maybe<Scalars['String']>,
  createdAtRange?: Maybe<Scalars['String']>,
  paymentPlanApplicable?: Maybe<Scalars['Boolean']>,
  orderBy?: Maybe<Scalars['String']>
};


export type QueryTargetPopulationHouseholdsArgs = {
  targetPopulation: Scalars['ID'],
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  orderBy?: Maybe<Scalars['String']>,
  businessArea?: Maybe<Scalars['String']>
};


export type QueryAllActiveTargetPopulationsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  program?: Maybe<Scalars['ID']>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_Lte?: Maybe<Scalars['DateTime']>,
  createdAt_Gte?: Maybe<Scalars['DateTime']>,
  updatedAt?: Maybe<Scalars['DateTime']>,
  updatedAt_Lte?: Maybe<Scalars['DateTime']>,
  updatedAt_Gte?: Maybe<Scalars['DateTime']>,
  status?: Maybe<Scalars['String']>,
  households?: Maybe<Array<Maybe<Scalars['ID']>>>,
  name?: Maybe<Scalars['String']>,
  createdByName?: Maybe<Scalars['String']>,
  totalHouseholdsCountMin?: Maybe<Scalars['Int']>,
  totalHouseholdsCountMax?: Maybe<Scalars['Int']>,
  totalIndividualsCountMin?: Maybe<Scalars['Int']>,
  totalIndividualsCountMax?: Maybe<Scalars['Int']>,
  businessArea?: Maybe<Scalars['String']>,
  createdAtRange?: Maybe<Scalars['String']>,
  paymentPlanApplicable?: Maybe<Scalars['Boolean']>,
  orderBy?: Maybe<Scalars['String']>
};


export type QueryHouseholdArgs = {
  id: Scalars['ID']
};


export type QueryAllHouseholdsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  businessArea?: Maybe<Scalars['String']>,
  address?: Maybe<Scalars['String']>,
  address_Startswith?: Maybe<Scalars['String']>,
  headOfHousehold_FullName?: Maybe<Scalars['String']>,
  headOfHousehold_FullName_Startswith?: Maybe<Scalars['String']>,
  size_Range?: Maybe<Array<Maybe<Scalars['Int']>>>,
  size_Lte?: Maybe<Scalars['Int']>,
  size_Gte?: Maybe<Scalars['Int']>,
  adminArea?: Maybe<Scalars['ID']>,
  admin2?: Maybe<Scalars['ID']>,
  targetPopulations?: Maybe<Array<Maybe<Scalars['ID']>>>,
  residenceStatus?: Maybe<Scalars['String']>,
  withdrawn?: Maybe<Scalars['Boolean']>,
  size?: Maybe<Scalars['String']>,
  search?: Maybe<Scalars['String']>,
  headOfHousehold_PhoneNoValid?: Maybe<Scalars['Boolean']>,
  lastRegistrationDate?: Maybe<Scalars['String']>,
  countryOrigin?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>
};


export type QueryIndividualArgs = {
  id: Scalars['ID']
};


export type QueryAllIndividualsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  household_Id?: Maybe<Scalars['UUID']>,
  businessArea?: Maybe<Scalars['String']>,
  fullName?: Maybe<Scalars['String']>,
  fullName_Startswith?: Maybe<Scalars['String']>,
  fullName_Endswith?: Maybe<Scalars['String']>,
  sex?: Maybe<Array<Maybe<Scalars['String']>>>,
  household_AdminArea?: Maybe<Scalars['ID']>,
  withdrawn?: Maybe<Scalars['Boolean']>,
  age?: Maybe<Scalars['String']>,
  programs?: Maybe<Array<Maybe<Scalars['ID']>>>,
  search?: Maybe<Scalars['String']>,
  lastRegistrationDate?: Maybe<Scalars['String']>,
  admin2?: Maybe<Array<Maybe<Scalars['ID']>>>,
  status?: Maybe<Array<Maybe<Scalars['String']>>>,
  excludedId?: Maybe<Scalars['String']>,
  flags?: Maybe<Array<Maybe<Scalars['String']>>>,
  orderBy?: Maybe<Scalars['String']>
};


export type QueryAllMergedHouseholdsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  businessArea?: Maybe<Scalars['String']>,
  rdiId?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>
};


export type QueryAllMergedIndividualsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  household?: Maybe<Scalars['ID']>,
  rdiId?: Maybe<Scalars['String']>,
  duplicatesOnly?: Maybe<Scalars['Boolean']>,
  businessArea?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>
};


export type QuerySectionHouseholdsReachedArgs = {
  businessAreaSlug: Scalars['String'],
  year: Scalars['Int'],
  program?: Maybe<Scalars['String']>,
  administrativeArea?: Maybe<Scalars['String']>
};


export type QuerySectionIndividualsReachedArgs = {
  businessAreaSlug: Scalars['String'],
  year: Scalars['Int'],
  program?: Maybe<Scalars['String']>,
  administrativeArea?: Maybe<Scalars['String']>
};


export type QuerySectionChildReachedArgs = {
  businessAreaSlug: Scalars['String'],
  year: Scalars['Int'],
  program?: Maybe<Scalars['String']>,
  administrativeArea?: Maybe<Scalars['String']>
};


export type QueryChartIndividualsReachedByAgeAndGenderArgs = {
  businessAreaSlug: Scalars['String'],
  year: Scalars['Int'],
  program?: Maybe<Scalars['String']>,
  administrativeArea?: Maybe<Scalars['String']>
};


export type QueryChartIndividualsWithDisabilityReachedByAgeArgs = {
  businessAreaSlug: Scalars['String'],
  year: Scalars['Int'],
  program?: Maybe<Scalars['String']>,
  administrativeArea?: Maybe<Scalars['String']>
};


export type QueryAllUsersArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  status?: Maybe<Array<Maybe<Scalars['String']>>>,
  partner?: Maybe<Array<Maybe<Scalars['String']>>>,
  businessArea: Scalars['String'],
  search?: Maybe<Scalars['String']>,
  roles?: Maybe<Array<Maybe<Scalars['String']>>>,
  isTicketCreator?: Maybe<Scalars['Boolean']>,
  orderBy?: Maybe<Scalars['String']>
};


export type QueryHasAvailableUsersToExportArgs = {
  businessAreaSlug: Scalars['String']
};


export type QueryImportedHouseholdArgs = {
  id: Scalars['ID']
};


export type QueryAllImportedHouseholdsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  rdiId?: Maybe<Scalars['String']>,
  businessArea?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>
};


export type QueryRegistrationDataImportDatahubArgs = {
  id: Scalars['ID']
};


export type QueryAllRegistrationDataImportsDatahubArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type QueryImportedIndividualArgs = {
  id: Scalars['ID']
};


export type QueryAllImportedIndividualsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  household?: Maybe<Scalars['ID']>,
  rdiId?: Maybe<Scalars['String']>,
  duplicatesOnly?: Maybe<Scalars['Boolean']>,
  businessArea?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>
};


export type QueryImportDataArgs = {
  id: Scalars['ID']
};


export type QueryKoboImportDataArgs = {
  id: Scalars['ID']
};


export type QueryRegistrationDataImportArgs = {
  id: Scalars['ID']
};


export type QueryAllRegistrationDataImportsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  importedBy_Id?: Maybe<Scalars['UUID']>,
  importDate?: Maybe<Scalars['Date']>,
  status?: Maybe<Scalars['String']>,
  name?: Maybe<Scalars['String']>,
  name_Startswith?: Maybe<Scalars['String']>,
  businessArea?: Maybe<Scalars['String']>,
  importDateRange?: Maybe<Scalars['String']>,
  size?: Maybe<Scalars['String']>,
  program?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>
};

export type RandomSamplingArguments = {
  confidenceInterval: Scalars['Float'],
  marginOfError: Scalars['Float'],
  excludedAdminAreas?: Maybe<Array<Maybe<Scalars['String']>>>,
  age?: Maybe<AgeInput>,
  sex?: Maybe<Scalars['String']>,
};

export type RapidProArguments = {
  flowId: Scalars['String'],
};

export type RapidProFlow = {
   __typename?: 'RapidProFlow',
  id?: Maybe<Scalars['String']>,
  name?: Maybe<Scalars['String']>,
  type?: Maybe<Scalars['String']>,
  archived?: Maybe<Scalars['Boolean']>,
  labels?: Maybe<Array<Maybe<Scalars['String']>>>,
  expires?: Maybe<Scalars['Int']>,
  runs?: Maybe<Array<Maybe<RapidProFlowRun>>>,
  results?: Maybe<Array<Maybe<RapidProFlowResult>>>,
  createdOn?: Maybe<Scalars['DateTime']>,
  modifiedOn?: Maybe<Scalars['DateTime']>,
};

export type RapidProFlowNode = {
   __typename?: 'RapidProFlowNode',
  id?: Maybe<Scalars['String']>,
  name?: Maybe<Scalars['String']>,
};

export type RapidProFlowResult = {
   __typename?: 'RapidProFlowResult',
  key?: Maybe<Scalars['String']>,
  name?: Maybe<Scalars['String']>,
  categories?: Maybe<Array<Maybe<Scalars['String']>>>,
  nodeUuids?: Maybe<Array<Maybe<Scalars['String']>>>,
};

export type RapidProFlowRun = {
   __typename?: 'RapidProFlowRun',
  active?: Maybe<Scalars['Int']>,
  completed?: Maybe<Scalars['Int']>,
  interrupted?: Maybe<Scalars['Int']>,
  expired?: Maybe<Scalars['Int']>,
};

export type ReassignRoleMutation = {
   __typename?: 'ReassignRoleMutation',
  household?: Maybe<HouseholdNode>,
  individual?: Maybe<IndividualNode>,
};

export type RebuildTargetPopulationMutation = {
   __typename?: 'RebuildTargetPopulationMutation',
  targetPopulation?: Maybe<TargetPopulationNode>,
};

export type RecipientNode = Node & {
   __typename?: 'RecipientNode',
  id: Scalars['ID'],
  size?: Maybe<Scalars['Int']>,
  headOfHousehold: IndividualNode,
};

export type RecipientNodeConnection = {
   __typename?: 'RecipientNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<RecipientNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type RecipientNodeEdge = {
   __typename?: 'RecipientNodeEdge',
  node?: Maybe<RecipientNode>,
  cursor: Scalars['String'],
};

export type ReconciliationSummaryNode = {
   __typename?: 'ReconciliationSummaryNode',
  deliveredFully?: Maybe<Scalars['Int']>,
  deliveredPartially?: Maybe<Scalars['Int']>,
  notDelivered?: Maybe<Scalars['Int']>,
  unsuccessful?: Maybe<Scalars['Int']>,
  pending?: Maybe<Scalars['Int']>,
  forceFailed?: Maybe<Scalars['Int']>,
  numberOfPayments?: Maybe<Scalars['Int']>,
  reconciled?: Maybe<Scalars['Int']>,
};

export type ReferralTicketExtras = {
  household?: Maybe<Scalars['ID']>,
  individual?: Maybe<Scalars['ID']>,
};

export type RefuseRegistrationDataImportMutation = {
   __typename?: 'RefuseRegistrationDataImportMutation',
  registrationDataImport?: Maybe<RegistrationDataImportNode>,
};

export enum RegistrationDataImportDatahubImportDone {
  Loading = 'LOADING',
  NotStarted = 'NOT_STARTED',
  Started = 'STARTED',
  Done = 'DONE'
}

export type RegistrationDataImportDatahubNode = Node & {
   __typename?: 'RegistrationDataImportDatahubNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  name: Scalars['String'],
  importDate: Scalars['DateTime'],
  hctId?: Maybe<Scalars['UUID']>,
  importData?: Maybe<ImportDataNode>,
  importDone: RegistrationDataImportDatahubImportDone,
  businessAreaSlug: Scalars['String'],
  households: ImportedHouseholdNodeConnection,
  individuals: ImportedIndividualNodeConnection,
};


export type RegistrationDataImportDatahubNodeHouseholdsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type RegistrationDataImportDatahubNodeIndividualsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};

export type RegistrationDataImportDatahubNodeConnection = {
   __typename?: 'RegistrationDataImportDatahubNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<RegistrationDataImportDatahubNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type RegistrationDataImportDatahubNodeEdge = {
   __typename?: 'RegistrationDataImportDatahubNodeEdge',
  node?: Maybe<RegistrationDataImportDatahubNode>,
  cursor: Scalars['String'],
};

export enum RegistrationDataImportDataSource {
  Xls = 'XLS',
  Kobo = 'KOBO',
  Diia = 'DIIA',
  FlexRegistration = 'FLEX_REGISTRATION',
  Api = 'API',
  Edopomoga = 'EDOPOMOGA'
}

export type RegistrationDataImportNode = Node & {
   __typename?: 'RegistrationDataImportNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  version: Scalars['BigInt'],
  name: Scalars['String'],
  status: RegistrationDataImportStatus,
  importDate: Scalars['DateTime'],
  importedBy?: Maybe<UserNode>,
  dataSource: RegistrationDataImportDataSource,
  numberOfIndividuals: Scalars['Int'],
  numberOfHouseholds: Scalars['Int'],
  datahubId?: Maybe<Scalars['UUID']>,
  errorMessage: Scalars['String'],
  sentryId?: Maybe<Scalars['String']>,
  pullPictures: Scalars['Boolean'],
  businessArea?: Maybe<UserBusinessAreaNode>,
  screenBeneficiary: Scalars['Boolean'],
  excluded: Scalars['Boolean'],
  program?: Maybe<ProgramNode>,
  programs: ProgramNodeConnection,
  erased: Scalars['Boolean'],
  refuseReason?: Maybe<Scalars['String']>,
  households: HouseholdNodeConnection,
  individuals: IndividualNodeConnection,
  grievanceticketSet: GrievanceTicketNodeConnection,
  messages: CommunicationMessageNodeConnection,
  batchDuplicatesCountAndPercentage?: Maybe<CountAndPercentageNode>,
  goldenRecordDuplicatesCountAndPercentage?: Maybe<CountAndPercentageNode>,
  batchPossibleDuplicatesCountAndPercentage?: Maybe<CountAndPercentageNode>,
  goldenRecordPossibleDuplicatesCountAndPercentage?: Maybe<CountAndPercentageNode>,
  batchUniqueCountAndPercentage?: Maybe<CountAndPercentageNode>,
  goldenRecordUniqueCountAndPercentage?: Maybe<CountAndPercentageNode>,
};


export type RegistrationDataImportNodeProgramsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  name?: Maybe<Scalars['String']>
};


export type RegistrationDataImportNodeHouseholdsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type RegistrationDataImportNodeIndividualsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type RegistrationDataImportNodeGrievanceticketSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type RegistrationDataImportNodeMessagesArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};

export type RegistrationDataImportNodeConnection = {
   __typename?: 'RegistrationDataImportNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<RegistrationDataImportNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type RegistrationDataImportNodeEdge = {
   __typename?: 'RegistrationDataImportNodeEdge',
  node?: Maybe<RegistrationDataImportNode>,
  cursor: Scalars['String'],
};

export enum RegistrationDataImportStatus {
  Loading = 'LOADING',
  Deduplication = 'DEDUPLICATION',
  DeduplicationFailed = 'DEDUPLICATION_FAILED',
  ImportScheduled = 'IMPORT_SCHEDULED',
  Importing = 'IMPORTING',
  ImportError = 'IMPORT_ERROR',
  InReview = 'IN_REVIEW',
  MergeScheduled = 'MERGE_SCHEDULED',
  Merged = 'MERGED',
  Merging = 'MERGING',
  MergeError = 'MERGE_ERROR',
  Refused = 'REFUSED'
}

export type RegistrationDeduplicationMutation = {
   __typename?: 'RegistrationDeduplicationMutation',
  ok?: Maybe<Scalars['Boolean']>,
};

export type RegistrationKoboImportMutation = {
   __typename?: 'RegistrationKoboImportMutation',
  validationErrors?: Maybe<Scalars['Arg']>,
  registrationDataImport?: Maybe<RegistrationDataImportNode>,
};

export type RegistrationKoboImportMutationInput = {
  importDataId?: Maybe<Scalars['String']>,
  name?: Maybe<Scalars['String']>,
  pullPictures?: Maybe<Scalars['Boolean']>,
  businessAreaSlug?: Maybe<Scalars['String']>,
  screenBeneficiary?: Maybe<Scalars['Boolean']>,
  programId?: Maybe<Scalars['String']>,
};

export type RegistrationXlsxImportMutation = {
   __typename?: 'RegistrationXlsxImportMutation',
  validationErrors?: Maybe<Scalars['Arg']>,
  registrationDataImport?: Maybe<RegistrationDataImportNode>,
};

export type RegistrationXlsxImportMutationInput = {
  importDataId?: Maybe<Scalars['ID']>,
  name?: Maybe<Scalars['String']>,
  businessAreaSlug?: Maybe<Scalars['String']>,
  screenBeneficiary?: Maybe<Scalars['Boolean']>,
  programId?: Maybe<Scalars['String']>,
};

export type ReportNode = Node & {
   __typename?: 'ReportNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  businessArea: UserBusinessAreaNode,
  file?: Maybe<Scalars['String']>,
  createdBy: UserNode,
  status: Scalars['Int'],
  reportType: Scalars['Int'],
  dateFrom: Scalars['Date'],
  dateTo: Scalars['Date'],
  numberOfRecords?: Maybe<Scalars['Int']>,
  program?: Maybe<ProgramNode>,
  adminArea: AreaNodeConnection,
  fileUrl?: Maybe<Scalars['String']>,
  adminArea1?: Maybe<AreaNodeConnection>,
  adminArea2?: Maybe<AreaNodeConnection>,
};


export type ReportNodeAdminAreaArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  name?: Maybe<Scalars['String']>
};


export type ReportNodeAdminArea1Args = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  name?: Maybe<Scalars['String']>
};


export type ReportNodeAdminArea2Args = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  name?: Maybe<Scalars['String']>
};

export type ReportNodeConnection = {
   __typename?: 'ReportNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<ReportNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type ReportNodeEdge = {
   __typename?: 'ReportNodeEdge',
  node?: Maybe<ReportNode>,
  cursor: Scalars['String'],
};

export type RestartCreateReport = {
   __typename?: 'RestartCreateReport',
  report?: Maybe<ReportNode>,
};

export type RestartCreateReportInput = {
  reportId: Scalars['ID'],
  businessAreaSlug: Scalars['String'],
};

export type RevertMarkPaymentAsFailedMutation = {
   __typename?: 'RevertMarkPaymentAsFailedMutation',
  payment?: Maybe<PaymentNode>,
};

export type RevertMarkPaymentRecordAsFailedMutation = {
   __typename?: 'RevertMarkPaymentRecordAsFailedMutation',
  paymentRecord?: Maybe<PaymentRecordNode>,
};

export type RoleNode = {
   __typename?: 'RoleNode',
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  name: Scalars['String'],
  subsystem: RoleSubsystem,
  permissions?: Maybe<Array<Scalars['String']>>,
  userRoles: Array<UserRoleNode>,
};

export enum RoleSubsystem {
  Hope = 'HOPE',
  Kobo = 'KOBO',
  Ca = 'CA',
  Api = 'API'
}

export enum RuleCommitLanguage {
  Python = 'PYTHON'
}

export type RuleCommitNode = Node & {
   __typename?: 'RuleCommitNode',
  id: Scalars['ID'],
  timestamp: Scalars['DateTime'],
  rule?: Maybe<SteficonRuleNode>,
  updatedBy?: Maybe<UserNode>,
  definition: Scalars['String'],
  isRelease: Scalars['Boolean'],
  enabled: Scalars['Boolean'],
  deprecated: Scalars['Boolean'],
  language: RuleCommitLanguage,
  affectedFields: Array<Scalars['String']>,
  before: Scalars['JSONString'],
  after: Scalars['JSONString'],
  paymentPlans: PaymentPlanNodeConnection,
  targetPopulations: TargetPopulationNodeConnection,
};


export type RuleCommitNodePaymentPlansArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type RuleCommitNodeTargetPopulationsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  program?: Maybe<Scalars['ID']>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_Lte?: Maybe<Scalars['DateTime']>,
  createdAt_Gte?: Maybe<Scalars['DateTime']>,
  updatedAt?: Maybe<Scalars['DateTime']>,
  updatedAt_Lte?: Maybe<Scalars['DateTime']>,
  updatedAt_Gte?: Maybe<Scalars['DateTime']>,
  status?: Maybe<Scalars['String']>,
  households?: Maybe<Array<Maybe<Scalars['ID']>>>,
  name?: Maybe<Scalars['String']>,
  createdByName?: Maybe<Scalars['String']>,
  totalHouseholdsCountMin?: Maybe<Scalars['Int']>,
  totalHouseholdsCountMax?: Maybe<Scalars['Int']>,
  totalIndividualsCountMin?: Maybe<Scalars['Int']>,
  totalIndividualsCountMax?: Maybe<Scalars['Int']>,
  businessArea?: Maybe<Scalars['String']>,
  createdAtRange?: Maybe<Scalars['String']>,
  paymentPlanApplicable?: Maybe<Scalars['Boolean']>,
  orderBy?: Maybe<Scalars['String']>
};

export type RuleCommitNodeConnection = {
   __typename?: 'RuleCommitNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<RuleCommitNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type RuleCommitNodeEdge = {
   __typename?: 'RuleCommitNodeEdge',
  node?: Maybe<RuleCommitNode>,
  cursor: Scalars['String'],
};

export enum RuleLanguage {
  Python = 'PYTHON'
}

export enum RuleSecurity {
  A_0 = 'A_0',
  A_2 = 'A_2',
  A_4 = 'A_4'
}

export enum RuleType {
  PaymentPlan = 'PAYMENT_PLAN',
  Targeting = 'TARGETING'
}

export enum SamplingChoices {
  FullList = 'FULL_LIST',
  Random = 'RANDOM'
}

export type SanctionListIndividualAliasNameNode = Node & {
   __typename?: 'SanctionListIndividualAliasNameNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  name: Scalars['String'],
};

export type SanctionListIndividualAliasNameNodeConnection = {
   __typename?: 'SanctionListIndividualAliasNameNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<SanctionListIndividualAliasNameNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type SanctionListIndividualAliasNameNodeEdge = {
   __typename?: 'SanctionListIndividualAliasNameNodeEdge',
  node?: Maybe<SanctionListIndividualAliasNameNode>,
  cursor: Scalars['String'],
};

export type SanctionListIndividualCountriesNode = Node & {
   __typename?: 'SanctionListIndividualCountriesNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  country?: Maybe<Scalars['String']>,
};

export type SanctionListIndividualCountriesNodeConnection = {
   __typename?: 'SanctionListIndividualCountriesNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<SanctionListIndividualCountriesNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type SanctionListIndividualCountriesNodeEdge = {
   __typename?: 'SanctionListIndividualCountriesNodeEdge',
  node?: Maybe<SanctionListIndividualCountriesNode>,
  cursor: Scalars['String'],
};

export type SanctionListIndividualDateOfBirthNode = Node & {
   __typename?: 'SanctionListIndividualDateOfBirthNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  date: Scalars['Date'],
};

export type SanctionListIndividualDateOfBirthNodeConnection = {
   __typename?: 'SanctionListIndividualDateOfBirthNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<SanctionListIndividualDateOfBirthNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type SanctionListIndividualDateOfBirthNodeEdge = {
   __typename?: 'SanctionListIndividualDateOfBirthNodeEdge',
  node?: Maybe<SanctionListIndividualDateOfBirthNode>,
  cursor: Scalars['String'],
};

export type SanctionListIndividualDocumentNode = Node & {
   __typename?: 'SanctionListIndividualDocumentNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  documentNumber: Scalars['String'],
  typeOfDocument: Scalars['String'],
  dateOfIssue?: Maybe<Scalars['String']>,
  issuingCountry?: Maybe<Scalars['String']>,
  note: Scalars['String'],
};

export type SanctionListIndividualDocumentNodeConnection = {
   __typename?: 'SanctionListIndividualDocumentNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<SanctionListIndividualDocumentNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type SanctionListIndividualDocumentNodeEdge = {
   __typename?: 'SanctionListIndividualDocumentNodeEdge',
  node?: Maybe<SanctionListIndividualDocumentNode>,
  cursor: Scalars['String'],
};

export type SanctionListIndividualNationalitiesNode = Node & {
   __typename?: 'SanctionListIndividualNationalitiesNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  nationality?: Maybe<Scalars['String']>,
};

export type SanctionListIndividualNationalitiesNodeConnection = {
   __typename?: 'SanctionListIndividualNationalitiesNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<SanctionListIndividualNationalitiesNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type SanctionListIndividualNationalitiesNodeEdge = {
   __typename?: 'SanctionListIndividualNationalitiesNodeEdge',
  node?: Maybe<SanctionListIndividualNationalitiesNode>,
  cursor: Scalars['String'],
};

export type SanctionListIndividualNode = Node & {
   __typename?: 'SanctionListIndividualNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  dataId: Scalars['Int'],
  versionNum: Scalars['Int'],
  firstName: Scalars['String'],
  secondName: Scalars['String'],
  thirdName: Scalars['String'],
  fourthName: Scalars['String'],
  fullName: Scalars['String'],
  nameOriginalScript: Scalars['String'],
  unListType: Scalars['String'],
  referenceNumber: Scalars['String'],
  listedOn: Scalars['DateTime'],
  comments: Scalars['String'],
  designation: Scalars['String'],
  listType: Scalars['String'],
  street: Scalars['String'],
  city: Scalars['String'],
  stateProvince: Scalars['String'],
  addressNote: Scalars['String'],
  countryOfBirth?: Maybe<Scalars['String']>,
  active: Scalars['Boolean'],
  documents: SanctionListIndividualDocumentNodeConnection,
  nationalities: SanctionListIndividualNationalitiesNodeConnection,
  countries: SanctionListIndividualCountriesNodeConnection,
  aliasNames: SanctionListIndividualAliasNameNodeConnection,
  datesOfBirth: SanctionListIndividualDateOfBirthNodeConnection,
};


export type SanctionListIndividualNodeDocumentsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type SanctionListIndividualNodeNationalitiesArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type SanctionListIndividualNodeCountriesArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type SanctionListIndividualNodeAliasNamesArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type SanctionListIndividualNodeDatesOfBirthArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};

export type SanctionListIndividualNodeConnection = {
   __typename?: 'SanctionListIndividualNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<SanctionListIndividualNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type SanctionListIndividualNodeEdge = {
   __typename?: 'SanctionListIndividualNodeEdge',
  node?: Maybe<SanctionListIndividualNode>,
  cursor: Scalars['String'],
};

export type SaveKoboProjectImportDataAsync = {
   __typename?: 'SaveKoboProjectImportDataAsync',
  importData?: Maybe<KoboImportDataNode>,
};

export type SectionTotalNode = {
   __typename?: 'SectionTotalNode',
  total?: Maybe<Scalars['Float']>,
};

export type SensitiveGrievanceTicketExtras = {
  household?: Maybe<Scalars['ID']>,
  individual?: Maybe<Scalars['ID']>,
  paymentRecord?: Maybe<Array<Maybe<Scalars['ID']>>>,
};

export type ServiceProviderNode = Node & {
   __typename?: 'ServiceProviderNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  businessArea: UserBusinessAreaNode,
  caId: Scalars['String'],
  fullName?: Maybe<Scalars['String']>,
  shortName?: Maybe<Scalars['String']>,
  country: Scalars['String'],
  visionId?: Maybe<Scalars['String']>,
  cashPlans: CashPlanNodeConnection,
  paymentrecordSet: PaymentRecordNodeConnection,
};


export type ServiceProviderNodeCashPlansArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type ServiceProviderNodePaymentrecordSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};

export type ServiceProviderNodeConnection = {
   __typename?: 'ServiceProviderNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<ServiceProviderNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type ServiceProviderNodeEdge = {
   __typename?: 'ServiceProviderNodeEdge',
  node?: Maybe<ServiceProviderNode>,
  cursor: Scalars['String'],
};

export type SetSteficonRuleOnPaymentPlanPaymentListMutation = {
   __typename?: 'SetSteficonRuleOnPaymentPlanPaymentListMutation',
  paymentPlan?: Maybe<PaymentPlanNode>,
};

export type SetSteficonRuleOnTargetPopulationMutationInput = {
  targetId: Scalars['ID'],
  steficonRuleId?: Maybe<Scalars['ID']>,
  version?: Maybe<Scalars['BigInt']>,
  clientMutationId?: Maybe<Scalars['String']>,
};

export type SetSteficonRuleOnTargetPopulationMutationPayload = {
   __typename?: 'SetSteficonRuleOnTargetPopulationMutationPayload',
  targetPopulation?: Maybe<TargetPopulationNode>,
  clientMutationId?: Maybe<Scalars['String']>,
};

export type SimpleApproveMutation = {
   __typename?: 'SimpleApproveMutation',
  grievanceTicket?: Maybe<GrievanceTicketNode>,
};

export type SteficonRuleNode = Node & {
   __typename?: 'SteficonRuleNode',
  id: Scalars['ID'],
  name: Scalars['String'],
  definition: Scalars['String'],
  description?: Maybe<Scalars['String']>,
  enabled: Scalars['Boolean'],
  deprecated: Scalars['Boolean'],
  language: RuleLanguage,
  security: RuleSecurity,
  createdBy?: Maybe<UserNode>,
  updatedBy?: Maybe<UserNode>,
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  type: RuleType,
  flags: Scalars['JSONString'],
  history: RuleCommitNodeConnection,
};


export type SteficonRuleNodeHistoryArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};

export type SteficonRuleNodeConnection = {
   __typename?: 'SteficonRuleNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<SteficonRuleNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type SteficonRuleNodeEdge = {
   __typename?: 'SteficonRuleNodeEdge',
  node?: Maybe<SteficonRuleNode>,
  cursor: Scalars['String'],
};

export enum SurveyCategory {
  RapidPro = 'RAPID_PRO',
  Sms = 'SMS',
  Manual = 'MANUAL'
}

export type SurveyNode = Node & {
   __typename?: 'SurveyNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  unicefId?: Maybe<Scalars['String']>,
  title: Scalars['String'],
  body: Scalars['String'],
  category: SurveyCategory,
  numberOfRecipients: Scalars['Int'],
  createdBy?: Maybe<UserNode>,
  recipients: HouseholdNodeConnection,
  targetPopulation?: Maybe<TargetPopulationNode>,
  program?: Maybe<ProgramNode>,
  businessArea: UserBusinessAreaNode,
  sampleFile?: Maybe<Scalars['String']>,
  sampleFileGeneratedAt?: Maybe<Scalars['DateTime']>,
  samplingType: SurveySamplingType,
  fullListArguments: Scalars['JSONString'],
  randomSamplingArguments: Scalars['JSONString'],
  sampleSize: Scalars['Int'],
  flowId?: Maybe<Scalars['String']>,
  successfulRapidProCalls: Array<Scalars['JSONString']>,
  sampleFilePath?: Maybe<Scalars['String']>,
  hasValidSampleFile?: Maybe<Scalars['Boolean']>,
  rapidProUrl?: Maybe<Scalars['String']>,
};


export type SurveyNodeRecipientsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};

export type SurveyNodeConnection = {
   __typename?: 'SurveyNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<SurveyNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type SurveyNodeEdge = {
   __typename?: 'SurveyNodeEdge',
  node?: Maybe<SurveyNode>,
  cursor: Scalars['String'],
};

export enum SurveySamplingType {
  FullList = 'FULL_LIST',
  Random = 'RANDOM'
}

export type TableTotalCashTransferred = {
   __typename?: 'TableTotalCashTransferred',
  data?: Maybe<Array<Maybe<_TableTotalCashTransferredDataNode>>>,
};

export type TargetingCriteriaNode = {
   __typename?: 'TargetingCriteriaNode',
  id: Scalars['UUID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  flagExcludeIfActiveAdjudicationTicket: Scalars['Boolean'],
  flagExcludeIfOnSanctionList: Scalars['Boolean'],
  targetPopulation?: Maybe<TargetPopulationNode>,
  rules?: Maybe<Array<Maybe<TargetingCriteriaRuleNode>>>,
};

export type TargetingCriteriaObjectType = {
  rules?: Maybe<Array<Maybe<TargetingCriteriaRuleObjectType>>>,
  flagExcludeIfActiveAdjudicationTicket?: Maybe<Scalars['Boolean']>,
  flagExcludeIfOnSanctionList?: Maybe<Scalars['Boolean']>,
};

export enum TargetingCriteriaRuleFilterComparisonMethod {
  Equals = 'EQUALS',
  NotEquals = 'NOT_EQUALS',
  Contains = 'CONTAINS',
  NotContains = 'NOT_CONTAINS',
  Range = 'RANGE',
  NotInRange = 'NOT_IN_RANGE',
  GreaterThan = 'GREATER_THAN',
  LessThan = 'LESS_THAN'
}

export type TargetingCriteriaRuleFilterNode = {
   __typename?: 'TargetingCriteriaRuleFilterNode',
  id: Scalars['UUID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  comparisonMethod: TargetingCriteriaRuleFilterComparisonMethod,
  targetingCriteriaRule: TargetingCriteriaRuleNode,
  isFlexField: Scalars['Boolean'],
  fieldName: Scalars['String'],
  arguments?: Maybe<Array<Maybe<Scalars['Arg']>>>,
  fieldAttribute?: Maybe<FieldAttributeNode>,
};

export type TargetingCriteriaRuleFilterObjectType = {
  comparisonMethod: Scalars['String'],
  isFlexField: Scalars['Boolean'],
  fieldName: Scalars['String'],
  arguments: Array<Maybe<Scalars['Arg']>>,
};

export type TargetingCriteriaRuleNode = {
   __typename?: 'TargetingCriteriaRuleNode',
  id: Scalars['UUID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  targetingCriteria: TargetingCriteriaNode,
  individualsFiltersBlocks?: Maybe<Array<Maybe<TargetingIndividualRuleFilterBlockNode>>>,
  filters?: Maybe<Array<Maybe<TargetingCriteriaRuleFilterNode>>>,
};

export type TargetingCriteriaRuleObjectType = {
  filters?: Maybe<Array<Maybe<TargetingCriteriaRuleFilterObjectType>>>,
  individualsFiltersBlocks?: Maybe<Array<Maybe<TargetingIndividualRuleFilterBlockObjectType>>>,
};

export enum TargetingIndividualBlockRuleFilterComparisonMethod {
  Equals = 'EQUALS',
  NotEquals = 'NOT_EQUALS',
  Contains = 'CONTAINS',
  NotContains = 'NOT_CONTAINS',
  Range = 'RANGE',
  NotInRange = 'NOT_IN_RANGE',
  GreaterThan = 'GREATER_THAN',
  LessThan = 'LESS_THAN'
}

export type TargetingIndividualBlockRuleFilterNode = {
   __typename?: 'TargetingIndividualBlockRuleFilterNode',
  id: Scalars['UUID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  comparisonMethod: TargetingIndividualBlockRuleFilterComparisonMethod,
  individualsFiltersBlock: TargetingIndividualRuleFilterBlockNode,
  isFlexField: Scalars['Boolean'],
  fieldName: Scalars['String'],
  arguments?: Maybe<Array<Maybe<Scalars['Arg']>>>,
  fieldAttribute?: Maybe<FieldAttributeNode>,
};

export type TargetingIndividualRuleFilterBlockNode = {
   __typename?: 'TargetingIndividualRuleFilterBlockNode',
  id: Scalars['UUID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  targetingCriteriaRule: TargetingCriteriaRuleNode,
  targetOnlyHoh: Scalars['Boolean'],
  individualBlockFilters?: Maybe<Array<Maybe<TargetingIndividualBlockRuleFilterNode>>>,
};

export type TargetingIndividualRuleFilterBlockObjectType = {
  individualBlockFilters?: Maybe<Array<Maybe<TargetingCriteriaRuleFilterObjectType>>>,
};

export enum TargetPopulationBuildStatus {
  Pending = 'PENDING',
  Building = 'BUILDING',
  Failed = 'FAILED',
  Ok = 'OK'
}

export type TargetPopulationNode = Node & {
   __typename?: 'TargetPopulationNode',
  isRemoved: Scalars['Boolean'],
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  version: Scalars['BigInt'],
  name: Scalars['String'],
  caId?: Maybe<Scalars['String']>,
  caHashId?: Maybe<Scalars['String']>,
  createdBy?: Maybe<UserNode>,
  changeDate?: Maybe<Scalars['DateTime']>,
  changedBy?: Maybe<UserNode>,
  finalizedAt?: Maybe<Scalars['DateTime']>,
  finalizedBy?: Maybe<UserNode>,
  businessArea?: Maybe<UserBusinessAreaNode>,
  status: TargetPopulationStatus,
  buildStatus: TargetPopulationBuildStatus,
  builtAt?: Maybe<Scalars['DateTime']>,
  households?: Maybe<HouseholdNodeConnection>,
  program?: Maybe<ProgramNode>,
  targetingCriteria?: Maybe<TargetingCriteriaNode>,
  sentToDatahub: Scalars['Boolean'],
  steficonRule?: Maybe<RuleCommitNode>,
  steficonAppliedDate?: Maybe<Scalars['DateTime']>,
  vulnerabilityScoreMin?: Maybe<Scalars['Float']>,
  vulnerabilityScoreMax?: Maybe<Scalars['Float']>,
  excludedIds: Scalars['String'],
  exclusionReason: Scalars['String'],
  totalHouseholdsCount?: Maybe<Scalars['Int']>,
  totalIndividualsCount?: Maybe<Scalars['Int']>,
  childMaleCount?: Maybe<Scalars['Int']>,
  childFemaleCount?: Maybe<Scalars['Int']>,
  adultMaleCount?: Maybe<Scalars['Int']>,
  adultFemaleCount?: Maybe<Scalars['Int']>,
  paymentPlans: PaymentPlanNodeConnection,
  paymentRecords: PaymentRecordNodeConnection,
  selections: Array<HouseholdSelectionNode>,
  messages: CommunicationMessageNodeConnection,
  surveys: SurveyNodeConnection,
  totalFamilySize?: Maybe<Scalars['Int']>,
  householdList?: Maybe<HouseholdNodeConnection>,
};


export type TargetPopulationNodeHouseholdsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  orderBy?: Maybe<Scalars['String']>,
  businessArea?: Maybe<Scalars['String']>
};


export type TargetPopulationNodePaymentPlansArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type TargetPopulationNodePaymentRecordsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type TargetPopulationNodeMessagesArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type TargetPopulationNodeSurveysArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type TargetPopulationNodeHouseholdListArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  orderBy?: Maybe<Scalars['String']>,
  businessArea?: Maybe<Scalars['String']>
};

export type TargetPopulationNodeConnection = {
   __typename?: 'TargetPopulationNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<TargetPopulationNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type TargetPopulationNodeEdge = {
   __typename?: 'TargetPopulationNodeEdge',
  node?: Maybe<TargetPopulationNode>,
  cursor: Scalars['String'],
};

export enum TargetPopulationStatus {
  Open = 'OPEN',
  Locked = 'LOCKED',
  SteficonWait = 'STEFICON_WAIT',
  SteficonRun = 'STEFICON_RUN',
  SteficonCompleted = 'STEFICON_COMPLETED',
  SteficonError = 'STEFICON_ERROR',
  Processing = 'PROCESSING',
  SendingToCashAssist = 'SENDING_TO_CASH_ASSIST',
  ReadyForCashAssist = 'READY_FOR_CASH_ASSIST',
  ReadyForPaymentModule = 'READY_FOR_PAYMENT_MODULE',
  Assigned = 'ASSIGNED'
}

export type TicketAddIndividualDetailsNode = Node & {
   __typename?: 'TicketAddIndividualDetailsNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  household?: Maybe<HouseholdNode>,
  individualData?: Maybe<Scalars['Arg']>,
  approveStatus: Scalars['Boolean'],
};

export type TicketAddIndividualDetailsNodeConnection = {
   __typename?: 'TicketAddIndividualDetailsNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<TicketAddIndividualDetailsNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type TicketAddIndividualDetailsNodeEdge = {
   __typename?: 'TicketAddIndividualDetailsNodeEdge',
  node?: Maybe<TicketAddIndividualDetailsNode>,
  cursor: Scalars['String'],
};

export type TicketByType = {
   __typename?: 'TicketByType',
  userGeneratedCount?: Maybe<Scalars['Int']>,
  systemGeneratedCount?: Maybe<Scalars['Int']>,
  closedUserGeneratedCount?: Maybe<Scalars['Int']>,
  closedSystemGeneratedCount?: Maybe<Scalars['Int']>,
  userGeneratedAvgResolution?: Maybe<Scalars['Float']>,
  systemGeneratedAvgResolution?: Maybe<Scalars['Float']>,
};

export type TicketComplaintDetailsNode = Node & {
   __typename?: 'TicketComplaintDetailsNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  paymentContentType?: Maybe<ContentTypeObjectType>,
  paymentObjectId?: Maybe<Scalars['UUID']>,
  household?: Maybe<HouseholdNode>,
  individual?: Maybe<IndividualNode>,
  paymentRecord?: Maybe<PaymentRecordAndPaymentNode>,
};

export type TicketComplaintDetailsNodeConnection = {
   __typename?: 'TicketComplaintDetailsNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<TicketComplaintDetailsNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type TicketComplaintDetailsNodeEdge = {
   __typename?: 'TicketComplaintDetailsNodeEdge',
  node?: Maybe<TicketComplaintDetailsNode>,
  cursor: Scalars['String'],
};

export type TicketDeleteHouseholdDetailsNode = Node & {
   __typename?: 'TicketDeleteHouseholdDetailsNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  household?: Maybe<HouseholdNode>,
  roleReassignData: Scalars['JSONString'],
  approveStatus: Scalars['Boolean'],
  reasonHousehold?: Maybe<HouseholdNode>,
  householdData?: Maybe<Scalars['Arg']>,
};

export type TicketDeleteHouseholdDetailsNodeConnection = {
   __typename?: 'TicketDeleteHouseholdDetailsNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<TicketDeleteHouseholdDetailsNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type TicketDeleteHouseholdDetailsNodeEdge = {
   __typename?: 'TicketDeleteHouseholdDetailsNodeEdge',
  node?: Maybe<TicketDeleteHouseholdDetailsNode>,
  cursor: Scalars['String'],
};

export type TicketDeleteIndividualDetailsNode = Node & {
   __typename?: 'TicketDeleteIndividualDetailsNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  individual?: Maybe<IndividualNode>,
  roleReassignData: Scalars['JSONString'],
  approveStatus: Scalars['Boolean'],
  individualData?: Maybe<Scalars['Arg']>,
};

export type TicketDeleteIndividualDetailsNodeConnection = {
   __typename?: 'TicketDeleteIndividualDetailsNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<TicketDeleteIndividualDetailsNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type TicketDeleteIndividualDetailsNodeEdge = {
   __typename?: 'TicketDeleteIndividualDetailsNodeEdge',
  node?: Maybe<TicketDeleteIndividualDetailsNode>,
  cursor: Scalars['String'],
};

export type TicketHouseholdDataUpdateDetailsNode = Node & {
   __typename?: 'TicketHouseholdDataUpdateDetailsNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  household?: Maybe<HouseholdNode>,
  householdData?: Maybe<Scalars['Arg']>,
};

export type TicketHouseholdDataUpdateDetailsNodeConnection = {
   __typename?: 'TicketHouseholdDataUpdateDetailsNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<TicketHouseholdDataUpdateDetailsNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type TicketHouseholdDataUpdateDetailsNodeEdge = {
   __typename?: 'TicketHouseholdDataUpdateDetailsNodeEdge',
  node?: Maybe<TicketHouseholdDataUpdateDetailsNode>,
  cursor: Scalars['String'],
};

export type TicketIndividualDataUpdateDetailsNode = Node & {
   __typename?: 'TicketIndividualDataUpdateDetailsNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  individual?: Maybe<IndividualNode>,
  individualData?: Maybe<Scalars['Arg']>,
  roleReassignData: Scalars['JSONString'],
};

export type TicketIndividualDataUpdateDetailsNodeConnection = {
   __typename?: 'TicketIndividualDataUpdateDetailsNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<TicketIndividualDataUpdateDetailsNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type TicketIndividualDataUpdateDetailsNodeEdge = {
   __typename?: 'TicketIndividualDataUpdateDetailsNodeEdge',
  node?: Maybe<TicketIndividualDataUpdateDetailsNode>,
  cursor: Scalars['String'],
};

export type TicketNeedsAdjudicationDetailsExtraDataNode = {
   __typename?: 'TicketNeedsAdjudicationDetailsExtraDataNode',
  goldenRecords?: Maybe<Array<Maybe<DeduplicationResultNode>>>,
  possibleDuplicate?: Maybe<Array<Maybe<DeduplicationResultNode>>>,
};

export type TicketNeedsAdjudicationDetailsNode = Node & {
   __typename?: 'TicketNeedsAdjudicationDetailsNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  goldenRecordsIndividual: IndividualNode,
  isMultipleDuplicatesVersion: Scalars['Boolean'],
  possibleDuplicate?: Maybe<IndividualNode>,
  possibleDuplicates?: Maybe<Array<Maybe<IndividualNode>>>,
  selectedIndividual?: Maybe<IndividualNode>,
  selectedIndividuals?: Maybe<Array<Maybe<IndividualNode>>>,
  roleReassignData: Scalars['JSONString'],
  extraData?: Maybe<TicketNeedsAdjudicationDetailsExtraDataNode>,
  scoreMin: Scalars['Float'],
  scoreMax: Scalars['Float'],
  hasDuplicatedDocument?: Maybe<Scalars['Boolean']>,
};

export type TicketNeedsAdjudicationDetailsNodeConnection = {
   __typename?: 'TicketNeedsAdjudicationDetailsNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<TicketNeedsAdjudicationDetailsNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type TicketNeedsAdjudicationDetailsNodeEdge = {
   __typename?: 'TicketNeedsAdjudicationDetailsNodeEdge',
  node?: Maybe<TicketNeedsAdjudicationDetailsNode>,
  cursor: Scalars['String'],
};

export type TicketNegativeFeedbackDetailsNode = Node & {
   __typename?: 'TicketNegativeFeedbackDetailsNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  household?: Maybe<HouseholdNode>,
  individual?: Maybe<IndividualNode>,
};

export type TicketNegativeFeedbackDetailsNodeConnection = {
   __typename?: 'TicketNegativeFeedbackDetailsNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<TicketNegativeFeedbackDetailsNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type TicketNegativeFeedbackDetailsNodeEdge = {
   __typename?: 'TicketNegativeFeedbackDetailsNodeEdge',
  node?: Maybe<TicketNegativeFeedbackDetailsNode>,
  cursor: Scalars['String'],
};

export type TicketNoteNode = Node & {
   __typename?: 'TicketNoteNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  description: Scalars['String'],
  createdBy?: Maybe<UserNode>,
};

export type TicketNoteNodeConnection = {
   __typename?: 'TicketNoteNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<TicketNoteNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type TicketNoteNodeEdge = {
   __typename?: 'TicketNoteNodeEdge',
  node?: Maybe<TicketNoteNode>,
  cursor: Scalars['String'],
};

export type TicketPaymentVerificationDetailsExtras = {
  newReceivedAmount?: Maybe<Scalars['Float']>,
  newStatus?: Maybe<Scalars['String']>,
};

export enum TicketPaymentVerificationDetailsNewStatus {
  NotReceived = 'NOT_RECEIVED',
  Pending = 'PENDING',
  Received = 'RECEIVED',
  ReceivedWithIssues = 'RECEIVED_WITH_ISSUES'
}

export type TicketPaymentVerificationDetailsNode = Node & {
   __typename?: 'TicketPaymentVerificationDetailsNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  paymentVerifications: PaymentVerificationNodeConnection,
  paymentVerificationStatus: TicketPaymentVerificationDetailsPaymentVerificationStatus,
  paymentVerification?: Maybe<PaymentVerificationNode>,
  newStatus?: Maybe<TicketPaymentVerificationDetailsNewStatus>,
  oldReceivedAmount?: Maybe<Scalars['Float']>,
  newReceivedAmount?: Maybe<Scalars['Float']>,
  approveStatus: Scalars['Boolean'],
  hasMultiplePaymentVerifications?: Maybe<Scalars['Boolean']>,
};


export type TicketPaymentVerificationDetailsNodePaymentVerificationsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};

export type TicketPaymentVerificationDetailsNodeConnection = {
   __typename?: 'TicketPaymentVerificationDetailsNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<TicketPaymentVerificationDetailsNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type TicketPaymentVerificationDetailsNodeEdge = {
   __typename?: 'TicketPaymentVerificationDetailsNodeEdge',
  node?: Maybe<TicketPaymentVerificationDetailsNode>,
  cursor: Scalars['String'],
};

export enum TicketPaymentVerificationDetailsPaymentVerificationStatus {
  NotReceived = 'NOT_RECEIVED',
  Pending = 'PENDING',
  Received = 'RECEIVED',
  ReceivedWithIssues = 'RECEIVED_WITH_ISSUES'
}

export type TicketPositiveFeedbackDetailsNode = Node & {
   __typename?: 'TicketPositiveFeedbackDetailsNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  household?: Maybe<HouseholdNode>,
  individual?: Maybe<IndividualNode>,
};

export type TicketPositiveFeedbackDetailsNodeConnection = {
   __typename?: 'TicketPositiveFeedbackDetailsNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<TicketPositiveFeedbackDetailsNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type TicketPositiveFeedbackDetailsNodeEdge = {
   __typename?: 'TicketPositiveFeedbackDetailsNodeEdge',
  node?: Maybe<TicketPositiveFeedbackDetailsNode>,
  cursor: Scalars['String'],
};

export type TicketReferralDetailsNode = Node & {
   __typename?: 'TicketReferralDetailsNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  household?: Maybe<HouseholdNode>,
  individual?: Maybe<IndividualNode>,
};

export type TicketReferralDetailsNodeConnection = {
   __typename?: 'TicketReferralDetailsNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<TicketReferralDetailsNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type TicketReferralDetailsNodeEdge = {
   __typename?: 'TicketReferralDetailsNodeEdge',
  node?: Maybe<TicketReferralDetailsNode>,
  cursor: Scalars['String'],
};

export type TicketSensitiveDetailsNode = Node & {
   __typename?: 'TicketSensitiveDetailsNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  paymentContentType?: Maybe<ContentTypeObjectType>,
  paymentObjectId?: Maybe<Scalars['UUID']>,
  household?: Maybe<HouseholdNode>,
  individual?: Maybe<IndividualNode>,
  paymentRecord?: Maybe<PaymentRecordAndPaymentNode>,
};

export type TicketSensitiveDetailsNodeConnection = {
   __typename?: 'TicketSensitiveDetailsNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<TicketSensitiveDetailsNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type TicketSensitiveDetailsNodeEdge = {
   __typename?: 'TicketSensitiveDetailsNodeEdge',
  node?: Maybe<TicketSensitiveDetailsNode>,
  cursor: Scalars['String'],
};

export type TicketSystemFlaggingDetailsNode = Node & {
   __typename?: 'TicketSystemFlaggingDetailsNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  goldenRecordsIndividual: IndividualNode,
  sanctionListIndividual: SanctionListIndividualNode,
  approveStatus: Scalars['Boolean'],
  roleReassignData: Scalars['JSONString'],
};

export type TicketSystemFlaggingDetailsNodeConnection = {
   __typename?: 'TicketSystemFlaggingDetailsNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<TicketSystemFlaggingDetailsNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type TicketSystemFlaggingDetailsNodeEdge = {
   __typename?: 'TicketSystemFlaggingDetailsNodeEdge',
  node?: Maybe<TicketSystemFlaggingDetailsNode>,
  cursor: Scalars['String'],
};

export type UnlockTargetPopulationMutation = {
   __typename?: 'UnlockTargetPopulationMutation',
  targetPopulation?: Maybe<TargetPopulationNode>,
};

export type UpdateAddIndividualIssueTypeExtras = {
  individualData: AddIndividualDataObjectType,
};

export type UpdateFeedbackInput = {
  feedbackId: Scalars['ID'],
  issueType?: Maybe<Scalars['String']>,
  householdLookup?: Maybe<Scalars['ID']>,
  individualLookup?: Maybe<Scalars['ID']>,
  description?: Maybe<Scalars['String']>,
  comments?: Maybe<Scalars['String']>,
  admin2?: Maybe<Scalars['ID']>,
  area?: Maybe<Scalars['String']>,
  language?: Maybe<Scalars['String']>,
  consent?: Maybe<Scalars['Boolean']>,
  program?: Maybe<Scalars['ID']>,
};

export type UpdateFeedbackMutation = {
   __typename?: 'UpdateFeedbackMutation',
  feedback?: Maybe<FeedbackNode>,
};

export type UpdateGrievanceTicketExtrasInput = {
  householdDataUpdateIssueTypeExtras?: Maybe<UpdateHouseholdDataUpdateIssueTypeExtras>,
  individualDataUpdateIssueTypeExtras?: Maybe<UpdateIndividualDataUpdateIssueTypeExtras>,
  addIndividualIssueTypeExtras?: Maybe<UpdateAddIndividualIssueTypeExtras>,
  category?: Maybe<CategoryExtrasInput>,
  ticketPaymentVerificationDetailsExtras?: Maybe<TicketPaymentVerificationDetailsExtras>,
};

export type UpdateGrievanceTicketInput = {
  ticketId: Scalars['ID'],
  description?: Maybe<Scalars['String']>,
  assignedTo?: Maybe<Scalars['ID']>,
  admin?: Maybe<Scalars['String']>,
  area?: Maybe<Scalars['String']>,
  language?: Maybe<Scalars['String']>,
  linkedTickets?: Maybe<Array<Maybe<Scalars['ID']>>>,
  household?: Maybe<Scalars['ID']>,
  individual?: Maybe<Scalars['ID']>,
  paymentRecord?: Maybe<Scalars['ID']>,
  extras?: Maybe<UpdateGrievanceTicketExtrasInput>,
  priority?: Maybe<Scalars['Int']>,
  urgency?: Maybe<Scalars['Int']>,
  partner?: Maybe<Scalars['Int']>,
  program?: Maybe<Scalars['ID']>,
  comments?: Maybe<Scalars['String']>,
  documentation?: Maybe<Array<Maybe<GrievanceDocumentInput>>>,
  documentationToUpdate?: Maybe<Array<Maybe<GrievanceDocumentUpdateInput>>>,
  documentationToDelete?: Maybe<Array<Maybe<Scalars['ID']>>>,
};

export type UpdateGrievanceTicketMutation = {
   __typename?: 'UpdateGrievanceTicketMutation',
  grievanceTicket?: Maybe<GrievanceTicketNode>,
};

export type UpdateHouseholdDataUpdateIssueTypeExtras = {
  householdData: HouseholdUpdateDataObjectType,
};

export type UpdateIndividualDataUpdateIssueTypeExtras = {
  individualData: IndividualUpdateDataObjectType,
};

export type UpdatePaymentPlanInput = {
  paymentPlanId: Scalars['ID'],
  targetingId?: Maybe<Scalars['ID']>,
  startDate?: Maybe<Scalars['Date']>,
  endDate?: Maybe<Scalars['Date']>,
  dispersionStartDate?: Maybe<Scalars['Date']>,
  dispersionEndDate?: Maybe<Scalars['Date']>,
  currency?: Maybe<Scalars['String']>,
};

export type UpdatePaymentPlanMutation = {
   __typename?: 'UpdatePaymentPlanMutation',
  paymentPlan?: Maybe<PaymentPlanNode>,
};

export type UpdatePaymentVerificationReceivedAndReceivedAmount = {
   __typename?: 'UpdatePaymentVerificationReceivedAndReceivedAmount',
  paymentVerification?: Maybe<PaymentVerificationNode>,
};

export type UpdatePaymentVerificationStatusAndReceivedAmount = {
   __typename?: 'UpdatePaymentVerificationStatusAndReceivedAmount',
  paymentVerification?: Maybe<PaymentVerificationNode>,
};

export type UpdateProgram = {
   __typename?: 'UpdateProgram',
  validationErrors?: Maybe<Scalars['Arg']>,
  program?: Maybe<ProgramNode>,
};

export type UpdateProgramInput = {
  id: Scalars['String'],
  name?: Maybe<Scalars['String']>,
  status?: Maybe<Scalars['String']>,
  startDate?: Maybe<Scalars['Date']>,
  endDate?: Maybe<Scalars['Date']>,
  description?: Maybe<Scalars['String']>,
  budget?: Maybe<Scalars['Decimal']>,
  frequencyOfPayments?: Maybe<Scalars['String']>,
  sector?: Maybe<Scalars['String']>,
  scope?: Maybe<Scalars['String']>,
  cashPlus?: Maybe<Scalars['Boolean']>,
  populationGoal?: Maybe<Scalars['Int']>,
  administrativeAreasOfImplementation?: Maybe<Scalars['String']>,
  individualDataNeeded?: Maybe<Scalars['Boolean']>,
};

export type UpdateTargetPopulationInput = {
  id: Scalars['ID'],
  name?: Maybe<Scalars['String']>,
  targetingCriteria?: Maybe<TargetingCriteriaObjectType>,
  programId?: Maybe<Scalars['ID']>,
  vulnerabilityScoreMin?: Maybe<Scalars['Decimal']>,
  vulnerabilityScoreMax?: Maybe<Scalars['Decimal']>,
  excludedIds?: Maybe<Scalars['String']>,
  exclusionReason?: Maybe<Scalars['String']>,
};

export type UpdateTargetPopulationMutation = {
   __typename?: 'UpdateTargetPopulationMutation',
  validationErrors?: Maybe<Scalars['Arg']>,
  targetPopulation?: Maybe<TargetPopulationNode>,
};


export type UploadImportDataXlsxFileAsync = {
   __typename?: 'UploadImportDataXLSXFileAsync',
  importData?: Maybe<ImportDataNode>,
  errors?: Maybe<Array<Maybe<XlsxRowErrorNode>>>,
};

export type UserBusinessAreaNode = Node & {
   __typename?: 'UserBusinessAreaNode',
  id: Scalars['ID'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  code: Scalars['String'],
  name: Scalars['String'],
  longName: Scalars['String'],
  regionCode: Scalars['String'],
  regionName: Scalars['String'],
  koboUsername?: Maybe<Scalars['String']>,
  koboToken?: Maybe<Scalars['String']>,
  koboUrl?: Maybe<Scalars['String']>,
  rapidProHost?: Maybe<Scalars['String']>,
  rapidProPaymentVerificationToken?: Maybe<Scalars['String']>,
  rapidProMessagesToken?: Maybe<Scalars['String']>,
  rapidProSurveyToken?: Maybe<Scalars['String']>,
  slug: Scalars['String'],
  customFields: Scalars['JSONString'],
  hasDataSharingAgreement: Scalars['Boolean'],
  parent?: Maybe<UserBusinessAreaNode>,
  isSplit: Scalars['Boolean'],
  postponeDeduplication: Scalars['Boolean'],
  deduplicationDuplicateScore: Scalars['Float'],
  deduplicationPossibleDuplicateScore: Scalars['Float'],
  deduplicationBatchDuplicatesPercentage: Scalars['Int'],
  deduplicationBatchDuplicatesAllowed: Scalars['Int'],
  deduplicationGoldenRecordDuplicatesPercentage: Scalars['Int'],
  deduplicationGoldenRecordDuplicatesAllowed: Scalars['Int'],
  screenBeneficiary: Scalars['Boolean'],
  deduplicationIgnoreWithdraw: Scalars['Boolean'],
  isPaymentPlanApplicable: Scalars['Boolean'],
  isAccountabilityApplicable?: Maybe<Scalars['Boolean']>,
  active: Scalars['Boolean'],
  children: UserBusinessAreaNodeConnection,
  userRoles: Array<UserRoleNode>,
  householdSet: HouseholdNodeConnection,
  individualSet: IndividualNodeConnection,
  registrationdataimportSet: RegistrationDataImportNodeConnection,
  paymentplanSet: PaymentPlanNodeConnection,
  cashplanSet: CashPlanNodeConnection,
  paymentrecordSet: PaymentRecordNodeConnection,
  paymentSet: PaymentNodeConnection,
  serviceproviderSet: ServiceProviderNodeConnection,
  tickets: GrievanceTicketNodeConnection,
  programSet: ProgramNodeConnection,
  targetpopulationSet: TargetPopulationNodeConnection,
  reports: ReportNodeConnection,
  logentrySet: PaymentVerificationLogEntryNodeConnection,
  messageSet: CommunicationMessageNodeConnection,
  feedbackSet: FeedbackNodeConnection,
  surveySet: SurveyNodeConnection,
  permissions?: Maybe<Array<Maybe<Scalars['String']>>>,
};


export type UserBusinessAreaNodeChildrenArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  id?: Maybe<Scalars['UUID']>
};


export type UserBusinessAreaNodeHouseholdSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserBusinessAreaNodeIndividualSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserBusinessAreaNodeRegistrationdataimportSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserBusinessAreaNodePaymentplanSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserBusinessAreaNodeCashplanSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserBusinessAreaNodePaymentrecordSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserBusinessAreaNodePaymentSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserBusinessAreaNodeServiceproviderSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserBusinessAreaNodeTicketsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserBusinessAreaNodeProgramSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  name?: Maybe<Scalars['String']>
};


export type UserBusinessAreaNodeTargetpopulationSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  program?: Maybe<Scalars['ID']>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_Lte?: Maybe<Scalars['DateTime']>,
  createdAt_Gte?: Maybe<Scalars['DateTime']>,
  updatedAt?: Maybe<Scalars['DateTime']>,
  updatedAt_Lte?: Maybe<Scalars['DateTime']>,
  updatedAt_Gte?: Maybe<Scalars['DateTime']>,
  status?: Maybe<Scalars['String']>,
  households?: Maybe<Array<Maybe<Scalars['ID']>>>,
  name?: Maybe<Scalars['String']>,
  createdByName?: Maybe<Scalars['String']>,
  totalHouseholdsCountMin?: Maybe<Scalars['Int']>,
  totalHouseholdsCountMax?: Maybe<Scalars['Int']>,
  totalIndividualsCountMin?: Maybe<Scalars['Int']>,
  totalIndividualsCountMax?: Maybe<Scalars['Int']>,
  businessArea?: Maybe<Scalars['String']>,
  createdAtRange?: Maybe<Scalars['String']>,
  paymentPlanApplicable?: Maybe<Scalars['Boolean']>,
  orderBy?: Maybe<Scalars['String']>
};


export type UserBusinessAreaNodeReportsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserBusinessAreaNodeLogentrySetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserBusinessAreaNodeMessageSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserBusinessAreaNodeFeedbackSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserBusinessAreaNodeSurveySetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};

export type UserBusinessAreaNodeConnection = {
   __typename?: 'UserBusinessAreaNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<UserBusinessAreaNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type UserBusinessAreaNodeEdge = {
   __typename?: 'UserBusinessAreaNodeEdge',
  node?: Maybe<UserBusinessAreaNode>,
  cursor: Scalars['String'],
};

export type UserNode = Node & {
   __typename?: 'UserNode',
  lastLogin?: Maybe<Scalars['DateTime']>,
  isSuperuser: Scalars['Boolean'],
  username: Scalars['String'],
  firstName: Scalars['String'],
  lastName: Scalars['String'],
  isStaff: Scalars['Boolean'],
  isActive: Scalars['Boolean'],
  dateJoined: Scalars['DateTime'],
  id: Scalars['ID'],
  status: UserStatus,
  partner?: Maybe<PartnerType>,
  email: Scalars['String'],
  availableForExport: Scalars['Boolean'],
  customFields: Scalars['JSONString'],
  jobTitle: Scalars['String'],
  adUuid?: Maybe<Scalars['String']>,
  lastModifyDate?: Maybe<Scalars['DateTime']>,
  lastDoapSync?: Maybe<Scalars['DateTime']>,
  doapHash: Scalars['String'],
  userRoles: Array<UserRoleNode>,
  documentSet: DocumentNodeConnection,
  registrationDataImports: RegistrationDataImportNodeConnection,
  createdPaymentPlans: PaymentPlanNodeConnection,
  createdFinancialServiceProviderXlsxTemplates: FinancialServiceProviderXlsxTemplateNodeConnection,
  createdFinancialServiceProviders: FinancialServiceProviderNodeConnection,
  createdDeliveryMechanisms: DeliveryMechanismNodeConnection,
  sentDeliveryMechanisms: DeliveryMechanismNodeConnection,
  approvalSet: Array<ApprovalNode>,
  createdTickets: GrievanceTicketNodeConnection,
  assignedTickets: GrievanceTicketNodeConnection,
  ticketNotes: TicketNoteNodeConnection,
  targetPopulations: TargetPopulationNodeConnection,
  changedTargetPopulations: TargetPopulationNodeConnection,
  finalizedTargetPopulations: TargetPopulationNodeConnection,
  reports: ReportNodeConnection,
  logs: PaymentVerificationLogEntryNodeConnection,
  messages: CommunicationMessageNodeConnection,
  feedbacks: FeedbackNodeConnection,
  feedbackMessages: FeedbackMessageNodeConnection,
  surveys: SurveyNodeConnection,
  businessAreas?: Maybe<UserBusinessAreaNodeConnection>,
};


export type UserNodeDocumentSetArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserNodeRegistrationDataImportsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserNodeCreatedPaymentPlansArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserNodeCreatedFinancialServiceProviderXlsxTemplatesArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserNodeCreatedFinancialServiceProvidersArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserNodeCreatedDeliveryMechanismsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserNodeSentDeliveryMechanismsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserNodeCreatedTicketsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserNodeAssignedTicketsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserNodeTicketNotesArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserNodeTargetPopulationsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  program?: Maybe<Scalars['ID']>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_Lte?: Maybe<Scalars['DateTime']>,
  createdAt_Gte?: Maybe<Scalars['DateTime']>,
  updatedAt?: Maybe<Scalars['DateTime']>,
  updatedAt_Lte?: Maybe<Scalars['DateTime']>,
  updatedAt_Gte?: Maybe<Scalars['DateTime']>,
  status?: Maybe<Scalars['String']>,
  households?: Maybe<Array<Maybe<Scalars['ID']>>>,
  name?: Maybe<Scalars['String']>,
  createdByName?: Maybe<Scalars['String']>,
  totalHouseholdsCountMin?: Maybe<Scalars['Int']>,
  totalHouseholdsCountMax?: Maybe<Scalars['Int']>,
  totalIndividualsCountMin?: Maybe<Scalars['Int']>,
  totalIndividualsCountMax?: Maybe<Scalars['Int']>,
  businessArea?: Maybe<Scalars['String']>,
  createdAtRange?: Maybe<Scalars['String']>,
  paymentPlanApplicable?: Maybe<Scalars['Boolean']>,
  orderBy?: Maybe<Scalars['String']>
};


export type UserNodeChangedTargetPopulationsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  program?: Maybe<Scalars['ID']>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_Lte?: Maybe<Scalars['DateTime']>,
  createdAt_Gte?: Maybe<Scalars['DateTime']>,
  updatedAt?: Maybe<Scalars['DateTime']>,
  updatedAt_Lte?: Maybe<Scalars['DateTime']>,
  updatedAt_Gte?: Maybe<Scalars['DateTime']>,
  status?: Maybe<Scalars['String']>,
  households?: Maybe<Array<Maybe<Scalars['ID']>>>,
  name?: Maybe<Scalars['String']>,
  createdByName?: Maybe<Scalars['String']>,
  totalHouseholdsCountMin?: Maybe<Scalars['Int']>,
  totalHouseholdsCountMax?: Maybe<Scalars['Int']>,
  totalIndividualsCountMin?: Maybe<Scalars['Int']>,
  totalIndividualsCountMax?: Maybe<Scalars['Int']>,
  businessArea?: Maybe<Scalars['String']>,
  createdAtRange?: Maybe<Scalars['String']>,
  paymentPlanApplicable?: Maybe<Scalars['Boolean']>,
  orderBy?: Maybe<Scalars['String']>
};


export type UserNodeFinalizedTargetPopulationsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  program?: Maybe<Scalars['ID']>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_Lte?: Maybe<Scalars['DateTime']>,
  createdAt_Gte?: Maybe<Scalars['DateTime']>,
  updatedAt?: Maybe<Scalars['DateTime']>,
  updatedAt_Lte?: Maybe<Scalars['DateTime']>,
  updatedAt_Gte?: Maybe<Scalars['DateTime']>,
  status?: Maybe<Scalars['String']>,
  households?: Maybe<Array<Maybe<Scalars['ID']>>>,
  name?: Maybe<Scalars['String']>,
  createdByName?: Maybe<Scalars['String']>,
  totalHouseholdsCountMin?: Maybe<Scalars['Int']>,
  totalHouseholdsCountMax?: Maybe<Scalars['Int']>,
  totalIndividualsCountMin?: Maybe<Scalars['Int']>,
  totalIndividualsCountMax?: Maybe<Scalars['Int']>,
  businessArea?: Maybe<Scalars['String']>,
  createdAtRange?: Maybe<Scalars['String']>,
  paymentPlanApplicable?: Maybe<Scalars['Boolean']>,
  orderBy?: Maybe<Scalars['String']>
};


export type UserNodeReportsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserNodeLogsArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserNodeMessagesArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserNodeFeedbacksArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserNodeFeedbackMessagesArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserNodeSurveysArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserNodeBusinessAreasArgs = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  id?: Maybe<Scalars['UUID']>
};

export type UserNodeConnection = {
   __typename?: 'UserNodeConnection',
  pageInfo: PageInfo,
  edges: Array<Maybe<UserNodeEdge>>,
  totalCount?: Maybe<Scalars['Int']>,
  edgeCount?: Maybe<Scalars['Int']>,
};

export type UserNodeEdge = {
   __typename?: 'UserNodeEdge',
  node?: Maybe<UserNode>,
  cursor: Scalars['String'],
};

export type UserRoleNode = {
   __typename?: 'UserRoleNode',
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
  businessArea: UserBusinessAreaNode,
  role: RoleNode,
};

export enum UserStatus {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Invited = 'INVITED'
}


export type VolumeByDeliveryMechanismNode = Node & {
   __typename?: 'VolumeByDeliveryMechanismNode',
  id: Scalars['ID'],
  deliveryMechanism?: Maybe<DeliveryMechanismNode>,
  volume?: Maybe<Scalars['Float']>,
  volumeUsd?: Maybe<Scalars['Float']>,
};

export type XlsxErrorNode = {
   __typename?: 'XlsxErrorNode',
  sheet?: Maybe<Scalars['String']>,
  coordinates?: Maybe<Scalars['String']>,
  message?: Maybe<Scalars['String']>,
};

export type XlsxRowErrorNode = {
   __typename?: 'XlsxRowErrorNode',
  rowNumber?: Maybe<Scalars['Int']>,
  header?: Maybe<Scalars['String']>,
  message?: Maybe<Scalars['String']>,
};

export type GrievanceTicketDetailedFragment = (
  { __typename?: 'GrievanceTicketNode' }
  & Pick<GrievanceTicketNode, 'id' | 'unicefId' | 'status' | 'category' | 'consent' | 'createdAt' | 'updatedAt' | 'description' | 'language' | 'admin' | 'area' | 'issueType' | 'priority' | 'urgency' | 'comments'>
  & { partner: Maybe<(
    { __typename?: 'PartnerType' }
    & Pick<PartnerType, 'id' | 'name'>
  )>, businessArea: (
    { __typename?: 'UserBusinessAreaNode' }
    & Pick<UserBusinessAreaNode, 'postponeDeduplication'>
  ), createdBy: Maybe<(
    { __typename?: 'UserNode' }
    & Pick<UserNode, 'id' | 'firstName' | 'lastName' | 'email'>
  )>, admin2: Maybe<(
    { __typename?: 'AreaNode' }
    & Pick<AreaNode, 'id' | 'name' | 'pCode'>
  )>, assignedTo: Maybe<(
    { __typename?: 'UserNode' }
    & Pick<UserNode, 'id' | 'firstName' | 'lastName' | 'email'>
  )>, individual: Maybe<(
    { __typename?: 'IndividualNode' }
    & { householdsAndRoles: Array<(
      { __typename?: 'IndividualRoleInHouseholdNode' }
      & Pick<IndividualRoleInHouseholdNode, 'id' | 'role'>
      & { individual: (
        { __typename?: 'IndividualNode' }
        & Pick<IndividualNode, 'id' | 'unicefId' | 'fullName'>
      ), household: (
        { __typename?: 'HouseholdNode' }
        & Pick<HouseholdNode, 'id' | 'unicefId'>
      ) }
    )> }
    & IndividualDetailedFragment
  )>, household: Maybe<(
    { __typename?: 'HouseholdNode' }
    & HouseholdDetailedFragment
  )>, paymentRecord: Maybe<(
    { __typename?: 'PaymentRecordAndPaymentNode' }
    & Pick<PaymentRecordAndPaymentNode, 'id' | 'caId' | 'deliveredQuantity' | 'objType'>
  )>, relatedTickets: Maybe<Array<Maybe<(
    { __typename?: 'GrievanceTicketNode' }
    & Pick<GrievanceTicketNode, 'id' | 'unicefId' | 'status'>
    & { household: Maybe<(
      { __typename?: 'HouseholdNode' }
      & Pick<HouseholdNode, 'id' | 'unicefId'>
    )> }
  )>>>, linkedTickets: Maybe<Array<Maybe<(
    { __typename?: 'GrievanceTicketNode' }
    & Pick<GrievanceTicketNode, 'id' | 'unicefId' | 'category' | 'status'>
    & { household: Maybe<(
      { __typename?: 'HouseholdNode' }
      & Pick<HouseholdNode, 'id' | 'unicefId'>
    )> }
  )>>>, existingTickets: Maybe<Array<Maybe<(
    { __typename?: 'GrievanceTicketNode' }
    & Pick<GrievanceTicketNode, 'id' | 'category' | 'unicefId' | 'status'>
    & { household: Maybe<(
      { __typename?: 'HouseholdNode' }
      & Pick<HouseholdNode, 'id' | 'unicefId'>
    )> }
  )>>>, addIndividualTicketDetails: Maybe<(
    { __typename?: 'TicketAddIndividualDetailsNode' }
    & Pick<TicketAddIndividualDetailsNode, 'id' | 'individualData' | 'approveStatus'>
    & { household: Maybe<(
      { __typename?: 'HouseholdNode' }
      & Pick<HouseholdNode, 'id' | 'unicefId'>
    )> }
  )>, individualDataUpdateTicketDetails: Maybe<(
    { __typename?: 'TicketIndividualDataUpdateDetailsNode' }
    & Pick<TicketIndividualDataUpdateDetailsNode, 'id' | 'individualData' | 'roleReassignData'>
    & { individual: Maybe<(
      { __typename?: 'IndividualNode' }
      & IndividualDetailedFragment
    )> }
  )>, householdDataUpdateTicketDetails: Maybe<(
    { __typename?: 'TicketHouseholdDataUpdateDetailsNode' }
    & Pick<TicketHouseholdDataUpdateDetailsNode, 'id' | 'householdData'>
    & { household: Maybe<(
      { __typename?: 'HouseholdNode' }
      & HouseholdDetailedFragment
    )> }
  )>, deleteIndividualTicketDetails: Maybe<(
    { __typename?: 'TicketDeleteIndividualDetailsNode' }
    & Pick<TicketDeleteIndividualDetailsNode, 'id' | 'roleReassignData' | 'approveStatus'>
  )>, deleteHouseholdTicketDetails: Maybe<(
    { __typename?: 'TicketDeleteHouseholdDetailsNode' }
    & Pick<TicketDeleteHouseholdDetailsNode, 'id' | 'approveStatus'>
    & { reasonHousehold: Maybe<(
      { __typename?: 'HouseholdNode' }
      & Pick<HouseholdNode, 'id' | 'unicefId'>
    )> }
  )>, systemFlaggingTicketDetails: Maybe<(
    { __typename?: 'TicketSystemFlaggingDetailsNode' }
    & Pick<TicketSystemFlaggingDetailsNode, 'id' | 'approveStatus' | 'roleReassignData'>
    & { goldenRecordsIndividual: (
      { __typename?: 'IndividualNode' }
      & Pick<IndividualNode, 'id' | 'fullName' | 'birthDate' | 'lastRegistrationDate'>
      & { documents: (
        { __typename?: 'DocumentNodeConnection' }
        & { edges: Array<Maybe<(
          { __typename?: 'DocumentNodeEdge' }
          & { node: Maybe<(
            { __typename?: 'DocumentNode' }
            & Pick<DocumentNode, 'id' | 'documentNumber'>
            & { type: (
              { __typename?: 'DocumentTypeNode' }
              & Pick<DocumentTypeNode, 'label' | 'key'>
            ) }
          )> }
        )>> }
      ) }
    ), sanctionListIndividual: (
      { __typename?: 'SanctionListIndividualNode' }
      & Pick<SanctionListIndividualNode, 'id' | 'fullName' | 'referenceNumber'>
      & { datesOfBirth: (
        { __typename?: 'SanctionListIndividualDateOfBirthNodeConnection' }
        & { edges: Array<Maybe<(
          { __typename?: 'SanctionListIndividualDateOfBirthNodeEdge' }
          & { node: Maybe<(
            { __typename?: 'SanctionListIndividualDateOfBirthNode' }
            & Pick<SanctionListIndividualDateOfBirthNode, 'id' | 'date'>
          )> }
        )>> }
      ), documents: (
        { __typename?: 'SanctionListIndividualDocumentNodeConnection' }
        & { edges: Array<Maybe<(
          { __typename?: 'SanctionListIndividualDocumentNodeEdge' }
          & { node: Maybe<(
            { __typename?: 'SanctionListIndividualDocumentNode' }
            & Pick<SanctionListIndividualDocumentNode, 'id' | 'documentNumber' | 'typeOfDocument'>
          )> }
        )>> }
      ) }
    ) }
  )>, paymentVerificationTicketDetails: Maybe<(
    { __typename?: 'TicketPaymentVerificationDetailsNode' }
    & Pick<TicketPaymentVerificationDetailsNode, 'id' | 'newStatus' | 'oldReceivedAmount' | 'newReceivedAmount' | 'approveStatus' | 'paymentVerificationStatus' | 'hasMultiplePaymentVerifications'>
    & { paymentVerification: Maybe<(
      { __typename?: 'PaymentVerificationNode' }
      & Pick<PaymentVerificationNode, 'id' | 'receivedAmount'>
    )>, paymentVerifications: (
      { __typename?: 'PaymentVerificationNodeConnection' }
      & { edges: Array<Maybe<(
        { __typename?: 'PaymentVerificationNodeEdge' }
        & { node: Maybe<(
          { __typename?: 'PaymentVerificationNode' }
          & Pick<PaymentVerificationNode, 'id'>
        )> }
      )>> }
    ) }
  )>, needsAdjudicationTicketDetails: Maybe<(
    { __typename?: 'TicketNeedsAdjudicationDetailsNode' }
    & Pick<TicketNeedsAdjudicationDetailsNode, 'id' | 'hasDuplicatedDocument' | 'isMultipleDuplicatesVersion' | 'roleReassignData'>
    & { extraData: Maybe<(
      { __typename?: 'TicketNeedsAdjudicationDetailsExtraDataNode' }
      & { goldenRecords: Maybe<Array<Maybe<(
        { __typename?: 'DeduplicationResultNode' }
        & Pick<DeduplicationResultNode, 'hitId' | 'proximityToScore' | 'score'>
      )>>>, possibleDuplicate: Maybe<Array<Maybe<(
        { __typename?: 'DeduplicationResultNode' }
        & Pick<DeduplicationResultNode, 'hitId' | 'proximityToScore' | 'score'>
      )>>> }
    )>, goldenRecordsIndividual: (
      { __typename?: 'IndividualNode' }
      & Pick<IndividualNode, 'id' | 'unicefId' | 'fullName' | 'birthDate' | 'lastRegistrationDate' | 'sex'>
      & { documents: (
        { __typename?: 'DocumentNodeConnection' }
        & { edges: Array<Maybe<(
          { __typename?: 'DocumentNodeEdge' }
          & { node: Maybe<(
            { __typename?: 'DocumentNode' }
            & Pick<DocumentNode, 'id' | 'country' | 'documentNumber' | 'photo'>
            & { type: (
              { __typename?: 'DocumentTypeNode' }
              & Pick<DocumentTypeNode, 'label' | 'key'>
            ) }
          )> }
        )>> }
      ), household: Maybe<(
        { __typename?: 'HouseholdNode' }
        & Pick<HouseholdNode, 'id' | 'unicefId' | 'village'>
        & { admin2: Maybe<(
          { __typename?: 'AreaNode' }
          & Pick<AreaNode, 'id' | 'name'>
        )> }
      )>, deduplicationGoldenRecordResults: Maybe<Array<Maybe<(
        { __typename?: 'DeduplicationResultNode' }
        & Pick<DeduplicationResultNode, 'hitId' | 'proximityToScore' | 'score'>
      )>>> }
    ), possibleDuplicate: Maybe<(
      { __typename?: 'IndividualNode' }
      & Pick<IndividualNode, 'id' | 'unicefId' | 'lastRegistrationDate' | 'fullName' | 'birthDate' | 'sex'>
      & { documents: (
        { __typename?: 'DocumentNodeConnection' }
        & { edges: Array<Maybe<(
          { __typename?: 'DocumentNodeEdge' }
          & { node: Maybe<(
            { __typename?: 'DocumentNode' }
            & Pick<DocumentNode, 'id' | 'country' | 'documentNumber' | 'photo'>
            & { type: (
              { __typename?: 'DocumentTypeNode' }
              & Pick<DocumentTypeNode, 'label' | 'key'>
            ) }
          )> }
        )>> }
      ), household: Maybe<(
        { __typename?: 'HouseholdNode' }
        & Pick<HouseholdNode, 'unicefId' | 'id' | 'village'>
        & { admin2: Maybe<(
          { __typename?: 'AreaNode' }
          & Pick<AreaNode, 'id' | 'name'>
        )> }
      )>, deduplicationGoldenRecordResults: Maybe<Array<Maybe<(
        { __typename?: 'DeduplicationResultNode' }
        & Pick<DeduplicationResultNode, 'hitId' | 'proximityToScore' | 'score'>
      )>>> }
    )>, possibleDuplicates: Maybe<Array<Maybe<(
      { __typename?: 'IndividualNode' }
      & Pick<IndividualNode, 'id' | 'unicefId' | 'lastRegistrationDate' | 'fullName' | 'birthDate' | 'sex'>
      & { documents: (
        { __typename?: 'DocumentNodeConnection' }
        & { edges: Array<Maybe<(
          { __typename?: 'DocumentNodeEdge' }
          & { node: Maybe<(
            { __typename?: 'DocumentNode' }
            & Pick<DocumentNode, 'id' | 'country' | 'documentNumber' | 'photo'>
            & { type: (
              { __typename?: 'DocumentTypeNode' }
              & Pick<DocumentTypeNode, 'label' | 'key'>
            ) }
          )> }
        )>> }
      ), household: Maybe<(
        { __typename?: 'HouseholdNode' }
        & Pick<HouseholdNode, 'unicefId' | 'id' | 'village'>
        & { admin2: Maybe<(
          { __typename?: 'AreaNode' }
          & Pick<AreaNode, 'id' | 'name'>
        )> }
      )>, deduplicationGoldenRecordResults: Maybe<Array<Maybe<(
        { __typename?: 'DeduplicationResultNode' }
        & Pick<DeduplicationResultNode, 'hitId' | 'proximityToScore' | 'score'>
      )>>> }
    )>>>, selectedIndividual: Maybe<(
      { __typename?: 'IndividualNode' }
      & { household: Maybe<(
        { __typename?: 'HouseholdNode' }
        & HouseholdDetailedFragment
      )>, householdsAndRoles: Array<(
        { __typename?: 'IndividualRoleInHouseholdNode' }
        & Pick<IndividualRoleInHouseholdNode, 'id' | 'role'>
        & { individual: (
          { __typename?: 'IndividualNode' }
          & Pick<IndividualNode, 'id' | 'unicefId' | 'fullName'>
        ), household: (
          { __typename?: 'HouseholdNode' }
          & Pick<HouseholdNode, 'id' | 'unicefId'>
        ) }
      )> }
      & IndividualDetailedFragment
    )>, selectedIndividuals: Maybe<Array<Maybe<(
      { __typename?: 'IndividualNode' }
      & { household: Maybe<(
        { __typename?: 'HouseholdNode' }
        & HouseholdDetailedFragment
      )>, householdsAndRoles: Array<(
        { __typename?: 'IndividualRoleInHouseholdNode' }
        & Pick<IndividualRoleInHouseholdNode, 'id' | 'role'>
        & { individual: (
          { __typename?: 'IndividualNode' }
          & Pick<IndividualNode, 'id' | 'unicefId' | 'fullName'>
        ), household: (
          { __typename?: 'HouseholdNode' }
          & Pick<HouseholdNode, 'id' | 'unicefId'>
        ) }
      )> }
      & IndividualDetailedFragment
    )>>> }
  )>, ticketNotes: (
    { __typename?: 'TicketNoteNodeConnection' }
    & { edges: Array<Maybe<(
      { __typename?: 'TicketNoteNodeEdge' }
      & { node: Maybe<(
        { __typename?: 'TicketNoteNode' }
        & Pick<TicketNoteNode, 'id' | 'createdAt' | 'updatedAt' | 'description'>
        & { createdBy: Maybe<(
          { __typename?: 'UserNode' }
          & Pick<UserNode, 'id' | 'firstName' | 'lastName' | 'email'>
        )> }
      )> }
    )>> }
  ), programs: Maybe<Array<Maybe<(
    { __typename?: 'ProgramNode' }
    & Pick<ProgramNode, 'name' | 'id'>
  )>>>, documentation: Maybe<Array<Maybe<(
    { __typename?: 'GrievanceDocumentNode' }
    & Pick<GrievanceDocumentNode, 'id' | 'createdAt' | 'updatedAt' | 'name' | 'fileSize' | 'contentType' | 'filePath' | 'fileName'>
    & { createdBy: Maybe<(
      { __typename?: 'UserNode' }
      & Pick<UserNode, 'id' | 'firstName' | 'lastName' | 'email'>
    )> }
  )>>> }
);

export type HouseholdMinimalFragment = (
  { __typename?: 'HouseholdNode' }
  & Pick<HouseholdNode, 'id' | 'status' | 'createdAt' | 'residenceStatus' | 'size' | 'totalCashReceived' | 'totalCashReceivedUsd' | 'currency' | 'firstRegistrationDate' | 'lastRegistrationDate' | 'sanctionListPossibleMatch' | 'sanctionListConfirmedMatch' | 'hasDuplicates' | 'unicefId' | 'flexFields' | 'unhcrId' | 'geopoint' | 'village' | 'adminAreaTitle' | 'address'>
  & { admin1: Maybe<(
    { __typename?: 'AreaNode' }
    & Pick<AreaNode, 'id' | 'name' | 'level' | 'pCode'>
  )>, admin2: Maybe<(
    { __typename?: 'AreaNode' }
    & Pick<AreaNode, 'id' | 'name' | 'level' | 'pCode'>
  )>, admin3: Maybe<(
    { __typename?: 'AreaNode' }
    & Pick<AreaNode, 'id' | 'name' | 'level' | 'pCode'>
  )>, admin4: Maybe<(
    { __typename?: 'AreaNode' }
    & Pick<AreaNode, 'id' | 'name' | 'level' | 'pCode'>
  )>, headOfHousehold: (
    { __typename?: 'IndividualNode' }
    & Pick<IndividualNode, 'id' | 'fullName' | 'givenName' | 'familyName'>
  ), individuals: Maybe<(
    { __typename?: 'IndividualNodeConnection' }
    & Pick<IndividualNodeConnection, 'totalCount'>
  )>, programs: (
    { __typename?: 'ProgramNodeConnection' }
    & { edges: Array<Maybe<(
      { __typename?: 'ProgramNodeEdge' }
      & { node: Maybe<(
        { __typename?: 'ProgramNode' }
        & Pick<ProgramNode, 'id' | 'name'>
      )> }
    )>> }
  ) }
);

export type HouseholdDetailedFragment = (
  { __typename?: 'HouseholdNode' }
  & Pick<HouseholdNode, 'activeIndividualsCount' | 'countryOrigin' | 'country' | 'zipCode' | 'femaleAgeGroup05Count' | 'femaleAgeGroup611Count' | 'femaleAgeGroup1217Count' | 'femaleAgeGroup1859Count' | 'femaleAgeGroup60Count' | 'pregnantCount' | 'maleAgeGroup05Count' | 'maleAgeGroup611Count' | 'maleAgeGroup1217Count' | 'maleAgeGroup1859Count' | 'maleAgeGroup60Count' | 'femaleAgeGroup05DisabledCount' | 'femaleAgeGroup611DisabledCount' | 'femaleAgeGroup1217DisabledCount' | 'femaleAgeGroup1859DisabledCount' | 'femaleAgeGroup60DisabledCount' | 'maleAgeGroup05DisabledCount' | 'maleAgeGroup611DisabledCount' | 'maleAgeGroup1217DisabledCount' | 'maleAgeGroup1859DisabledCount' | 'maleAgeGroup60DisabledCount' | 'fchildHoh' | 'childHoh' | 'start' | 'deviceid' | 'orgNameEnumerator' | 'returnee' | 'address' | 'nameEnumerator' | 'lastSyncAt' | 'consentSharing' | 'orgEnumerator' | 'updatedAt' | 'consent' | 'collectIndividualData' | 'flexFields'>
  & { individuals: Maybe<(
    { __typename?: 'IndividualNodeConnection' }
    & Pick<IndividualNodeConnection, 'totalCount'>
    & { edges: Array<Maybe<(
      { __typename?: 'IndividualNodeEdge' }
      & { node: Maybe<(
        { __typename?: 'IndividualNode' }
        & IndividualMinimalFragment
      )> }
    )>> }
  )>, programs: (
    { __typename?: 'ProgramNodeConnection' }
    & { edges: Array<Maybe<(
      { __typename?: 'ProgramNodeEdge' }
      & { node: Maybe<(
        { __typename?: 'ProgramNode' }
        & Pick<ProgramNode, 'id' | 'name'>
      )> }
    )>> }
  ), registrationDataImport: Maybe<(
    { __typename?: 'RegistrationDataImportNode' }
    & Pick<RegistrationDataImportNode, 'name' | 'dataSource' | 'importDate'>
    & { importedBy: Maybe<(
      { __typename?: 'UserNode' }
      & Pick<UserNode, 'firstName' | 'lastName' | 'email' | 'username'>
    )> }
  )>, paymentrecordSet: (
    { __typename?: 'PaymentRecordNodeConnection' }
    & { edges: Array<Maybe<(
      { __typename?: 'PaymentRecordNodeEdge' }
      & { node: Maybe<(
        { __typename?: 'PaymentRecordNode' }
        & Pick<PaymentRecordNode, 'id' | 'fullName'>
        & { parent: Maybe<(
          { __typename?: 'CashPlanNode' }
          & Pick<CashPlanNode, 'id' | 'totalPersonsCovered' | 'totalDeliveredQuantity' | 'assistanceMeasurement'>
          & { program: (
            { __typename?: 'ProgramNode' }
            & Pick<ProgramNode, 'id' | 'name'>
          ) }
        )> }
      )> }
    )>> }
  ), programsWithDeliveredQuantity: Maybe<Array<Maybe<(
    { __typename?: 'ProgramsWithDeliveredQuantityNode' }
    & Pick<ProgramsWithDeliveredQuantityNode, 'id' | 'name'>
    & { quantity: Maybe<Array<Maybe<(
      { __typename?: 'DeliveredQuantityNode' }
      & Pick<DeliveredQuantityNode, 'totalDeliveredQuantity' | 'currency'>
    )>>> }
  )>>> }
  & HouseholdMinimalFragment
);

export type MergedHouseholdMinimalFragment = (
  { __typename?: 'HouseholdNode' }
  & Pick<HouseholdNode, 'id' | 'unicefId' | 'size' | 'firstRegistrationDate' | 'hasDuplicates'>
  & { headOfHousehold: (
    { __typename?: 'IndividualNode' }
    & Pick<IndividualNode, 'id' | 'fullName'>
  ), admin1: Maybe<(
    { __typename?: 'AreaNode' }
    & Pick<AreaNode, 'id' | 'name'>
  )>, admin2: Maybe<(
    { __typename?: 'AreaNode' }
    & Pick<AreaNode, 'id' | 'name'>
  )> }
);

export type IndividualMinimalFragment = (
  { __typename?: 'IndividualNode' }
  & Pick<IndividualNode, 'id' | 'age' | 'lastRegistrationDate' | 'createdAt' | 'updatedAt' | 'fullName' | 'sex' | 'unicefId' | 'birthDate' | 'maritalStatus' | 'phoneNo' | 'phoneNoValid' | 'email' | 'sanctionListPossibleMatch' | 'sanctionListConfirmedMatch' | 'deduplicationGoldenRecordStatus' | 'sanctionListLastCheck' | 'role' | 'relationship' | 'status'>
  & { documents: (
    { __typename?: 'DocumentNodeConnection' }
    & { edges: Array<Maybe<(
      { __typename?: 'DocumentNodeEdge' }
      & { node: Maybe<(
        { __typename?: 'DocumentNode' }
        & Pick<DocumentNode, 'id' | 'country' | 'countryIso3' | 'documentNumber' | 'photo'>
        & { type: (
          { __typename?: 'DocumentTypeNode' }
          & Pick<DocumentTypeNode, 'label' | 'key'>
        ) }
      )> }
    )>> }
  ), identities: (
    { __typename?: 'IndividualIdentityNodeConnection' }
    & { edges: Array<Maybe<(
      { __typename?: 'IndividualIdentityNodeEdge' }
      & { node: Maybe<(
        { __typename?: 'IndividualIdentityNode' }
        & Pick<IndividualIdentityNode, 'id' | 'partner' | 'country' | 'number'>
      )> }
    )>> }
  ), household: Maybe<(
    { __typename?: 'HouseholdNode' }
    & Pick<HouseholdNode, 'id' | 'unicefId' | 'status'>
    & { admin1: Maybe<(
      { __typename?: 'AreaNode' }
      & Pick<AreaNode, 'id' | 'name' | 'level' | 'pCode'>
    )>, admin2: Maybe<(
      { __typename?: 'AreaNode' }
      & Pick<AreaNode, 'id' | 'name' | 'level' | 'pCode'>
    )>, programs: (
      { __typename?: 'ProgramNodeConnection' }
      & { edges: Array<Maybe<(
        { __typename?: 'ProgramNodeEdge' }
        & { node: Maybe<(
          { __typename?: 'ProgramNode' }
          & Pick<ProgramNode, 'id' | 'name'>
        )> }
      )>> }
    ) }
  )> }
);

export type IndividualDetailedFragment = (
  { __typename?: 'IndividualNode' }
  & Pick<IndividualNode, 'givenName' | 'familyName' | 'estimatedBirthDate' | 'pregnant' | 'lastSyncAt' | 'deduplicationBatchStatus' | 'disability' | 'importedIndividualId' | 'commsDisability' | 'firstRegistrationDate' | 'whoAnswersAltPhone' | 'memoryDisability' | 'middleName' | 'whoAnswersPhone' | 'phoneNoAlternative' | 'phoneNoAlternativeValid' | 'email' | 'hearingDisability' | 'observedDisability' | 'individualId' | 'seeingDisability' | 'physicalDisability' | 'selfcareDisability' | 'photo' | 'workStatus' | 'enrolledInNutritionProgramme' | 'administrationOfRutf' | 'flexFields' | 'preferredLanguage'>
  & { paymentChannels: Maybe<Array<Maybe<(
    { __typename?: 'BankAccountInfoNode' }
    & Pick<BankAccountInfoNode, 'id' | 'bankName' | 'bankAccountNumber'>
  )>>>, documents: (
    { __typename?: 'DocumentNodeConnection' }
    & { edges: Array<Maybe<(
      { __typename?: 'DocumentNodeEdge' }
      & { node: Maybe<(
        { __typename?: 'DocumentNode' }
        & Pick<DocumentNode, 'id' | 'country' | 'photo' | 'documentNumber'>
        & { type: (
          { __typename?: 'DocumentTypeNode' }
          & Pick<DocumentTypeNode, 'label' | 'key'>
        ) }
      )> }
    )>> }
  ), household: Maybe<(
    { __typename?: 'HouseholdNode' }
    & Pick<HouseholdNode, 'status' | 'id' | 'address' | 'countryOrigin'>
    & { adminArea: Maybe<(
      { __typename?: 'AreaNode' }
      & Pick<AreaNode, 'id' | 'name' | 'level'>
    )> }
  )>, headingHousehold: Maybe<(
    { __typename?: 'HouseholdNode' }
    & Pick<HouseholdNode, 'id'>
    & { headOfHousehold: (
      { __typename?: 'IndividualNode' }
      & Pick<IndividualNode, 'id' | 'givenName' | 'familyName' | 'fullName'>
    ) }
  )>, householdsAndRoles: Array<(
    { __typename?: 'IndividualRoleInHouseholdNode' }
    & Pick<IndividualRoleInHouseholdNode, 'id' | 'role'>
    & { household: (
      { __typename?: 'HouseholdNode' }
      & Pick<HouseholdNode, 'id' | 'unicefId'>
    ) }
  )>, bankAccountInfo: Maybe<(
    { __typename?: 'BankAccountInfoNode' }
    & Pick<BankAccountInfoNode, 'bankName' | 'bankAccountNumber'>
  )> }
  & IndividualMinimalFragment
);

export type MergedIndividualMinimalFragment = (
  { __typename?: 'IndividualNode' }
  & Pick<IndividualNode, 'id' | 'unicefId' | 'age' | 'fullName' | 'birthDate' | 'sex' | 'role' | 'relationship' | 'deduplicationBatchStatus' | 'deduplicationGoldenRecordStatus'>
  & { deduplicationGoldenRecordResults: Maybe<Array<Maybe<(
    { __typename?: 'DeduplicationResultNode' }
    & Pick<DeduplicationResultNode, 'hitId' | 'fullName' | 'score' | 'proximityToScore' | 'age' | 'location'>
  )>>>, deduplicationBatchResults: Maybe<Array<Maybe<(
    { __typename?: 'DeduplicationResultNode' }
    & Pick<DeduplicationResultNode, 'hitId' | 'fullName' | 'score' | 'proximityToScore' | 'age' | 'location'>
  )>>>, registrationDataImport: Maybe<(
    { __typename?: 'RegistrationDataImportNode' }
    & Pick<RegistrationDataImportNode, 'id' | 'datahubId'>
  )> }
);

export type PaymentRecordDetailsFragment = (
  { __typename?: 'PaymentRecordNode' }
  & Pick<PaymentRecordNode, 'id' | 'status' | 'statusDate' | 'caId' | 'caHashId' | 'registrationCaId' | 'fullName' | 'distributionModality' | 'totalPersonsCovered' | 'currency' | 'entitlementQuantity' | 'deliveredQuantity' | 'deliveredQuantityUsd' | 'deliveryDate' | 'deliveryType' | 'entitlementCardIssueDate' | 'entitlementCardNumber' | 'transactionReferenceId'>
  & { verification: Maybe<(
    { __typename?: 'PaymentVerificationNode' }
    & Pick<PaymentVerificationNode, 'id' | 'status' | 'statusDate' | 'receivedAmount'>
  )>, household: (
    { __typename?: 'HouseholdNode' }
    & Pick<HouseholdNode, 'id' | 'status' | 'size' | 'unicefId'>
    & { headOfHousehold: (
      { __typename?: 'IndividualNode' }
      & Pick<IndividualNode, 'id' | 'phoneNo' | 'phoneNoAlternative' | 'phoneNoValid' | 'phoneNoAlternativeValid'>
    ) }
  ), targetPopulation: (
    { __typename?: 'TargetPopulationNode' }
    & Pick<TargetPopulationNode, 'id' | 'name'>
  ), parent: Maybe<(
    { __typename?: 'CashPlanNode' }
    & Pick<CashPlanNode, 'id' | 'caId'>
    & { program: (
      { __typename?: 'ProgramNode' }
      & Pick<ProgramNode, 'id' | 'name'>
    ), verificationPlans: Maybe<(
      { __typename?: 'PaymentVerificationPlanNodeConnection' }
      & { edges: Array<Maybe<(
        { __typename?: 'PaymentVerificationPlanNodeEdge' }
        & { node: Maybe<(
          { __typename?: 'PaymentVerificationPlanNode' }
          & Pick<PaymentVerificationPlanNode, 'id' | 'status' | 'verificationChannel'>
        )> }
      )>> }
    )> }
  )>, serviceProvider: (
    { __typename?: 'ServiceProviderNode' }
    & Pick<ServiceProviderNode, 'id' | 'fullName' | 'shortName'>
  ) }
);

export type RegistrationMinimalFragment = (
  { __typename?: 'RegistrationDataImportNode' }
  & Pick<RegistrationDataImportNode, 'id' | 'createdAt' | 'name' | 'status' | 'erased' | 'importDate' | 'dataSource' | 'numberOfHouseholds' | 'numberOfIndividuals' | 'refuseReason'>
  & { importedBy: Maybe<(
    { __typename?: 'UserNode' }
    & Pick<UserNode, 'id' | 'firstName' | 'lastName' | 'email'>
  )>, program: Maybe<(
    { __typename?: 'ProgramNode' }
    & Pick<ProgramNode, 'id' | 'name' | 'startDate' | 'endDate' | 'status'>
  )> }
);

export type RegistrationDetailedFragment = (
  { __typename?: 'RegistrationDataImportNode' }
  & Pick<RegistrationDataImportNode, 'numberOfIndividuals' | 'datahubId' | 'errorMessage'>
  & { batchDuplicatesCountAndPercentage: Maybe<(
    { __typename?: 'CountAndPercentageNode' }
    & Pick<CountAndPercentageNode, 'count' | 'percentage'>
  )>, batchPossibleDuplicatesCountAndPercentage: Maybe<(
    { __typename?: 'CountAndPercentageNode' }
    & Pick<CountAndPercentageNode, 'count' | 'percentage'>
  )>, batchUniqueCountAndPercentage: Maybe<(
    { __typename?: 'CountAndPercentageNode' }
    & Pick<CountAndPercentageNode, 'count' | 'percentage'>
  )>, goldenRecordUniqueCountAndPercentage: Maybe<(
    { __typename?: 'CountAndPercentageNode' }
    & Pick<CountAndPercentageNode, 'count' | 'percentage'>
  )>, goldenRecordDuplicatesCountAndPercentage: Maybe<(
    { __typename?: 'CountAndPercentageNode' }
    & Pick<CountAndPercentageNode, 'count' | 'percentage'>
  )>, goldenRecordPossibleDuplicatesCountAndPercentage: Maybe<(
    { __typename?: 'CountAndPercentageNode' }
    & Pick<CountAndPercentageNode, 'count' | 'percentage'>
  )> }
  & RegistrationMinimalFragment
);

export type ImportedHouseholdMinimalFragment = (
  { __typename?: 'ImportedHouseholdNode' }
  & Pick<ImportedHouseholdNode, 'id' | 'importId' | 'size' | 'admin1' | 'admin1Title' | 'admin2' | 'admin2Title' | 'flexFields' | 'deviceid' | 'start' | 'koboAssetId' | 'rowId' | 'firstRegistrationDate' | 'lastRegistrationDate' | 'hasDuplicates' | 'fchildHoh' | 'childHoh' | 'collectIndividualData'>
  & { headOfHousehold: Maybe<(
    { __typename?: 'ImportedIndividualNode' }
    & Pick<ImportedIndividualNode, 'id' | 'fullName'>
  )> }
);

export type ImportedHouseholdDetailedFragment = (
  { __typename?: 'ImportedHouseholdNode' }
  & Pick<ImportedHouseholdNode, 'residenceStatus' | 'country' | 'countryOrigin'>
  & { registrationDataImport: (
    { __typename?: 'RegistrationDataImportDatahubNode' }
    & Pick<RegistrationDataImportDatahubNode, 'id' | 'hctId' | 'name'>
  ), individuals: (
    { __typename?: 'ImportedIndividualNodeConnection' }
    & { edges: Array<Maybe<(
      { __typename?: 'ImportedIndividualNodeEdge' }
      & { node: Maybe<(
        { __typename?: 'ImportedIndividualNode' }
        & ImportedIndividualMinimalFragment
      )> }
    )>> }
  ) }
  & ImportedHouseholdMinimalFragment
);

export type ImportedIndividualMinimalFragment = (
  { __typename?: 'ImportedIndividualNode' }
  & Pick<ImportedIndividualNode, 'id' | 'importId' | 'age' | 'fullName' | 'birthDate' | 'sex' | 'role' | 'relationship' | 'deduplicationBatchStatus' | 'deduplicationGoldenRecordStatus'>
  & { deduplicationGoldenRecordResults: Maybe<Array<Maybe<(
    { __typename?: 'DeduplicationResultNode' }
    & Pick<DeduplicationResultNode, 'hitId' | 'fullName' | 'score' | 'proximityToScore' | 'age' | 'location'>
  )>>>, deduplicationBatchResults: Maybe<Array<Maybe<(
    { __typename?: 'DeduplicationResultNode' }
    & Pick<DeduplicationResultNode, 'hitId' | 'fullName' | 'score' | 'proximityToScore' | 'age' | 'location'>
  )>>>, registrationDataImport: (
    { __typename?: 'RegistrationDataImportDatahubNode' }
    & Pick<RegistrationDataImportDatahubNode, 'id' | 'hctId'>
  ) }
);

export type ImportedIndividualDetailedFragment = (
  { __typename?: 'ImportedIndividualNode' }
  & Pick<ImportedIndividualNode, 'photo' | 'givenName' | 'familyName' | 'middleName' | 'estimatedBirthDate' | 'maritalStatus' | 'workStatus' | 'pregnant' | 'flexFields' | 'observedDisability' | 'seeingDisability' | 'hearingDisability' | 'physicalDisability' | 'memoryDisability' | 'selfcareDisability' | 'commsDisability' | 'disability' | 'role' | 'relationship' | 'phoneNo' | 'phoneNoAlternative' | 'phoneNoValid' | 'phoneNoAlternativeValid' | 'preferredLanguage' | 'email'>
  & { documents: (
    { __typename?: 'ImportedDocumentNodeConnection' }
    & { edges: Array<Maybe<(
      { __typename?: 'ImportedDocumentNodeEdge' }
      & { node: Maybe<(
        { __typename?: 'ImportedDocumentNode' }
        & Pick<ImportedDocumentNode, 'id' | 'country' | 'documentNumber' | 'photo'>
        & { type: (
          { __typename?: 'ImportedDocumentTypeNode' }
          & Pick<ImportedDocumentTypeNode, 'label' | 'key'>
        ) }
      )> }
    )>> }
  ), identities: (
    { __typename?: 'ImportedIndividualIdentityNodeConnection' }
    & { edges: Array<Maybe<(
      { __typename?: 'ImportedIndividualIdentityNodeEdge' }
      & { node: Maybe<(
        { __typename?: 'ImportedIndividualIdentityNode' }
        & Pick<ImportedIndividualIdentityNode, 'id' | 'documentNumber' | 'partner' | 'country'>
      )> }
    )>> }
  ), household: Maybe<(
    { __typename?: 'ImportedHouseholdNode' }
    & Pick<ImportedHouseholdNode, 'id' | 'importId' | 'admin1' | 'admin2' | 'address'>
  )>, registrationDataImport: (
    { __typename?: 'RegistrationDataImportDatahubNode' }
    & Pick<RegistrationDataImportDatahubNode, 'id' | 'hctId' | 'name'>
  ) }
  & ImportedIndividualMinimalFragment
);

export type TargetPopulationMinimalFragment = (
  { __typename?: 'TargetPopulationNode' }
  & Pick<TargetPopulationNode, 'id' | 'name' | 'status' | 'createdAt' | 'updatedAt' | 'totalHouseholdsCount' | 'totalIndividualsCount'>
  & { program: Maybe<(
    { __typename?: 'ProgramNode' }
    & Pick<ProgramNode, 'id' | 'name'>
  )>, createdBy: Maybe<(
    { __typename?: 'UserNode' }
    & Pick<UserNode, 'id' | 'firstName' | 'lastName'>
  )> }
);

export type TargetPopulationDetailedFragment = (
  { __typename?: 'TargetPopulationNode' }
  & Pick<TargetPopulationNode, 'id' | 'name' | 'status' | 'buildStatus' | 'totalHouseholdsCount' | 'totalIndividualsCount' | 'childMaleCount' | 'childFemaleCount' | 'adultMaleCount' | 'adultFemaleCount' | 'caHashId' | 'excludedIds' | 'exclusionReason' | 'vulnerabilityScoreMin' | 'vulnerabilityScoreMax' | 'changeDate' | 'finalizedAt'>
  & { steficonRule: Maybe<(
    { __typename?: 'RuleCommitNode' }
    & Pick<RuleCommitNode, 'id'>
    & { rule: Maybe<(
      { __typename?: 'SteficonRuleNode' }
      & Pick<SteficonRuleNode, 'id' | 'name'>
    )> }
  )>, finalizedBy: Maybe<(
    { __typename?: 'UserNode' }
    & Pick<UserNode, 'id' | 'firstName' | 'lastName'>
  )>, program: Maybe<(
    { __typename?: 'ProgramNode' }
    & Pick<ProgramNode, 'id' | 'name' | 'status' | 'startDate' | 'endDate'>
  )>, createdBy: Maybe<(
    { __typename?: 'UserNode' }
    & Pick<UserNode, 'id' | 'email' | 'firstName' | 'lastName'>
  )>, targetingCriteria: Maybe<(
    { __typename?: 'TargetingCriteriaNode' }
    & Pick<TargetingCriteriaNode, 'flagExcludeIfActiveAdjudicationTicket' | 'flagExcludeIfOnSanctionList'>
    & { rules: Maybe<Array<Maybe<(
      { __typename?: 'TargetingCriteriaRuleNode' }
      & Pick<TargetingCriteriaRuleNode, 'id'>
      & { individualsFiltersBlocks: Maybe<Array<Maybe<(
        { __typename?: 'TargetingIndividualRuleFilterBlockNode' }
        & { individualBlockFilters: Maybe<Array<Maybe<(
          { __typename?: 'TargetingIndividualBlockRuleFilterNode' }
          & Pick<TargetingIndividualBlockRuleFilterNode, 'fieldName' | 'isFlexField' | 'arguments' | 'comparisonMethod'>
          & { fieldAttribute: Maybe<(
            { __typename?: 'FieldAttributeNode' }
            & Pick<FieldAttributeNode, 'name' | 'labelEn' | 'type'>
            & { choices: Maybe<Array<Maybe<(
              { __typename?: 'CoreFieldChoiceObject' }
              & Pick<CoreFieldChoiceObject, 'value' | 'labelEn'>
            )>>> }
          )> }
        )>>> }
      )>>>, filters: Maybe<Array<Maybe<(
        { __typename?: 'TargetingCriteriaRuleFilterNode' }
        & Pick<TargetingCriteriaRuleFilterNode, 'fieldName' | 'isFlexField' | 'arguments' | 'comparisonMethod'>
        & { fieldAttribute: Maybe<(
          { __typename?: 'FieldAttributeNode' }
          & Pick<FieldAttributeNode, 'name' | 'labelEn' | 'type'>
          & { choices: Maybe<Array<Maybe<(
            { __typename?: 'CoreFieldChoiceObject' }
            & Pick<CoreFieldChoiceObject, 'value' | 'labelEn'>
          )>>> }
        )> }
      )>>> }
    )>>> }
  )> }
);

export type CreateFeedbackTicketMutationVariables = {
  input: CreateFeedbackInput
};


export type CreateFeedbackTicketMutation = (
  { __typename?: 'Mutations' }
  & { createFeedback: Maybe<(
    { __typename?: 'CreateFeedbackMutation' }
    & { feedback: Maybe<(
      { __typename?: 'FeedbackNode' }
      & Pick<FeedbackNode, 'id'>
    )> }
  )> }
);

export type CreateFeedbackMsgMutationVariables = {
  input: CreateFeedbackMessageInput
};


export type CreateFeedbackMsgMutation = (
  { __typename?: 'Mutations' }
  & { createFeedbackMessage: Maybe<(
    { __typename?: 'CreateFeedbackMessageMutation' }
    & { feedbackMessage: Maybe<(
      { __typename?: 'FeedbackMessageNode' }
      & Pick<FeedbackMessageNode, 'id' | 'createdAt' | 'updatedAt' | 'description'>
      & { createdBy: Maybe<(
        { __typename?: 'UserNode' }
        & Pick<UserNode, 'id' | 'firstName' | 'lastName' | 'username' | 'email'>
      )> }
    )> }
  )> }
);

export type CreateSurveyAccountabilityMutationVariables = {
  input: CreateSurveyInput
};


export type CreateSurveyAccountabilityMutation = (
  { __typename?: 'Mutations' }
  & { createSurvey: Maybe<(
    { __typename?: 'CreateSurveyMutation' }
    & { survey: Maybe<(
      { __typename?: 'SurveyNode' }
      & Pick<SurveyNode, 'id'>
    )> }
  )> }
);

export type ExportSurveySampleMutationVariables = {
  surveyId: Scalars['ID']
};


export type ExportSurveySampleMutation = (
  { __typename?: 'Mutations' }
  & { exportSurveySample: Maybe<(
    { __typename?: 'ExportSurveySampleMutationMutation' }
    & { survey: Maybe<(
      { __typename?: 'SurveyNode' }
      & Pick<SurveyNode, 'id'>
    )> }
  )> }
);

export type UpdateFeedbackTicketMutationVariables = {
  input: UpdateFeedbackInput
};


export type UpdateFeedbackTicketMutation = (
  { __typename?: 'Mutations' }
  & { updateFeedback: Maybe<(
    { __typename?: 'UpdateFeedbackMutation' }
    & { feedback: Maybe<(
      { __typename?: 'FeedbackNode' }
      & Pick<FeedbackNode, 'id' | 'unicefId' | 'issueType' | 'createdAt' | 'updatedAt' | 'area' | 'language' | 'description' | 'comments'>
      & { householdLookup: Maybe<(
        { __typename?: 'HouseholdNode' }
        & Pick<HouseholdNode, 'id' | 'unicefId'>
        & { headOfHousehold: (
          { __typename?: 'IndividualNode' }
          & Pick<IndividualNode, 'id' | 'fullName'>
        ) }
      )>, individualLookup: Maybe<(
        { __typename?: 'IndividualNode' }
        & Pick<IndividualNode, 'id' | 'unicefId'>
      )>, program: Maybe<(
        { __typename?: 'ProgramNode' }
        & Pick<ProgramNode, 'id' | 'name'>
      )>, createdBy: Maybe<(
        { __typename?: 'UserNode' }
        & Pick<UserNode, 'id' | 'firstName' | 'lastName' | 'username' | 'email'>
      )>, admin2: Maybe<(
        { __typename?: 'AreaNode' }
        & Pick<AreaNode, 'id' | 'name'>
      )>, linkedGrievance: Maybe<(
        { __typename?: 'GrievanceTicketNode' }
        & Pick<GrievanceTicketNode, 'id' | 'unicefId'>
      )> }
    )> }
  )> }
);

export type CreateAccountabilityCommunicationMessageMutationVariables = {
  input: CreateAccountabilityCommunicationMessageInput
};


export type CreateAccountabilityCommunicationMessageMutation = (
  { __typename?: 'Mutations' }
  & { createAccountabilityCommunicationMessage: Maybe<(
    { __typename?: 'CreateCommunicationMessageMutation' }
    & { message: Maybe<(
      { __typename?: 'CommunicationMessageNode' }
      & Pick<CommunicationMessageNode, 'id'>
    )> }
  )> }
);

export type CheckAgainstSanctionListUploadMutationVariables = {
  file: Scalars['Upload']
};


export type CheckAgainstSanctionListUploadMutation = (
  { __typename?: 'Mutations' }
  & { checkAgainstSanctionList: Maybe<(
    { __typename?: 'CheckAgainstSanctionListMutation' }
    & { errors: Maybe<Array<Maybe<(
      { __typename?: 'XlsxRowErrorNode' }
      & Pick<XlsxRowErrorNode, 'header' | 'message' | 'rowNumber'>
    )>>> }
  )> }
);

export type ApproveAddIndividualDataChangeMutationVariables = {
  grievanceTicketId: Scalars['ID'],
  approveStatus: Scalars['Boolean']
};


export type ApproveAddIndividualDataChangeMutation = (
  { __typename?: 'Mutations' }
  & { approveAddIndividual: Maybe<(
    { __typename?: 'SimpleApproveMutation' }
    & { grievanceTicket: Maybe<(
      { __typename?: 'GrievanceTicketNode' }
      & Pick<GrievanceTicketNode, 'id' | 'status'>
    )> }
  )> }
);

export type ApproveDeleteHouseholdDataChangeMutationVariables = {
  grievanceTicketId: Scalars['ID'],
  approveStatus: Scalars['Boolean'],
  reasonHhId?: Maybe<Scalars['String']>
};


export type ApproveDeleteHouseholdDataChangeMutation = (
  { __typename?: 'Mutations' }
  & { approveDeleteHousehold: Maybe<(
    { __typename?: 'DeleteHouseholdApproveMutation' }
    & { grievanceTicket: Maybe<(
      { __typename?: 'GrievanceTicketNode' }
      & Pick<GrievanceTicketNode, 'id' | 'status'>
    )> }
  )> }
);

export type ApproveDeleteIndividualDataChangeMutationVariables = {
  grievanceTicketId: Scalars['ID'],
  approveStatus: Scalars['Boolean']
};


export type ApproveDeleteIndividualDataChangeMutation = (
  { __typename?: 'Mutations' }
  & { approveDeleteIndividual: Maybe<(
    { __typename?: 'SimpleApproveMutation' }
    & { grievanceTicket: Maybe<(
      { __typename?: 'GrievanceTicketNode' }
      & Pick<GrievanceTicketNode, 'id' | 'status'>
    )> }
  )> }
);

export type ApproveHouseholdDataChangeMutationVariables = {
  grievanceTicketId: Scalars['ID'],
  householdApproveData?: Maybe<Scalars['JSONString']>,
  flexFieldsApproveData?: Maybe<Scalars['JSONString']>
};


export type ApproveHouseholdDataChangeMutation = (
  { __typename?: 'Mutations' }
  & { approveHouseholdDataChange: Maybe<(
    { __typename?: 'HouseholdDataChangeApproveMutation' }
    & { grievanceTicket: Maybe<(
      { __typename?: 'GrievanceTicketNode' }
      & Pick<GrievanceTicketNode, 'id' | 'status'>
      & { householdDataUpdateTicketDetails: Maybe<(
        { __typename?: 'TicketHouseholdDataUpdateDetailsNode' }
        & Pick<TicketHouseholdDataUpdateDetailsNode, 'id' | 'householdData'>
        & { household: Maybe<(
          { __typename?: 'HouseholdNode' }
          & HouseholdDetailedFragment
        )> }
      )> }
    )> }
  )> }
);

export type ApproveIndividualDataChangeMutationVariables = {
  grievanceTicketId: Scalars['ID'],
  individualApproveData?: Maybe<Scalars['JSONString']>,
  flexFieldsApproveData?: Maybe<Scalars['JSONString']>,
  approvedDocumentsToCreate?: Maybe<Array<Maybe<Scalars['Int']>>>,
  approvedDocumentsToRemove?: Maybe<Array<Maybe<Scalars['Int']>>>,
  approvedDocumentsToEdit?: Maybe<Array<Maybe<Scalars['Int']>>>,
  approvedIdentitiesToCreate?: Maybe<Array<Maybe<Scalars['Int']>>>,
  approvedIdentitiesToEdit?: Maybe<Array<Maybe<Scalars['Int']>>>,
  approvedIdentitiesToRemove?: Maybe<Array<Maybe<Scalars['Int']>>>,
  approvedPaymentChannelsToCreate?: Maybe<Array<Maybe<Scalars['Int']>>>,
  approvedPaymentChannelsToEdit?: Maybe<Array<Maybe<Scalars['Int']>>>,
  approvedPaymentChannelsToRemove?: Maybe<Array<Maybe<Scalars['Int']>>>
};


export type ApproveIndividualDataChangeMutation = (
  { __typename?: 'Mutations' }
  & { approveIndividualDataChange: Maybe<(
    { __typename?: 'IndividualDataChangeApproveMutation' }
    & { grievanceTicket: Maybe<(
      { __typename?: 'GrievanceTicketNode' }
      & Pick<GrievanceTicketNode, 'id' | 'status'>
      & { individualDataUpdateTicketDetails: Maybe<(
        { __typename?: 'TicketIndividualDataUpdateDetailsNode' }
        & Pick<TicketIndividualDataUpdateDetailsNode, 'id' | 'individualData'>
        & { individual: Maybe<(
          { __typename?: 'IndividualNode' }
          & IndividualDetailedFragment
        )> }
      )> }
    )> }
  )> }
);

export type ApproveNeedsAdjudicationMutationVariables = {
  grievanceTicketId: Scalars['ID'],
  selectedIndividualId?: Maybe<Scalars['ID']>,
  selectedIndividualIds?: Maybe<Array<Maybe<Scalars['ID']>>>
};


export type ApproveNeedsAdjudicationMutation = (
  { __typename?: 'Mutations' }
  & { approveNeedsAdjudication: Maybe<(
    { __typename?: 'NeedsAdjudicationApproveMutation' }
    & { grievanceTicket: Maybe<(
      { __typename?: 'GrievanceTicketNode' }
      & Pick<GrievanceTicketNode, 'id' | 'status'>
    )> }
  )> }
);

export type ApprovePaymentDetailsMutationVariables = {
  grievanceTicketId: Scalars['ID'],
  approveStatus: Scalars['Boolean']
};


export type ApprovePaymentDetailsMutation = (
  { __typename?: 'Mutations' }
  & { approvePaymentDetails: Maybe<(
    { __typename?: 'PaymentDetailsApproveMutation' }
    & { grievanceTicket: Maybe<(
      { __typename?: 'GrievanceTicketNode' }
      & Pick<GrievanceTicketNode, 'id' | 'status'>
      & { paymentVerificationTicketDetails: Maybe<(
        { __typename?: 'TicketPaymentVerificationDetailsNode' }
        & Pick<TicketPaymentVerificationDetailsNode, 'id' | 'approveStatus'>
      )> }
    )> }
  )> }
);

export type ApproveSystemFlaggingMutationVariables = {
  grievanceTicketId: Scalars['ID'],
  approveStatus: Scalars['Boolean']
};


export type ApproveSystemFlaggingMutation = (
  { __typename?: 'Mutations' }
  & { approveSystemFlagging: Maybe<(
    { __typename?: 'SimpleApproveMutation' }
    & { grievanceTicket: Maybe<(
      { __typename?: 'GrievanceTicketNode' }
      & Pick<GrievanceTicketNode, 'id' | 'status'>
    )> }
  )> }
);

export type BulkUpdateGrievanceAssigneeMutationVariables = {
  grievanceTicketUnicefIds?: Maybe<Array<Maybe<Scalars['ID']>>>,
  assignedTo?: Maybe<Scalars['String']>,
  businessAreaSlug: Scalars['String']
};


export type BulkUpdateGrievanceAssigneeMutation = (
  { __typename?: 'Mutations' }
  & { bulkUpdateGrievanceAssignee: Maybe<(
    { __typename?: 'BulkUpdateGrievanceTicketsAssigneesMutation' }
    & { grievanceTickets: Maybe<Array<Maybe<(
      { __typename?: 'GrievanceTicketNode' }
      & { assignedTo: Maybe<(
        { __typename?: 'UserNode' }
        & Pick<UserNode, 'firstName' | 'lastName' | 'email'>
      )> }
    )>>> }
  )> }
);

export type CreateGrievanceMutationVariables = {
  input: CreateGrievanceTicketInput
};


export type CreateGrievanceMutation = (
  { __typename?: 'Mutations' }
  & { createGrievanceTicket: Maybe<(
    { __typename?: 'CreateGrievanceTicketMutation' }
    & { grievanceTickets: Maybe<Array<Maybe<(
      { __typename?: 'GrievanceTicketNode' }
      & Pick<GrievanceTicketNode, 'id' | 'category'>
    )>>> }
  )> }
);

export type CreateGrievanceTicketNoteMutationVariables = {
  noteInput: CreateTicketNoteInput
};


export type CreateGrievanceTicketNoteMutation = (
  { __typename?: 'Mutations' }
  & { createTicketNote: Maybe<(
    { __typename?: 'CreateTicketNoteMutation' }
    & { grievanceTicketNote: Maybe<(
      { __typename?: 'TicketNoteNode' }
      & Pick<TicketNoteNode, 'id' | 'createdAt' | 'updatedAt'>
      & { createdBy: Maybe<(
        { __typename?: 'UserNode' }
        & Pick<UserNode, 'firstName' | 'lastName' | 'username' | 'email'>
      )> }
    )> }
  )> }
);

export type GrievanceTicketStatusChangeMutationVariables = {
  grievanceTicketId?: Maybe<Scalars['ID']>,
  status?: Maybe<Scalars['Int']>
};


export type GrievanceTicketStatusChangeMutation = (
  { __typename?: 'Mutations' }
  & { grievanceStatusChange: Maybe<(
    { __typename?: 'GrievanceStatusChangeMutation' }
    & { grievanceTicket: Maybe<(
      { __typename?: 'GrievanceTicketNode' }
      & GrievanceTicketDetailedFragment
    )> }
  )> }
);

export type ReassignRoleGrievanceMutationVariables = {
  grievanceTicketId: Scalars['ID'],
  householdId: Scalars['ID'],
  individualId: Scalars['ID'],
  newIndividualId?: Maybe<Scalars['ID']>,
  role: Scalars['String']
};


export type ReassignRoleGrievanceMutation = (
  { __typename?: 'Mutations' }
  & { reassignRole: Maybe<(
    { __typename?: 'ReassignRoleMutation' }
    & { household: Maybe<(
      { __typename?: 'HouseholdNode' }
      & Pick<HouseholdNode, 'id' | 'unicefId'>
    )>, individual: Maybe<(
      { __typename?: 'IndividualNode' }
      & Pick<IndividualNode, 'id' | 'unicefId'>
    )> }
  )> }
);

export type UpdateGrievanceMutationVariables = {
  input: UpdateGrievanceTicketInput
};


export type UpdateGrievanceMutation = (
  { __typename?: 'Mutations' }
  & { updateGrievanceTicket: Maybe<(
    { __typename?: 'UpdateGrievanceTicketMutation' }
    & { grievanceTicket: Maybe<(
      { __typename?: 'GrievanceTicketNode' }
      & Pick<GrievanceTicketNode, 'id'>
    )> }
  )> }
);

export type ActionPpMutationVariables = {
  input: ActionPaymentPlanInput
};


export type ActionPpMutation = (
  { __typename?: 'Mutations' }
  & { actionPaymentPlanMutation: Maybe<(
    { __typename?: 'ActionPaymentPlanMutation' }
    & { paymentPlan: Maybe<(
      { __typename?: 'PaymentPlanNode' }
      & Pick<PaymentPlanNode, 'id' | 'status'>
    )> }
  )> }
);

export type AssignFspToDeliveryMechMutationVariables = {
  input: AssignFspToDeliveryMechanismInput
};


export type AssignFspToDeliveryMechMutation = (
  { __typename?: 'Mutations' }
  & { assignFspToDeliveryMechanism: Maybe<(
    { __typename?: 'AssignFspToDeliveryMechanismMutation' }
    & { paymentPlan: Maybe<(
      { __typename?: 'PaymentPlanNode' }
      & Pick<PaymentPlanNode, 'id'>
      & { deliveryMechanisms: Maybe<Array<Maybe<(
        { __typename?: 'DeliveryMechanismNode' }
        & Pick<DeliveryMechanismNode, 'id' | 'name'>
        & { fsp: Maybe<(
          { __typename?: 'FinancialServiceProviderNode' }
          & Pick<FinancialServiceProviderNode, 'id' | 'name'>
        )> }
      )>>> }
    )> }
  )> }
);

export type ChooseDeliveryMechForPaymentPlanMutationVariables = {
  input: ChooseDeliveryMechanismsForPaymentPlanInput
};


export type ChooseDeliveryMechForPaymentPlanMutation = (
  { __typename?: 'Mutations' }
  & { chooseDeliveryMechanismsForPaymentPlan: Maybe<(
    { __typename?: 'ChooseDeliveryMechanismsForPaymentPlanMutation' }
    & { paymentPlan: Maybe<(
      { __typename?: 'PaymentPlanNode' }
      & Pick<PaymentPlanNode, 'id'>
      & { deliveryMechanisms: Maybe<Array<Maybe<(
        { __typename?: 'DeliveryMechanismNode' }
        & Pick<DeliveryMechanismNode, 'id' | 'name'>
        & { fsp: Maybe<(
          { __typename?: 'FinancialServiceProviderNode' }
          & Pick<FinancialServiceProviderNode, 'id' | 'name'>
        )> }
      )>>> }
    )> }
  )> }
);

export type CreateFollowUpPpMutationVariables = {
  dispersionStartDate: Scalars['Date'],
  dispersionEndDate: Scalars['Date'],
  paymentPlanId: Scalars['ID']
};


export type CreateFollowUpPpMutation = (
  { __typename?: 'Mutations' }
  & { createFollowUpPaymentPlan: Maybe<(
    { __typename?: 'CreateFollowUpPaymentPlanMutation' }
    & { paymentPlan: Maybe<(
      { __typename?: 'PaymentPlanNode' }
      & Pick<PaymentPlanNode, 'id' | 'unicefId'>
    )> }
  )> }
);

export type CreatePpMutationVariables = {
  input: CreatePaymentPlanInput
};


export type CreatePpMutation = (
  { __typename?: 'Mutations' }
  & { createPaymentPlan: Maybe<(
    { __typename?: 'CreatePaymentPlanMutation' }
    & { paymentPlan: Maybe<(
      { __typename?: 'PaymentPlanNode' }
      & Pick<PaymentPlanNode, 'id'>
    )> }
  )> }
);

export type DeletePpMutationVariables = {
  paymentPlanId: Scalars['ID']
};


export type DeletePpMutation = (
  { __typename?: 'Mutations' }
  & { deletePaymentPlan: Maybe<(
    { __typename?: 'DeletePaymentPlanMutation' }
    & { paymentPlan: Maybe<(
      { __typename?: 'PaymentPlanNode' }
      & Pick<PaymentPlanNode, 'id' | 'status'>
    )> }
  )> }
);

export type UpdatePpMutationVariables = {
  input: UpdatePaymentPlanInput
};


export type UpdatePpMutation = (
  { __typename?: 'Mutations' }
  & { updatePaymentPlan: Maybe<(
    { __typename?: 'UpdatePaymentPlanMutation' }
    & { paymentPlan: Maybe<(
      { __typename?: 'PaymentPlanNode' }
      & Pick<PaymentPlanNode, 'id'>
    )> }
  )> }
);

export type ExcludeHouseholdsPpMutationVariables = {
  paymentPlanId: Scalars['ID'],
  excludedHouseholdsIds: Array<Maybe<Scalars['String']>>,
  exclusionReason?: Maybe<Scalars['String']>
};


export type ExcludeHouseholdsPpMutation = (
  { __typename?: 'Mutations' }
  & { excludeHouseholds: Maybe<(
    { __typename?: 'ExcludeHouseholdsMutation' }
    & { paymentPlan: Maybe<(
      { __typename?: 'PaymentPlanNode' }
      & Pick<PaymentPlanNode, 'id' | 'status' | 'backgroundActionStatus' | 'excludeHouseholdError' | 'exclusionReason'>
      & { excludedHouseholds: Maybe<Array<Maybe<(
        { __typename?: 'HouseholdNode' }
        & Pick<HouseholdNode, 'id' | 'unicefId'>
      )>>> }
    )> }
  )> }
);

export type ExportPdfPpSummaryMutationVariables = {
  paymentPlanId: Scalars['ID']
};


export type ExportPdfPpSummaryMutation = (
  { __typename?: 'Mutations' }
  & { exportPdfPaymentPlanSummary: Maybe<(
    { __typename?: 'ExportPDFPaymentPlanSummaryMutation' }
    & { paymentPlan: Maybe<(
      { __typename?: 'PaymentPlanNode' }
      & Pick<PaymentPlanNode, 'id'>
    )> }
  )> }
);

export type ExportXlsxPpListMutationVariables = {
  paymentPlanId: Scalars['ID']
};


export type ExportXlsxPpListMutation = (
  { __typename?: 'Mutations' }
  & { exportXlsxPaymentPlanPaymentList: Maybe<(
    { __typename?: 'ExportXLSXPaymentPlanPaymentListMutation' }
    & { paymentPlan: Maybe<(
      { __typename?: 'PaymentPlanNode' }
      & Pick<PaymentPlanNode, 'id' | 'status' | 'backgroundActionStatus'>
    )> }
  )> }
);

export type ExportXlsxPpListPerFspMutationVariables = {
  paymentPlanId: Scalars['ID']
};


export type ExportXlsxPpListPerFspMutation = (
  { __typename?: 'Mutations' }
  & { exportXlsxPaymentPlanPaymentListPerFsp: Maybe<(
    { __typename?: 'ExportXLSXPaymentPlanPaymentListPerFSPMutation' }
    & { paymentPlan: Maybe<(
      { __typename?: 'PaymentPlanNode' }
      & Pick<PaymentPlanNode, 'id' | 'status' | 'backgroundActionStatus'>
    )> }
  )> }
);

export type ImportXlsxPpListMutationVariables = {
  paymentPlanId: Scalars['ID'],
  file: Scalars['Upload']
};


export type ImportXlsxPpListMutation = (
  { __typename?: 'Mutations' }
  & { importXlsxPaymentPlanPaymentList: Maybe<(
    { __typename?: 'ImportXLSXPaymentPlanPaymentListMutation' }
    & { paymentPlan: Maybe<(
      { __typename?: 'PaymentPlanNode' }
      & Pick<PaymentPlanNode, 'id' | 'status'>
    )>, errors: Maybe<Array<Maybe<(
      { __typename?: 'XlsxErrorNode' }
      & Pick<XlsxErrorNode, 'sheet' | 'coordinates' | 'message'>
    )>>> }
  )> }
);

export type ImportXlsxPpListPerFspMutationVariables = {
  paymentPlanId: Scalars['ID'],
  file: Scalars['Upload']
};


export type ImportXlsxPpListPerFspMutation = (
  { __typename?: 'Mutations' }
  & { importXlsxPaymentPlanPaymentListPerFsp: Maybe<(
    { __typename?: 'ImportXLSXPaymentPlanPaymentListPerFSPMutation' }
    & { paymentPlan: Maybe<(
      { __typename?: 'PaymentPlanNode' }
      & Pick<PaymentPlanNode, 'id' | 'status'>
    )>, errors: Maybe<Array<Maybe<(
      { __typename?: 'XlsxErrorNode' }
      & Pick<XlsxErrorNode, 'sheet' | 'coordinates' | 'message'>
    )>>> }
  )> }
);

export type MarkPayAsFailedMutationVariables = {
  paymentId: Scalars['ID']
};


export type MarkPayAsFailedMutation = (
  { __typename?: 'Mutations' }
  & { markPaymentAsFailed: Maybe<(
    { __typename?: 'MarkPaymentAsFailedMutation' }
    & { payment: Maybe<(
      { __typename?: 'PaymentNode' }
      & Pick<PaymentNode, 'id' | 'unicefId' | 'status' | 'statusDate' | 'deliveredQuantity' | 'deliveryDate'>
    )> }
  )> }
);

export type RevertMarkPayAsFailedMutationVariables = {
  paymentId: Scalars['ID'],
  deliveredQuantity: Scalars['Decimal'],
  deliveryDate: Scalars['Date']
};


export type RevertMarkPayAsFailedMutation = (
  { __typename?: 'Mutations' }
  & { revertMarkPaymentAsFailed: Maybe<(
    { __typename?: 'RevertMarkPaymentAsFailedMutation' }
    & { payment: Maybe<(
      { __typename?: 'PaymentNode' }
      & Pick<PaymentNode, 'id' | 'unicefId' | 'status' | 'statusDate' | 'deliveredQuantity' | 'deliveryDate'>
    )> }
  )> }
);

export type SetSteficonRuleOnPpListMutationVariables = {
  paymentPlanId: Scalars['ID'],
  steficonRuleId: Scalars['ID']
};


export type SetSteficonRuleOnPpListMutation = (
  { __typename?: 'Mutations' }
  & { setSteficonRuleOnPaymentPlanPaymentList: Maybe<(
    { __typename?: 'SetSteficonRuleOnPaymentPlanPaymentListMutation' }
    & { paymentPlan: Maybe<(
      { __typename?: 'PaymentPlanNode' }
      & Pick<PaymentPlanNode, 'id'>
      & { steficonRule: Maybe<(
        { __typename?: 'RuleCommitNode' }
        & Pick<RuleCommitNode, 'id'>
        & { rule: Maybe<(
          { __typename?: 'SteficonRuleNode' }
          & Pick<SteficonRuleNode, 'id' | 'name'>
        )> }
      )> }
    )> }
  )> }
);

export type ActivatePaymentVerificationPlanMutationVariables = {
  paymentVerificationPlanId: Scalars['ID']
};


export type ActivatePaymentVerificationPlanMutation = (
  { __typename?: 'Mutations' }
  & { activatePaymentVerificationPlan: Maybe<(
    { __typename?: 'ActivatePaymentVerificationPlan' }
    & Pick<ActivatePaymentVerificationPlan, 'validationErrors'>
    & { paymentPlan: Maybe<(
      { __typename?: 'GenericPaymentPlanNode' }
      & Pick<GenericPaymentPlanNode, 'id'>
      & { verificationPlans: Maybe<(
        { __typename?: 'PaymentVerificationPlanNodeConnection' }
        & { edges: Array<Maybe<(
          { __typename?: 'PaymentVerificationPlanNodeEdge' }
          & { node: Maybe<(
            { __typename?: 'PaymentVerificationPlanNode' }
            & Pick<PaymentVerificationPlanNode, 'id' | 'status' | 'activationDate'>
          )> }
        )>> }
      )>, paymentVerificationSummary: Maybe<(
        { __typename?: 'PaymentVerificationSummaryNode' }
        & Pick<PaymentVerificationSummaryNode, 'id' | 'status' | 'activationDate'>
      )> }
    )> }
  )> }
);

export type CreatePaymentVerificationPlanMutationVariables = {
  input: CreatePaymentVerificationInput,
  version?: Maybe<Scalars['BigInt']>
};


export type CreatePaymentVerificationPlanMutation = (
  { __typename?: 'Mutations' }
  & { createPaymentVerificationPlan: Maybe<(
    { __typename?: 'CreateVerificationPlanMutation' }
    & { paymentPlan: Maybe<(
      { __typename?: 'GenericPaymentPlanNode' }
      & Pick<GenericPaymentPlanNode, 'id'>
    )> }
  )> }
);

export type DeletePaymentVerificationPlanMutationVariables = {
  paymentVerificationPlanId: Scalars['ID']
};


export type DeletePaymentVerificationPlanMutation = (
  { __typename?: 'Mutations' }
  & { deletePaymentVerificationPlan: Maybe<(
    { __typename?: 'DeletePaymentVerificationPlan' }
    & { paymentPlan: Maybe<(
      { __typename?: 'GenericPaymentPlanNode' }
      & Pick<GenericPaymentPlanNode, 'id'>
      & { verificationPlans: Maybe<(
        { __typename?: 'PaymentVerificationPlanNodeConnection' }
        & Pick<PaymentVerificationPlanNodeConnection, 'totalCount'>
        & { edges: Array<Maybe<(
          { __typename?: 'PaymentVerificationPlanNodeEdge' }
          & { node: Maybe<(
            { __typename?: 'PaymentVerificationPlanNode' }
            & Pick<PaymentVerificationPlanNode, 'id' | 'status' | 'sampleSize' | 'receivedCount' | 'notReceivedCount' | 'respondedCount' | 'receivedWithProblemsCount' | 'activationDate'>
          )> }
        )>> }
      )>, paymentVerificationSummary: Maybe<(
        { __typename?: 'PaymentVerificationSummaryNode' }
        & Pick<PaymentVerificationSummaryNode, 'id' | 'status'>
      )> }
    )> }
  )> }
);

export type DiscardPaymentVerificationPlanMutationVariables = {
  paymentVerificationPlanId: Scalars['ID']
};


export type DiscardPaymentVerificationPlanMutation = (
  { __typename?: 'Mutations' }
  & { discardPaymentVerificationPlan: Maybe<(
    { __typename?: 'DiscardPaymentVerificationPlan' }
    & { paymentPlan: Maybe<(
      { __typename?: 'GenericPaymentPlanNode' }
      & Pick<GenericPaymentPlanNode, 'id'>
      & { verificationPlans: Maybe<(
        { __typename?: 'PaymentVerificationPlanNodeConnection' }
        & Pick<PaymentVerificationPlanNodeConnection, 'totalCount'>
        & { edges: Array<Maybe<(
          { __typename?: 'PaymentVerificationPlanNodeEdge' }
          & { node: Maybe<(
            { __typename?: 'PaymentVerificationPlanNode' }
            & Pick<PaymentVerificationPlanNode, 'id' | 'status' | 'sampleSize' | 'receivedCount' | 'notReceivedCount' | 'respondedCount' | 'receivedWithProblemsCount' | 'activationDate'>
          )> }
        )>> }
      )>, paymentVerificationSummary: Maybe<(
        { __typename?: 'PaymentVerificationSummaryNode' }
        & Pick<PaymentVerificationSummaryNode, 'id' | 'status'>
      )> }
    )> }
  )> }
);

export type EditPaymentVerificationPlanMutationVariables = {
  input: EditPaymentVerificationInput
};


export type EditPaymentVerificationPlanMutation = (
  { __typename?: 'Mutations' }
  & { editPaymentVerificationPlan: Maybe<(
    { __typename?: 'EditPaymentVerificationMutation' }
    & { paymentPlan: Maybe<(
      { __typename?: 'GenericPaymentPlanNode' }
      & Pick<GenericPaymentPlanNode, 'id'>
    )> }
  )> }
);

export type ExportXlsxPaymentVerificationPlanFileMutationVariables = {
  paymentVerificationPlanId: Scalars['ID']
};


export type ExportXlsxPaymentVerificationPlanFileMutation = (
  { __typename?: 'Mutations' }
  & { exportXlsxPaymentVerificationPlanFile: Maybe<(
    { __typename?: 'ExportXlsxPaymentVerificationPlanFile' }
    & { paymentPlan: Maybe<(
      { __typename?: 'GenericPaymentPlanNode' }
      & Pick<GenericPaymentPlanNode, 'id'>
    )> }
  )> }
);

export type FinishPaymentVerificationPlanMutationVariables = {
  paymentVerificationPlanId: Scalars['ID']
};


export type FinishPaymentVerificationPlanMutation = (
  { __typename?: 'Mutations' }
  & { finishPaymentVerificationPlan: Maybe<(
    { __typename?: 'FinishPaymentVerificationPlan' }
    & { paymentPlan: Maybe<(
      { __typename?: 'GenericPaymentPlanNode' }
      & Pick<GenericPaymentPlanNode, 'id'>
      & { verificationPlans: Maybe<(
        { __typename?: 'PaymentVerificationPlanNodeConnection' }
        & Pick<PaymentVerificationPlanNodeConnection, 'totalCount'>
        & { edges: Array<Maybe<(
          { __typename?: 'PaymentVerificationPlanNodeEdge' }
          & { node: Maybe<(
            { __typename?: 'PaymentVerificationPlanNode' }
            & Pick<PaymentVerificationPlanNode, 'id' | 'status' | 'completionDate'>
          )> }
        )>> }
      )>, paymentVerificationSummary: Maybe<(
        { __typename?: 'PaymentVerificationSummaryNode' }
        & Pick<PaymentVerificationSummaryNode, 'id' | 'status'>
      )> }
    )> }
  )> }
);

export type ImportXlsxPaymentVerificationPlanFileMutationVariables = {
  paymentVerificationPlanId: Scalars['ID'],
  file: Scalars['Upload']
};


export type ImportXlsxPaymentVerificationPlanFileMutation = (
  { __typename?: 'Mutations' }
  & { importXlsxPaymentVerificationPlanFile: Maybe<(
    { __typename?: 'ImportXlsxPaymentVerificationPlanFile' }
    & { paymentPlan: Maybe<(
      { __typename?: 'GenericPaymentPlanNode' }
      & Pick<GenericPaymentPlanNode, 'id'>
    )>, errors: Maybe<Array<Maybe<(
      { __typename?: 'XlsxErrorNode' }
      & Pick<XlsxErrorNode, 'sheet' | 'coordinates' | 'message'>
    )>>> }
  )> }
);

export type InvalidPaymentVerificationPlanMutationVariables = {
  paymentVerificationPlanId: Scalars['ID']
};


export type InvalidPaymentVerificationPlanMutation = (
  { __typename?: 'Mutations' }
  & { invalidPaymentVerificationPlan: Maybe<(
    { __typename?: 'InvalidPaymentVerificationPlan' }
    & { paymentPlan: Maybe<(
      { __typename?: 'GenericPaymentPlanNode' }
      & Pick<GenericPaymentPlanNode, 'id'>
      & { verificationPlans: Maybe<(
        { __typename?: 'PaymentVerificationPlanNodeConnection' }
        & { edges: Array<Maybe<(
          { __typename?: 'PaymentVerificationPlanNodeEdge' }
          & { node: Maybe<(
            { __typename?: 'PaymentVerificationPlanNode' }
            & Pick<PaymentVerificationPlanNode, 'id' | 'xlsxFileExporting' | 'hasXlsxFile' | 'xlsxFileWasDownloaded' | 'xlsxFileImported'>
          )> }
        )>> }
      )> }
    )> }
  )> }
);

export type MarkPrAsFailedMutationVariables = {
  paymentRecordId: Scalars['ID']
};


export type MarkPrAsFailedMutation = (
  { __typename?: 'Mutations' }
  & { markPaymentRecordAsFailed: Maybe<(
    { __typename?: 'MarkPaymentRecordAsFailedMutation' }
    & { paymentRecord: Maybe<(
      { __typename?: 'PaymentRecordNode' }
      & PaymentRecordDetailsFragment
    )> }
  )> }
);

export type RevertMarkPrAsFailedMutationVariables = {
  paymentRecordId: Scalars['ID'],
  deliveredQuantity: Scalars['Decimal'],
  deliveryDate: Scalars['Date']
};


export type RevertMarkPrAsFailedMutation = (
  { __typename?: 'Mutations' }
  & { revertMarkPaymentRecordAsFailed: Maybe<(
    { __typename?: 'RevertMarkPaymentRecordAsFailedMutation' }
    & { paymentRecord: Maybe<(
      { __typename?: 'PaymentRecordNode' }
      & PaymentRecordDetailsFragment
    )> }
  )> }
);

export type UpdatePaymentVerificationReceivedAndReceivedAmountMutationVariables = {
  paymentVerificationId: Scalars['ID'],
  receivedAmount: Scalars['Decimal'],
  received: Scalars['Boolean']
};


export type UpdatePaymentVerificationReceivedAndReceivedAmountMutation = (
  { __typename?: 'Mutations' }
  & { updatePaymentVerificationReceivedAndReceivedAmount: Maybe<(
    { __typename?: 'UpdatePaymentVerificationReceivedAndReceivedAmount' }
    & { paymentVerification: Maybe<(
      { __typename?: 'PaymentVerificationNode' }
      & Pick<PaymentVerificationNode, 'id' | 'status' | 'receivedAmount'>
      & { paymentVerificationPlan: (
        { __typename?: 'PaymentVerificationPlanNode' }
        & Pick<PaymentVerificationPlanNode, 'id' | 'receivedCount' | 'notReceivedCount' | 'respondedCount' | 'receivedWithProblemsCount'>
      ) }
    )> }
  )> }
);

export type UpdatePaymentVerificationStatusAndReceivedAmountMutationVariables = {
  paymentVerificationId: Scalars['ID'],
  receivedAmount: Scalars['Decimal'],
  status?: Maybe<PaymentVerificationStatusForUpdate>
};


export type UpdatePaymentVerificationStatusAndReceivedAmountMutation = (
  { __typename?: 'Mutations' }
  & { updatePaymentVerificationStatusAndReceivedAmount: Maybe<(
    { __typename?: 'UpdatePaymentVerificationStatusAndReceivedAmount' }
    & { paymentVerification: Maybe<(
      { __typename?: 'PaymentVerificationNode' }
      & Pick<PaymentVerificationNode, 'id' | 'status' | 'receivedAmount'>
    )> }
  )> }
);

export type CopyProgramMutationVariables = {
  programData: CopyProgramInput
};


export type CopyProgramMutation = (
  { __typename?: 'Mutations' }
  & { copyProgram: Maybe<(
    { __typename?: 'CopyProgram' }
    & { program: Maybe<(
      { __typename?: 'ProgramNode' }
      & Pick<ProgramNode, 'id'>
    )> }
  )> }
);

export type CreateProgramMutationVariables = {
  programData: CreateProgramInput
};


export type CreateProgramMutation = (
  { __typename?: 'Mutations' }
  & { createProgram: Maybe<(
    { __typename?: 'CreateProgram' }
    & Pick<CreateProgram, 'validationErrors'>
    & { program: Maybe<(
      { __typename?: 'ProgramNode' }
      & Pick<ProgramNode, 'id' | 'name' | 'status' | 'startDate' | 'endDate' | 'caId' | 'budget' | 'description' | 'frequencyOfPayments' | 'sector' | 'scope' | 'cashPlus' | 'populationGoal' | 'individualDataNeeded'>
    )> }
  )> }
);

export type DeleteProgramMutationVariables = {
  programId: Scalars['String']
};


export type DeleteProgramMutation = (
  { __typename?: 'Mutations' }
  & { deleteProgram: Maybe<(
    { __typename?: 'DeleteProgram' }
    & Pick<DeleteProgram, 'ok'>
  )> }
);

export type UpdateProgramMutationVariables = {
  programData: UpdateProgramInput,
  version: Scalars['BigInt']
};


export type UpdateProgramMutation = (
  { __typename?: 'Mutations' }
  & { updateProgram: Maybe<(
    { __typename?: 'UpdateProgram' }
    & Pick<UpdateProgram, 'validationErrors'>
    & { program: Maybe<(
      { __typename?: 'ProgramNode' }
      & Pick<ProgramNode, 'id' | 'name' | 'startDate' | 'endDate' | 'status' | 'caId' | 'description' | 'budget' | 'frequencyOfPayments' | 'cashPlus' | 'populationGoal' | 'scope' | 'sector' | 'totalNumberOfHouseholds' | 'administrativeAreasOfImplementation' | 'individualDataNeeded' | 'version'>
    )> }
  )> }
);

export type CreateRegistrationKoboImportMutationVariables = {
  registrationDataImportData: RegistrationKoboImportMutationInput
};


export type CreateRegistrationKoboImportMutation = (
  { __typename?: 'Mutations' }
  & { registrationKoboImport: Maybe<(
    { __typename?: 'RegistrationKoboImportMutation' }
    & Pick<RegistrationKoboImportMutation, 'validationErrors'>
    & { registrationDataImport: Maybe<(
      { __typename?: 'RegistrationDataImportNode' }
      & Pick<RegistrationDataImportNode, 'id' | 'name' | 'dataSource' | 'datahubId' | 'screenBeneficiary'>
    )> }
  )> }
);

export type CreateRegistrationXlsxImportMutationVariables = {
  registrationDataImportData: RegistrationXlsxImportMutationInput
};


export type CreateRegistrationXlsxImportMutation = (
  { __typename?: 'Mutations' }
  & { registrationXlsxImport: Maybe<(
    { __typename?: 'RegistrationXlsxImportMutation' }
    & Pick<RegistrationXlsxImportMutation, 'validationErrors'>
    & { registrationDataImport: Maybe<(
      { __typename?: 'RegistrationDataImportNode' }
      & Pick<RegistrationDataImportNode, 'id' | 'name' | 'dataSource' | 'datahubId' | 'screenBeneficiary'>
    )> }
  )> }
);

export type EraseRdiMutationVariables = {
  id: Scalars['ID']
};


export type EraseRdiMutation = (
  { __typename?: 'Mutations' }
  & { eraseRegistrationDataImport: Maybe<(
    { __typename?: 'EraseRegistrationDataImportMutation' }
    & { registrationDataImport: Maybe<(
      { __typename?: 'RegistrationDataImportNode' }
      & Pick<RegistrationDataImportNode, 'id' | 'status' | 'erased'>
    )> }
  )> }
);

export type MergeRdiMutationVariables = {
  id: Scalars['ID']
};


export type MergeRdiMutation = (
  { __typename?: 'Mutations' }
  & { mergeRegistrationDataImport: Maybe<(
    { __typename?: 'MergeRegistrationDataImportMutation' }
    & { registrationDataImport: Maybe<(
      { __typename?: 'RegistrationDataImportNode' }
      & RegistrationDetailedFragment
    )> }
  )> }
);

export type RefuseRdiMutationVariables = {
  id: Scalars['ID'],
  refuseReason?: Maybe<Scalars['String']>
};


export type RefuseRdiMutation = (
  { __typename?: 'Mutations' }
  & { refuseRegistrationDataImport: Maybe<(
    { __typename?: 'RefuseRegistrationDataImportMutation' }
    & { registrationDataImport: Maybe<(
      { __typename?: 'RegistrationDataImportNode' }
      & Pick<RegistrationDataImportNode, 'id' | 'status' | 'refuseReason'>
    )> }
  )> }
);

export type RerunDedupeMutationVariables = {
  registrationDataImportDatahubId: Scalars['ID']
};


export type RerunDedupeMutation = (
  { __typename?: 'Mutations' }
  & { rerunDedupe: Maybe<(
    { __typename?: 'RegistrationDeduplicationMutation' }
    & Pick<RegistrationDeduplicationMutation, 'ok'>
  )> }
);

export type SaveKoboImportDataMutationVariables = {
  businessAreaSlug: Scalars['String'],
  projectId: Scalars['Upload'],
  onlyActiveSubmissions: Scalars['Boolean']
};


export type SaveKoboImportDataMutation = (
  { __typename?: 'Mutations' }
  & { saveKoboImportDataAsync: Maybe<(
    { __typename?: 'SaveKoboProjectImportDataAsync' }
    & { importData: Maybe<(
      { __typename?: 'KoboImportDataNode' }
      & Pick<KoboImportDataNode, 'id'>
    )> }
  )> }
);

export type SaveKoboImportDataAsyncMutationVariables = {
  businessAreaSlug: Scalars['String'],
  koboAssetId: Scalars['Upload'],
  onlyActiveSubmissions: Scalars['Boolean']
};


export type SaveKoboImportDataAsyncMutation = (
  { __typename?: 'Mutations' }
  & { saveKoboImportDataAsync: Maybe<(
    { __typename?: 'SaveKoboProjectImportDataAsync' }
    & { importData: Maybe<(
      { __typename?: 'KoboImportDataNode' }
      & Pick<KoboImportDataNode, 'id' | 'status'>
    )> }
  )> }
);

export type UploadImportDataXlsxFileAsyncMutationVariables = {
  file: Scalars['Upload'],
  businessAreaSlug: Scalars['String']
};


export type UploadImportDataXlsxFileAsyncMutation = (
  { __typename?: 'Mutations' }
  & { uploadImportDataXlsxFileAsync: Maybe<(
    { __typename?: 'UploadImportDataXLSXFileAsync' }
    & { errors: Maybe<Array<Maybe<(
      { __typename?: 'XlsxRowErrorNode' }
      & Pick<XlsxRowErrorNode, 'header' | 'message' | 'rowNumber'>
    )>>>, importData: Maybe<(
      { __typename?: 'ImportDataNode' }
      & Pick<ImportDataNode, 'id' | 'numberOfIndividuals' | 'numberOfHouseholds'>
      & { registrationDataImport: Maybe<(
        { __typename?: 'RegistrationDataImportDatahubNode' }
        & Pick<RegistrationDataImportDatahubNode, 'id'>
      )> }
    )> }
  )> }
);

export type CreateDashboardReportMutationVariables = {
  reportData: CreateDashboardReportInput
};


export type CreateDashboardReportMutation = (
  { __typename?: 'Mutations' }
  & { createDashboardReport: Maybe<(
    { __typename?: 'CreateDashboardReport' }
    & Pick<CreateDashboardReport, 'success'>
  )> }
);

export type CreateReportMutationVariables = {
  reportData: CreateReportInput
};


export type CreateReportMutation = (
  { __typename?: 'Mutations' }
  & { createReport: Maybe<(
    { __typename?: 'CreateReport' }
    & { report: Maybe<(
      { __typename?: 'ReportNode' }
      & Pick<ReportNode, 'id' | 'status' | 'reportType' | 'createdAt' | 'dateFrom' | 'dateTo' | 'fileUrl'>
      & { createdBy: (
        { __typename?: 'UserNode' }
        & Pick<UserNode, 'firstName' | 'lastName'>
      ), adminArea: (
        { __typename?: 'AreaNodeConnection' }
        & { edges: Array<Maybe<(
          { __typename?: 'AreaNodeEdge' }
          & { node: Maybe<(
            { __typename?: 'AreaNode' }
            & Pick<AreaNode, 'name'>
          )> }
        )>> }
      ), program: Maybe<(
        { __typename?: 'ProgramNode' }
        & Pick<ProgramNode, 'name'>
      )> }
    )> }
  )> }
);

export type RestartCreateReportMutationVariables = {
  reportData: RestartCreateReportInput
};


export type RestartCreateReportMutation = (
  { __typename?: 'Mutations' }
  & { restartCreateReport: Maybe<(
    { __typename?: 'RestartCreateReport' }
    & { report: Maybe<(
      { __typename?: 'ReportNode' }
      & Pick<ReportNode, 'id' | 'status' | 'reportType' | 'createdAt' | 'dateFrom' | 'dateTo' | 'fileUrl'>
      & { createdBy: (
        { __typename?: 'UserNode' }
        & Pick<UserNode, 'firstName' | 'lastName'>
      ), adminArea: (
        { __typename?: 'AreaNodeConnection' }
        & { edges: Array<Maybe<(
          { __typename?: 'AreaNodeEdge' }
          & { node: Maybe<(
            { __typename?: 'AreaNode' }
            & Pick<AreaNode, 'name'>
          )> }
        )>> }
      ), program: Maybe<(
        { __typename?: 'ProgramNode' }
        & Pick<ProgramNode, 'name'>
      )> }
    )> }
  )> }
);

export type CreateTpMutationVariables = {
  input: CreateTargetPopulationInput
};


export type CreateTpMutation = (
  { __typename?: 'Mutations' }
  & { createTargetPopulation: Maybe<(
    { __typename?: 'CreateTargetPopulationMutation' }
    & Pick<CreateTargetPopulationMutation, 'validationErrors'>
    & { targetPopulation: Maybe<(
      { __typename?: 'TargetPopulationNode' }
      & Pick<TargetPopulationNode, 'id' | 'status' | 'totalHouseholdsCount' | 'totalIndividualsCount'>
    )> }
  )> }
);

export type DeleteTargetPopulationMutationVariables = {
  input: DeleteTargetPopulationMutationInput
};


export type DeleteTargetPopulationMutation = (
  { __typename?: 'Mutations' }
  & { deleteTargetPopulation: Maybe<(
    { __typename?: 'DeleteTargetPopulationMutationPayload' }
    & Pick<DeleteTargetPopulationMutationPayload, 'clientMutationId'>
  )> }
);

export type CopyTargetPopulationMutationVariables = {
  input: CopyTargetPopulationMutationInput
};


export type CopyTargetPopulationMutation = (
  { __typename?: 'Mutations' }
  & { copyTargetPopulation: Maybe<(
    { __typename?: 'CopyTargetPopulationMutationPayload' }
    & Pick<CopyTargetPopulationMutationPayload, 'clientMutationId' | 'validationErrors'>
    & { targetPopulation: Maybe<(
      { __typename?: 'TargetPopulationNode' }
      & Pick<TargetPopulationNode, 'id'>
    )> }
  )> }
);

export type FinalizeTpMutationVariables = {
  id: Scalars['ID']
};


export type FinalizeTpMutation = (
  { __typename?: 'Mutations' }
  & { finalizeTargetPopulation: Maybe<(
    { __typename?: 'FinalizeTargetPopulationMutation' }
    & { targetPopulation: Maybe<(
      { __typename?: 'TargetPopulationNode' }
      & TargetPopulationDetailedFragment
    )> }
  )> }
);

export type LockTpMutationVariables = {
  id: Scalars['ID']
};


export type LockTpMutation = (
  { __typename?: 'Mutations' }
  & { lockTargetPopulation: Maybe<(
    { __typename?: 'LockTargetPopulationMutation' }
    & { targetPopulation: Maybe<(
      { __typename?: 'TargetPopulationNode' }
      & TargetPopulationDetailedFragment
    )> }
  )> }
);

export type RebuildTpMutationVariables = {
  id: Scalars['ID']
};


export type RebuildTpMutation = (
  { __typename?: 'Mutations' }
  & { targetPopulationRebuild: Maybe<(
    { __typename?: 'RebuildTargetPopulationMutation' }
    & { targetPopulation: Maybe<(
      { __typename?: 'TargetPopulationNode' }
      & TargetPopulationDetailedFragment
    )> }
  )> }
);

export type SetSteficonRuleOnTargetPopulationMutationVariables = {
  input: SetSteficonRuleOnTargetPopulationMutationInput
};


export type SetSteficonRuleOnTargetPopulationMutation = (
  { __typename?: 'Mutations' }
  & { setSteficonRuleOnTargetPopulation: Maybe<(
    { __typename?: 'SetSteficonRuleOnTargetPopulationMutationPayload' }
    & { targetPopulation: Maybe<(
      { __typename?: 'TargetPopulationNode' }
      & TargetPopulationDetailedFragment
    )> }
  )> }
);

export type UnlockTpMutationVariables = {
  id: Scalars['ID']
};


export type UnlockTpMutation = (
  { __typename?: 'Mutations' }
  & { unlockTargetPopulation: Maybe<(
    { __typename?: 'UnlockTargetPopulationMutation' }
    & { targetPopulation: Maybe<(
      { __typename?: 'TargetPopulationNode' }
      & TargetPopulationDetailedFragment
    )> }
  )> }
);

export type UpdateTpMutationVariables = {
  input: UpdateTargetPopulationInput
};


export type UpdateTpMutation = (
  { __typename?: 'Mutations' }
  & { updateTargetPopulation: Maybe<(
    { __typename?: 'UpdateTargetPopulationMutation' }
    & Pick<UpdateTargetPopulationMutation, 'validationErrors'>
    & { targetPopulation: Maybe<(
      { __typename?: 'TargetPopulationNode' }
      & Pick<TargetPopulationNode, 'id' | 'status' | 'totalHouseholdsCount' | 'totalIndividualsCount'>
    )> }
  )> }
);

export type AccountabilityCommunicationMessageQueryVariables = {
  id: Scalars['ID']
};


export type AccountabilityCommunicationMessageQuery = (
  { __typename?: 'Query' }
  & { accountabilityCommunicationMessage: Maybe<(
    { __typename?: 'CommunicationMessageNode' }
    & Pick<CommunicationMessageNode, 'id' | 'unicefId' | 'createdAt' | 'title' | 'body'>
    & { createdBy: Maybe<(
      { __typename?: 'UserNode' }
      & Pick<UserNode, 'id' | 'firstName' | 'lastName' | 'email'>
    )>, targetPopulation: Maybe<(
      { __typename?: 'TargetPopulationNode' }
      & Pick<TargetPopulationNode, 'id' | 'name'>
    )>, registrationDataImport: Maybe<(
      { __typename?: 'RegistrationDataImportNode' }
      & Pick<RegistrationDataImportNode, 'id' | 'name'>
    )> }
  )> }
);

export type AccountabilityCommunicationMessageSampleSizeQueryVariables = {
  input: GetAccountabilityCommunicationMessageSampleSizeInput
};


export type AccountabilityCommunicationMessageSampleSizeQuery = (
  { __typename?: 'Query' }
  & { accountabilityCommunicationMessageSampleSize: Maybe<(
    { __typename?: 'GetCommunicationMessageSampleSizeNode' }
    & Pick<GetCommunicationMessageSampleSizeNode, 'numberOfRecipients' | 'sampleSize'>
  )> }
);

export type AccountabilitySampleSizeQueryVariables = {
  input: AccountabilitySampleSizeInput
};


export type AccountabilitySampleSizeQuery = (
  { __typename?: 'Query' }
  & { accountabilitySampleSize: Maybe<(
    { __typename?: 'AccountabilitySampleSizeNode' }
    & Pick<AccountabilitySampleSizeNode, 'numberOfRecipients' | 'sampleSize'>
  )> }
);

export type AllAccountabilityCommunicationMessageRecipientsQueryVariables = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  messageId: Scalars['String'],
  recipientId?: Maybe<Scalars['String']>,
  fullName?: Maybe<Scalars['String']>,
  phoneNo?: Maybe<Scalars['String']>,
  sex?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>
};


export type AllAccountabilityCommunicationMessageRecipientsQuery = (
  { __typename?: 'Query' }
  & { allAccountabilityCommunicationMessageRecipients: Maybe<(
    { __typename?: 'CommunicationMessageRecipientMapNodeConnection' }
    & Pick<CommunicationMessageRecipientMapNodeConnection, 'totalCount' | 'edgeCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'CommunicationMessageRecipientMapNodeEdge' }
      & Pick<CommunicationMessageRecipientMapNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'CommunicationMessageRecipientMapNode' }
        & Pick<CommunicationMessageRecipientMapNode, 'id'>
        & { headOfHousehold: (
          { __typename?: 'IndividualNode' }
          & Pick<IndividualNode, 'id' | 'fullName'>
          & { household: Maybe<(
            { __typename?: 'HouseholdNode' }
            & Pick<HouseholdNode, 'id' | 'unicefId' | 'size' | 'status' | 'residenceStatus' | 'lastRegistrationDate'>
            & { admin2: Maybe<(
              { __typename?: 'AreaNode' }
              & Pick<AreaNode, 'id' | 'name'>
            )> }
          )> }
        ) }
      )> }
    )>> }
  )> }
);

export type AllAccountabilityCommunicationMessagesQueryVariables = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  numberOfRecipients?: Maybe<Scalars['Int']>,
  numberOfRecipients_Gte?: Maybe<Scalars['Int']>,
  numberOfRecipients_Lte?: Maybe<Scalars['Int']>,
  targetPopulation?: Maybe<Scalars['ID']>,
  createdBy?: Maybe<Scalars['ID']>,
  program?: Maybe<Scalars['String']>,
  createdAtRange?: Maybe<Scalars['String']>,
  title?: Maybe<Scalars['String']>,
  body?: Maybe<Scalars['String']>,
  samplingType?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>
};


export type AllAccountabilityCommunicationMessagesQuery = (
  { __typename?: 'Query' }
  & { allAccountabilityCommunicationMessages: Maybe<(
    { __typename?: 'CommunicationMessageNodeConnection' }
    & Pick<CommunicationMessageNodeConnection, 'totalCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'startCursor' | 'endCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'CommunicationMessageNodeEdge' }
      & Pick<CommunicationMessageNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'CommunicationMessageNode' }
        & Pick<CommunicationMessageNode, 'id' | 'unicefId' | 'title' | 'numberOfRecipients' | 'createdAt'>
        & { createdBy: Maybe<(
          { __typename?: 'UserNode' }
          & Pick<UserNode, 'id' | 'firstName' | 'lastName' | 'email'>
        )> }
      )> }
    )>> }
  )> }
);

export type AllAdminAreasQueryVariables = {
  name?: Maybe<Scalars['String']>,
  businessArea?: Maybe<Scalars['String']>,
  level?: Maybe<Scalars['Int']>,
  first?: Maybe<Scalars['Int']>,
  parentId?: Maybe<Scalars['String']>
};


export type AllAdminAreasQuery = (
  { __typename?: 'Query' }
  & { allAdminAreas: Maybe<(
    { __typename?: 'AreaNodeConnection' }
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'endCursor' | 'startCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'AreaNodeEdge' }
      & { node: Maybe<(
        { __typename?: 'AreaNode' }
        & Pick<AreaNode, 'id' | 'name' | 'pCode'>
      )> }
    )>> }
  )> }
);

export type AllBusinessAreasQueryVariables = {
  slug?: Maybe<Scalars['String']>
};


export type AllBusinessAreasQuery = (
  { __typename?: 'Query' }
  & { allBusinessAreas: Maybe<(
    { __typename?: 'BusinessAreaNodeConnection' }
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'endCursor' | 'startCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'BusinessAreaNodeEdge' }
      & { node: Maybe<(
        { __typename?: 'BusinessAreaNode' }
        & Pick<BusinessAreaNode, 'id' | 'name' | 'slug'>
      )> }
    )>> }
  )> }
);

export type AllLogEntriesQueryVariables = {
  businessArea: Scalars['String'],
  objectId?: Maybe<Scalars['UUID']>,
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  search?: Maybe<Scalars['String']>,
  module?: Maybe<Scalars['String']>,
  userId?: Maybe<Scalars['String']>,
  programId?: Maybe<Scalars['String']>
};


export type AllLogEntriesQuery = (
  { __typename?: 'Query' }
  & { allLogEntries: Maybe<(
    { __typename?: 'LogEntryNodeConnection' }
    & Pick<LogEntryNodeConnection, 'totalCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'LogEntryNodeEdge' }
      & Pick<LogEntryNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'LogEntryNode' }
        & Pick<LogEntryNode, 'id' | 'action' | 'changes' | 'objectRepr' | 'objectId' | 'timestamp' | 'isUserGenerated'>
        & { contentType: Maybe<(
          { __typename?: 'ContentTypeObjectType' }
          & Pick<ContentTypeObjectType, 'id' | 'appLabel' | 'model' | 'name'>
        )>, user: Maybe<(
          { __typename?: 'UserNode' }
          & Pick<UserNode, 'id' | 'firstName' | 'lastName'>
        )> }
      )> }
    )>> }
  )>, logEntryActionChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>> }
);

export type AllSanctionListIndividualsQueryVariables = {
  referenceNumber: Scalars['String'],
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>,
  fullNameContains?: Maybe<Scalars['String']>
};


export type AllSanctionListIndividualsQuery = (
  { __typename?: 'Query' }
  & { allSanctionListIndividuals: Maybe<(
    { __typename?: 'SanctionListIndividualNodeConnection' }
    & Pick<SanctionListIndividualNodeConnection, 'totalCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'endCursor' | 'startCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'SanctionListIndividualNodeEdge' }
      & Pick<SanctionListIndividualNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'SanctionListIndividualNode' }
        & Pick<SanctionListIndividualNode, 'id' | 'referenceNumber' | 'fullName' | 'listedOn'>
        & { documents: (
          { __typename?: 'SanctionListIndividualDocumentNodeConnection' }
          & { edges: Array<Maybe<(
            { __typename?: 'SanctionListIndividualDocumentNodeEdge' }
            & { node: Maybe<(
              { __typename?: 'SanctionListIndividualDocumentNode' }
              & Pick<SanctionListIndividualDocumentNode, 'id' | 'documentNumber' | 'typeOfDocument' | 'issuingCountry'>
            )> }
          )>> }
        ), aliasNames: (
          { __typename?: 'SanctionListIndividualAliasNameNodeConnection' }
          & { edges: Array<Maybe<(
            { __typename?: 'SanctionListIndividualAliasNameNodeEdge' }
            & { node: Maybe<(
              { __typename?: 'SanctionListIndividualAliasNameNode' }
              & Pick<SanctionListIndividualAliasNameNode, 'id' | 'name'>
            )> }
          )>> }
        ), datesOfBirth: (
          { __typename?: 'SanctionListIndividualDateOfBirthNodeConnection' }
          & { edges: Array<Maybe<(
            { __typename?: 'SanctionListIndividualDateOfBirthNodeEdge' }
            & { node: Maybe<(
              { __typename?: 'SanctionListIndividualDateOfBirthNode' }
              & Pick<SanctionListIndividualDateOfBirthNode, 'id' | 'date'>
            )> }
          )>> }
        ) }
      )> }
    )>> }
  )> }
);

export type AllUsersQueryVariables = {
  search?: Maybe<Scalars['String']>,
  status?: Maybe<Array<Maybe<Scalars['String']>>>,
  partner?: Maybe<Array<Maybe<Scalars['String']>>>,
  roles?: Maybe<Array<Maybe<Scalars['String']>>>,
  businessArea: Scalars['String'],
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>
};


export type AllUsersQuery = (
  { __typename?: 'Query' }
  & { allUsers: Maybe<(
    { __typename?: 'UserNodeConnection' }
    & Pick<UserNodeConnection, 'totalCount' | 'edgeCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'endCursor' | 'startCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'UserNodeEdge' }
      & Pick<UserNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'UserNode' }
        & Pick<UserNode, 'id' | 'firstName' | 'lastName' | 'username' | 'email' | 'isActive' | 'lastLogin' | 'status'>
        & { partner: Maybe<(
          { __typename?: 'PartnerType' }
          & Pick<PartnerType, 'name'>
        )>, userRoles: Array<(
          { __typename?: 'UserRoleNode' }
          & { businessArea: (
            { __typename?: 'UserBusinessAreaNode' }
            & Pick<UserBusinessAreaNode, 'name'>
          ), role: (
            { __typename?: 'RoleNode' }
            & Pick<RoleNode, 'name' | 'permissions'>
          ) }
        )> }
      )> }
    )>> }
  )> }
);

export type AllUsersForFiltersQueryVariables = {
  businessArea: Scalars['String'],
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>,
  search?: Maybe<Scalars['String']>,
  isTicketCreator?: Maybe<Scalars['Boolean']>
};


export type AllUsersForFiltersQuery = (
  { __typename?: 'Query' }
  & { allUsers: Maybe<(
    { __typename?: 'UserNodeConnection' }
    & { edges: Array<Maybe<(
      { __typename?: 'UserNodeEdge' }
      & { node: Maybe<(
        { __typename?: 'UserNode' }
        & Pick<UserNode, 'id' | 'firstName' | 'lastName' | 'email'>
      )> }
    )>> }
  )> }
);

export type BusinessAreaDataQueryVariables = {
  businessAreaSlug: Scalars['String']
};


export type BusinessAreaDataQuery = (
  { __typename?: 'Query' }
  & { businessArea: Maybe<(
    { __typename?: 'BusinessAreaNode' }
    & Pick<BusinessAreaNode, 'id' | 'screenBeneficiary' | 'isPaymentPlanApplicable' | 'isAccountabilityApplicable'>
  )> }
);

export type CashAssistUrlPrefixQueryVariables = {};


export type CashAssistUrlPrefixQuery = (
  { __typename?: 'Query' }
  & Pick<Query, 'cashAssistUrlPrefix'>
);

export type CurrencyChoicesQueryVariables = {};


export type CurrencyChoicesQuery = (
  { __typename?: 'Query' }
  & { currencyChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>> }
);

export type LoggedCheckerQueryVariables = {};


export type LoggedCheckerQuery = (
  { __typename?: 'Query' }
  & { me: Maybe<(
    { __typename?: 'UserNode' }
    & Pick<UserNode, 'id'>
  )> }
);

export type MeQueryVariables = {};


export type MeQuery = (
  { __typename?: 'Query' }
  & { me: Maybe<(
    { __typename?: 'UserNode' }
    & Pick<UserNode, 'id' | 'username' | 'email' | 'firstName' | 'lastName'>
    & { businessAreas: Maybe<(
      { __typename?: 'UserBusinessAreaNodeConnection' }
      & { edges: Array<Maybe<(
        { __typename?: 'UserBusinessAreaNodeEdge' }
        & { node: Maybe<(
          { __typename?: 'UserBusinessAreaNode' }
          & Pick<UserBusinessAreaNode, 'id' | 'name' | 'slug' | 'permissions'>
        )> }
      )>> }
    )> }
  )> }
);

export type UserChoiceDataQueryVariables = {};


export type UserChoiceDataQuery = (
  { __typename?: 'Query' }
  & { userRolesChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>>, userStatusChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>>, userPartnerChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>> }
);

export type AllAddIndividualFieldsQueryVariables = {};


export type AllAddIndividualFieldsQuery = (
  { __typename?: 'Query' }
  & { allAddIndividualsFieldsAttributes: Maybe<Array<Maybe<(
    { __typename?: 'FieldAttributeNode' }
    & Pick<FieldAttributeNode, 'isFlexField' | 'id' | 'type' | 'name' | 'required' | 'associatedWith' | 'labelEn' | 'hint'>
    & { labels: Maybe<Array<Maybe<(
      { __typename?: 'LabelNode' }
      & Pick<LabelNode, 'language' | 'label'>
    )>>>, choices: Maybe<Array<Maybe<(
      { __typename?: 'CoreFieldChoiceObject' }
      & Pick<CoreFieldChoiceObject, 'labelEn' | 'value' | 'admin' | 'listName'>
      & { labels: Maybe<Array<Maybe<(
        { __typename?: 'LabelNode' }
        & Pick<LabelNode, 'label' | 'language'>
      )>>> }
    )>>> }
  )>>>, countriesChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>>, documentTypeChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>>, identityTypeChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>> }
);

export type AllEditHouseholdFieldsQueryVariables = {};


export type AllEditHouseholdFieldsQuery = (
  { __typename?: 'Query' }
  & { allEditHouseholdFieldsAttributes: Maybe<Array<Maybe<(
    { __typename?: 'FieldAttributeNode' }
    & Pick<FieldAttributeNode, 'isFlexField' | 'id' | 'type' | 'name' | 'required' | 'associatedWith' | 'labelEn' | 'hint'>
    & { labels: Maybe<Array<Maybe<(
      { __typename?: 'LabelNode' }
      & Pick<LabelNode, 'language' | 'label'>
    )>>>, choices: Maybe<Array<Maybe<(
      { __typename?: 'CoreFieldChoiceObject' }
      & Pick<CoreFieldChoiceObject, 'labelEn' | 'value' | 'admin' | 'listName'>
      & { labels: Maybe<Array<Maybe<(
        { __typename?: 'LabelNode' }
        & Pick<LabelNode, 'label' | 'language'>
      )>>> }
    )>>> }
  )>>>, countriesChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>> }
);

export type AllHouseholdsFlexFieldsAttributesQueryVariables = {};


export type AllHouseholdsFlexFieldsAttributesQuery = (
  { __typename?: 'Query' }
  & { allHouseholdsFlexFieldsAttributes: Maybe<Array<Maybe<(
    { __typename?: 'FieldAttributeNode' }
    & Pick<FieldAttributeNode, 'isFlexField' | 'id' | 'type' | 'name' | 'required' | 'associatedWith' | 'labelEn' | 'hint'>
    & { labels: Maybe<Array<Maybe<(
      { __typename?: 'LabelNode' }
      & Pick<LabelNode, 'language' | 'label'>
    )>>>, choices: Maybe<Array<Maybe<(
      { __typename?: 'CoreFieldChoiceObject' }
      & Pick<CoreFieldChoiceObject, 'labelEn' | 'value' | 'admin' | 'listName'>
      & { labels: Maybe<Array<Maybe<(
        { __typename?: 'LabelNode' }
        & Pick<LabelNode, 'label' | 'language'>
      )>>> }
    )>>> }
  )>>> }
);

export type AllIndividualsFlexFieldsAttributesQueryVariables = {};


export type AllIndividualsFlexFieldsAttributesQuery = (
  { __typename?: 'Query' }
  & { allIndividualsFlexFieldsAttributes: Maybe<Array<Maybe<(
    { __typename?: 'FieldAttributeNode' }
    & Pick<FieldAttributeNode, 'isFlexField' | 'id' | 'type' | 'name' | 'required' | 'associatedWith' | 'labelEn' | 'hint'>
    & { labels: Maybe<Array<Maybe<(
      { __typename?: 'LabelNode' }
      & Pick<LabelNode, 'language' | 'label'>
    )>>>, choices: Maybe<Array<Maybe<(
      { __typename?: 'CoreFieldChoiceObject' }
      & Pick<CoreFieldChoiceObject, 'labelEn' | 'value' | 'admin' | 'listName'>
      & { labels: Maybe<Array<Maybe<(
        { __typename?: 'LabelNode' }
        & Pick<LabelNode, 'label' | 'language'>
      )>>> }
    )>>> }
  )>>> }
);

export type FlexFieldsQueryVariables = {};


export type FlexFieldsQuery = (
  { __typename?: 'Query' }
  & { allGroupsWithFields: Maybe<Array<Maybe<(
    { __typename?: 'GroupAttributeNode' }
    & Pick<GroupAttributeNode, 'name' | 'labelEn'>
    & { flexAttributes: Maybe<Array<Maybe<(
      { __typename?: 'FieldAttributeNode' }
      & Pick<FieldAttributeNode, 'id' | 'labelEn' | 'associatedWith'>
    )>>> }
  )>>> }
);

export type ImportedIndividualFieldsQueryVariables = {
  businessAreaSlug?: Maybe<Scalars['String']>
};


export type ImportedIndividualFieldsQuery = (
  { __typename?: 'Query' }
  & { allFieldsAttributes: Maybe<Array<Maybe<(
    { __typename?: 'FieldAttributeNode' }
    & Pick<FieldAttributeNode, 'isFlexField' | 'id' | 'type' | 'name' | 'associatedWith' | 'labelEn' | 'hint'>
    & { labels: Maybe<Array<Maybe<(
      { __typename?: 'LabelNode' }
      & Pick<LabelNode, 'language' | 'label'>
    )>>>, choices: Maybe<Array<Maybe<(
      { __typename?: 'CoreFieldChoiceObject' }
      & Pick<CoreFieldChoiceObject, 'labelEn' | 'value' | 'admin' | 'listName'>
      & { labels: Maybe<Array<Maybe<(
        { __typename?: 'LabelNode' }
        & Pick<LabelNode, 'label' | 'language'>
      )>>> }
    )>>> }
  )>>> }
);

export type AllFeedbacksQueryVariables = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  issueType?: Maybe<Scalars['String']>,
  createdAtRange?: Maybe<Scalars['String']>,
  createdBy?: Maybe<Scalars['String']>,
  feedbackId?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>
};


export type AllFeedbacksQuery = (
  { __typename?: 'Query' }
  & { allFeedbacks: Maybe<(
    { __typename?: 'FeedbackNodeConnection' }
    & Pick<FeedbackNodeConnection, 'totalCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'startCursor' | 'endCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'FeedbackNodeEdge' }
      & Pick<FeedbackNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'FeedbackNode' }
        & Pick<FeedbackNode, 'id' | 'unicefId' | 'issueType' | 'createdAt'>
        & { householdLookup: Maybe<(
          { __typename?: 'HouseholdNode' }
          & Pick<HouseholdNode, 'id' | 'unicefId'>
        )>, createdBy: Maybe<(
          { __typename?: 'UserNode' }
          & Pick<UserNode, 'id' | 'firstName' | 'lastName' | 'email'>
        )>, linkedGrievance: Maybe<(
          { __typename?: 'GrievanceTicketNode' }
          & Pick<GrievanceTicketNode, 'id' | 'unicefId' | 'category'>
        )> }
      )> }
    )>> }
  )> }
);

export type FeedbackQueryVariables = {
  id: Scalars['ID']
};


export type FeedbackQuery = (
  { __typename?: 'Query' }
  & { feedback: Maybe<(
    { __typename?: 'FeedbackNode' }
    & Pick<FeedbackNode, 'id' | 'unicefId' | 'issueType' | 'createdAt' | 'updatedAt' | 'area' | 'language' | 'description' | 'comments'>
    & { householdLookup: Maybe<(
      { __typename?: 'HouseholdNode' }
      & Pick<HouseholdNode, 'id' | 'unicefId'>
      & { headOfHousehold: (
        { __typename?: 'IndividualNode' }
        & Pick<IndividualNode, 'id' | 'fullName'>
      ) }
    )>, individualLookup: Maybe<(
      { __typename?: 'IndividualNode' }
      & Pick<IndividualNode, 'id' | 'unicefId'>
    )>, program: Maybe<(
      { __typename?: 'ProgramNode' }
      & Pick<ProgramNode, 'id' | 'name'>
    )>, createdBy: Maybe<(
      { __typename?: 'UserNode' }
      & Pick<UserNode, 'id' | 'firstName' | 'lastName' | 'username' | 'email'>
    )>, admin2: Maybe<(
      { __typename?: 'AreaNode' }
      & Pick<AreaNode, 'id' | 'name'>
    )>, linkedGrievance: Maybe<(
      { __typename?: 'GrievanceTicketNode' }
      & Pick<GrievanceTicketNode, 'id' | 'unicefId' | 'category'>
    )>, feedbackMessages: (
      { __typename?: 'FeedbackMessageNodeConnection' }
      & { edges: Array<Maybe<(
        { __typename?: 'FeedbackMessageNodeEdge' }
        & { node: Maybe<(
          { __typename?: 'FeedbackMessageNode' }
          & Pick<FeedbackMessageNode, 'id' | 'createdAt' | 'updatedAt' | 'description'>
          & { createdBy: Maybe<(
            { __typename?: 'UserNode' }
            & Pick<UserNode, 'id' | 'firstName' | 'lastName' | 'username' | 'email'>
          )> }
        )> }
      )>> }
    ) }
  )> }
);

export type FeedbackIssueTypeChoicesQueryVariables = {};


export type FeedbackIssueTypeChoicesQuery = (
  { __typename?: 'Query' }
  & { feedbackIssueTypeChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>> }
);

export type AllGrievanceDashboardChartsQueryVariables = {
  businessAreaSlug: Scalars['String']
};


export type AllGrievanceDashboardChartsQuery = (
  { __typename?: 'Query' }
  & { ticketsByType: Maybe<(
    { __typename?: 'TicketByType' }
    & Pick<TicketByType, 'userGeneratedCount' | 'systemGeneratedCount' | 'closedUserGeneratedCount' | 'closedSystemGeneratedCount' | 'userGeneratedAvgResolution' | 'systemGeneratedAvgResolution'>
  )>, ticketsByStatus: Maybe<(
    { __typename?: 'ChartDatasetNode' }
    & Pick<ChartDatasetNode, 'labels'>
    & { datasets: Maybe<Array<Maybe<(
      { __typename?: '_DatasetsNode' }
      & Pick<_DatasetsNode, 'data'>
    )>>> }
  )>, ticketsByCategory: Maybe<(
    { __typename?: 'ChartDatasetNode' }
    & Pick<ChartDatasetNode, 'labels'>
    & { datasets: Maybe<Array<Maybe<(
      { __typename?: '_DatasetsNode' }
      & Pick<_DatasetsNode, 'data'>
    )>>> }
  )>, ticketsByLocationAndCategory: Maybe<(
    { __typename?: 'ChartDetailedDatasetsNode' }
    & Pick<ChartDetailedDatasetsNode, 'labels'>
    & { datasets: Maybe<Array<Maybe<(
      { __typename?: '_DetailedDatasetsNode' }
      & Pick<_DetailedDatasetsNode, 'data' | 'label'>
    )>>> }
  )> }
);

export type AllGrievanceTicketQueryVariables = {
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  id?: Maybe<Scalars['UUID']>,
  category?: Maybe<Scalars['String']>,
  issueType?: Maybe<Scalars['String']>,
  businessArea: Scalars['String'],
  search?: Maybe<Scalars['String']>,
  status?: Maybe<Array<Maybe<Scalars['String']>>>,
  fsp?: Maybe<Scalars['String']>,
  createdAtRange?: Maybe<Scalars['String']>,
  admin2?: Maybe<Scalars['ID']>,
  orderBy?: Maybe<Scalars['String']>,
  registrationDataImport?: Maybe<Scalars['ID']>,
  assignedTo?: Maybe<Scalars['ID']>,
  createdBy?: Maybe<Scalars['ID']>,
  cashPlan?: Maybe<Scalars['String']>,
  scoreMin?: Maybe<Scalars['String']>,
  scoreMax?: Maybe<Scalars['String']>,
  household?: Maybe<Scalars['String']>,
  grievanceType?: Maybe<Scalars['String']>,
  grievanceStatus?: Maybe<Scalars['String']>,
  priority?: Maybe<Scalars['String']>,
  urgency?: Maybe<Scalars['String']>,
  preferredLanguage?: Maybe<Scalars['String']>,
  program?: Maybe<Scalars['String']>
};


export type AllGrievanceTicketQuery = (
  { __typename?: 'Query' }
  & { allGrievanceTicket: Maybe<(
    { __typename?: 'GrievanceTicketNodeConnection' }
    & Pick<GrievanceTicketNodeConnection, 'totalCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'startCursor' | 'endCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'GrievanceTicketNodeEdge' }
      & Pick<GrievanceTicketNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'GrievanceTicketNode' }
        & Pick<GrievanceTicketNode, 'id' | 'status' | 'category' | 'issueType' | 'createdAt' | 'userModified' | 'admin' | 'unicefId' | 'priority' | 'urgency' | 'updatedAt' | 'totalDays'>
        & { assignedTo: Maybe<(
          { __typename?: 'UserNode' }
          & Pick<UserNode, 'id' | 'firstName' | 'lastName' | 'email'>
        )>, createdBy: Maybe<(
          { __typename?: 'UserNode' }
          & Pick<UserNode, 'id'>
        )>, household: Maybe<(
          { __typename?: 'HouseholdNode' }
          & Pick<HouseholdNode, 'unicefId' | 'id'>
        )>, relatedTickets: Maybe<Array<Maybe<(
          { __typename?: 'GrievanceTicketNode' }
          & Pick<GrievanceTicketNode, 'id'>
        )>>> }
      )> }
    )>> }
  )> }
);

export type ExistingGrievanceTicketsQueryVariables = {
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  id?: Maybe<Scalars['UUID']>,
  businessArea: Scalars['String'],
  household?: Maybe<Scalars['ID']>,
  individual?: Maybe<Scalars['ID']>,
  paymentRecord?: Maybe<Array<Maybe<Scalars['ID']>>>,
  category?: Maybe<Scalars['String']>,
  issueType?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>
};


export type ExistingGrievanceTicketsQuery = (
  { __typename?: 'Query' }
  & { existingGrievanceTickets: Maybe<(
    { __typename?: 'GrievanceTicketNodeConnection' }
    & Pick<GrievanceTicketNodeConnection, 'totalCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'startCursor' | 'endCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'GrievanceTicketNodeEdge' }
      & Pick<GrievanceTicketNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'GrievanceTicketNode' }
        & Pick<GrievanceTicketNode, 'id' | 'unicefId' | 'status' | 'category' | 'createdAt' | 'issueType' | 'userModified' | 'admin'>
        & { assignedTo: Maybe<(
          { __typename?: 'UserNode' }
          & Pick<UserNode, 'id' | 'firstName' | 'lastName' | 'email'>
        )>, household: Maybe<(
          { __typename?: 'HouseholdNode' }
          & Pick<HouseholdNode, 'unicefId' | 'id'>
        )>, individual: Maybe<(
          { __typename?: 'IndividualNode' }
          & Pick<IndividualNode, 'unicefId' | 'id'>
        )> }
      )> }
    )>> }
  )> }
);

export type GrievanceTicketQueryVariables = {
  id: Scalars['ID']
};


export type GrievanceTicketQuery = (
  { __typename?: 'Query' }
  & { grievanceTicket: Maybe<(
    { __typename?: 'GrievanceTicketNode' }
    & GrievanceTicketDetailedFragment
  )> }
);

export type GrievanceTicketFlexFieldsQueryVariables = {
  id: Scalars['ID']
};


export type GrievanceTicketFlexFieldsQuery = (
  { __typename?: 'Query' }
  & { grievanceTicket: Maybe<(
    { __typename?: 'GrievanceTicketNode' }
    & Pick<GrievanceTicketNode, 'id'>
    & { individualDataUpdateTicketDetails: Maybe<(
      { __typename?: 'TicketIndividualDataUpdateDetailsNode' }
      & Pick<TicketIndividualDataUpdateDetailsNode, 'id' | 'individualData'>
    )>, householdDataUpdateTicketDetails: Maybe<(
      { __typename?: 'TicketHouseholdDataUpdateDetailsNode' }
      & Pick<TicketHouseholdDataUpdateDetailsNode, 'id' | 'householdData'>
    )> }
  )> }
);

export type GrievanceTicketUnicefIdQueryVariables = {
  id: Scalars['ID']
};


export type GrievanceTicketUnicefIdQuery = (
  { __typename?: 'Query' }
  & { grievanceTicket: Maybe<(
    { __typename?: 'GrievanceTicketNode' }
    & Pick<GrievanceTicketNode, 'id' | 'unicefId'>
  )> }
);

export type GrievancesChoiceDataQueryVariables = {};


export type GrievancesChoiceDataQuery = (
  { __typename?: 'Query' }
  & { grievanceTicketStatusChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>>, grievanceTicketCategoryChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>>, grievanceTicketManualCategoryChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>>, grievanceTicketSystemCategoryChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>>, grievanceTicketPriorityChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObjectInt' }
    & Pick<ChoiceObjectInt, 'name' | 'value'>
  )>>>, grievanceTicketUrgencyChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObjectInt' }
    & Pick<ChoiceObjectInt, 'name' | 'value'>
  )>>>, grievanceTicketIssueTypeChoices: Maybe<Array<Maybe<(
    { __typename?: 'IssueTypesObject' }
    & Pick<IssueTypesObject, 'category' | 'label'>
    & { subCategories: Maybe<Array<Maybe<(
      { __typename?: 'ChoiceObject' }
      & Pick<ChoiceObject, 'name' | 'value'>
    )>>> }
  )>>>, grievanceTicketSearchTypesChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>> }
);

export type RelatedGrievanceTicketsQueryVariables = {
  id: Scalars['ID']
};


export type RelatedGrievanceTicketsQuery = (
  { __typename?: 'Query' }
  & { grievanceTicket: Maybe<(
    { __typename?: 'GrievanceTicketNode' }
    & { relatedTickets: Maybe<Array<Maybe<(
      { __typename?: 'GrievanceTicketNode' }
      & Pick<GrievanceTicketNode, 'id' | 'status' | 'category' | 'issueType' | 'unicefId'>
    )>>> }
  )> }
);

export type AllDeliveryMechanismsQueryVariables = {};


export type AllDeliveryMechanismsQuery = (
  { __typename?: 'Query' }
  & { allDeliveryMechanisms: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>> }
);

export type AllPaymentPlansForTableQueryVariables = {
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  orderBy?: Maybe<Scalars['String']>,
  businessArea: Scalars['String'],
  search?: Maybe<Scalars['String']>,
  status?: Maybe<Array<Maybe<Scalars['String']>>>,
  totalEntitledQuantityFrom?: Maybe<Scalars['Float']>,
  totalEntitledQuantityTo?: Maybe<Scalars['Float']>,
  dispersionStartDate?: Maybe<Scalars['Date']>,
  dispersionEndDate?: Maybe<Scalars['Date']>,
  isFollowUp?: Maybe<Scalars['Boolean']>,
  program?: Maybe<Scalars['String']>
};


export type AllPaymentPlansForTableQuery = (
  { __typename?: 'Query' }
  & { allPaymentPlans: Maybe<(
    { __typename?: 'PaymentPlanNodeConnection' }
    & Pick<PaymentPlanNodeConnection, 'totalCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'PaymentPlanNodeEdge' }
      & Pick<PaymentPlanNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'PaymentPlanNode' }
        & Pick<PaymentPlanNode, 'id' | 'unicefId' | 'isFollowUp' | 'status' | 'currency' | 'currencyName' | 'startDate' | 'endDate' | 'dispersionStartDate' | 'dispersionEndDate' | 'femaleChildrenCount' | 'femaleAdultsCount' | 'maleChildrenCount' | 'maleAdultsCount' | 'totalHouseholdsCount' | 'totalIndividualsCount' | 'totalEntitledQuantity' | 'totalDeliveredQuantity' | 'totalUndeliveredQuantity'>
        & { followUps: (
          { __typename?: 'PaymentPlanNodeConnection' }
          & Pick<PaymentPlanNodeConnection, 'totalCount'>
          & { edges: Array<Maybe<(
            { __typename?: 'PaymentPlanNodeEdge' }
            & { node: Maybe<(
              { __typename?: 'PaymentPlanNode' }
              & Pick<PaymentPlanNode, 'id' | 'unicefId'>
            )> }
          )>> }
        ), createdBy: (
          { __typename?: 'UserNode' }
          & Pick<UserNode, 'id' | 'firstName' | 'lastName' | 'email'>
        ), program: (
          { __typename?: 'ProgramNode' }
          & Pick<ProgramNode, 'id' | 'name'>
        ), targetPopulation: (
          { __typename?: 'TargetPopulationNode' }
          & Pick<TargetPopulationNode, 'id' | 'name'>
        ) }
      )> }
    )>> }
  )> }
);

export type AvailableFspsForDeliveryMechanismsQueryVariables = {
  input: AvailableFspsForDeliveryMechanismsInput
};


export type AvailableFspsForDeliveryMechanismsQuery = (
  { __typename?: 'Query' }
  & { availableFspsForDeliveryMechanisms: Maybe<Array<Maybe<(
    { __typename?: 'FspChoices' }
    & Pick<FspChoices, 'deliveryMechanism'>
    & { fsps: Maybe<Array<Maybe<(
      { __typename?: 'FspChoice' }
      & Pick<FspChoice, 'id' | 'name'>
    )>>> }
  )>>> }
);

export type PaymentQueryVariables = {
  id: Scalars['ID']
};


export type PaymentQuery = (
  { __typename?: 'Query' }
  & { payment: Maybe<(
    { __typename?: 'PaymentNode' }
    & Pick<PaymentNode, 'id' | 'unicefId' | 'distributionModality' | 'status' | 'statusDate' | 'currency' | 'entitlementQuantity' | 'deliveredQuantity' | 'deliveryDate' | 'deliveredQuantityUsd' | 'deliveryType' | 'transactionReferenceId'>
    & { targetPopulation: Maybe<(
      { __typename?: 'TargetPopulationNode' }
      & Pick<TargetPopulationNode, 'id' | 'name'>
    )>, verification: Maybe<(
      { __typename?: 'PaymentVerificationNode' }
      & Pick<PaymentVerificationNode, 'id' | 'status' | 'statusDate' | 'receivedAmount' | 'isManuallyEditable'>
    )>, household: (
      { __typename?: 'HouseholdNode' }
      & Pick<HouseholdNode, 'id' | 'size' | 'status' | 'unicefId'>
      & { headOfHousehold: (
        { __typename?: 'IndividualNode' }
        & Pick<IndividualNode, 'id' | 'phoneNo' | 'phoneNoAlternative' | 'phoneNoValid' | 'phoneNoAlternativeValid' | 'fullName'>
      ) }
    ), collector: (
      { __typename?: 'IndividualNode' }
      & Pick<IndividualNode, 'id' | 'unicefId' | 'fullName' | 'phoneNo' | 'phoneNoValid' | 'phoneNoAlternative' | 'phoneNoAlternativeValid'>
    ), parent: (
      { __typename?: 'PaymentPlanNode' }
      & Pick<PaymentPlanNode, 'id' | 'status' | 'isFollowUp' | 'unicefId'>
      & { program: (
        { __typename?: 'ProgramNode' }
        & Pick<ProgramNode, 'id' | 'name'>
      ), verificationPlans: Maybe<(
        { __typename?: 'PaymentVerificationPlanNodeConnection' }
        & { edges: Array<Maybe<(
          { __typename?: 'PaymentVerificationPlanNodeEdge' }
          & { node: Maybe<(
            { __typename?: 'PaymentVerificationPlanNode' }
            & Pick<PaymentVerificationPlanNode, 'id' | 'status' | 'verificationChannel'>
          )> }
        )>> }
      )> }
    ), serviceProvider: Maybe<(
      { __typename?: 'FinancialServiceProviderNode' }
      & Pick<FinancialServiceProviderNode, 'id' | 'fullName'>
    )> }
  )> }
);

export type PaymentPlanQueryVariables = {
  id: Scalars['ID']
};


export type PaymentPlanQuery = (
  { __typename?: 'Query' }
  & { paymentPlan: Maybe<(
    { __typename?: 'PaymentPlanNode' }
    & Pick<PaymentPlanNode, 'id' | 'version' | 'unicefId' | 'status' | 'canCreateFollowUp' | 'backgroundActionStatus' | 'canCreatePaymentVerificationPlan' | 'availablePaymentRecordsCount' | 'bankReconciliationSuccess' | 'bankReconciliationError' | 'currency' | 'currencyName' | 'startDate' | 'endDate' | 'dispersionStartDate' | 'dispersionEndDate' | 'femaleChildrenCount' | 'femaleAdultsCount' | 'maleChildrenCount' | 'maleAdultsCount' | 'totalHouseholdsCount' | 'totalIndividualsCount' | 'totalEntitledQuantity' | 'totalDeliveredQuantity' | 'totalUndeliveredQuantity' | 'totalWithdrawnHouseholdsCount' | 'hasPaymentListExportFile' | 'hasFspDeliveryMechanismXlsxTemplate' | 'importedFileDate' | 'importedFileName' | 'totalEntitledQuantityUsd' | 'paymentsConflictsCount' | 'exclusionReason' | 'excludeHouseholdError' | 'isFollowUp' | 'unsuccessfulPaymentsCount'>
    & { createdBy: (
      { __typename?: 'UserNode' }
      & Pick<UserNode, 'id' | 'firstName' | 'lastName' | 'email'>
    ), program: (
      { __typename?: 'ProgramNode' }
      & Pick<ProgramNode, 'id' | 'name' | 'caId'>
    ), targetPopulation: (
      { __typename?: 'TargetPopulationNode' }
      & Pick<TargetPopulationNode, 'id' | 'name'>
    ), approvalProcess: (
      { __typename?: 'ApprovalProcessNodeConnection' }
      & Pick<ApprovalProcessNodeConnection, 'totalCount' | 'edgeCount'>
      & { edges: Array<Maybe<(
        { __typename?: 'ApprovalProcessNodeEdge' }
        & { node: Maybe<(
          { __typename?: 'ApprovalProcessNode' }
          & Pick<ApprovalProcessNode, 'id' | 'sentForApprovalDate' | 'sentForAuthorizationDate' | 'sentForFinanceReleaseDate' | 'approvalNumberRequired' | 'authorizationNumberRequired' | 'financeReleaseNumberRequired' | 'rejectedOn'>
          & { sentForApprovalBy: Maybe<(
            { __typename?: 'UserNode' }
            & Pick<UserNode, 'id' | 'firstName' | 'lastName' | 'email'>
          )>, sentForAuthorizationBy: Maybe<(
            { __typename?: 'UserNode' }
            & Pick<UserNode, 'id' | 'firstName' | 'lastName' | 'email'>
          )>, sentForFinanceReleaseBy: Maybe<(
            { __typename?: 'UserNode' }
            & Pick<UserNode, 'id' | 'firstName' | 'lastName' | 'email'>
          )>, actions: Maybe<(
            { __typename?: 'FilteredActionsListNode' }
            & { approval: Maybe<Array<Maybe<(
              { __typename?: 'ApprovalNode' }
              & Pick<ApprovalNode, 'createdAt' | 'comment' | 'info'>
              & { createdBy: Maybe<(
                { __typename?: 'UserNode' }
                & Pick<UserNode, 'id' | 'firstName' | 'lastName' | 'email'>
              )> }
            )>>>, authorization: Maybe<Array<Maybe<(
              { __typename?: 'ApprovalNode' }
              & Pick<ApprovalNode, 'createdAt' | 'comment' | 'info'>
              & { createdBy: Maybe<(
                { __typename?: 'UserNode' }
                & Pick<UserNode, 'id' | 'firstName' | 'lastName' | 'email'>
              )> }
            )>>>, financeRelease: Maybe<Array<Maybe<(
              { __typename?: 'ApprovalNode' }
              & Pick<ApprovalNode, 'createdAt' | 'comment' | 'info'>
              & { createdBy: Maybe<(
                { __typename?: 'UserNode' }
                & Pick<UserNode, 'id' | 'firstName' | 'lastName' | 'email'>
              )> }
            )>>>, reject: Maybe<Array<Maybe<(
              { __typename?: 'ApprovalNode' }
              & Pick<ApprovalNode, 'createdAt' | 'comment' | 'info'>
              & { createdBy: Maybe<(
                { __typename?: 'UserNode' }
                & Pick<UserNode, 'id' | 'firstName' | 'lastName' | 'email'>
              )> }
            )>>> }
          )> }
        )> }
      )>> }
    ), steficonRule: Maybe<(
      { __typename?: 'RuleCommitNode' }
      & Pick<RuleCommitNode, 'id'>
      & { rule: Maybe<(
        { __typename?: 'SteficonRuleNode' }
        & Pick<SteficonRuleNode, 'id' | 'name'>
      )> }
    )>, deliveryMechanisms: Maybe<Array<Maybe<(
      { __typename?: 'DeliveryMechanismNode' }
      & Pick<DeliveryMechanismNode, 'id' | 'name' | 'order'>
      & { fsp: Maybe<(
        { __typename?: 'FinancialServiceProviderNode' }
        & Pick<FinancialServiceProviderNode, 'id' | 'name' | 'communicationChannel'>
      )> }
    )>>>, volumeByDeliveryMechanism: Maybe<Array<Maybe<(
      { __typename?: 'VolumeByDeliveryMechanismNode' }
      & Pick<VolumeByDeliveryMechanismNode, 'volume' | 'volumeUsd'>
      & { deliveryMechanism: Maybe<(
        { __typename?: 'DeliveryMechanismNode' }
        & Pick<DeliveryMechanismNode, 'id' | 'name' | 'order'>
        & { fsp: Maybe<(
          { __typename?: 'FinancialServiceProviderNode' }
          & Pick<FinancialServiceProviderNode, 'id' | 'name'>
        )> }
      )> }
    )>>>, verificationPlans: Maybe<(
      { __typename?: 'PaymentVerificationPlanNodeConnection' }
      & Pick<PaymentVerificationPlanNodeConnection, 'totalCount'>
      & { edges: Array<Maybe<(
        { __typename?: 'PaymentVerificationPlanNodeEdge' }
        & { node: Maybe<(
          { __typename?: 'PaymentVerificationPlanNode' }
          & Pick<PaymentVerificationPlanNode, 'id' | 'unicefId' | 'status' | 'sampleSize' | 'receivedCount' | 'notReceivedCount' | 'respondedCount' | 'verificationChannel' | 'sampling' | 'receivedWithProblemsCount' | 'rapidProFlowId' | 'confidenceInterval' | 'marginOfError' | 'activationDate' | 'completionDate' | 'excludedAdminAreasFilter' | 'sexFilter' | 'xlsxFileExporting' | 'hasXlsxFile' | 'xlsxFileWasDownloaded' | 'xlsxFileImported'>
          & { ageFilter: Maybe<(
            { __typename?: 'AgeFilterObject' }
            & Pick<AgeFilterObject, 'min' | 'max'>
          )> }
        )> }
      )>> }
    )>, paymentVerificationSummary: Maybe<(
      { __typename?: 'PaymentVerificationSummaryNode' }
      & Pick<PaymentVerificationSummaryNode, 'id' | 'createdAt' | 'updatedAt' | 'status' | 'activationDate' | 'completionDate'>
    )>, paymentItems: (
      { __typename?: 'PaymentNodeConnection' }
      & Pick<PaymentNodeConnection, 'totalCount' | 'edgeCount'>
      & { edges: Array<Maybe<(
        { __typename?: 'PaymentNodeEdge' }
        & { node: Maybe<(
          { __typename?: 'PaymentNode' }
          & Pick<PaymentNode, 'id' | 'status'>
        )> }
      )>> }
    ), reconciliationSummary: Maybe<(
      { __typename?: 'ReconciliationSummaryNode' }
      & Pick<ReconciliationSummaryNode, 'deliveredFully' | 'deliveredPartially' | 'notDelivered' | 'unsuccessful' | 'pending' | 'numberOfPayments' | 'reconciled'>
    )>, excludedHouseholds: Maybe<Array<Maybe<(
      { __typename?: 'HouseholdNode' }
      & Pick<HouseholdNode, 'id' | 'unicefId'>
    )>>>, followUps: (
      { __typename?: 'PaymentPlanNodeConnection' }
      & Pick<PaymentPlanNodeConnection, 'totalCount'>
      & { edges: Array<Maybe<(
        { __typename?: 'PaymentPlanNodeEdge' }
        & { node: Maybe<(
          { __typename?: 'PaymentPlanNode' }
          & Pick<PaymentPlanNode, 'id' | 'unicefId' | 'createdAt'>
          & { paymentItems: (
            { __typename?: 'PaymentNodeConnection' }
            & Pick<PaymentNodeConnection, 'totalCount'>
          ) }
        )> }
      )>> }
    ), sourcePaymentPlan: Maybe<(
      { __typename?: 'PaymentPlanNode' }
      & Pick<PaymentPlanNode, 'id' | 'unicefId'>
    )> }
  )> }
);

export type AllCashPlansQueryVariables = {
  program?: Maybe<Scalars['ID']>,
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  orderBy?: Maybe<Scalars['String']>,
  search?: Maybe<Scalars['String']>,
  serviceProvider?: Maybe<Scalars['String']>,
  deliveryType?: Maybe<Array<Maybe<Scalars['String']>>>,
  verificationStatus?: Maybe<Array<Maybe<Scalars['String']>>>,
  startDateGte?: Maybe<Scalars['DateTime']>,
  endDateLte?: Maybe<Scalars['DateTime']>,
  businessArea?: Maybe<Scalars['String']>
};


export type AllCashPlansQuery = (
  { __typename?: 'Query' }
  & { allCashPlans: Maybe<(
    { __typename?: 'CashPlanNodeConnection' }
    & Pick<CashPlanNodeConnection, 'totalCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'CashPlanNodeEdge' }
      & Pick<CashPlanNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'CashPlanNode' }
        & Pick<CashPlanNode, 'id' | 'caId' | 'assistanceThrough' | 'totalNumberOfHouseholds' | 'deliveryType' | 'startDate' | 'endDate' | 'totalPersonsCovered' | 'dispersionDate' | 'assistanceMeasurement' | 'status' | 'currency' | 'totalEntitledQuantity' | 'totalDeliveredQuantity' | 'totalUndeliveredQuantity' | 'updatedAt'>
        & { serviceProvider: Maybe<(
          { __typename?: 'ServiceProviderNode' }
          & Pick<ServiceProviderNode, 'id' | 'caId' | 'fullName'>
        )>, program: (
          { __typename?: 'ProgramNode' }
          & Pick<ProgramNode, 'id' | 'name'>
        ), paymentVerificationSummary: Maybe<(
          { __typename?: 'PaymentVerificationSummaryNode' }
          & Pick<PaymentVerificationSummaryNode, 'id' | 'status'>
        )> }
      )> }
    )>> }
  )> }
);

export type AllCashPlansAndPaymentPlansQueryVariables = {
  businessArea: Scalars['String'],
  program?: Maybe<Scalars['String']>,
  search?: Maybe<Scalars['String']>,
  serviceProvider?: Maybe<Scalars['String']>,
  deliveryType?: Maybe<Array<Maybe<Scalars['String']>>>,
  verificationStatus?: Maybe<Array<Maybe<Scalars['String']>>>,
  startDateGte?: Maybe<Scalars['String']>,
  endDateLte?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>
};


export type AllCashPlansAndPaymentPlansQuery = (
  { __typename?: 'Query' }
  & { allCashPlansAndPaymentPlans: Maybe<(
    { __typename?: 'PaginatedCashPlanAndPaymentPlanNode' }
    & Pick<PaginatedCashPlanAndPaymentPlanNode, 'totalCount'>
    & { pageInfo: Maybe<(
      { __typename?: 'PageInfoNode' }
      & Pick<PageInfoNode, 'startCursor' | 'endCursor' | 'hasNextPage' | 'hasPreviousPage'>
    )>, edges: Maybe<Array<Maybe<(
      { __typename?: 'CashPlanAndPaymentPlanEdges' }
      & Pick<CashPlanAndPaymentPlanEdges, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'CashPlanAndPaymentPlanNode' }
        & Pick<CashPlanAndPaymentPlanNode, 'objType' | 'id' | 'unicefId' | 'verificationStatus' | 'currency' | 'totalDeliveredQuantity' | 'startDate' | 'endDate' | 'programName' | 'updatedAt' | 'totalNumberOfHouseholds' | 'assistanceMeasurement' | 'totalEntitledQuantity' | 'totalUndeliveredQuantity' | 'dispersionDate' | 'serviceProviderFullName'>
        & { verificationPlans: Maybe<Array<Maybe<(
          { __typename?: 'PaymentVerificationPlanNode' }
          & Pick<PaymentVerificationPlanNode, 'id' | 'createdAt' | 'unicefId'>
        )>>> }
      )> }
    )>>> }
  )> }
);

export type AllPaymentRecordsQueryVariables = {
  parent?: Maybe<Scalars['ID']>,
  household?: Maybe<Scalars['ID']>,
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  businessArea?: Maybe<Scalars['String']>
};


export type AllPaymentRecordsQuery = (
  { __typename?: 'Query' }
  & { allPaymentRecords: Maybe<(
    { __typename?: 'PaymentRecordNodeConnection' }
    & Pick<PaymentRecordNodeConnection, 'totalCount' | 'edgeCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'PaymentRecordNodeEdge' }
      & Pick<PaymentRecordNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'PaymentRecordNode' }
        & Pick<PaymentRecordNode, 'id' | 'createdAt' | 'updatedAt' | 'fullName' | 'statusDate' | 'status' | 'caId' | 'totalPersonsCovered' | 'currency' | 'entitlementQuantity' | 'deliveredQuantity' | 'deliveredQuantityUsd' | 'deliveryDate'>
        & { household: (
          { __typename?: 'HouseholdNode' }
          & Pick<HouseholdNode, 'id' | 'unicefId' | 'size'>
        ), headOfHousehold: Maybe<(
          { __typename?: 'IndividualNode' }
          & Pick<IndividualNode, 'id' | 'fullName'>
        )>, parent: Maybe<(
          { __typename?: 'CashPlanNode' }
          & Pick<CashPlanNode, 'id'>
          & { program: (
            { __typename?: 'ProgramNode' }
            & Pick<ProgramNode, 'id' | 'name'>
          ) }
        )> }
      )> }
    )>> }
  )> }
);

export type AllPaymentRecordsAndPaymentsQueryVariables = {
  household?: Maybe<Scalars['ID']>,
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  businessArea: Scalars['String']
};


export type AllPaymentRecordsAndPaymentsQuery = (
  { __typename?: 'Query' }
  & { allPaymentRecordsAndPayments: Maybe<(
    { __typename?: 'PaginatedPaymentRecordsAndPaymentsNode' }
    & Pick<PaginatedPaymentRecordsAndPaymentsNode, 'totalCount'>
    & { pageInfo: Maybe<(
      { __typename?: 'PageInfoNode' }
      & Pick<PageInfoNode, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>
    )>, edges: Maybe<Array<Maybe<(
      { __typename?: 'PaymentRecordsAndPaymentsEdges' }
      & Pick<PaymentRecordsAndPaymentsEdges, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'PaymentRecordAndPaymentNode' }
        & Pick<PaymentRecordAndPaymentNode, 'objType' | 'id' | 'fullName' | 'status' | 'caId' | 'currency' | 'entitlementQuantity' | 'deliveredQuantity' | 'deliveredQuantityUsd' | 'deliveryDate'>
        & { parent: Maybe<(
          { __typename?: 'CashPlanAndPaymentPlanNode' }
          & Pick<CashPlanAndPaymentPlanNode, 'id' | 'programName'>
        )>, verification: Maybe<(
          { __typename?: 'PaymentVerificationNode' }
          & Pick<PaymentVerificationNode, 'id' | 'receivedAmount'>
        )> }
      )> }
    )>>> }
  )> }
);

export type AllPaymentsForTableQueryVariables = {
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  orderBy?: Maybe<Scalars['String']>,
  businessArea: Scalars['String'],
  paymentPlanId: Scalars['String']
};


export type AllPaymentsForTableQuery = (
  { __typename?: 'Query' }
  & { allPayments: Maybe<(
    { __typename?: 'PaymentNodeConnection' }
    & Pick<PaymentNodeConnection, 'totalCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'PaymentNodeEdge' }
      & Pick<PaymentNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'PaymentNode' }
        & Pick<PaymentNode, 'id' | 'unicefId' | 'status' | 'entitlementQuantity' | 'entitlementQuantityUsd' | 'currency' | 'deliveredQuantity' | 'deliveredQuantityUsd' | 'paymentPlanHardConflicted' | 'paymentPlanSoftConflicted'>
        & { household: (
          { __typename?: 'HouseholdNode' }
          & Pick<HouseholdNode, 'id' | 'unicefId' | 'size'>
          & { admin2: Maybe<(
            { __typename?: 'AreaNode' }
            & Pick<AreaNode, 'id' | 'name'>
          )> }
        ), paymentPlanHardConflictedData: Maybe<Array<Maybe<(
          { __typename?: 'PaymentConflictDataNode' }
          & Pick<PaymentConflictDataNode, 'paymentPlanUnicefId' | 'paymentPlanId' | 'paymentPlanStartDate' | 'paymentPlanEndDate' | 'paymentPlanStatus' | 'paymentId' | 'paymentUnicefId'>
        )>>>, paymentPlanSoftConflictedData: Maybe<Array<Maybe<(
          { __typename?: 'PaymentConflictDataNode' }
          & Pick<PaymentConflictDataNode, 'paymentPlanUnicefId' | 'paymentPlanId' | 'paymentPlanStartDate' | 'paymentPlanEndDate' | 'paymentPlanStatus' | 'paymentId' | 'paymentUnicefId'>
        )>>>, collector: (
          { __typename?: 'IndividualNode' }
          & Pick<IndividualNode, 'id' | 'fullName'>
        ), financialServiceProvider: Maybe<(
          { __typename?: 'FinancialServiceProviderNode' }
          & Pick<FinancialServiceProviderNode, 'id' | 'name'>
        )> }
      )> }
    )>> }
  )> }
);

export type CashPlanQueryVariables = {
  id: Scalars['ID']
};


export type CashPlanQuery = (
  { __typename?: 'Query' }
  & { cashPlan: Maybe<(
    { __typename?: 'CashPlanNode' }
    & Pick<CashPlanNode, 'id' | 'version' | 'canCreatePaymentVerificationPlan' | 'availablePaymentRecordsCount' | 'name' | 'startDate' | 'endDate' | 'updatedAt' | 'status' | 'deliveryType' | 'fundsCommitment' | 'downPayment' | 'dispersionDate' | 'assistanceThrough' | 'caId' | 'caHashId' | 'bankReconciliationSuccess' | 'bankReconciliationError' | 'totalNumberOfHouseholds'>
    & { serviceProvider: Maybe<(
      { __typename?: 'ServiceProviderNode' }
      & Pick<ServiceProviderNode, 'id' | 'caId' | 'fullName'>
    )>, verificationPlans: Maybe<(
      { __typename?: 'PaymentVerificationPlanNodeConnection' }
      & Pick<PaymentVerificationPlanNodeConnection, 'totalCount'>
      & { edges: Array<Maybe<(
        { __typename?: 'PaymentVerificationPlanNodeEdge' }
        & { node: Maybe<(
          { __typename?: 'PaymentVerificationPlanNode' }
          & Pick<PaymentVerificationPlanNode, 'id' | 'unicefId' | 'status' | 'sampleSize' | 'receivedCount' | 'notReceivedCount' | 'respondedCount' | 'verificationChannel' | 'sampling' | 'receivedWithProblemsCount' | 'rapidProFlowId' | 'confidenceInterval' | 'marginOfError' | 'activationDate' | 'completionDate' | 'excludedAdminAreasFilter' | 'sexFilter' | 'xlsxFileExporting' | 'hasXlsxFile' | 'xlsxFileWasDownloaded' | 'xlsxFileImported'>
          & { ageFilter: Maybe<(
            { __typename?: 'AgeFilterObject' }
            & Pick<AgeFilterObject, 'min' | 'max'>
          )> }
        )> }
      )>> }
    )>, paymentVerificationSummary: Maybe<(
      { __typename?: 'PaymentVerificationSummaryNode' }
      & Pick<PaymentVerificationSummaryNode, 'id' | 'createdAt' | 'updatedAt' | 'status' | 'activationDate' | 'completionDate'>
    )>, program: (
      { __typename?: 'ProgramNode' }
      & Pick<ProgramNode, 'id' | 'name' | 'caId'>
    ), paymentItems: (
      { __typename?: 'PaymentRecordNodeConnection' }
      & Pick<PaymentRecordNodeConnection, 'totalCount' | 'edgeCount'>
      & { edges: Array<Maybe<(
        { __typename?: 'PaymentRecordNodeEdge' }
        & { node: Maybe<(
          { __typename?: 'PaymentRecordNode' }
          & { targetPopulation: (
            { __typename?: 'TargetPopulationNode' }
            & Pick<TargetPopulationNode, 'id' | 'name'>
          ) }
        )> }
      )>> }
    ) }
  )> }
);

export type IndividualPhotosQueryVariables = {
  id: Scalars['ID']
};


export type IndividualPhotosQuery = (
  { __typename?: 'Query' }
  & { individual: Maybe<(
    { __typename?: 'IndividualNode' }
    & Pick<IndividualNode, 'id' | 'photo'>
    & { documents: (
      { __typename?: 'DocumentNodeConnection' }
      & { edges: Array<Maybe<(
        { __typename?: 'DocumentNodeEdge' }
        & { node: Maybe<(
          { __typename?: 'DocumentNode' }
          & Pick<DocumentNode, 'id' | 'documentNumber' | 'photo'>
        )> }
      )>> }
    ) }
  )> }
);

export type ImportedIndividualPhotosQueryVariables = {
  id: Scalars['ID']
};


export type ImportedIndividualPhotosQuery = (
  { __typename?: 'Query' }
  & { importedIndividual: Maybe<(
    { __typename?: 'ImportedIndividualNode' }
    & Pick<ImportedIndividualNode, 'id' | 'photo'>
    & { documents: (
      { __typename?: 'ImportedDocumentNodeConnection' }
      & { edges: Array<Maybe<(
        { __typename?: 'ImportedDocumentNodeEdge' }
        & { node: Maybe<(
          { __typename?: 'ImportedDocumentNode' }
          & Pick<ImportedDocumentNode, 'id' | 'photo'>
        )> }
      )>> }
    ) }
  )> }
);

export type LookUpPaymentRecordsQueryVariables = {
  parent?: Maybe<Scalars['ID']>,
  household?: Maybe<Scalars['ID']>,
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  businessArea?: Maybe<Scalars['String']>
};


export type LookUpPaymentRecordsQuery = (
  { __typename?: 'Query' }
  & { allPaymentRecords: Maybe<(
    { __typename?: 'PaymentRecordNodeConnection' }
    & Pick<PaymentRecordNodeConnection, 'totalCount' | 'edgeCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'PaymentRecordNodeEdge' }
      & Pick<PaymentRecordNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'PaymentRecordNode' }
        & Pick<PaymentRecordNode, 'id' | 'caId' | 'deliveredQuantity'>
        & { parent: Maybe<(
          { __typename?: 'CashPlanNode' }
          & Pick<CashPlanNode, 'id' | 'name'>
        )> }
      )> }
    )>> }
  )> }
);

export type PaymentRecordQueryVariables = {
  id: Scalars['ID']
};


export type PaymentRecordQuery = (
  { __typename?: 'Query' }
  & { paymentRecord: Maybe<(
    { __typename?: 'PaymentRecordNode' }
    & Pick<PaymentRecordNode, 'id' | 'status' | 'statusDate' | 'caId' | 'caHashId' | 'registrationCaId' | 'fullName' | 'distributionModality' | 'totalPersonsCovered' | 'currency' | 'entitlementQuantity' | 'deliveredQuantity' | 'deliveryDate' | 'entitlementCardIssueDate' | 'entitlementCardNumber' | 'deliveredQuantityUsd' | 'deliveryType' | 'transactionReferenceId'>
    & { targetPopulation: (
      { __typename?: 'TargetPopulationNode' }
      & Pick<TargetPopulationNode, 'id' | 'name'>
    ), verification: Maybe<(
      { __typename?: 'PaymentVerificationNode' }
      & Pick<PaymentVerificationNode, 'id' | 'status' | 'statusDate' | 'receivedAmount' | 'isManuallyEditable'>
    )>, household: (
      { __typename?: 'HouseholdNode' }
      & Pick<HouseholdNode, 'id' | 'size' | 'status' | 'unicefId'>
      & { headOfHousehold: (
        { __typename?: 'IndividualNode' }
        & Pick<IndividualNode, 'id' | 'phoneNo' | 'phoneNoAlternative' | 'phoneNoValid' | 'phoneNoAlternativeValid'>
      ) }
    ), parent: Maybe<(
      { __typename?: 'CashPlanNode' }
      & Pick<CashPlanNode, 'id' | 'caId'>
      & { program: (
        { __typename?: 'ProgramNode' }
        & Pick<ProgramNode, 'id' | 'name'>
      ), verificationPlans: Maybe<(
        { __typename?: 'PaymentVerificationPlanNodeConnection' }
        & { edges: Array<Maybe<(
          { __typename?: 'PaymentVerificationPlanNodeEdge' }
          & { node: Maybe<(
            { __typename?: 'PaymentVerificationPlanNode' }
            & Pick<PaymentVerificationPlanNode, 'id' | 'status' | 'verificationChannel'>
          )> }
        )>> }
      )> }
    )>, serviceProvider: (
      { __typename?: 'ServiceProviderNode' }
      & Pick<ServiceProviderNode, 'id' | 'fullName' | 'shortName'>
    ) }
  )> }
);

export type AllPaymentVerificationLogEntriesQueryVariables = {
  businessArea: Scalars['String'],
  objectId?: Maybe<Scalars['UUID']>,
  objectType?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  search?: Maybe<Scalars['String']>,
  module?: Maybe<Scalars['String']>
};


export type AllPaymentVerificationLogEntriesQuery = (
  { __typename?: 'Query' }
  & { allPaymentVerificationLogEntries: Maybe<(
    { __typename?: 'PaymentVerificationLogEntryNodeConnection' }
    & Pick<PaymentVerificationLogEntryNodeConnection, 'totalCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'PaymentVerificationLogEntryNodeEdge' }
      & Pick<PaymentVerificationLogEntryNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'PaymentVerificationLogEntryNode' }
        & Pick<PaymentVerificationLogEntryNode, 'id' | 'action' | 'changes' | 'objectRepr' | 'objectId' | 'timestamp'>
        & { contentType: Maybe<(
          { __typename?: 'ContentTypeObjectType' }
          & Pick<ContentTypeObjectType, 'id' | 'appLabel' | 'model' | 'name'>
        )>, user: Maybe<(
          { __typename?: 'UserNode' }
          & Pick<UserNode, 'id' | 'firstName' | 'lastName'>
        )>, contentObject: Maybe<(
          { __typename?: 'PaymentVerificationPlanNode' }
          & Pick<PaymentVerificationPlanNode, 'id' | 'unicefId'>
        )> }
      )> }
    )>> }
  )>, logEntryActionChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>> }
);

export type AllPaymentVerificationsQueryVariables = {
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  orderBy?: Maybe<Scalars['String']>,
  paymentVerificationPlan?: Maybe<Scalars['ID']>,
  search?: Maybe<Scalars['String']>,
  status?: Maybe<Scalars['String']>,
  businessArea: Scalars['String'],
  verificationChannel?: Maybe<Scalars['String']>,
  paymentPlanId?: Maybe<Scalars['String']>
};


export type AllPaymentVerificationsQuery = (
  { __typename?: 'Query' }
  & { allPaymentVerifications: Maybe<(
    { __typename?: 'PaymentVerificationNodeConnection' }
    & Pick<PaymentVerificationNodeConnection, 'totalCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'PaymentVerificationNodeEdge' }
      & Pick<PaymentVerificationNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'PaymentVerificationNode' }
        & Pick<PaymentVerificationNode, 'id' | 'status' | 'receivedAmount'>
        & { paymentVerificationPlan: (
          { __typename?: 'PaymentVerificationPlanNode' }
          & Pick<PaymentVerificationPlanNode, 'id' | 'unicefId' | 'verificationChannel'>
        ), payment: Maybe<(
          { __typename?: 'GenericPaymentNode' }
          & Pick<GenericPaymentNode, 'id' | 'unicefId' | 'deliveredQuantity' | 'currency'>
          & { household: Maybe<(
            { __typename?: 'HouseholdNode' }
            & Pick<HouseholdNode, 'status' | 'unicefId' | 'id'>
            & { headOfHousehold: (
              { __typename?: 'IndividualNode' }
              & Pick<IndividualNode, 'id' | 'fullName' | 'familyName' | 'phoneNo' | 'phoneNoAlternative'>
            ) }
          )> }
        )> }
      )> }
    )>> }
  )> }
);

export type AllRapidProFlowsQueryVariables = {
  businessAreaSlug: Scalars['String']
};


export type AllRapidProFlowsQuery = (
  { __typename?: 'Query' }
  & { allRapidProFlows: Maybe<Array<Maybe<(
    { __typename?: 'RapidProFlow' }
    & Pick<RapidProFlow, 'id' | 'name'>
  )>>> }
);

export type PaymentVerificationPlanQueryVariables = {
  id: Scalars['ID']
};


export type PaymentVerificationPlanQuery = (
  { __typename?: 'Query' }
  & { paymentVerificationPlan: Maybe<(
    { __typename?: 'PaymentVerificationPlanNode' }
    & Pick<PaymentVerificationPlanNode, 'id'>
  )> }
);

export type CashPlanVerificationStatusChoicesQueryVariables = {};


export type CashPlanVerificationStatusChoicesQuery = (
  { __typename?: 'Query' }
  & { cashPlanVerificationStatusChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>>, paymentRecordDeliveryTypeChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>> }
);

export type PaymentPlanStatusChoicesQueryQueryVariables = {};


export type PaymentPlanStatusChoicesQueryQuery = (
  { __typename?: 'Query' }
  & { paymentPlanStatusChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>> }
);

export type PaymentRecordVerificationQueryVariables = {
  id: Scalars['ID']
};


export type PaymentRecordVerificationQuery = (
  { __typename?: 'Query' }
  & { paymentRecordVerification: Maybe<(
    { __typename?: 'PaymentVerificationNode' }
    & Pick<PaymentVerificationNode, 'id' | 'status' | 'statusDate' | 'receivedAmount' | 'isManuallyEditable'>
  )> }
);

export type PaymentVerificationChoicesQueryVariables = {};


export type PaymentVerificationChoicesQuery = (
  { __typename?: 'Query' }
  & { paymentVerificationStatusChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>>, cashPlanVerificationVerificationChannelChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>>, paymentRecordDeliveryTypeChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>> }
);

export type SampleSizeQueryVariables = {
  input: GetCashplanVerificationSampleSizeInput
};


export type SampleSizeQuery = (
  { __typename?: 'Query' }
  & { sampleSize: Maybe<(
    { __typename?: 'GetCashplanVerificationSampleSizeObject' }
    & Pick<GetCashplanVerificationSampleSizeObject, 'paymentRecordCount' | 'sampleSize'>
  )> }
);

export type CashPlanVerificationSamplingChoicesQueryVariables = {};


export type CashPlanVerificationSamplingChoicesQuery = (
  { __typename?: 'Query' }
  & { cashPlanVerificationSamplingChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>> }
);

export type AllHouseholdsQueryVariables = {
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  businessArea?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>,
  familySize?: Maybe<Scalars['String']>,
  headOfHouseholdFullNameIcontains?: Maybe<Scalars['String']>,
  headOfHouseholdPhoneNoValid?: Maybe<Scalars['Boolean']>,
  adminArea?: Maybe<Scalars['ID']>,
  search?: Maybe<Scalars['String']>,
  residenceStatus?: Maybe<Scalars['String']>,
  lastRegistrationDate?: Maybe<Scalars['String']>,
  admin2?: Maybe<Scalars['ID']>,
  withdrawn?: Maybe<Scalars['Boolean']>
};


export type AllHouseholdsQuery = (
  { __typename?: 'Query' }
  & { allHouseholds: Maybe<(
    { __typename?: 'HouseholdNodeConnection' }
    & Pick<HouseholdNodeConnection, 'totalCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'HouseholdNodeEdge' }
      & Pick<HouseholdNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'HouseholdNode' }
        & Pick<HouseholdNode, 'id' | 'status' | 'unicefId' | 'hasDuplicates' | 'sanctionListPossibleMatch' | 'sanctionListConfirmedMatch' | 'size' | 'address' | 'village' | 'maleChildrenCount' | 'femaleChildrenCount' | 'childrenDisabledCount' | 'residenceStatus' | 'totalCashReceived' | 'currency' | 'lastRegistrationDate'>
        & { headOfHousehold: (
          { __typename?: 'IndividualNode' }
          & Pick<IndividualNode, 'id' | 'fullName' | 'phoneNo' | 'birthDate' | 'relationship'>
        ), admin1: Maybe<(
          { __typename?: 'AreaNode' }
          & Pick<AreaNode, 'id' | 'name'>
        )>, admin2: Maybe<(
          { __typename?: 'AreaNode' }
          & Pick<AreaNode, 'id' | 'name'>
        )>, programs: (
          { __typename?: 'ProgramNodeConnection' }
          & { edges: Array<Maybe<(
            { __typename?: 'ProgramNodeEdge' }
            & { node: Maybe<(
              { __typename?: 'ProgramNode' }
              & Pick<ProgramNode, 'id' | 'name'>
            )> }
          )>> }
        ) }
      )> }
    )>> }
  )> }
);

export type AllHouseholdsForPopulationTableQueryVariables = {
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  businessArea?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>,
  familySize?: Maybe<Scalars['String']>,
  headOfHouseholdFullNameIcontains?: Maybe<Scalars['String']>,
  adminArea?: Maybe<Scalars['ID']>,
  search?: Maybe<Scalars['String']>,
  residenceStatus?: Maybe<Scalars['String']>,
  lastRegistrationDate?: Maybe<Scalars['String']>,
  admin2?: Maybe<Scalars['ID']>,
  withdrawn?: Maybe<Scalars['Boolean']>
};


export type AllHouseholdsForPopulationTableQuery = (
  { __typename?: 'Query' }
  & { allHouseholds: Maybe<(
    { __typename?: 'HouseholdNodeConnection' }
    & Pick<HouseholdNodeConnection, 'totalCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'HouseholdNodeEdge' }
      & Pick<HouseholdNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'HouseholdNode' }
        & Pick<HouseholdNode, 'id' | 'status' | 'unicefId' | 'hasDuplicates' | 'sanctionListPossibleMatch' | 'sanctionListConfirmedMatch' | 'size' | 'residenceStatus' | 'totalCashReceived' | 'currency' | 'lastRegistrationDate'>
        & { headOfHousehold: (
          { __typename?: 'IndividualNode' }
          & Pick<IndividualNode, 'id' | 'fullName'>
        ), admin2: Maybe<(
          { __typename?: 'AreaNode' }
          & Pick<AreaNode, 'id' | 'name'>
        )> }
      )> }
    )>> }
  )> }
);

export type AllIndividualsQueryVariables = {
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  fullNameContains?: Maybe<Scalars['String']>,
  sex?: Maybe<Array<Maybe<Scalars['String']>>>,
  age?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>,
  search?: Maybe<Scalars['String']>,
  status?: Maybe<Array<Maybe<Scalars['String']>>>,
  lastRegistrationDate?: Maybe<Scalars['String']>,
  householdId?: Maybe<Scalars['UUID']>,
  excludedId?: Maybe<Scalars['String']>,
  businessArea?: Maybe<Scalars['String']>,
  adminArea?: Maybe<Scalars['ID']>,
  withdrawn?: Maybe<Scalars['Boolean']>,
  admin2?: Maybe<Array<Maybe<Scalars['ID']>>>,
  flags?: Maybe<Array<Maybe<Scalars['String']>>>
};


export type AllIndividualsQuery = (
  { __typename?: 'Query' }
  & { allIndividuals: Maybe<(
    { __typename?: 'IndividualNodeConnection' }
    & Pick<IndividualNodeConnection, 'totalCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'startCursor' | 'endCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'IndividualNodeEdge' }
      & Pick<IndividualNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'IndividualNode' }
        & Pick<IndividualNode, 'id' | 'unicefId' | 'sanctionListPossibleMatch' | 'sanctionListConfirmedMatch' | 'deduplicationGoldenRecordStatus' | 'sanctionListLastCheck' | 'fullName' | 'relationship' | 'age' | 'sex' | 'lastRegistrationDate' | 'phoneNo' | 'birthDate'>
        & { household: Maybe<(
          { __typename?: 'HouseholdNode' }
          & Pick<HouseholdNode, 'id' | 'unicefId'>
          & { admin2: Maybe<(
            { __typename?: 'AreaNode' }
            & Pick<AreaNode, 'id' | 'name'>
          )>, programs: (
            { __typename?: 'ProgramNodeConnection' }
            & { edges: Array<Maybe<(
              { __typename?: 'ProgramNodeEdge' }
              & { node: Maybe<(
                { __typename?: 'ProgramNode' }
                & Pick<ProgramNode, 'id' | 'name'>
              )> }
            )>> }
          ) }
        )>, documents: (
          { __typename?: 'DocumentNodeConnection' }
          & { edges: Array<Maybe<(
            { __typename?: 'DocumentNodeEdge' }
            & { node: Maybe<(
              { __typename?: 'DocumentNode' }
              & Pick<DocumentNode, 'id' | 'country' | 'countryIso3' | 'documentNumber' | 'photo'>
              & { type: (
                { __typename?: 'DocumentTypeNode' }
                & Pick<DocumentTypeNode, 'label' | 'key'>
              ) }
            )> }
          )>> }
        ), identities: (
          { __typename?: 'IndividualIdentityNodeConnection' }
          & { edges: Array<Maybe<(
            { __typename?: 'IndividualIdentityNodeEdge' }
            & { node: Maybe<(
              { __typename?: 'IndividualIdentityNode' }
              & Pick<IndividualIdentityNode, 'id' | 'partner' | 'country' | 'countryIso3' | 'number'>
            )> }
          )>> }
        ), paymentChannels: Maybe<Array<Maybe<(
          { __typename?: 'BankAccountInfoNode' }
          & Pick<BankAccountInfoNode, 'id' | 'bankName' | 'bankAccountNumber'>
        )>>> }
      )> }
    )>> }
  )> }
);

export type AllIndividualsForPopulationTableQueryVariables = {
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  fullNameContains?: Maybe<Scalars['String']>,
  sex?: Maybe<Array<Maybe<Scalars['String']>>>,
  age?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>,
  search?: Maybe<Scalars['String']>,
  status?: Maybe<Array<Maybe<Scalars['String']>>>,
  lastRegistrationDate?: Maybe<Scalars['String']>,
  householdId?: Maybe<Scalars['UUID']>,
  excludedId?: Maybe<Scalars['String']>,
  businessArea?: Maybe<Scalars['String']>,
  adminArea?: Maybe<Scalars['ID']>,
  withdrawn?: Maybe<Scalars['Boolean']>,
  admin2?: Maybe<Array<Maybe<Scalars['ID']>>>,
  flags?: Maybe<Array<Maybe<Scalars['String']>>>
};


export type AllIndividualsForPopulationTableQuery = (
  { __typename?: 'Query' }
  & { allIndividuals: Maybe<(
    { __typename?: 'IndividualNodeConnection' }
    & Pick<IndividualNodeConnection, 'totalCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'startCursor' | 'endCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'IndividualNodeEdge' }
      & Pick<IndividualNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'IndividualNode' }
        & Pick<IndividualNode, 'id' | 'unicefId' | 'sanctionListPossibleMatch' | 'sanctionListConfirmedMatch' | 'deduplicationGoldenRecordStatus' | 'sanctionListLastCheck' | 'fullName' | 'relationship' | 'age' | 'sex'>
        & { household: Maybe<(
          { __typename?: 'HouseholdNode' }
          & Pick<HouseholdNode, 'id' | 'unicefId'>
          & { admin2: Maybe<(
            { __typename?: 'AreaNode' }
            & Pick<AreaNode, 'id' | 'name'>
          )> }
        )> }
      )> }
    )>> }
  )> }
);

export type HouseholdQueryVariables = {
  id: Scalars['ID']
};


export type HouseholdQuery = (
  { __typename?: 'Query' }
  & { household: Maybe<(
    { __typename?: 'HouseholdNode' }
    & HouseholdDetailedFragment
  )> }
);

export type HouseholdChoiceDataQueryVariables = {};


export type HouseholdChoiceDataQuery = (
  { __typename?: 'Query' }
  & { residenceStatusChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>>, relationshipChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>>, roleChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>>, maritalStatusChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>>, workStatusChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>>, deduplicationBatchStatusChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>>, deduplicationGoldenRecordStatusChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>>, observedDisabilityChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>>, severityOfDisabilityChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>> }
);

export type HouseholdFlexFieldsQueryVariables = {
  id: Scalars['ID']
};


export type HouseholdFlexFieldsQuery = (
  { __typename?: 'Query' }
  & { household: Maybe<(
    { __typename?: 'HouseholdNode' }
    & Pick<HouseholdNode, 'id' | 'flexFields'>
  )> }
);

export type IndividualQueryVariables = {
  id: Scalars['ID']
};


export type IndividualQuery = (
  { __typename?: 'Query' }
  & { individual: Maybe<(
    { __typename?: 'IndividualNode' }
    & IndividualDetailedFragment
  )> }
);

export type IndividualChoiceDataQueryVariables = {};


export type IndividualChoiceDataQuery = (
  { __typename?: 'Query' }
  & { flagChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>> }
);

export type IndividualFlexFieldsQueryVariables = {
  id: Scalars['ID']
};


export type IndividualFlexFieldsQuery = (
  { __typename?: 'Query' }
  & { individual: Maybe<(
    { __typename?: 'IndividualNode' }
    & Pick<IndividualNode, 'id' | 'flexFields'>
  )> }
);

export type AllActiveProgramsQueryVariables = {
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  status?: Maybe<Array<Maybe<Scalars['String']>>>,
  sector?: Maybe<Array<Maybe<Scalars['String']>>>,
  businessArea: Scalars['String'],
  search?: Maybe<Scalars['String']>,
  numberOfHouseholds?: Maybe<Scalars['String']>,
  budget?: Maybe<Scalars['String']>,
  startDate?: Maybe<Scalars['Date']>,
  endDate?: Maybe<Scalars['Date']>,
  orderBy?: Maybe<Scalars['String']>
};


export type AllActiveProgramsQuery = (
  { __typename?: 'Query' }
  & { allActivePrograms: Maybe<(
    { __typename?: 'ProgramNodeConnection' }
    & Pick<ProgramNodeConnection, 'totalCount' | 'edgeCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'endCursor' | 'startCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'ProgramNodeEdge' }
      & Pick<ProgramNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'ProgramNode' }
        & Pick<ProgramNode, 'id' | 'name' | 'status' | 'startDate' | 'endDate' | 'sector' | 'totalNumberOfHouseholds' | 'budget'>
      )> }
    )>> }
  )> }
);

export type AllProgramsQueryVariables = {
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  status?: Maybe<Array<Maybe<Scalars['String']>>>,
  sector?: Maybe<Array<Maybe<Scalars['String']>>>,
  businessArea: Scalars['String'],
  search?: Maybe<Scalars['String']>,
  numberOfHouseholds?: Maybe<Scalars['String']>,
  budget?: Maybe<Scalars['String']>,
  startDate?: Maybe<Scalars['Date']>,
  endDate?: Maybe<Scalars['Date']>,
  orderBy?: Maybe<Scalars['String']>
};


export type AllProgramsQuery = (
  { __typename?: 'Query' }
  & { allPrograms: Maybe<(
    { __typename?: 'ProgramNodeConnection' }
    & Pick<ProgramNodeConnection, 'totalCount' | 'edgeCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'endCursor' | 'startCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'ProgramNodeEdge' }
      & Pick<ProgramNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'ProgramNode' }
        & Pick<ProgramNode, 'id' | 'name' | 'startDate' | 'endDate' | 'status' | 'caId' | 'description' | 'budget' | 'frequencyOfPayments' | 'populationGoal' | 'sector' | 'totalNumberOfHouseholds' | 'individualDataNeeded'>
      )> }
    )>> }
  )> }
);

export type AllProgramsForChoicesQueryVariables = {
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  status?: Maybe<Array<Maybe<Scalars['String']>>>,
  sector?: Maybe<Array<Maybe<Scalars['String']>>>,
  businessArea: Scalars['String'],
  search?: Maybe<Scalars['String']>,
  numberOfHouseholds?: Maybe<Scalars['String']>,
  budget?: Maybe<Scalars['String']>,
  startDate?: Maybe<Scalars['Date']>,
  endDate?: Maybe<Scalars['Date']>,
  orderBy?: Maybe<Scalars['String']>
};


export type AllProgramsForChoicesQuery = (
  { __typename?: 'Query' }
  & { allPrograms: Maybe<(
    { __typename?: 'ProgramNodeConnection' }
    & Pick<ProgramNodeConnection, 'totalCount' | 'edgeCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'endCursor' | 'startCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'ProgramNodeEdge' }
      & Pick<ProgramNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'ProgramNode' }
        & Pick<ProgramNode, 'id' | 'name' | 'individualDataNeeded'>
      )> }
    )>> }
  )> }
);

export type ProgramQueryVariables = {
  id: Scalars['ID']
};


export type ProgramQuery = (
  { __typename?: 'Query' }
  & { program: Maybe<(
    { __typename?: 'ProgramNode' }
    & Pick<ProgramNode, 'id' | 'name' | 'startDate' | 'endDate' | 'status' | 'caId' | 'caHashId' | 'description' | 'budget' | 'frequencyOfPayments' | 'cashPlus' | 'populationGoal' | 'scope' | 'sector' | 'totalNumberOfHouseholds' | 'administrativeAreasOfImplementation' | 'individualDataNeeded' | 'version'>
  )> }
);

export type ProgrammeChoiceDataQueryVariables = {};


export type ProgrammeChoiceDataQuery = (
  { __typename?: 'Query' }
  & { programFrequencyOfPaymentsChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>>, programScopeChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>>, programSectorChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>>, programStatusChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>> }
);

export type AllImportedHouseholdsQueryVariables = {
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  rdiId?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>,
  businessArea?: Maybe<Scalars['String']>
};


export type AllImportedHouseholdsQuery = (
  { __typename?: 'Query' }
  & { allImportedHouseholds: Maybe<(
    { __typename?: 'ImportedHouseholdNodeConnection' }
    & Pick<ImportedHouseholdNodeConnection, 'totalCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'ImportedHouseholdNodeEdge' }
      & Pick<ImportedHouseholdNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'ImportedHouseholdNode' }
        & ImportedHouseholdMinimalFragment
      )> }
    )>> }
  )> }
);

export type AllImportedIndividualsQueryVariables = {
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  rdiId?: Maybe<Scalars['String']>,
  household?: Maybe<Scalars['ID']>,
  orderBy?: Maybe<Scalars['String']>,
  duplicatesOnly?: Maybe<Scalars['Boolean']>,
  businessArea?: Maybe<Scalars['String']>
};


export type AllImportedIndividualsQuery = (
  { __typename?: 'Query' }
  & { allImportedIndividuals: Maybe<(
    { __typename?: 'ImportedIndividualNodeConnection' }
    & Pick<ImportedIndividualNodeConnection, 'totalCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'ImportedIndividualNodeEdge' }
      & Pick<ImportedIndividualNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'ImportedIndividualNode' }
        & ImportedIndividualMinimalFragment
      )> }
    )>> }
  )> }
);

export type AllKoboProjectsQueryVariables = {
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  businessAreaSlug: Scalars['String']
};


export type AllKoboProjectsQuery = (
  { __typename?: 'Query' }
  & { allKoboProjects: Maybe<(
    { __typename?: 'KoboAssetObjectConnection' }
    & Pick<KoboAssetObjectConnection, 'totalCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'KoboAssetObjectEdge' }
      & Pick<KoboAssetObjectEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'KoboAssetObject' }
        & Pick<KoboAssetObject, 'name' | 'id'>
      )> }
    )>> }
  )> }
);

export type AllMergedHouseholdsQueryVariables = {
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  rdiId?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>,
  businessArea?: Maybe<Scalars['String']>
};


export type AllMergedHouseholdsQuery = (
  { __typename?: 'Query' }
  & { allMergedHouseholds: Maybe<(
    { __typename?: 'HouseholdNodeConnection' }
    & Pick<HouseholdNodeConnection, 'totalCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'HouseholdNodeEdge' }
      & Pick<HouseholdNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'HouseholdNode' }
        & MergedHouseholdMinimalFragment
      )> }
    )>> }
  )> }
);

export type AllMergedIndividualsQueryVariables = {
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  rdiId?: Maybe<Scalars['String']>,
  household?: Maybe<Scalars['ID']>,
  orderBy?: Maybe<Scalars['String']>,
  duplicatesOnly?: Maybe<Scalars['Boolean']>,
  businessArea?: Maybe<Scalars['String']>
};


export type AllMergedIndividualsQuery = (
  { __typename?: 'Query' }
  & { allMergedIndividuals: Maybe<(
    { __typename?: 'IndividualNodeConnection' }
    & Pick<IndividualNodeConnection, 'totalCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'IndividualNodeEdge' }
      & Pick<IndividualNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'IndividualNode' }
        & MergedIndividualMinimalFragment
      )> }
    )>> }
  )> }
);

export type AllRegistrationDataImportsQueryVariables = {
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  orderBy?: Maybe<Scalars['String']>,
  search?: Maybe<Scalars['String']>,
  importedBy?: Maybe<Scalars['UUID']>,
  status?: Maybe<Scalars['String']>,
  importDate?: Maybe<Scalars['Date']>,
  businessArea?: Maybe<Scalars['String']>,
  importDateRange?: Maybe<Scalars['String']>,
  size?: Maybe<Scalars['String']>,
  program?: Maybe<Scalars['String']>
};


export type AllRegistrationDataImportsQuery = (
  { __typename?: 'Query' }
  & { allRegistrationDataImports: Maybe<(
    { __typename?: 'RegistrationDataImportNodeConnection' }
    & Pick<RegistrationDataImportNodeConnection, 'totalCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'RegistrationDataImportNodeEdge' }
      & Pick<RegistrationDataImportNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'RegistrationDataImportNode' }
        & RegistrationMinimalFragment
      )> }
    )>> }
  )> }
);

export type ImportedHouseholdQueryVariables = {
  id: Scalars['ID']
};


export type ImportedHouseholdQuery = (
  { __typename?: 'Query' }
  & { importedHousehold: Maybe<(
    { __typename?: 'ImportedHouseholdNode' }
    & ImportedHouseholdDetailedFragment
  )> }
);

export type ImportedIndividualQueryVariables = {
  id: Scalars['ID']
};


export type ImportedIndividualQuery = (
  { __typename?: 'Query' }
  & { importedIndividual: Maybe<(
    { __typename?: 'ImportedIndividualNode' }
    & ImportedIndividualDetailedFragment
  )> }
);

export type ImportedIndividualFlexFieldsQueryVariables = {
  id: Scalars['ID']
};


export type ImportedIndividualFlexFieldsQuery = (
  { __typename?: 'Query' }
  & { importedIndividual: Maybe<(
    { __typename?: 'ImportedIndividualNode' }
    & Pick<ImportedIndividualNode, 'id' | 'flexFields'>
  )> }
);

export type KoboImportDataQueryVariables = {
  id: Scalars['ID']
};


export type KoboImportDataQuery = (
  { __typename?: 'Query' }
  & { koboImportData: Maybe<(
    { __typename?: 'KoboImportDataNode' }
    & Pick<KoboImportDataNode, 'id' | 'status' | 'numberOfIndividuals' | 'numberOfHouseholds' | 'error'>
    & { koboValidationErrors: Maybe<Array<Maybe<(
      { __typename?: 'KoboErrorNode' }
      & Pick<KoboErrorNode, 'header' | 'message'>
    )>>> }
  )> }
);

export type RegistrationChoicesQueryVariables = {};


export type RegistrationChoicesQuery = (
  { __typename?: 'Query' }
  & { registrationDataStatusChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>> }
);

export type RegistrationDataImportQueryVariables = {
  id: Scalars['ID']
};


export type RegistrationDataImportQuery = (
  { __typename?: 'Query' }
  & { registrationDataImport: Maybe<(
    { __typename?: 'RegistrationDataImportNode' }
    & RegistrationDetailedFragment
  )> }
);

export type XlsxImportDataQueryVariables = {
  id: Scalars['ID']
};


export type XlsxImportDataQuery = (
  { __typename?: 'Query' }
  & { importData: Maybe<(
    { __typename?: 'ImportDataNode' }
    & Pick<ImportDataNode, 'id' | 'status' | 'numberOfIndividuals' | 'numberOfHouseholds' | 'error'>
    & { xlsxValidationErrors: Maybe<Array<Maybe<(
      { __typename?: 'XlsxRowErrorNode' }
      & Pick<XlsxRowErrorNode, 'rowNumber' | 'header' | 'message'>
    )>>> }
  )> }
);

export type AllReportsQueryVariables = {
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  status?: Maybe<Array<Maybe<Scalars['String']>>>,
  businessArea: Scalars['String'],
  createdFrom?: Maybe<Scalars['DateTime']>,
  createdTo?: Maybe<Scalars['DateTime']>,
  reportType?: Maybe<Array<Maybe<Scalars['String']>>>,
  createdBy?: Maybe<Scalars['ID']>,
  orderBy?: Maybe<Scalars['String']>
};


export type AllReportsQuery = (
  { __typename?: 'Query' }
  & { allReports: Maybe<(
    { __typename?: 'ReportNodeConnection' }
    & Pick<ReportNodeConnection, 'totalCount' | 'edgeCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'endCursor' | 'startCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'ReportNodeEdge' }
      & Pick<ReportNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'ReportNode' }
        & Pick<ReportNode, 'id' | 'reportType' | 'dateFrom' | 'dateTo' | 'status' | 'createdAt' | 'updatedAt' | 'fileUrl' | 'numberOfRecords'>
        & { createdBy: (
          { __typename?: 'UserNode' }
          & Pick<UserNode, 'firstName' | 'lastName'>
        ) }
      )> }
    )>> }
  )> }
);

export type ReportQueryVariables = {
  id: Scalars['ID']
};


export type ReportQuery = (
  { __typename?: 'Query' }
  & { report: Maybe<(
    { __typename?: 'ReportNode' }
    & Pick<ReportNode, 'id' | 'status' | 'reportType' | 'createdAt' | 'updatedAt' | 'dateFrom' | 'dateTo' | 'fileUrl' | 'numberOfRecords'>
    & { createdBy: (
      { __typename?: 'UserNode' }
      & Pick<UserNode, 'firstName' | 'lastName'>
    ), adminArea2: Maybe<(
      { __typename?: 'AreaNodeConnection' }
      & { edges: Array<Maybe<(
        { __typename?: 'AreaNodeEdge' }
        & { node: Maybe<(
          { __typename?: 'AreaNode' }
          & Pick<AreaNode, 'name'>
        )> }
      )>> }
    )>, adminArea1: Maybe<(
      { __typename?: 'AreaNodeConnection' }
      & { edges: Array<Maybe<(
        { __typename?: 'AreaNodeEdge' }
        & { node: Maybe<(
          { __typename?: 'AreaNode' }
          & Pick<AreaNode, 'name'>
        )> }
      )>> }
    )>, program: Maybe<(
      { __typename?: 'ProgramNode' }
      & Pick<ProgramNode, 'name'>
    )> }
  )> }
);

export type ReportChoiceDataQueryVariables = {};


export type ReportChoiceDataQuery = (
  { __typename?: 'Query' }
  & { reportStatusChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>>, reportTypesChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>> }
);

export type AllChartsQueryVariables = {
  businessAreaSlug: Scalars['String'],
  year: Scalars['Int'],
  program?: Maybe<Scalars['String']>,
  administrativeArea?: Maybe<Scalars['String']>
};


export type AllChartsQuery = (
  { __typename?: 'Query' }
  & { chartProgrammesBySector: Maybe<(
    { __typename?: 'ChartDetailedDatasetsNode' }
    & Pick<ChartDetailedDatasetsNode, 'labels'>
    & { datasets: Maybe<Array<Maybe<(
      { __typename?: '_DetailedDatasetsNode' }
      & Pick<_DetailedDatasetsNode, 'label' | 'data'>
    )>>> }
  )>, chartPaymentVerification: Maybe<(
    { __typename?: 'ChartPaymentVerification' }
    & Pick<ChartPaymentVerification, 'labels' | 'households' | 'averageSampleSize'>
    & { datasets: Maybe<Array<Maybe<(
      { __typename?: '_DetailedDatasetsNode' }
      & Pick<_DetailedDatasetsNode, 'label' | 'data'>
    )>>> }
  )>, chartVolumeByDeliveryMechanism: Maybe<(
    { __typename?: 'ChartDatasetNode' }
    & Pick<ChartDatasetNode, 'labels'>
    & { datasets: Maybe<Array<Maybe<(
      { __typename?: '_DatasetsNode' }
      & Pick<_DatasetsNode, 'data'>
    )>>> }
  )>, chartPayment: Maybe<(
    { __typename?: 'ChartDatasetNode' }
    & Pick<ChartDatasetNode, 'labels'>
    & { datasets: Maybe<Array<Maybe<(
      { __typename?: '_DatasetsNode' }
      & Pick<_DatasetsNode, 'data'>
    )>>> }
  )>, chartGrievances: Maybe<(
    { __typename?: 'ChartGrievanceTicketsNode' }
    & Pick<ChartGrievanceTicketsNode, 'labels' | 'totalNumberOfGrievances' | 'totalNumberOfFeedback' | 'totalNumberOfOpenSensitive'>
    & { datasets: Maybe<Array<Maybe<(
      { __typename?: '_DatasetsNode' }
      & Pick<_DatasetsNode, 'data'>
    )>>> }
  )>, sectionHouseholdsReached: Maybe<(
    { __typename?: 'SectionTotalNode' }
    & Pick<SectionTotalNode, 'total'>
  )>, sectionIndividualsReached: Maybe<(
    { __typename?: 'SectionTotalNode' }
    & Pick<SectionTotalNode, 'total'>
  )>, sectionChildReached: Maybe<(
    { __typename?: 'SectionTotalNode' }
    & Pick<SectionTotalNode, 'total'>
  )>, chartIndividualsReachedByAgeAndGender: Maybe<(
    { __typename?: 'ChartDatasetNode' }
    & Pick<ChartDatasetNode, 'labels'>
    & { datasets: Maybe<Array<Maybe<(
      { __typename?: '_DatasetsNode' }
      & Pick<_DatasetsNode, 'data'>
    )>>> }
  )>, chartIndividualsWithDisabilityReachedByAge: Maybe<(
    { __typename?: 'ChartDetailedDatasetsNode' }
    & Pick<ChartDetailedDatasetsNode, 'labels'>
    & { datasets: Maybe<Array<Maybe<(
      { __typename?: '_DetailedDatasetsNode' }
      & Pick<_DetailedDatasetsNode, 'data' | 'label'>
    )>>> }
  )>, sectionTotalTransferred: Maybe<(
    { __typename?: 'SectionTotalNode' }
    & Pick<SectionTotalNode, 'total'>
  )>, chartTotalTransferredByMonth: Maybe<(
    { __typename?: 'ChartDetailedDatasetsNode' }
    & Pick<ChartDetailedDatasetsNode, 'labels'>
    & { datasets: Maybe<Array<Maybe<(
      { __typename?: '_DetailedDatasetsNode' }
      & Pick<_DetailedDatasetsNode, 'data' | 'label'>
    )>>> }
  )> }
);

export type CountryChartsQueryVariables = {
  businessAreaSlug: Scalars['String'],
  year: Scalars['Int'],
  program?: Maybe<Scalars['String']>,
  administrativeArea?: Maybe<Scalars['String']>,
  order?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>
};


export type CountryChartsQuery = (
  { __typename?: 'Query' }
  & { tableTotalCashTransferredByAdministrativeArea: Maybe<(
    { __typename?: 'TableTotalCashTransferred' }
    & { data: Maybe<Array<Maybe<(
      { __typename?: '_TableTotalCashTransferredDataNode' }
      & Pick<_TableTotalCashTransferredDataNode, 'id' | 'admin2' | 'totalCashTransferred' | 'totalHouseholds'>
    )>>> }
  )> }
);

export type DashboardReportChoiceDataQueryVariables = {
  businessArea: Scalars['String']
};


export type DashboardReportChoiceDataQuery = (
  { __typename?: 'Query' }
  & { dashboardReportTypesChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>> }
);

export type DashboardYearsChoiceDataQueryVariables = {
  businessArea: Scalars['String']
};


export type DashboardYearsChoiceDataQuery = (
  { __typename?: 'Query' }
  & Pick<Query, 'dashboardYearsChoices'>
);

export type GlobalAreaChartsQueryVariables = {
  year: Scalars['Int']
};


export type GlobalAreaChartsQuery = (
  { __typename?: 'Query' }
  & { chartTotalTransferredCashByCountry: Maybe<(
    { __typename?: 'ChartDetailedDatasetsNode' }
    & Pick<ChartDetailedDatasetsNode, 'labels'>
    & { datasets: Maybe<Array<Maybe<(
      { __typename?: '_DetailedDatasetsNode' }
      & Pick<_DetailedDatasetsNode, 'data' | 'label'>
    )>>> }
  )> }
);

export type LanguageAutocompleteQueryVariables = {
  first?: Maybe<Scalars['Int']>,
  code?: Maybe<Scalars['String']>
};


export type LanguageAutocompleteQuery = (
  { __typename?: 'Query' }
  & { allLanguages: Maybe<(
    { __typename?: 'LanguageObjectConnection' }
    & { edges: Array<Maybe<(
      { __typename?: 'LanguageObjectEdge' }
      & Pick<LanguageObjectEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'LanguageObject' }
        & Pick<LanguageObject, 'english' | 'code'>
      )> }
    )>> }
  )> }
);

export type RdiAutocompleteQueryVariables = {
  businessArea?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  orderBy?: Maybe<Scalars['String']>,
  name?: Maybe<Scalars['String']>
};


export type RdiAutocompleteQuery = (
  { __typename?: 'Query' }
  & { allRegistrationDataImports: Maybe<(
    { __typename?: 'RegistrationDataImportNodeConnection' }
    & { edges: Array<Maybe<(
      { __typename?: 'RegistrationDataImportNodeEdge' }
      & Pick<RegistrationDataImportNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'RegistrationDataImportNode' }
        & Pick<RegistrationDataImportNode, 'id' | 'name'>
      )> }
    )>> }
  )> }
);

export type AllSurveysQueryVariables = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  program: Scalars['ID'],
  targetPopulation?: Maybe<Scalars['ID']>,
  createdAtRange?: Maybe<Scalars['String']>,
  createdBy?: Maybe<Scalars['ID']>,
  search?: Maybe<Scalars['String']>,
  orderBy?: Maybe<Scalars['String']>
};


export type AllSurveysQuery = (
  { __typename?: 'Query' }
  & { allSurveys: Maybe<(
    { __typename?: 'SurveyNodeConnection' }
    & Pick<SurveyNodeConnection, 'totalCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'startCursor' | 'endCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'SurveyNodeEdge' }
      & Pick<SurveyNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'SurveyNode' }
        & Pick<SurveyNode, 'id' | 'unicefId' | 'title' | 'category' | 'numberOfRecipients' | 'createdAt'>
        & { createdBy: Maybe<(
          { __typename?: 'UserNode' }
          & Pick<UserNode, 'id' | 'firstName' | 'lastName' | 'email'>
        )> }
      )> }
    )>> }
  )> }
);

export type SurveyAvailableFlowsQueryVariables = {};


export type SurveyAvailableFlowsQuery = (
  { __typename?: 'Query' }
  & { surveyAvailableFlows: Maybe<Array<Maybe<(
    { __typename?: 'RapidProFlowNode' }
    & Pick<RapidProFlowNode, 'id' | 'name'>
  )>>> }
);

export type RecipientsQueryVariables = {
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['String']>,
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  survey: Scalars['String'],
  orderBy?: Maybe<Scalars['String']>
};


export type RecipientsQuery = (
  { __typename?: 'Query' }
  & { recipients: Maybe<(
    { __typename?: 'RecipientNodeConnection' }
    & Pick<RecipientNodeConnection, 'totalCount' | 'edgeCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>
    ), edges: Array<Maybe<(
      { __typename?: 'RecipientNodeEdge' }
      & Pick<RecipientNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'RecipientNode' }
        & Pick<RecipientNode, 'id'>
        & { headOfHousehold: (
          { __typename?: 'IndividualNode' }
          & Pick<IndividualNode, 'id' | 'fullName'>
          & { household: Maybe<(
            { __typename?: 'HouseholdNode' }
            & Pick<HouseholdNode, 'id' | 'unicefId' | 'size' | 'status' | 'residenceStatus' | 'lastRegistrationDate'>
            & { admin2: Maybe<(
              { __typename?: 'AreaNode' }
              & Pick<AreaNode, 'id' | 'name'>
            )> }
          )> }
        ) }
      )> }
    )>> }
  )> }
);

export type SurveyQueryVariables = {
  id: Scalars['ID']
};


export type SurveyQuery = (
  { __typename?: 'Query' }
  & { survey: Maybe<(
    { __typename?: 'SurveyNode' }
    & Pick<SurveyNode, 'id' | 'unicefId' | 'category' | 'title' | 'createdAt' | 'body' | 'rapidProUrl' | 'sampleFilePath' | 'hasValidSampleFile'>
    & { createdBy: Maybe<(
      { __typename?: 'UserNode' }
      & Pick<UserNode, 'id' | 'firstName' | 'lastName' | 'username' | 'email'>
    )>, targetPopulation: Maybe<(
      { __typename?: 'TargetPopulationNode' }
      & Pick<TargetPopulationNode, 'id' | 'name'>
    )>, program: Maybe<(
      { __typename?: 'ProgramNode' }
      & Pick<ProgramNode, 'id' | 'name'>
    )> }
  )> }
);

export type SurveysChoiceDataQueryVariables = {};


export type SurveysChoiceDataQuery = (
  { __typename?: 'Query' }
  & { surveyCategoryChoices: Maybe<Array<Maybe<(
    { __typename?: 'ChoiceObject' }
    & Pick<ChoiceObject, 'name' | 'value'>
  )>>> }
);

export type AllActiveTargetPopulationsQueryVariables = {
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  orderBy?: Maybe<Scalars['String']>,
  name?: Maybe<Scalars['String']>,
  status?: Maybe<Scalars['String']>,
  numberOfHouseholdsMin?: Maybe<Scalars['Int']>,
  numberOfHouseholdsMax?: Maybe<Scalars['Int']>,
  businessArea?: Maybe<Scalars['String']>,
  program?: Maybe<Scalars['ID']>,
  createdAtRange?: Maybe<Scalars['String']>
};


export type AllActiveTargetPopulationsQuery = (
  { __typename?: 'Query' }
  & { allActiveTargetPopulations: Maybe<(
    { __typename?: 'TargetPopulationNodeConnection' }
    & Pick<TargetPopulationNodeConnection, 'totalCount' | 'edgeCount'>
    & { edges: Array<Maybe<(
      { __typename?: 'TargetPopulationNodeEdge' }
      & Pick<TargetPopulationNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'TargetPopulationNode' }
        & Pick<TargetPopulationNode, 'id' | 'name' | 'status' | 'totalHouseholdsCount' | 'createdAt' | 'updatedAt'>
        & { program: Maybe<(
          { __typename?: 'ProgramNode' }
          & Pick<ProgramNode, 'id' | 'name'>
        )>, createdBy: Maybe<(
          { __typename?: 'UserNode' }
          & Pick<UserNode, 'id' | 'email' | 'firstName' | 'lastName'>
        )> }
      )> }
    )>> }
  )> }
);

export type AllFieldsAttributesQueryVariables = {};


export type AllFieldsAttributesQuery = (
  { __typename?: 'Query' }
  & { allFieldsAttributes: Maybe<Array<Maybe<(
    { __typename?: 'FieldAttributeNode' }
    & Pick<FieldAttributeNode, 'id' | 'name' | 'labelEn' | 'associatedWith' | 'isFlexField'>
  )>>> }
);

export type AllSteficonRulesQueryVariables = {
  enabled?: Maybe<Scalars['Boolean']>,
  deprecated?: Maybe<Scalars['Boolean']>,
  type: Scalars['String']
};


export type AllSteficonRulesQuery = (
  { __typename?: 'Query' }
  & { allSteficonRules: Maybe<(
    { __typename?: 'SteficonRuleNodeConnection' }
    & { edges: Array<Maybe<(
      { __typename?: 'SteficonRuleNodeEdge' }
      & { node: Maybe<(
        { __typename?: 'SteficonRuleNode' }
        & Pick<SteficonRuleNode, 'id' | 'name'>
      )> }
    )>> }
  )> }
);

export type AllTargetPopulationForChoicesQueryVariables = {
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  orderBy?: Maybe<Scalars['String']>,
  name?: Maybe<Scalars['String']>,
  status?: Maybe<Scalars['String']>,
  numberOfHouseholdsMin?: Maybe<Scalars['Int']>,
  numberOfHouseholdsMax?: Maybe<Scalars['Int']>,
  businessArea?: Maybe<Scalars['String']>,
  program?: Maybe<Scalars['ID']>
};


export type AllTargetPopulationForChoicesQuery = (
  { __typename?: 'Query' }
  & { allTargetPopulation: Maybe<(
    { __typename?: 'TargetPopulationNodeConnection' }
    & Pick<TargetPopulationNodeConnection, 'totalCount' | 'edgeCount'>
    & { edges: Array<Maybe<(
      { __typename?: 'TargetPopulationNodeEdge' }
      & Pick<TargetPopulationNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'TargetPopulationNode' }
        & Pick<TargetPopulationNode, 'id' | 'name'>
      )> }
    )>> }
  )> }
);

export type AllTargetPopulationsQueryVariables = {
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  orderBy?: Maybe<Scalars['String']>,
  name?: Maybe<Scalars['String']>,
  status?: Maybe<Scalars['String']>,
  numberOfHouseholdsMin?: Maybe<Scalars['Int']>,
  numberOfHouseholdsMax?: Maybe<Scalars['Int']>,
  businessArea?: Maybe<Scalars['String']>,
  program?: Maybe<Scalars['ID']>,
  createdAtRange?: Maybe<Scalars['String']>,
  paymentPlanApplicable?: Maybe<Scalars['Boolean']>
};


export type AllTargetPopulationsQuery = (
  { __typename?: 'Query' }
  & { allTargetPopulation: Maybe<(
    { __typename?: 'TargetPopulationNodeConnection' }
    & Pick<TargetPopulationNodeConnection, 'totalCount' | 'edgeCount'>
    & { edges: Array<Maybe<(
      { __typename?: 'TargetPopulationNodeEdge' }
      & Pick<TargetPopulationNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'TargetPopulationNode' }
        & TargetPopulationMinimalFragment
      )> }
    )>> }
  )> }
);

export type TargetPopulationQueryVariables = {
  id: Scalars['ID']
};


export type TargetPopulationQuery = (
  { __typename?: 'Query' }
  & { targetPopulation: Maybe<(
    { __typename?: 'TargetPopulationNode' }
    & TargetPopulationDetailedFragment
  )> }
);

export type TargetPopulationHouseholdsQueryVariables = {
  targetPopulation: Scalars['ID'],
  first?: Maybe<Scalars['Int']>,
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  last?: Maybe<Scalars['Int']>,
  orderBy?: Maybe<Scalars['String']>,
  businessArea?: Maybe<Scalars['String']>
};


export type TargetPopulationHouseholdsQuery = (
  { __typename?: 'Query' }
  & { targetPopulationHouseholds: Maybe<(
    { __typename?: 'HouseholdNodeConnection' }
    & Pick<HouseholdNodeConnection, 'totalCount' | 'edgeCount'>
    & { edges: Array<Maybe<(
      { __typename?: 'HouseholdNodeEdge' }
      & Pick<HouseholdNodeEdge, 'cursor'>
      & { node: Maybe<(
        { __typename?: 'HouseholdNode' }
        & Pick<HouseholdNode, 'id' | 'unicefId' | 'size' | 'updatedAt' | 'address'>
        & { headOfHousehold: (
          { __typename?: 'IndividualNode' }
          & Pick<IndividualNode, 'id' | 'givenName' | 'familyName' | 'fullName'>
        ), adminArea: Maybe<(
          { __typename?: 'AreaNode' }
          & Pick<AreaNode, 'id' | 'name'>
        )>, selection: Maybe<(
          { __typename?: 'HouseholdSelectionNode' }
          & Pick<HouseholdSelectionNode, 'vulnerabilityScore'>
        )> }
      )> }
    )>> }
  )> }
);

export const IndividualMinimalFragmentDoc = gql`
    fragment individualMinimal on IndividualNode {
  id
  age
  lastRegistrationDate
  createdAt
  updatedAt
  fullName
  sex
  unicefId
  birthDate
  maritalStatus
  phoneNo
  phoneNoValid
  email
  sanctionListPossibleMatch
  sanctionListConfirmedMatch
  deduplicationGoldenRecordStatus
  sanctionListLastCheck
  role
  relationship
  status
  documents {
    edges {
      node {
        id
        country
        countryIso3
        documentNumber
        photo
        type {
          label
          key
        }
      }
    }
  }
  identities {
    edges {
      node {
        id
        partner
        country
        number
      }
    }
  }
  household {
    id
    unicefId
    status
    admin1 {
      id
      name
      level
      pCode
    }
    admin2 {
      id
      name
      level
      pCode
    }
    programs {
      edges {
        node {
          id
          name
        }
      }
    }
  }
}
    `;
export const IndividualDetailedFragmentDoc = gql`
    fragment individualDetailed on IndividualNode {
  ...individualMinimal
  givenName
  familyName
  estimatedBirthDate
  pregnant
  lastSyncAt
  deduplicationBatchStatus
  disability
  importedIndividualId
  commsDisability
  firstRegistrationDate
  whoAnswersAltPhone
  memoryDisability
  middleName
  whoAnswersPhone
  phoneNoAlternative
  phoneNoAlternativeValid
  email
  hearingDisability
  observedDisability
  individualId
  seeingDisability
  physicalDisability
  selfcareDisability
  disability
  photo
  workStatus
  paymentChannels {
    id
    bankName
    bankAccountNumber
  }
  documents {
    edges {
      node {
        id
        country
        photo
        type {
          label
          key
        }
        documentNumber
      }
    }
  }
  enrolledInNutritionProgramme
  administrationOfRutf
  household {
    status
    id
    address
    countryOrigin
    adminArea {
      id
      name
      level
    }
  }
  headingHousehold {
    id
    headOfHousehold {
      id
      givenName
      familyName
      fullName
    }
  }
  flexFields
  householdsAndRoles {
    id
    role
    household {
      id
      unicefId
    }
  }
  bankAccountInfo {
    bankName
    bankAccountNumber
  }
  preferredLanguage
}
    ${IndividualMinimalFragmentDoc}`;
export const HouseholdMinimalFragmentDoc = gql`
    fragment householdMinimal on HouseholdNode {
  id
  status
  createdAt
  residenceStatus
  size
  totalCashReceived
  totalCashReceivedUsd
  currency
  firstRegistrationDate
  lastRegistrationDate
  status
  sanctionListPossibleMatch
  sanctionListConfirmedMatch
  hasDuplicates
  unicefId
  flexFields
  unhcrId
  geopoint
  village
  adminAreaTitle
  admin1 {
    id
    name
    level
    pCode
  }
  admin2 {
    id
    name
    level
    pCode
  }
  admin3 {
    id
    name
    level
    pCode
  }
  admin4 {
    id
    name
    level
    pCode
  }
  headOfHousehold {
    id
    fullName
    givenName
    familyName
  }
  address
  individuals {
    totalCount
  }
  programs {
    edges {
      node {
        id
        name
      }
    }
  }
}
    `;
export const HouseholdDetailedFragmentDoc = gql`
    fragment householdDetailed on HouseholdNode {
  ...householdMinimal
  activeIndividualsCount
  countryOrigin
  country
  zipCode
  femaleAgeGroup05Count
  femaleAgeGroup611Count
  femaleAgeGroup1217Count
  femaleAgeGroup1859Count
  femaleAgeGroup60Count
  pregnantCount
  maleAgeGroup05Count
  maleAgeGroup611Count
  maleAgeGroup1217Count
  maleAgeGroup1859Count
  maleAgeGroup60Count
  femaleAgeGroup05DisabledCount
  femaleAgeGroup611DisabledCount
  femaleAgeGroup1217DisabledCount
  femaleAgeGroup1859DisabledCount
  femaleAgeGroup60DisabledCount
  maleAgeGroup05DisabledCount
  maleAgeGroup611DisabledCount
  maleAgeGroup1217DisabledCount
  maleAgeGroup1859DisabledCount
  maleAgeGroup60DisabledCount
  fchildHoh
  childHoh
  start
  deviceid
  orgNameEnumerator
  returnee
  address
  nameEnumerator
  lastSyncAt
  consentSharing
  orgEnumerator
  updatedAt
  consent
  collectIndividualData
  individuals {
    totalCount
    edges {
      node {
        ...individualMinimal
      }
    }
  }
  programs {
    edges {
      node {
        id
        name
      }
    }
  }
  registrationDataImport {
    name
    dataSource
    importDate
    importedBy {
      firstName
      lastName
      email
      username
    }
  }
  paymentrecordSet {
    edges {
      node {
        id
        fullName
        parent {
          id
          totalPersonsCovered
          program {
            id
            name
          }
          totalDeliveredQuantity
          assistanceMeasurement
        }
      }
    }
  }
  flexFields
  programsWithDeliveredQuantity {
    id
    name
    quantity {
      totalDeliveredQuantity
      currency
    }
  }
}
    ${HouseholdMinimalFragmentDoc}
${IndividualMinimalFragmentDoc}`;
export const GrievanceTicketDetailedFragmentDoc = gql`
    fragment grievanceTicketDetailed on GrievanceTicketNode {
  id
  unicefId
  status
  category
  consent
  partner {
    id
    name
  }
  businessArea {
    postponeDeduplication
  }
  createdBy {
    id
    firstName
    lastName
    email
  }
  createdAt
  updatedAt
  description
  language
  admin
  admin2 {
    id
    name
    pCode
  }
  area
  assignedTo {
    id
    firstName
    lastName
    email
  }
  individual {
    ...individualDetailed
    householdsAndRoles {
      individual {
        id
        unicefId
        fullName
      }
      household {
        id
        unicefId
      }
      id
      role
    }
  }
  household {
    ...householdDetailed
  }
  paymentRecord {
    id
    caId
    deliveredQuantity
    objType
  }
  relatedTickets {
    id
    unicefId
    status
    household {
      id
      unicefId
    }
  }
  linkedTickets {
    id
    unicefId
    category
    status
    household {
      id
      unicefId
    }
  }
  existingTickets {
    id
    category
    unicefId
    status
    household {
      id
      unicefId
    }
  }
  addIndividualTicketDetails {
    id
    individualData
    approveStatus
    household {
      id
      unicefId
    }
  }
  individualDataUpdateTicketDetails {
    id
    individual {
      ...individualDetailed
    }
    individualData
    roleReassignData
  }
  householdDataUpdateTicketDetails {
    id
    household {
      ...householdDetailed
    }
    householdData
  }
  deleteIndividualTicketDetails {
    id
    roleReassignData
    approveStatus
  }
  deleteHouseholdTicketDetails {
    id
    approveStatus
    reasonHousehold {
      id
      unicefId
    }
  }
  systemFlaggingTicketDetails {
    id
    approveStatus
    roleReassignData
    goldenRecordsIndividual {
      id
      fullName
      birthDate
      lastRegistrationDate
      documents {
        edges {
          node {
            id
            type {
              label
              key
            }
            documentNumber
          }
        }
      }
    }
    sanctionListIndividual {
      id
      fullName
      referenceNumber
      datesOfBirth {
        edges {
          node {
            id
            date
          }
        }
      }
      documents {
        edges {
          node {
            id
            documentNumber
            typeOfDocument
          }
        }
      }
    }
  }
  paymentVerificationTicketDetails {
    id
    newStatus
    oldReceivedAmount
    newReceivedAmount
    approveStatus
    paymentVerificationStatus
    hasMultiplePaymentVerifications
    paymentVerification {
      id
      receivedAmount
    }
    paymentVerifications {
      edges {
        node {
          id
        }
      }
    }
  }
  needsAdjudicationTicketDetails {
    id
    hasDuplicatedDocument
    extraData {
      goldenRecords {
        hitId
        proximityToScore
        score
      }
      possibleDuplicate {
        hitId
        proximityToScore
        score
      }
    }
    goldenRecordsIndividual {
      id
      unicefId
      documents {
        edges {
          node {
            id
            country
            type {
              label
              key
            }
            documentNumber
            photo
          }
        }
      }
      household {
        id
        unicefId
        village
        admin2 {
          id
          name
        }
      }
      fullName
      birthDate
      lastRegistrationDate
      sex
      deduplicationGoldenRecordResults {
        hitId
        proximityToScore
        score
      }
    }
    possibleDuplicate {
      id
      documents {
        edges {
          node {
            id
            country
            type {
              label
              key
            }
            documentNumber
            photo
          }
        }
      }
      unicefId
      lastRegistrationDate
      household {
        unicefId
        id
        village
        admin2 {
          id
          name
        }
      }
      fullName
      birthDate
      sex
      deduplicationGoldenRecordResults {
        hitId
        proximityToScore
        score
      }
    }
    isMultipleDuplicatesVersion
    possibleDuplicates {
      id
      documents {
        edges {
          node {
            id
            country
            type {
              label
              key
            }
            documentNumber
            photo
          }
        }
      }
      unicefId
      lastRegistrationDate
      household {
        unicefId
        id
        village
        admin2 {
          id
          name
        }
      }
      fullName
      birthDate
      sex
      deduplicationGoldenRecordResults {
        hitId
        proximityToScore
        score
      }
    }
    selectedIndividual {
      ...individualDetailed
      household {
        ...householdDetailed
      }
      householdsAndRoles {
        individual {
          id
          unicefId
          fullName
        }
        household {
          id
          unicefId
        }
        id
        role
      }
    }
    selectedIndividuals {
      ...individualDetailed
      household {
        ...householdDetailed
      }
      householdsAndRoles {
        individual {
          id
          unicefId
          fullName
        }
        household {
          id
          unicefId
        }
        id
        role
      }
    }
    roleReassignData
  }
  issueType
  ticketNotes {
    edges {
      node {
        id
        createdAt
        updatedAt
        description
        createdBy {
          id
          firstName
          lastName
          email
        }
      }
    }
  }
  priority
  urgency
  programs {
    name
    id
  }
  comments
  documentation {
    id
    createdAt
    updatedAt
    name
    createdBy {
      id
      firstName
      lastName
      email
    }
    fileSize
    contentType
    filePath
    fileName
  }
}
    ${IndividualDetailedFragmentDoc}
${HouseholdDetailedFragmentDoc}`;
export const MergedHouseholdMinimalFragmentDoc = gql`
    fragment mergedHouseholdMinimal on HouseholdNode {
  id
  unicefId
  headOfHousehold {
    id
    fullName
  }
  size
  admin1 {
    id
    name
  }
  admin2 {
    id
    name
  }
  firstRegistrationDate
  hasDuplicates
}
    `;
export const MergedIndividualMinimalFragmentDoc = gql`
    fragment mergedIndividualMinimal on IndividualNode {
  id
  unicefId
  age
  fullName
  birthDate
  sex
  role
  relationship
  deduplicationBatchStatus
  deduplicationGoldenRecordStatus
  deduplicationGoldenRecordResults {
    hitId
    fullName
    score
    proximityToScore
    age
    location
  }
  deduplicationBatchResults {
    hitId
    fullName
    score
    proximityToScore
    age
    location
  }
  registrationDataImport {
    id
    datahubId
  }
}
    `;
export const PaymentRecordDetailsFragmentDoc = gql`
    fragment paymentRecordDetails on PaymentRecordNode {
  id
  status
  statusDate
  caId
  caHashId
  registrationCaId
  verification {
    id
    status
    statusDate
    receivedAmount
  }
  household {
    id
    status
    size
    unicefId
    headOfHousehold {
      id
      phoneNo
      phoneNoAlternative
      phoneNoValid
      phoneNoAlternativeValid
    }
  }
  fullName
  distributionModality
  totalPersonsCovered
  targetPopulation {
    id
    name
  }
  parent {
    id
    caId
    program {
      id
      name
    }
    verificationPlans {
      edges {
        node {
          id
          status
          verificationChannel
        }
      }
    }
  }
  currency
  entitlementQuantity
  deliveredQuantity
  deliveredQuantityUsd
  deliveryDate
  deliveryType
  entitlementCardIssueDate
  entitlementCardNumber
  transactionReferenceId
  serviceProvider {
    id
    fullName
    shortName
  }
}
    `;
export const RegistrationMinimalFragmentDoc = gql`
    fragment registrationMinimal on RegistrationDataImportNode {
  id
  createdAt
  name
  status
  erased
  importDate
  importedBy {
    id
    firstName
    lastName
    email
  }
  dataSource
  numberOfHouseholds
  numberOfIndividuals
  program {
    id
    name
    startDate
    endDate
    status
  }
  refuseReason
}
    `;
export const RegistrationDetailedFragmentDoc = gql`
    fragment registrationDetailed on RegistrationDataImportNode {
  ...registrationMinimal
  numberOfIndividuals
  datahubId
  errorMessage
  batchDuplicatesCountAndPercentage {
    count
    percentage
  }
  batchPossibleDuplicatesCountAndPercentage {
    count
    percentage
  }
  batchUniqueCountAndPercentage {
    count
    percentage
  }
  goldenRecordUniqueCountAndPercentage {
    count
    percentage
  }
  goldenRecordDuplicatesCountAndPercentage {
    count
    percentage
  }
  goldenRecordPossibleDuplicatesCountAndPercentage {
    count
    percentage
  }
}
    ${RegistrationMinimalFragmentDoc}`;
export const ImportedHouseholdMinimalFragmentDoc = gql`
    fragment importedHouseholdMinimal on ImportedHouseholdNode {
  id
  importId
  headOfHousehold {
    id
    fullName
  }
  size
  admin1
  admin1Title
  admin2
  admin2Title
  flexFields
  deviceid
  start
  koboAssetId
  rowId
  firstRegistrationDate
  lastRegistrationDate
  hasDuplicates
  fchildHoh
  childHoh
  collectIndividualData
}
    `;
export const ImportedIndividualMinimalFragmentDoc = gql`
    fragment importedIndividualMinimal on ImportedIndividualNode {
  id
  importId
  age
  fullName
  birthDate
  sex
  role
  relationship
  deduplicationBatchStatus
  deduplicationGoldenRecordStatus
  deduplicationGoldenRecordResults {
    hitId
    fullName
    score
    proximityToScore
    age
    location
  }
  deduplicationBatchResults {
    hitId
    fullName
    score
    proximityToScore
    age
    location
  }
  registrationDataImport {
    id
    hctId
  }
}
    `;
export const ImportedHouseholdDetailedFragmentDoc = gql`
    fragment importedHouseholdDetailed on ImportedHouseholdNode {
  ...importedHouseholdMinimal
  residenceStatus
  country
  countryOrigin
  registrationDataImport {
    id
    hctId
    name
  }
  individuals {
    edges {
      node {
        ...importedIndividualMinimal
      }
    }
  }
}
    ${ImportedHouseholdMinimalFragmentDoc}
${ImportedIndividualMinimalFragmentDoc}`;
export const ImportedIndividualDetailedFragmentDoc = gql`
    fragment importedIndividualDetailed on ImportedIndividualNode {
  ...importedIndividualMinimal
  photo
  givenName
  familyName
  middleName
  estimatedBirthDate
  maritalStatus
  workStatus
  pregnant
  flexFields
  observedDisability
  seeingDisability
  hearingDisability
  physicalDisability
  memoryDisability
  selfcareDisability
  commsDisability
  disability
  documents {
    edges {
      node {
        id
        country
        type {
          label
          key
        }
        documentNumber
        photo
      }
    }
  }
  identities {
    edges {
      node {
        id
        documentNumber
        partner
        country
      }
    }
  }
  role
  relationship
  household {
    id
    importId
    admin1
    admin2
    address
  }
  registrationDataImport {
    id
    hctId
    name
  }
  phoneNo
  phoneNoAlternative
  phoneNoValid
  phoneNoAlternativeValid
  preferredLanguage
  email
}
    ${ImportedIndividualMinimalFragmentDoc}`;
export const TargetPopulationMinimalFragmentDoc = gql`
    fragment targetPopulationMinimal on TargetPopulationNode {
  id
  name
  status
  createdAt
  updatedAt
  totalHouseholdsCount
  totalIndividualsCount
  program {
    id
    name
  }
  createdBy {
    id
    firstName
    lastName
  }
}
    `;
export const TargetPopulationDetailedFragmentDoc = gql`
    fragment targetPopulationDetailed on TargetPopulationNode {
  id
  name
  status
  buildStatus
  totalHouseholdsCount
  totalIndividualsCount
  childMaleCount
  childFemaleCount
  adultMaleCount
  adultFemaleCount
  caHashId
  excludedIds
  exclusionReason
  steficonRule {
    id
    rule {
      id
      name
    }
  }
  vulnerabilityScoreMin
  vulnerabilityScoreMax
  changeDate
  finalizedAt
  finalizedBy {
    id
    firstName
    lastName
  }
  program {
    id
    name
    status
    startDate
    endDate
  }
  createdBy {
    id
    email
    firstName
    lastName
  }
  targetingCriteria {
    flagExcludeIfActiveAdjudicationTicket
    flagExcludeIfOnSanctionList
    rules {
      id
      individualsFiltersBlocks {
        individualBlockFilters {
          fieldName
          isFlexField
          arguments
          comparisonMethod
          fieldAttribute {
            name
            labelEn
            type
            choices {
              value
              labelEn
            }
          }
        }
      }
      filters {
        fieldName
        isFlexField
        arguments
        comparisonMethod
        fieldAttribute {
          name
          labelEn
          type
          choices {
            value
            labelEn
          }
        }
      }
    }
  }
}
    `;
export const CreateFeedbackTicketDocument = gql`
    mutation CreateFeedbackTicket($input: CreateFeedbackInput!) {
  createFeedback(input: $input) {
    feedback {
      id
    }
  }
}
    `;
export type CreateFeedbackTicketMutationFn = ApolloReactCommon.MutationFunction<CreateFeedbackTicketMutation, CreateFeedbackTicketMutationVariables>;
export type CreateFeedbackTicketComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CreateFeedbackTicketMutation, CreateFeedbackTicketMutationVariables>, 'mutation'>;

    export const CreateFeedbackTicketComponent = (props: CreateFeedbackTicketComponentProps) => (
      <ApolloReactComponents.Mutation<CreateFeedbackTicketMutation, CreateFeedbackTicketMutationVariables> mutation={CreateFeedbackTicketDocument} {...props} />
    );
    
export type CreateFeedbackTicketProps<TChildProps = {}> = ApolloReactHoc.MutateProps<CreateFeedbackTicketMutation, CreateFeedbackTicketMutationVariables> & TChildProps;
export function withCreateFeedbackTicket<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  CreateFeedbackTicketMutation,
  CreateFeedbackTicketMutationVariables,
  CreateFeedbackTicketProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, CreateFeedbackTicketMutation, CreateFeedbackTicketMutationVariables, CreateFeedbackTicketProps<TChildProps>>(CreateFeedbackTicketDocument, {
      alias: 'createFeedbackTicket',
      ...operationOptions
    });
};

/**
 * __useCreateFeedbackTicketMutation__
 *
 * To run a mutation, you first call `useCreateFeedbackTicketMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateFeedbackTicketMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createFeedbackTicketMutation, { data, loading, error }] = useCreateFeedbackTicketMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateFeedbackTicketMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateFeedbackTicketMutation, CreateFeedbackTicketMutationVariables>) {
        return ApolloReactHooks.useMutation<CreateFeedbackTicketMutation, CreateFeedbackTicketMutationVariables>(CreateFeedbackTicketDocument, baseOptions);
      }
export type CreateFeedbackTicketMutationHookResult = ReturnType<typeof useCreateFeedbackTicketMutation>;
export type CreateFeedbackTicketMutationResult = ApolloReactCommon.MutationResult<CreateFeedbackTicketMutation>;
export type CreateFeedbackTicketMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateFeedbackTicketMutation, CreateFeedbackTicketMutationVariables>;
export const CreateFeedbackMsgDocument = gql`
    mutation CreateFeedbackMsg($input: CreateFeedbackMessageInput!) {
  createFeedbackMessage(input: $input) {
    feedbackMessage {
      id
      createdAt
      updatedAt
      description
      createdBy {
        id
        firstName
        lastName
        username
        email
      }
    }
  }
}
    `;
export type CreateFeedbackMsgMutationFn = ApolloReactCommon.MutationFunction<CreateFeedbackMsgMutation, CreateFeedbackMsgMutationVariables>;
export type CreateFeedbackMsgComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CreateFeedbackMsgMutation, CreateFeedbackMsgMutationVariables>, 'mutation'>;

    export const CreateFeedbackMsgComponent = (props: CreateFeedbackMsgComponentProps) => (
      <ApolloReactComponents.Mutation<CreateFeedbackMsgMutation, CreateFeedbackMsgMutationVariables> mutation={CreateFeedbackMsgDocument} {...props} />
    );
    
export type CreateFeedbackMsgProps<TChildProps = {}> = ApolloReactHoc.MutateProps<CreateFeedbackMsgMutation, CreateFeedbackMsgMutationVariables> & TChildProps;
export function withCreateFeedbackMsg<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  CreateFeedbackMsgMutation,
  CreateFeedbackMsgMutationVariables,
  CreateFeedbackMsgProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, CreateFeedbackMsgMutation, CreateFeedbackMsgMutationVariables, CreateFeedbackMsgProps<TChildProps>>(CreateFeedbackMsgDocument, {
      alias: 'createFeedbackMsg',
      ...operationOptions
    });
};

/**
 * __useCreateFeedbackMsgMutation__
 *
 * To run a mutation, you first call `useCreateFeedbackMsgMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateFeedbackMsgMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createFeedbackMsgMutation, { data, loading, error }] = useCreateFeedbackMsgMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateFeedbackMsgMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateFeedbackMsgMutation, CreateFeedbackMsgMutationVariables>) {
        return ApolloReactHooks.useMutation<CreateFeedbackMsgMutation, CreateFeedbackMsgMutationVariables>(CreateFeedbackMsgDocument, baseOptions);
      }
export type CreateFeedbackMsgMutationHookResult = ReturnType<typeof useCreateFeedbackMsgMutation>;
export type CreateFeedbackMsgMutationResult = ApolloReactCommon.MutationResult<CreateFeedbackMsgMutation>;
export type CreateFeedbackMsgMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateFeedbackMsgMutation, CreateFeedbackMsgMutationVariables>;
export const CreateSurveyAccountabilityDocument = gql`
    mutation CreateSurveyAccountability($input: CreateSurveyInput!) {
  createSurvey(input: $input) {
    survey {
      id
    }
  }
}
    `;
export type CreateSurveyAccountabilityMutationFn = ApolloReactCommon.MutationFunction<CreateSurveyAccountabilityMutation, CreateSurveyAccountabilityMutationVariables>;
export type CreateSurveyAccountabilityComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CreateSurveyAccountabilityMutation, CreateSurveyAccountabilityMutationVariables>, 'mutation'>;

    export const CreateSurveyAccountabilityComponent = (props: CreateSurveyAccountabilityComponentProps) => (
      <ApolloReactComponents.Mutation<CreateSurveyAccountabilityMutation, CreateSurveyAccountabilityMutationVariables> mutation={CreateSurveyAccountabilityDocument} {...props} />
    );
    
export type CreateSurveyAccountabilityProps<TChildProps = {}> = ApolloReactHoc.MutateProps<CreateSurveyAccountabilityMutation, CreateSurveyAccountabilityMutationVariables> & TChildProps;
export function withCreateSurveyAccountability<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  CreateSurveyAccountabilityMutation,
  CreateSurveyAccountabilityMutationVariables,
  CreateSurveyAccountabilityProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, CreateSurveyAccountabilityMutation, CreateSurveyAccountabilityMutationVariables, CreateSurveyAccountabilityProps<TChildProps>>(CreateSurveyAccountabilityDocument, {
      alias: 'createSurveyAccountability',
      ...operationOptions
    });
};

/**
 * __useCreateSurveyAccountabilityMutation__
 *
 * To run a mutation, you first call `useCreateSurveyAccountabilityMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateSurveyAccountabilityMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createSurveyAccountabilityMutation, { data, loading, error }] = useCreateSurveyAccountabilityMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateSurveyAccountabilityMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateSurveyAccountabilityMutation, CreateSurveyAccountabilityMutationVariables>) {
        return ApolloReactHooks.useMutation<CreateSurveyAccountabilityMutation, CreateSurveyAccountabilityMutationVariables>(CreateSurveyAccountabilityDocument, baseOptions);
      }
export type CreateSurveyAccountabilityMutationHookResult = ReturnType<typeof useCreateSurveyAccountabilityMutation>;
export type CreateSurveyAccountabilityMutationResult = ApolloReactCommon.MutationResult<CreateSurveyAccountabilityMutation>;
export type CreateSurveyAccountabilityMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateSurveyAccountabilityMutation, CreateSurveyAccountabilityMutationVariables>;
export const ExportSurveySampleDocument = gql`
    mutation ExportSurveySample($surveyId: ID!) {
  exportSurveySample(surveyId: $surveyId) {
    survey {
      id
    }
  }
}
    `;
export type ExportSurveySampleMutationFn = ApolloReactCommon.MutationFunction<ExportSurveySampleMutation, ExportSurveySampleMutationVariables>;
export type ExportSurveySampleComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<ExportSurveySampleMutation, ExportSurveySampleMutationVariables>, 'mutation'>;

    export const ExportSurveySampleComponent = (props: ExportSurveySampleComponentProps) => (
      <ApolloReactComponents.Mutation<ExportSurveySampleMutation, ExportSurveySampleMutationVariables> mutation={ExportSurveySampleDocument} {...props} />
    );
    
export type ExportSurveySampleProps<TChildProps = {}> = ApolloReactHoc.MutateProps<ExportSurveySampleMutation, ExportSurveySampleMutationVariables> & TChildProps;
export function withExportSurveySample<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ExportSurveySampleMutation,
  ExportSurveySampleMutationVariables,
  ExportSurveySampleProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, ExportSurveySampleMutation, ExportSurveySampleMutationVariables, ExportSurveySampleProps<TChildProps>>(ExportSurveySampleDocument, {
      alias: 'exportSurveySample',
      ...operationOptions
    });
};

/**
 * __useExportSurveySampleMutation__
 *
 * To run a mutation, you first call `useExportSurveySampleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useExportSurveySampleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [exportSurveySampleMutation, { data, loading, error }] = useExportSurveySampleMutation({
 *   variables: {
 *      surveyId: // value for 'surveyId'
 *   },
 * });
 */
export function useExportSurveySampleMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ExportSurveySampleMutation, ExportSurveySampleMutationVariables>) {
        return ApolloReactHooks.useMutation<ExportSurveySampleMutation, ExportSurveySampleMutationVariables>(ExportSurveySampleDocument, baseOptions);
      }
export type ExportSurveySampleMutationHookResult = ReturnType<typeof useExportSurveySampleMutation>;
export type ExportSurveySampleMutationResult = ApolloReactCommon.MutationResult<ExportSurveySampleMutation>;
export type ExportSurveySampleMutationOptions = ApolloReactCommon.BaseMutationOptions<ExportSurveySampleMutation, ExportSurveySampleMutationVariables>;
export const UpdateFeedbackTicketDocument = gql`
    mutation UpdateFeedbackTicket($input: UpdateFeedbackInput!) {
  updateFeedback(input: $input) {
    feedback {
      id
      unicefId
      issueType
      householdLookup {
        id
        unicefId
        headOfHousehold {
          id
          fullName
        }
      }
      individualLookup {
        id
        unicefId
      }
      program {
        id
        name
      }
      createdBy {
        id
        firstName
        lastName
        username
        email
      }
      createdAt
      updatedAt
      admin2 {
        id
        name
      }
      area
      language
      description
      comments
      linkedGrievance {
        id
        unicefId
      }
    }
  }
}
    `;
export type UpdateFeedbackTicketMutationFn = ApolloReactCommon.MutationFunction<UpdateFeedbackTicketMutation, UpdateFeedbackTicketMutationVariables>;
export type UpdateFeedbackTicketComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<UpdateFeedbackTicketMutation, UpdateFeedbackTicketMutationVariables>, 'mutation'>;

    export const UpdateFeedbackTicketComponent = (props: UpdateFeedbackTicketComponentProps) => (
      <ApolloReactComponents.Mutation<UpdateFeedbackTicketMutation, UpdateFeedbackTicketMutationVariables> mutation={UpdateFeedbackTicketDocument} {...props} />
    );
    
export type UpdateFeedbackTicketProps<TChildProps = {}> = ApolloReactHoc.MutateProps<UpdateFeedbackTicketMutation, UpdateFeedbackTicketMutationVariables> & TChildProps;
export function withUpdateFeedbackTicket<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  UpdateFeedbackTicketMutation,
  UpdateFeedbackTicketMutationVariables,
  UpdateFeedbackTicketProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, UpdateFeedbackTicketMutation, UpdateFeedbackTicketMutationVariables, UpdateFeedbackTicketProps<TChildProps>>(UpdateFeedbackTicketDocument, {
      alias: 'updateFeedbackTicket',
      ...operationOptions
    });
};

/**
 * __useUpdateFeedbackTicketMutation__
 *
 * To run a mutation, you first call `useUpdateFeedbackTicketMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateFeedbackTicketMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateFeedbackTicketMutation, { data, loading, error }] = useUpdateFeedbackTicketMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateFeedbackTicketMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateFeedbackTicketMutation, UpdateFeedbackTicketMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateFeedbackTicketMutation, UpdateFeedbackTicketMutationVariables>(UpdateFeedbackTicketDocument, baseOptions);
      }
export type UpdateFeedbackTicketMutationHookResult = ReturnType<typeof useUpdateFeedbackTicketMutation>;
export type UpdateFeedbackTicketMutationResult = ApolloReactCommon.MutationResult<UpdateFeedbackTicketMutation>;
export type UpdateFeedbackTicketMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateFeedbackTicketMutation, UpdateFeedbackTicketMutationVariables>;
export const CreateAccountabilityCommunicationMessageDocument = gql`
    mutation CreateAccountabilityCommunicationMessage($input: CreateAccountabilityCommunicationMessageInput!) {
  createAccountabilityCommunicationMessage(input: $input) {
    message {
      id
    }
  }
}
    `;
export type CreateAccountabilityCommunicationMessageMutationFn = ApolloReactCommon.MutationFunction<CreateAccountabilityCommunicationMessageMutation, CreateAccountabilityCommunicationMessageMutationVariables>;
export type CreateAccountabilityCommunicationMessageComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CreateAccountabilityCommunicationMessageMutation, CreateAccountabilityCommunicationMessageMutationVariables>, 'mutation'>;

    export const CreateAccountabilityCommunicationMessageComponent = (props: CreateAccountabilityCommunicationMessageComponentProps) => (
      <ApolloReactComponents.Mutation<CreateAccountabilityCommunicationMessageMutation, CreateAccountabilityCommunicationMessageMutationVariables> mutation={CreateAccountabilityCommunicationMessageDocument} {...props} />
    );
    
export type CreateAccountabilityCommunicationMessageProps<TChildProps = {}> = ApolloReactHoc.MutateProps<CreateAccountabilityCommunicationMessageMutation, CreateAccountabilityCommunicationMessageMutationVariables> & TChildProps;
export function withCreateAccountabilityCommunicationMessage<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  CreateAccountabilityCommunicationMessageMutation,
  CreateAccountabilityCommunicationMessageMutationVariables,
  CreateAccountabilityCommunicationMessageProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, CreateAccountabilityCommunicationMessageMutation, CreateAccountabilityCommunicationMessageMutationVariables, CreateAccountabilityCommunicationMessageProps<TChildProps>>(CreateAccountabilityCommunicationMessageDocument, {
      alias: 'createAccountabilityCommunicationMessage',
      ...operationOptions
    });
};

/**
 * __useCreateAccountabilityCommunicationMessageMutation__
 *
 * To run a mutation, you first call `useCreateAccountabilityCommunicationMessageMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateAccountabilityCommunicationMessageMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createAccountabilityCommunicationMessageMutation, { data, loading, error }] = useCreateAccountabilityCommunicationMessageMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateAccountabilityCommunicationMessageMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateAccountabilityCommunicationMessageMutation, CreateAccountabilityCommunicationMessageMutationVariables>) {
        return ApolloReactHooks.useMutation<CreateAccountabilityCommunicationMessageMutation, CreateAccountabilityCommunicationMessageMutationVariables>(CreateAccountabilityCommunicationMessageDocument, baseOptions);
      }
export type CreateAccountabilityCommunicationMessageMutationHookResult = ReturnType<typeof useCreateAccountabilityCommunicationMessageMutation>;
export type CreateAccountabilityCommunicationMessageMutationResult = ApolloReactCommon.MutationResult<CreateAccountabilityCommunicationMessageMutation>;
export type CreateAccountabilityCommunicationMessageMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateAccountabilityCommunicationMessageMutation, CreateAccountabilityCommunicationMessageMutationVariables>;
export const CheckAgainstSanctionListUploadDocument = gql`
    mutation CheckAgainstSanctionListUpload($file: Upload!) {
  checkAgainstSanctionList(file: $file) {
    errors {
      header
      message
      rowNumber
    }
  }
}
    `;
export type CheckAgainstSanctionListUploadMutationFn = ApolloReactCommon.MutationFunction<CheckAgainstSanctionListUploadMutation, CheckAgainstSanctionListUploadMutationVariables>;
export type CheckAgainstSanctionListUploadComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CheckAgainstSanctionListUploadMutation, CheckAgainstSanctionListUploadMutationVariables>, 'mutation'>;

    export const CheckAgainstSanctionListUploadComponent = (props: CheckAgainstSanctionListUploadComponentProps) => (
      <ApolloReactComponents.Mutation<CheckAgainstSanctionListUploadMutation, CheckAgainstSanctionListUploadMutationVariables> mutation={CheckAgainstSanctionListUploadDocument} {...props} />
    );
    
export type CheckAgainstSanctionListUploadProps<TChildProps = {}> = ApolloReactHoc.MutateProps<CheckAgainstSanctionListUploadMutation, CheckAgainstSanctionListUploadMutationVariables> & TChildProps;
export function withCheckAgainstSanctionListUpload<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  CheckAgainstSanctionListUploadMutation,
  CheckAgainstSanctionListUploadMutationVariables,
  CheckAgainstSanctionListUploadProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, CheckAgainstSanctionListUploadMutation, CheckAgainstSanctionListUploadMutationVariables, CheckAgainstSanctionListUploadProps<TChildProps>>(CheckAgainstSanctionListUploadDocument, {
      alias: 'checkAgainstSanctionListUpload',
      ...operationOptions
    });
};

/**
 * __useCheckAgainstSanctionListUploadMutation__
 *
 * To run a mutation, you first call `useCheckAgainstSanctionListUploadMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCheckAgainstSanctionListUploadMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [checkAgainstSanctionListUploadMutation, { data, loading, error }] = useCheckAgainstSanctionListUploadMutation({
 *   variables: {
 *      file: // value for 'file'
 *   },
 * });
 */
export function useCheckAgainstSanctionListUploadMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CheckAgainstSanctionListUploadMutation, CheckAgainstSanctionListUploadMutationVariables>) {
        return ApolloReactHooks.useMutation<CheckAgainstSanctionListUploadMutation, CheckAgainstSanctionListUploadMutationVariables>(CheckAgainstSanctionListUploadDocument, baseOptions);
      }
export type CheckAgainstSanctionListUploadMutationHookResult = ReturnType<typeof useCheckAgainstSanctionListUploadMutation>;
export type CheckAgainstSanctionListUploadMutationResult = ApolloReactCommon.MutationResult<CheckAgainstSanctionListUploadMutation>;
export type CheckAgainstSanctionListUploadMutationOptions = ApolloReactCommon.BaseMutationOptions<CheckAgainstSanctionListUploadMutation, CheckAgainstSanctionListUploadMutationVariables>;
export const ApproveAddIndividualDataChangeDocument = gql`
    mutation ApproveAddIndividualDataChange($grievanceTicketId: ID!, $approveStatus: Boolean!) {
  approveAddIndividual(grievanceTicketId: $grievanceTicketId, approveStatus: $approveStatus) {
    grievanceTicket {
      id
      status
    }
  }
}
    `;
export type ApproveAddIndividualDataChangeMutationFn = ApolloReactCommon.MutationFunction<ApproveAddIndividualDataChangeMutation, ApproveAddIndividualDataChangeMutationVariables>;
export type ApproveAddIndividualDataChangeComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<ApproveAddIndividualDataChangeMutation, ApproveAddIndividualDataChangeMutationVariables>, 'mutation'>;

    export const ApproveAddIndividualDataChangeComponent = (props: ApproveAddIndividualDataChangeComponentProps) => (
      <ApolloReactComponents.Mutation<ApproveAddIndividualDataChangeMutation, ApproveAddIndividualDataChangeMutationVariables> mutation={ApproveAddIndividualDataChangeDocument} {...props} />
    );
    
export type ApproveAddIndividualDataChangeProps<TChildProps = {}> = ApolloReactHoc.MutateProps<ApproveAddIndividualDataChangeMutation, ApproveAddIndividualDataChangeMutationVariables> & TChildProps;
export function withApproveAddIndividualDataChange<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ApproveAddIndividualDataChangeMutation,
  ApproveAddIndividualDataChangeMutationVariables,
  ApproveAddIndividualDataChangeProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, ApproveAddIndividualDataChangeMutation, ApproveAddIndividualDataChangeMutationVariables, ApproveAddIndividualDataChangeProps<TChildProps>>(ApproveAddIndividualDataChangeDocument, {
      alias: 'approveAddIndividualDataChange',
      ...operationOptions
    });
};

/**
 * __useApproveAddIndividualDataChangeMutation__
 *
 * To run a mutation, you first call `useApproveAddIndividualDataChangeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useApproveAddIndividualDataChangeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [approveAddIndividualDataChangeMutation, { data, loading, error }] = useApproveAddIndividualDataChangeMutation({
 *   variables: {
 *      grievanceTicketId: // value for 'grievanceTicketId'
 *      approveStatus: // value for 'approveStatus'
 *   },
 * });
 */
export function useApproveAddIndividualDataChangeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ApproveAddIndividualDataChangeMutation, ApproveAddIndividualDataChangeMutationVariables>) {
        return ApolloReactHooks.useMutation<ApproveAddIndividualDataChangeMutation, ApproveAddIndividualDataChangeMutationVariables>(ApproveAddIndividualDataChangeDocument, baseOptions);
      }
export type ApproveAddIndividualDataChangeMutationHookResult = ReturnType<typeof useApproveAddIndividualDataChangeMutation>;
export type ApproveAddIndividualDataChangeMutationResult = ApolloReactCommon.MutationResult<ApproveAddIndividualDataChangeMutation>;
export type ApproveAddIndividualDataChangeMutationOptions = ApolloReactCommon.BaseMutationOptions<ApproveAddIndividualDataChangeMutation, ApproveAddIndividualDataChangeMutationVariables>;
export const ApproveDeleteHouseholdDataChangeDocument = gql`
    mutation ApproveDeleteHouseholdDataChange($grievanceTicketId: ID!, $approveStatus: Boolean!, $reasonHhId: String) {
  approveDeleteHousehold(grievanceTicketId: $grievanceTicketId, approveStatus: $approveStatus, reasonHhId: $reasonHhId) {
    grievanceTicket {
      id
      status
    }
  }
}
    `;
export type ApproveDeleteHouseholdDataChangeMutationFn = ApolloReactCommon.MutationFunction<ApproveDeleteHouseholdDataChangeMutation, ApproveDeleteHouseholdDataChangeMutationVariables>;
export type ApproveDeleteHouseholdDataChangeComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<ApproveDeleteHouseholdDataChangeMutation, ApproveDeleteHouseholdDataChangeMutationVariables>, 'mutation'>;

    export const ApproveDeleteHouseholdDataChangeComponent = (props: ApproveDeleteHouseholdDataChangeComponentProps) => (
      <ApolloReactComponents.Mutation<ApproveDeleteHouseholdDataChangeMutation, ApproveDeleteHouseholdDataChangeMutationVariables> mutation={ApproveDeleteHouseholdDataChangeDocument} {...props} />
    );
    
export type ApproveDeleteHouseholdDataChangeProps<TChildProps = {}> = ApolloReactHoc.MutateProps<ApproveDeleteHouseholdDataChangeMutation, ApproveDeleteHouseholdDataChangeMutationVariables> & TChildProps;
export function withApproveDeleteHouseholdDataChange<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ApproveDeleteHouseholdDataChangeMutation,
  ApproveDeleteHouseholdDataChangeMutationVariables,
  ApproveDeleteHouseholdDataChangeProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, ApproveDeleteHouseholdDataChangeMutation, ApproveDeleteHouseholdDataChangeMutationVariables, ApproveDeleteHouseholdDataChangeProps<TChildProps>>(ApproveDeleteHouseholdDataChangeDocument, {
      alias: 'approveDeleteHouseholdDataChange',
      ...operationOptions
    });
};

/**
 * __useApproveDeleteHouseholdDataChangeMutation__
 *
 * To run a mutation, you first call `useApproveDeleteHouseholdDataChangeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useApproveDeleteHouseholdDataChangeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [approveDeleteHouseholdDataChangeMutation, { data, loading, error }] = useApproveDeleteHouseholdDataChangeMutation({
 *   variables: {
 *      grievanceTicketId: // value for 'grievanceTicketId'
 *      approveStatus: // value for 'approveStatus'
 *      reasonHhId: // value for 'reasonHhId'
 *   },
 * });
 */
export function useApproveDeleteHouseholdDataChangeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ApproveDeleteHouseholdDataChangeMutation, ApproveDeleteHouseholdDataChangeMutationVariables>) {
        return ApolloReactHooks.useMutation<ApproveDeleteHouseholdDataChangeMutation, ApproveDeleteHouseholdDataChangeMutationVariables>(ApproveDeleteHouseholdDataChangeDocument, baseOptions);
      }
export type ApproveDeleteHouseholdDataChangeMutationHookResult = ReturnType<typeof useApproveDeleteHouseholdDataChangeMutation>;
export type ApproveDeleteHouseholdDataChangeMutationResult = ApolloReactCommon.MutationResult<ApproveDeleteHouseholdDataChangeMutation>;
export type ApproveDeleteHouseholdDataChangeMutationOptions = ApolloReactCommon.BaseMutationOptions<ApproveDeleteHouseholdDataChangeMutation, ApproveDeleteHouseholdDataChangeMutationVariables>;
export const ApproveDeleteIndividualDataChangeDocument = gql`
    mutation ApproveDeleteIndividualDataChange($grievanceTicketId: ID!, $approveStatus: Boolean!) {
  approveDeleteIndividual(grievanceTicketId: $grievanceTicketId, approveStatus: $approveStatus) {
    grievanceTicket {
      id
      status
    }
  }
}
    `;
export type ApproveDeleteIndividualDataChangeMutationFn = ApolloReactCommon.MutationFunction<ApproveDeleteIndividualDataChangeMutation, ApproveDeleteIndividualDataChangeMutationVariables>;
export type ApproveDeleteIndividualDataChangeComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<ApproveDeleteIndividualDataChangeMutation, ApproveDeleteIndividualDataChangeMutationVariables>, 'mutation'>;

    export const ApproveDeleteIndividualDataChangeComponent = (props: ApproveDeleteIndividualDataChangeComponentProps) => (
      <ApolloReactComponents.Mutation<ApproveDeleteIndividualDataChangeMutation, ApproveDeleteIndividualDataChangeMutationVariables> mutation={ApproveDeleteIndividualDataChangeDocument} {...props} />
    );
    
export type ApproveDeleteIndividualDataChangeProps<TChildProps = {}> = ApolloReactHoc.MutateProps<ApproveDeleteIndividualDataChangeMutation, ApproveDeleteIndividualDataChangeMutationVariables> & TChildProps;
export function withApproveDeleteIndividualDataChange<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ApproveDeleteIndividualDataChangeMutation,
  ApproveDeleteIndividualDataChangeMutationVariables,
  ApproveDeleteIndividualDataChangeProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, ApproveDeleteIndividualDataChangeMutation, ApproveDeleteIndividualDataChangeMutationVariables, ApproveDeleteIndividualDataChangeProps<TChildProps>>(ApproveDeleteIndividualDataChangeDocument, {
      alias: 'approveDeleteIndividualDataChange',
      ...operationOptions
    });
};

/**
 * __useApproveDeleteIndividualDataChangeMutation__
 *
 * To run a mutation, you first call `useApproveDeleteIndividualDataChangeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useApproveDeleteIndividualDataChangeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [approveDeleteIndividualDataChangeMutation, { data, loading, error }] = useApproveDeleteIndividualDataChangeMutation({
 *   variables: {
 *      grievanceTicketId: // value for 'grievanceTicketId'
 *      approveStatus: // value for 'approveStatus'
 *   },
 * });
 */
export function useApproveDeleteIndividualDataChangeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ApproveDeleteIndividualDataChangeMutation, ApproveDeleteIndividualDataChangeMutationVariables>) {
        return ApolloReactHooks.useMutation<ApproveDeleteIndividualDataChangeMutation, ApproveDeleteIndividualDataChangeMutationVariables>(ApproveDeleteIndividualDataChangeDocument, baseOptions);
      }
export type ApproveDeleteIndividualDataChangeMutationHookResult = ReturnType<typeof useApproveDeleteIndividualDataChangeMutation>;
export type ApproveDeleteIndividualDataChangeMutationResult = ApolloReactCommon.MutationResult<ApproveDeleteIndividualDataChangeMutation>;
export type ApproveDeleteIndividualDataChangeMutationOptions = ApolloReactCommon.BaseMutationOptions<ApproveDeleteIndividualDataChangeMutation, ApproveDeleteIndividualDataChangeMutationVariables>;
export const ApproveHouseholdDataChangeDocument = gql`
    mutation ApproveHouseholdDataChange($grievanceTicketId: ID!, $householdApproveData: JSONString, $flexFieldsApproveData: JSONString) {
  approveHouseholdDataChange(grievanceTicketId: $grievanceTicketId, householdApproveData: $householdApproveData, flexFieldsApproveData: $flexFieldsApproveData) {
    grievanceTicket {
      id
      status
      householdDataUpdateTicketDetails {
        id
        household {
          ...householdDetailed
        }
        householdData
      }
    }
  }
}
    ${HouseholdDetailedFragmentDoc}`;
export type ApproveHouseholdDataChangeMutationFn = ApolloReactCommon.MutationFunction<ApproveHouseholdDataChangeMutation, ApproveHouseholdDataChangeMutationVariables>;
export type ApproveHouseholdDataChangeComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<ApproveHouseholdDataChangeMutation, ApproveHouseholdDataChangeMutationVariables>, 'mutation'>;

    export const ApproveHouseholdDataChangeComponent = (props: ApproveHouseholdDataChangeComponentProps) => (
      <ApolloReactComponents.Mutation<ApproveHouseholdDataChangeMutation, ApproveHouseholdDataChangeMutationVariables> mutation={ApproveHouseholdDataChangeDocument} {...props} />
    );
    
export type ApproveHouseholdDataChangeProps<TChildProps = {}> = ApolloReactHoc.MutateProps<ApproveHouseholdDataChangeMutation, ApproveHouseholdDataChangeMutationVariables> & TChildProps;
export function withApproveHouseholdDataChange<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ApproveHouseholdDataChangeMutation,
  ApproveHouseholdDataChangeMutationVariables,
  ApproveHouseholdDataChangeProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, ApproveHouseholdDataChangeMutation, ApproveHouseholdDataChangeMutationVariables, ApproveHouseholdDataChangeProps<TChildProps>>(ApproveHouseholdDataChangeDocument, {
      alias: 'approveHouseholdDataChange',
      ...operationOptions
    });
};

/**
 * __useApproveHouseholdDataChangeMutation__
 *
 * To run a mutation, you first call `useApproveHouseholdDataChangeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useApproveHouseholdDataChangeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [approveHouseholdDataChangeMutation, { data, loading, error }] = useApproveHouseholdDataChangeMutation({
 *   variables: {
 *      grievanceTicketId: // value for 'grievanceTicketId'
 *      householdApproveData: // value for 'householdApproveData'
 *      flexFieldsApproveData: // value for 'flexFieldsApproveData'
 *   },
 * });
 */
export function useApproveHouseholdDataChangeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ApproveHouseholdDataChangeMutation, ApproveHouseholdDataChangeMutationVariables>) {
        return ApolloReactHooks.useMutation<ApproveHouseholdDataChangeMutation, ApproveHouseholdDataChangeMutationVariables>(ApproveHouseholdDataChangeDocument, baseOptions);
      }
export type ApproveHouseholdDataChangeMutationHookResult = ReturnType<typeof useApproveHouseholdDataChangeMutation>;
export type ApproveHouseholdDataChangeMutationResult = ApolloReactCommon.MutationResult<ApproveHouseholdDataChangeMutation>;
export type ApproveHouseholdDataChangeMutationOptions = ApolloReactCommon.BaseMutationOptions<ApproveHouseholdDataChangeMutation, ApproveHouseholdDataChangeMutationVariables>;
export const ApproveIndividualDataChangeDocument = gql`
    mutation ApproveIndividualDataChange($grievanceTicketId: ID!, $individualApproveData: JSONString, $flexFieldsApproveData: JSONString, $approvedDocumentsToCreate: [Int], $approvedDocumentsToRemove: [Int], $approvedDocumentsToEdit: [Int], $approvedIdentitiesToCreate: [Int], $approvedIdentitiesToEdit: [Int], $approvedIdentitiesToRemove: [Int], $approvedPaymentChannelsToCreate: [Int], $approvedPaymentChannelsToEdit: [Int], $approvedPaymentChannelsToRemove: [Int]) {
  approveIndividualDataChange(grievanceTicketId: $grievanceTicketId, individualApproveData: $individualApproveData, flexFieldsApproveData: $flexFieldsApproveData, approvedDocumentsToCreate: $approvedDocumentsToCreate, approvedDocumentsToRemove: $approvedDocumentsToRemove, approvedDocumentsToEdit: $approvedDocumentsToEdit, approvedIdentitiesToCreate: $approvedIdentitiesToCreate, approvedIdentitiesToEdit: $approvedIdentitiesToEdit, approvedIdentitiesToRemove: $approvedIdentitiesToRemove, approvedPaymentChannelsToCreate: $approvedPaymentChannelsToCreate, approvedPaymentChannelsToEdit: $approvedPaymentChannelsToEdit, approvedPaymentChannelsToRemove: $approvedPaymentChannelsToRemove) {
    grievanceTicket {
      id
      status
      individualDataUpdateTicketDetails {
        id
        individual {
          ...individualDetailed
        }
        individualData
      }
    }
  }
}
    ${IndividualDetailedFragmentDoc}`;
export type ApproveIndividualDataChangeMutationFn = ApolloReactCommon.MutationFunction<ApproveIndividualDataChangeMutation, ApproveIndividualDataChangeMutationVariables>;
export type ApproveIndividualDataChangeComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<ApproveIndividualDataChangeMutation, ApproveIndividualDataChangeMutationVariables>, 'mutation'>;

    export const ApproveIndividualDataChangeComponent = (props: ApproveIndividualDataChangeComponentProps) => (
      <ApolloReactComponents.Mutation<ApproveIndividualDataChangeMutation, ApproveIndividualDataChangeMutationVariables> mutation={ApproveIndividualDataChangeDocument} {...props} />
    );
    
export type ApproveIndividualDataChangeProps<TChildProps = {}> = ApolloReactHoc.MutateProps<ApproveIndividualDataChangeMutation, ApproveIndividualDataChangeMutationVariables> & TChildProps;
export function withApproveIndividualDataChange<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ApproveIndividualDataChangeMutation,
  ApproveIndividualDataChangeMutationVariables,
  ApproveIndividualDataChangeProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, ApproveIndividualDataChangeMutation, ApproveIndividualDataChangeMutationVariables, ApproveIndividualDataChangeProps<TChildProps>>(ApproveIndividualDataChangeDocument, {
      alias: 'approveIndividualDataChange',
      ...operationOptions
    });
};

/**
 * __useApproveIndividualDataChangeMutation__
 *
 * To run a mutation, you first call `useApproveIndividualDataChangeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useApproveIndividualDataChangeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [approveIndividualDataChangeMutation, { data, loading, error }] = useApproveIndividualDataChangeMutation({
 *   variables: {
 *      grievanceTicketId: // value for 'grievanceTicketId'
 *      individualApproveData: // value for 'individualApproveData'
 *      flexFieldsApproveData: // value for 'flexFieldsApproveData'
 *      approvedDocumentsToCreate: // value for 'approvedDocumentsToCreate'
 *      approvedDocumentsToRemove: // value for 'approvedDocumentsToRemove'
 *      approvedDocumentsToEdit: // value for 'approvedDocumentsToEdit'
 *      approvedIdentitiesToCreate: // value for 'approvedIdentitiesToCreate'
 *      approvedIdentitiesToEdit: // value for 'approvedIdentitiesToEdit'
 *      approvedIdentitiesToRemove: // value for 'approvedIdentitiesToRemove'
 *      approvedPaymentChannelsToCreate: // value for 'approvedPaymentChannelsToCreate'
 *      approvedPaymentChannelsToEdit: // value for 'approvedPaymentChannelsToEdit'
 *      approvedPaymentChannelsToRemove: // value for 'approvedPaymentChannelsToRemove'
 *   },
 * });
 */
export function useApproveIndividualDataChangeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ApproveIndividualDataChangeMutation, ApproveIndividualDataChangeMutationVariables>) {
        return ApolloReactHooks.useMutation<ApproveIndividualDataChangeMutation, ApproveIndividualDataChangeMutationVariables>(ApproveIndividualDataChangeDocument, baseOptions);
      }
export type ApproveIndividualDataChangeMutationHookResult = ReturnType<typeof useApproveIndividualDataChangeMutation>;
export type ApproveIndividualDataChangeMutationResult = ApolloReactCommon.MutationResult<ApproveIndividualDataChangeMutation>;
export type ApproveIndividualDataChangeMutationOptions = ApolloReactCommon.BaseMutationOptions<ApproveIndividualDataChangeMutation, ApproveIndividualDataChangeMutationVariables>;
export const ApproveNeedsAdjudicationDocument = gql`
    mutation ApproveNeedsAdjudication($grievanceTicketId: ID!, $selectedIndividualId: ID, $selectedIndividualIds: [ID]) {
  approveNeedsAdjudication(grievanceTicketId: $grievanceTicketId, selectedIndividualId: $selectedIndividualId, selectedIndividualIds: $selectedIndividualIds) {
    grievanceTicket {
      id
      status
    }
  }
}
    `;
export type ApproveNeedsAdjudicationMutationFn = ApolloReactCommon.MutationFunction<ApproveNeedsAdjudicationMutation, ApproveNeedsAdjudicationMutationVariables>;
export type ApproveNeedsAdjudicationComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<ApproveNeedsAdjudicationMutation, ApproveNeedsAdjudicationMutationVariables>, 'mutation'>;

    export const ApproveNeedsAdjudicationComponent = (props: ApproveNeedsAdjudicationComponentProps) => (
      <ApolloReactComponents.Mutation<ApproveNeedsAdjudicationMutation, ApproveNeedsAdjudicationMutationVariables> mutation={ApproveNeedsAdjudicationDocument} {...props} />
    );
    
export type ApproveNeedsAdjudicationProps<TChildProps = {}> = ApolloReactHoc.MutateProps<ApproveNeedsAdjudicationMutation, ApproveNeedsAdjudicationMutationVariables> & TChildProps;
export function withApproveNeedsAdjudication<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ApproveNeedsAdjudicationMutation,
  ApproveNeedsAdjudicationMutationVariables,
  ApproveNeedsAdjudicationProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, ApproveNeedsAdjudicationMutation, ApproveNeedsAdjudicationMutationVariables, ApproveNeedsAdjudicationProps<TChildProps>>(ApproveNeedsAdjudicationDocument, {
      alias: 'approveNeedsAdjudication',
      ...operationOptions
    });
};

/**
 * __useApproveNeedsAdjudicationMutation__
 *
 * To run a mutation, you first call `useApproveNeedsAdjudicationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useApproveNeedsAdjudicationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [approveNeedsAdjudicationMutation, { data, loading, error }] = useApproveNeedsAdjudicationMutation({
 *   variables: {
 *      grievanceTicketId: // value for 'grievanceTicketId'
 *      selectedIndividualId: // value for 'selectedIndividualId'
 *      selectedIndividualIds: // value for 'selectedIndividualIds'
 *   },
 * });
 */
export function useApproveNeedsAdjudicationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ApproveNeedsAdjudicationMutation, ApproveNeedsAdjudicationMutationVariables>) {
        return ApolloReactHooks.useMutation<ApproveNeedsAdjudicationMutation, ApproveNeedsAdjudicationMutationVariables>(ApproveNeedsAdjudicationDocument, baseOptions);
      }
export type ApproveNeedsAdjudicationMutationHookResult = ReturnType<typeof useApproveNeedsAdjudicationMutation>;
export type ApproveNeedsAdjudicationMutationResult = ApolloReactCommon.MutationResult<ApproveNeedsAdjudicationMutation>;
export type ApproveNeedsAdjudicationMutationOptions = ApolloReactCommon.BaseMutationOptions<ApproveNeedsAdjudicationMutation, ApproveNeedsAdjudicationMutationVariables>;
export const ApprovePaymentDetailsDocument = gql`
    mutation ApprovePaymentDetails($grievanceTicketId: ID!, $approveStatus: Boolean!) {
  approvePaymentDetails(grievanceTicketId: $grievanceTicketId, approveStatus: $approveStatus) {
    grievanceTicket {
      id
      status
      paymentVerificationTicketDetails {
        id
        approveStatus
      }
    }
  }
}
    `;
export type ApprovePaymentDetailsMutationFn = ApolloReactCommon.MutationFunction<ApprovePaymentDetailsMutation, ApprovePaymentDetailsMutationVariables>;
export type ApprovePaymentDetailsComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<ApprovePaymentDetailsMutation, ApprovePaymentDetailsMutationVariables>, 'mutation'>;

    export const ApprovePaymentDetailsComponent = (props: ApprovePaymentDetailsComponentProps) => (
      <ApolloReactComponents.Mutation<ApprovePaymentDetailsMutation, ApprovePaymentDetailsMutationVariables> mutation={ApprovePaymentDetailsDocument} {...props} />
    );
    
export type ApprovePaymentDetailsProps<TChildProps = {}> = ApolloReactHoc.MutateProps<ApprovePaymentDetailsMutation, ApprovePaymentDetailsMutationVariables> & TChildProps;
export function withApprovePaymentDetails<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ApprovePaymentDetailsMutation,
  ApprovePaymentDetailsMutationVariables,
  ApprovePaymentDetailsProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, ApprovePaymentDetailsMutation, ApprovePaymentDetailsMutationVariables, ApprovePaymentDetailsProps<TChildProps>>(ApprovePaymentDetailsDocument, {
      alias: 'approvePaymentDetails',
      ...operationOptions
    });
};

/**
 * __useApprovePaymentDetailsMutation__
 *
 * To run a mutation, you first call `useApprovePaymentDetailsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useApprovePaymentDetailsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [approvePaymentDetailsMutation, { data, loading, error }] = useApprovePaymentDetailsMutation({
 *   variables: {
 *      grievanceTicketId: // value for 'grievanceTicketId'
 *      approveStatus: // value for 'approveStatus'
 *   },
 * });
 */
export function useApprovePaymentDetailsMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ApprovePaymentDetailsMutation, ApprovePaymentDetailsMutationVariables>) {
        return ApolloReactHooks.useMutation<ApprovePaymentDetailsMutation, ApprovePaymentDetailsMutationVariables>(ApprovePaymentDetailsDocument, baseOptions);
      }
export type ApprovePaymentDetailsMutationHookResult = ReturnType<typeof useApprovePaymentDetailsMutation>;
export type ApprovePaymentDetailsMutationResult = ApolloReactCommon.MutationResult<ApprovePaymentDetailsMutation>;
export type ApprovePaymentDetailsMutationOptions = ApolloReactCommon.BaseMutationOptions<ApprovePaymentDetailsMutation, ApprovePaymentDetailsMutationVariables>;
export const ApproveSystemFlaggingDocument = gql`
    mutation ApproveSystemFlagging($grievanceTicketId: ID!, $approveStatus: Boolean!) {
  approveSystemFlagging(grievanceTicketId: $grievanceTicketId, approveStatus: $approveStatus) {
    grievanceTicket {
      id
      status
    }
  }
}
    `;
export type ApproveSystemFlaggingMutationFn = ApolloReactCommon.MutationFunction<ApproveSystemFlaggingMutation, ApproveSystemFlaggingMutationVariables>;
export type ApproveSystemFlaggingComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<ApproveSystemFlaggingMutation, ApproveSystemFlaggingMutationVariables>, 'mutation'>;

    export const ApproveSystemFlaggingComponent = (props: ApproveSystemFlaggingComponentProps) => (
      <ApolloReactComponents.Mutation<ApproveSystemFlaggingMutation, ApproveSystemFlaggingMutationVariables> mutation={ApproveSystemFlaggingDocument} {...props} />
    );
    
export type ApproveSystemFlaggingProps<TChildProps = {}> = ApolloReactHoc.MutateProps<ApproveSystemFlaggingMutation, ApproveSystemFlaggingMutationVariables> & TChildProps;
export function withApproveSystemFlagging<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ApproveSystemFlaggingMutation,
  ApproveSystemFlaggingMutationVariables,
  ApproveSystemFlaggingProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, ApproveSystemFlaggingMutation, ApproveSystemFlaggingMutationVariables, ApproveSystemFlaggingProps<TChildProps>>(ApproveSystemFlaggingDocument, {
      alias: 'approveSystemFlagging',
      ...operationOptions
    });
};

/**
 * __useApproveSystemFlaggingMutation__
 *
 * To run a mutation, you first call `useApproveSystemFlaggingMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useApproveSystemFlaggingMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [approveSystemFlaggingMutation, { data, loading, error }] = useApproveSystemFlaggingMutation({
 *   variables: {
 *      grievanceTicketId: // value for 'grievanceTicketId'
 *      approveStatus: // value for 'approveStatus'
 *   },
 * });
 */
export function useApproveSystemFlaggingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ApproveSystemFlaggingMutation, ApproveSystemFlaggingMutationVariables>) {
        return ApolloReactHooks.useMutation<ApproveSystemFlaggingMutation, ApproveSystemFlaggingMutationVariables>(ApproveSystemFlaggingDocument, baseOptions);
      }
export type ApproveSystemFlaggingMutationHookResult = ReturnType<typeof useApproveSystemFlaggingMutation>;
export type ApproveSystemFlaggingMutationResult = ApolloReactCommon.MutationResult<ApproveSystemFlaggingMutation>;
export type ApproveSystemFlaggingMutationOptions = ApolloReactCommon.BaseMutationOptions<ApproveSystemFlaggingMutation, ApproveSystemFlaggingMutationVariables>;
export const BulkUpdateGrievanceAssigneeDocument = gql`
    mutation BulkUpdateGrievanceAssignee($grievanceTicketUnicefIds: [ID], $assignedTo: String, $businessAreaSlug: String!) {
  bulkUpdateGrievanceAssignee(grievanceTicketUnicefIds: $grievanceTicketUnicefIds, assignedTo: $assignedTo, businessAreaSlug: $businessAreaSlug) {
    grievanceTickets {
      assignedTo {
        firstName
        lastName
        email
      }
    }
  }
}
    `;
export type BulkUpdateGrievanceAssigneeMutationFn = ApolloReactCommon.MutationFunction<BulkUpdateGrievanceAssigneeMutation, BulkUpdateGrievanceAssigneeMutationVariables>;
export type BulkUpdateGrievanceAssigneeComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<BulkUpdateGrievanceAssigneeMutation, BulkUpdateGrievanceAssigneeMutationVariables>, 'mutation'>;

    export const BulkUpdateGrievanceAssigneeComponent = (props: BulkUpdateGrievanceAssigneeComponentProps) => (
      <ApolloReactComponents.Mutation<BulkUpdateGrievanceAssigneeMutation, BulkUpdateGrievanceAssigneeMutationVariables> mutation={BulkUpdateGrievanceAssigneeDocument} {...props} />
    );
    
export type BulkUpdateGrievanceAssigneeProps<TChildProps = {}> = ApolloReactHoc.MutateProps<BulkUpdateGrievanceAssigneeMutation, BulkUpdateGrievanceAssigneeMutationVariables> & TChildProps;
export function withBulkUpdateGrievanceAssignee<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  BulkUpdateGrievanceAssigneeMutation,
  BulkUpdateGrievanceAssigneeMutationVariables,
  BulkUpdateGrievanceAssigneeProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, BulkUpdateGrievanceAssigneeMutation, BulkUpdateGrievanceAssigneeMutationVariables, BulkUpdateGrievanceAssigneeProps<TChildProps>>(BulkUpdateGrievanceAssigneeDocument, {
      alias: 'bulkUpdateGrievanceAssignee',
      ...operationOptions
    });
};

/**
 * __useBulkUpdateGrievanceAssigneeMutation__
 *
 * To run a mutation, you first call `useBulkUpdateGrievanceAssigneeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useBulkUpdateGrievanceAssigneeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [bulkUpdateGrievanceAssigneeMutation, { data, loading, error }] = useBulkUpdateGrievanceAssigneeMutation({
 *   variables: {
 *      grievanceTicketUnicefIds: // value for 'grievanceTicketUnicefIds'
 *      assignedTo: // value for 'assignedTo'
 *      businessAreaSlug: // value for 'businessAreaSlug'
 *   },
 * });
 */
export function useBulkUpdateGrievanceAssigneeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<BulkUpdateGrievanceAssigneeMutation, BulkUpdateGrievanceAssigneeMutationVariables>) {
        return ApolloReactHooks.useMutation<BulkUpdateGrievanceAssigneeMutation, BulkUpdateGrievanceAssigneeMutationVariables>(BulkUpdateGrievanceAssigneeDocument, baseOptions);
      }
export type BulkUpdateGrievanceAssigneeMutationHookResult = ReturnType<typeof useBulkUpdateGrievanceAssigneeMutation>;
export type BulkUpdateGrievanceAssigneeMutationResult = ApolloReactCommon.MutationResult<BulkUpdateGrievanceAssigneeMutation>;
export type BulkUpdateGrievanceAssigneeMutationOptions = ApolloReactCommon.BaseMutationOptions<BulkUpdateGrievanceAssigneeMutation, BulkUpdateGrievanceAssigneeMutationVariables>;
export const CreateGrievanceDocument = gql`
    mutation CreateGrievance($input: CreateGrievanceTicketInput!) {
  createGrievanceTicket(input: $input) {
    grievanceTickets {
      id
      category
    }
  }
}
    `;
export type CreateGrievanceMutationFn = ApolloReactCommon.MutationFunction<CreateGrievanceMutation, CreateGrievanceMutationVariables>;
export type CreateGrievanceComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CreateGrievanceMutation, CreateGrievanceMutationVariables>, 'mutation'>;

    export const CreateGrievanceComponent = (props: CreateGrievanceComponentProps) => (
      <ApolloReactComponents.Mutation<CreateGrievanceMutation, CreateGrievanceMutationVariables> mutation={CreateGrievanceDocument} {...props} />
    );
    
export type CreateGrievanceProps<TChildProps = {}> = ApolloReactHoc.MutateProps<CreateGrievanceMutation, CreateGrievanceMutationVariables> & TChildProps;
export function withCreateGrievance<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  CreateGrievanceMutation,
  CreateGrievanceMutationVariables,
  CreateGrievanceProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, CreateGrievanceMutation, CreateGrievanceMutationVariables, CreateGrievanceProps<TChildProps>>(CreateGrievanceDocument, {
      alias: 'createGrievance',
      ...operationOptions
    });
};

/**
 * __useCreateGrievanceMutation__
 *
 * To run a mutation, you first call `useCreateGrievanceMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateGrievanceMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createGrievanceMutation, { data, loading, error }] = useCreateGrievanceMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateGrievanceMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateGrievanceMutation, CreateGrievanceMutationVariables>) {
        return ApolloReactHooks.useMutation<CreateGrievanceMutation, CreateGrievanceMutationVariables>(CreateGrievanceDocument, baseOptions);
      }
export type CreateGrievanceMutationHookResult = ReturnType<typeof useCreateGrievanceMutation>;
export type CreateGrievanceMutationResult = ApolloReactCommon.MutationResult<CreateGrievanceMutation>;
export type CreateGrievanceMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateGrievanceMutation, CreateGrievanceMutationVariables>;
export const CreateGrievanceTicketNoteDocument = gql`
    mutation CreateGrievanceTicketNote($noteInput: CreateTicketNoteInput!) {
  createTicketNote(noteInput: $noteInput) {
    grievanceTicketNote {
      id
      createdAt
      updatedAt
      createdBy {
        firstName
        lastName
        username
        email
      }
    }
  }
}
    `;
export type CreateGrievanceTicketNoteMutationFn = ApolloReactCommon.MutationFunction<CreateGrievanceTicketNoteMutation, CreateGrievanceTicketNoteMutationVariables>;
export type CreateGrievanceTicketNoteComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CreateGrievanceTicketNoteMutation, CreateGrievanceTicketNoteMutationVariables>, 'mutation'>;

    export const CreateGrievanceTicketNoteComponent = (props: CreateGrievanceTicketNoteComponentProps) => (
      <ApolloReactComponents.Mutation<CreateGrievanceTicketNoteMutation, CreateGrievanceTicketNoteMutationVariables> mutation={CreateGrievanceTicketNoteDocument} {...props} />
    );
    
export type CreateGrievanceTicketNoteProps<TChildProps = {}> = ApolloReactHoc.MutateProps<CreateGrievanceTicketNoteMutation, CreateGrievanceTicketNoteMutationVariables> & TChildProps;
export function withCreateGrievanceTicketNote<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  CreateGrievanceTicketNoteMutation,
  CreateGrievanceTicketNoteMutationVariables,
  CreateGrievanceTicketNoteProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, CreateGrievanceTicketNoteMutation, CreateGrievanceTicketNoteMutationVariables, CreateGrievanceTicketNoteProps<TChildProps>>(CreateGrievanceTicketNoteDocument, {
      alias: 'createGrievanceTicketNote',
      ...operationOptions
    });
};

/**
 * __useCreateGrievanceTicketNoteMutation__
 *
 * To run a mutation, you first call `useCreateGrievanceTicketNoteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateGrievanceTicketNoteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createGrievanceTicketNoteMutation, { data, loading, error }] = useCreateGrievanceTicketNoteMutation({
 *   variables: {
 *      noteInput: // value for 'noteInput'
 *   },
 * });
 */
export function useCreateGrievanceTicketNoteMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateGrievanceTicketNoteMutation, CreateGrievanceTicketNoteMutationVariables>) {
        return ApolloReactHooks.useMutation<CreateGrievanceTicketNoteMutation, CreateGrievanceTicketNoteMutationVariables>(CreateGrievanceTicketNoteDocument, baseOptions);
      }
export type CreateGrievanceTicketNoteMutationHookResult = ReturnType<typeof useCreateGrievanceTicketNoteMutation>;
export type CreateGrievanceTicketNoteMutationResult = ApolloReactCommon.MutationResult<CreateGrievanceTicketNoteMutation>;
export type CreateGrievanceTicketNoteMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateGrievanceTicketNoteMutation, CreateGrievanceTicketNoteMutationVariables>;
export const GrievanceTicketStatusChangeDocument = gql`
    mutation GrievanceTicketStatusChange($grievanceTicketId: ID, $status: Int) {
  grievanceStatusChange(grievanceTicketId: $grievanceTicketId, status: $status) {
    grievanceTicket {
      ...grievanceTicketDetailed
    }
  }
}
    ${GrievanceTicketDetailedFragmentDoc}`;
export type GrievanceTicketStatusChangeMutationFn = ApolloReactCommon.MutationFunction<GrievanceTicketStatusChangeMutation, GrievanceTicketStatusChangeMutationVariables>;
export type GrievanceTicketStatusChangeComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<GrievanceTicketStatusChangeMutation, GrievanceTicketStatusChangeMutationVariables>, 'mutation'>;

    export const GrievanceTicketStatusChangeComponent = (props: GrievanceTicketStatusChangeComponentProps) => (
      <ApolloReactComponents.Mutation<GrievanceTicketStatusChangeMutation, GrievanceTicketStatusChangeMutationVariables> mutation={GrievanceTicketStatusChangeDocument} {...props} />
    );
    
export type GrievanceTicketStatusChangeProps<TChildProps = {}> = ApolloReactHoc.MutateProps<GrievanceTicketStatusChangeMutation, GrievanceTicketStatusChangeMutationVariables> & TChildProps;
export function withGrievanceTicketStatusChange<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GrievanceTicketStatusChangeMutation,
  GrievanceTicketStatusChangeMutationVariables,
  GrievanceTicketStatusChangeProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, GrievanceTicketStatusChangeMutation, GrievanceTicketStatusChangeMutationVariables, GrievanceTicketStatusChangeProps<TChildProps>>(GrievanceTicketStatusChangeDocument, {
      alias: 'grievanceTicketStatusChange',
      ...operationOptions
    });
};

/**
 * __useGrievanceTicketStatusChangeMutation__
 *
 * To run a mutation, you first call `useGrievanceTicketStatusChangeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useGrievanceTicketStatusChangeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [grievanceTicketStatusChangeMutation, { data, loading, error }] = useGrievanceTicketStatusChangeMutation({
 *   variables: {
 *      grievanceTicketId: // value for 'grievanceTicketId'
 *      status: // value for 'status'
 *   },
 * });
 */
export function useGrievanceTicketStatusChangeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GrievanceTicketStatusChangeMutation, GrievanceTicketStatusChangeMutationVariables>) {
        return ApolloReactHooks.useMutation<GrievanceTicketStatusChangeMutation, GrievanceTicketStatusChangeMutationVariables>(GrievanceTicketStatusChangeDocument, baseOptions);
      }
export type GrievanceTicketStatusChangeMutationHookResult = ReturnType<typeof useGrievanceTicketStatusChangeMutation>;
export type GrievanceTicketStatusChangeMutationResult = ApolloReactCommon.MutationResult<GrievanceTicketStatusChangeMutation>;
export type GrievanceTicketStatusChangeMutationOptions = ApolloReactCommon.BaseMutationOptions<GrievanceTicketStatusChangeMutation, GrievanceTicketStatusChangeMutationVariables>;
export const ReassignRoleGrievanceDocument = gql`
    mutation ReassignRoleGrievance($grievanceTicketId: ID!, $householdId: ID!, $individualId: ID!, $newIndividualId: ID, $role: String!) {
  reassignRole(grievanceTicketId: $grievanceTicketId, householdId: $householdId, individualId: $individualId, newIndividualId: $newIndividualId, role: $role) {
    household {
      id
      unicefId
    }
    individual {
      id
      unicefId
    }
  }
}
    `;
export type ReassignRoleGrievanceMutationFn = ApolloReactCommon.MutationFunction<ReassignRoleGrievanceMutation, ReassignRoleGrievanceMutationVariables>;
export type ReassignRoleGrievanceComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<ReassignRoleGrievanceMutation, ReassignRoleGrievanceMutationVariables>, 'mutation'>;

    export const ReassignRoleGrievanceComponent = (props: ReassignRoleGrievanceComponentProps) => (
      <ApolloReactComponents.Mutation<ReassignRoleGrievanceMutation, ReassignRoleGrievanceMutationVariables> mutation={ReassignRoleGrievanceDocument} {...props} />
    );
    
export type ReassignRoleGrievanceProps<TChildProps = {}> = ApolloReactHoc.MutateProps<ReassignRoleGrievanceMutation, ReassignRoleGrievanceMutationVariables> & TChildProps;
export function withReassignRoleGrievance<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ReassignRoleGrievanceMutation,
  ReassignRoleGrievanceMutationVariables,
  ReassignRoleGrievanceProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, ReassignRoleGrievanceMutation, ReassignRoleGrievanceMutationVariables, ReassignRoleGrievanceProps<TChildProps>>(ReassignRoleGrievanceDocument, {
      alias: 'reassignRoleGrievance',
      ...operationOptions
    });
};

/**
 * __useReassignRoleGrievanceMutation__
 *
 * To run a mutation, you first call `useReassignRoleGrievanceMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useReassignRoleGrievanceMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [reassignRoleGrievanceMutation, { data, loading, error }] = useReassignRoleGrievanceMutation({
 *   variables: {
 *      grievanceTicketId: // value for 'grievanceTicketId'
 *      householdId: // value for 'householdId'
 *      individualId: // value for 'individualId'
 *      newIndividualId: // value for 'newIndividualId'
 *      role: // value for 'role'
 *   },
 * });
 */
export function useReassignRoleGrievanceMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ReassignRoleGrievanceMutation, ReassignRoleGrievanceMutationVariables>) {
        return ApolloReactHooks.useMutation<ReassignRoleGrievanceMutation, ReassignRoleGrievanceMutationVariables>(ReassignRoleGrievanceDocument, baseOptions);
      }
export type ReassignRoleGrievanceMutationHookResult = ReturnType<typeof useReassignRoleGrievanceMutation>;
export type ReassignRoleGrievanceMutationResult = ApolloReactCommon.MutationResult<ReassignRoleGrievanceMutation>;
export type ReassignRoleGrievanceMutationOptions = ApolloReactCommon.BaseMutationOptions<ReassignRoleGrievanceMutation, ReassignRoleGrievanceMutationVariables>;
export const UpdateGrievanceDocument = gql`
    mutation UpdateGrievance($input: UpdateGrievanceTicketInput!) {
  updateGrievanceTicket(input: $input) {
    grievanceTicket {
      id
    }
  }
}
    `;
export type UpdateGrievanceMutationFn = ApolloReactCommon.MutationFunction<UpdateGrievanceMutation, UpdateGrievanceMutationVariables>;
export type UpdateGrievanceComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<UpdateGrievanceMutation, UpdateGrievanceMutationVariables>, 'mutation'>;

    export const UpdateGrievanceComponent = (props: UpdateGrievanceComponentProps) => (
      <ApolloReactComponents.Mutation<UpdateGrievanceMutation, UpdateGrievanceMutationVariables> mutation={UpdateGrievanceDocument} {...props} />
    );
    
export type UpdateGrievanceProps<TChildProps = {}> = ApolloReactHoc.MutateProps<UpdateGrievanceMutation, UpdateGrievanceMutationVariables> & TChildProps;
export function withUpdateGrievance<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  UpdateGrievanceMutation,
  UpdateGrievanceMutationVariables,
  UpdateGrievanceProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, UpdateGrievanceMutation, UpdateGrievanceMutationVariables, UpdateGrievanceProps<TChildProps>>(UpdateGrievanceDocument, {
      alias: 'updateGrievance',
      ...operationOptions
    });
};

/**
 * __useUpdateGrievanceMutation__
 *
 * To run a mutation, you first call `useUpdateGrievanceMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateGrievanceMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateGrievanceMutation, { data, loading, error }] = useUpdateGrievanceMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateGrievanceMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateGrievanceMutation, UpdateGrievanceMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateGrievanceMutation, UpdateGrievanceMutationVariables>(UpdateGrievanceDocument, baseOptions);
      }
export type UpdateGrievanceMutationHookResult = ReturnType<typeof useUpdateGrievanceMutation>;
export type UpdateGrievanceMutationResult = ApolloReactCommon.MutationResult<UpdateGrievanceMutation>;
export type UpdateGrievanceMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateGrievanceMutation, UpdateGrievanceMutationVariables>;
export const ActionPpDocument = gql`
    mutation ActionPP($input: ActionPaymentPlanInput!) {
  actionPaymentPlanMutation(input: $input) {
    paymentPlan {
      id
      status
    }
  }
}
    `;
export type ActionPpMutationFn = ApolloReactCommon.MutationFunction<ActionPpMutation, ActionPpMutationVariables>;
export type ActionPpComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<ActionPpMutation, ActionPpMutationVariables>, 'mutation'>;

    export const ActionPpComponent = (props: ActionPpComponentProps) => (
      <ApolloReactComponents.Mutation<ActionPpMutation, ActionPpMutationVariables> mutation={ActionPpDocument} {...props} />
    );
    
export type ActionPpProps<TChildProps = {}> = ApolloReactHoc.MutateProps<ActionPpMutation, ActionPpMutationVariables> & TChildProps;
export function withActionPp<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ActionPpMutation,
  ActionPpMutationVariables,
  ActionPpProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, ActionPpMutation, ActionPpMutationVariables, ActionPpProps<TChildProps>>(ActionPpDocument, {
      alias: 'actionPp',
      ...operationOptions
    });
};

/**
 * __useActionPpMutation__
 *
 * To run a mutation, you first call `useActionPpMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useActionPpMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [actionPpMutation, { data, loading, error }] = useActionPpMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useActionPpMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ActionPpMutation, ActionPpMutationVariables>) {
        return ApolloReactHooks.useMutation<ActionPpMutation, ActionPpMutationVariables>(ActionPpDocument, baseOptions);
      }
export type ActionPpMutationHookResult = ReturnType<typeof useActionPpMutation>;
export type ActionPpMutationResult = ApolloReactCommon.MutationResult<ActionPpMutation>;
export type ActionPpMutationOptions = ApolloReactCommon.BaseMutationOptions<ActionPpMutation, ActionPpMutationVariables>;
export const AssignFspToDeliveryMechDocument = gql`
    mutation AssignFspToDeliveryMech($input: AssignFspToDeliveryMechanismInput!) {
  assignFspToDeliveryMechanism(input: $input) {
    paymentPlan {
      id
      deliveryMechanisms {
        id
        name
        fsp {
          id
          name
        }
      }
    }
  }
}
    `;
export type AssignFspToDeliveryMechMutationFn = ApolloReactCommon.MutationFunction<AssignFspToDeliveryMechMutation, AssignFspToDeliveryMechMutationVariables>;
export type AssignFspToDeliveryMechComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<AssignFspToDeliveryMechMutation, AssignFspToDeliveryMechMutationVariables>, 'mutation'>;

    export const AssignFspToDeliveryMechComponent = (props: AssignFspToDeliveryMechComponentProps) => (
      <ApolloReactComponents.Mutation<AssignFspToDeliveryMechMutation, AssignFspToDeliveryMechMutationVariables> mutation={AssignFspToDeliveryMechDocument} {...props} />
    );
    
export type AssignFspToDeliveryMechProps<TChildProps = {}> = ApolloReactHoc.MutateProps<AssignFspToDeliveryMechMutation, AssignFspToDeliveryMechMutationVariables> & TChildProps;
export function withAssignFspToDeliveryMech<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AssignFspToDeliveryMechMutation,
  AssignFspToDeliveryMechMutationVariables,
  AssignFspToDeliveryMechProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, AssignFspToDeliveryMechMutation, AssignFspToDeliveryMechMutationVariables, AssignFspToDeliveryMechProps<TChildProps>>(AssignFspToDeliveryMechDocument, {
      alias: 'assignFspToDeliveryMech',
      ...operationOptions
    });
};

/**
 * __useAssignFspToDeliveryMechMutation__
 *
 * To run a mutation, you first call `useAssignFspToDeliveryMechMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAssignFspToDeliveryMechMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [assignFspToDeliveryMechMutation, { data, loading, error }] = useAssignFspToDeliveryMechMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAssignFspToDeliveryMechMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AssignFspToDeliveryMechMutation, AssignFspToDeliveryMechMutationVariables>) {
        return ApolloReactHooks.useMutation<AssignFspToDeliveryMechMutation, AssignFspToDeliveryMechMutationVariables>(AssignFspToDeliveryMechDocument, baseOptions);
      }
export type AssignFspToDeliveryMechMutationHookResult = ReturnType<typeof useAssignFspToDeliveryMechMutation>;
export type AssignFspToDeliveryMechMutationResult = ApolloReactCommon.MutationResult<AssignFspToDeliveryMechMutation>;
export type AssignFspToDeliveryMechMutationOptions = ApolloReactCommon.BaseMutationOptions<AssignFspToDeliveryMechMutation, AssignFspToDeliveryMechMutationVariables>;
export const ChooseDeliveryMechForPaymentPlanDocument = gql`
    mutation ChooseDeliveryMechForPaymentPlan($input: ChooseDeliveryMechanismsForPaymentPlanInput!) {
  chooseDeliveryMechanismsForPaymentPlan(input: $input) {
    paymentPlan {
      id
      deliveryMechanisms {
        id
        name
        fsp {
          id
          name
        }
      }
    }
  }
}
    `;
export type ChooseDeliveryMechForPaymentPlanMutationFn = ApolloReactCommon.MutationFunction<ChooseDeliveryMechForPaymentPlanMutation, ChooseDeliveryMechForPaymentPlanMutationVariables>;
export type ChooseDeliveryMechForPaymentPlanComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<ChooseDeliveryMechForPaymentPlanMutation, ChooseDeliveryMechForPaymentPlanMutationVariables>, 'mutation'>;

    export const ChooseDeliveryMechForPaymentPlanComponent = (props: ChooseDeliveryMechForPaymentPlanComponentProps) => (
      <ApolloReactComponents.Mutation<ChooseDeliveryMechForPaymentPlanMutation, ChooseDeliveryMechForPaymentPlanMutationVariables> mutation={ChooseDeliveryMechForPaymentPlanDocument} {...props} />
    );
    
export type ChooseDeliveryMechForPaymentPlanProps<TChildProps = {}> = ApolloReactHoc.MutateProps<ChooseDeliveryMechForPaymentPlanMutation, ChooseDeliveryMechForPaymentPlanMutationVariables> & TChildProps;
export function withChooseDeliveryMechForPaymentPlan<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ChooseDeliveryMechForPaymentPlanMutation,
  ChooseDeliveryMechForPaymentPlanMutationVariables,
  ChooseDeliveryMechForPaymentPlanProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, ChooseDeliveryMechForPaymentPlanMutation, ChooseDeliveryMechForPaymentPlanMutationVariables, ChooseDeliveryMechForPaymentPlanProps<TChildProps>>(ChooseDeliveryMechForPaymentPlanDocument, {
      alias: 'chooseDeliveryMechForPaymentPlan',
      ...operationOptions
    });
};

/**
 * __useChooseDeliveryMechForPaymentPlanMutation__
 *
 * To run a mutation, you first call `useChooseDeliveryMechForPaymentPlanMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useChooseDeliveryMechForPaymentPlanMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [chooseDeliveryMechForPaymentPlanMutation, { data, loading, error }] = useChooseDeliveryMechForPaymentPlanMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useChooseDeliveryMechForPaymentPlanMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ChooseDeliveryMechForPaymentPlanMutation, ChooseDeliveryMechForPaymentPlanMutationVariables>) {
        return ApolloReactHooks.useMutation<ChooseDeliveryMechForPaymentPlanMutation, ChooseDeliveryMechForPaymentPlanMutationVariables>(ChooseDeliveryMechForPaymentPlanDocument, baseOptions);
      }
export type ChooseDeliveryMechForPaymentPlanMutationHookResult = ReturnType<typeof useChooseDeliveryMechForPaymentPlanMutation>;
export type ChooseDeliveryMechForPaymentPlanMutationResult = ApolloReactCommon.MutationResult<ChooseDeliveryMechForPaymentPlanMutation>;
export type ChooseDeliveryMechForPaymentPlanMutationOptions = ApolloReactCommon.BaseMutationOptions<ChooseDeliveryMechForPaymentPlanMutation, ChooseDeliveryMechForPaymentPlanMutationVariables>;
export const CreateFollowUpPpDocument = gql`
    mutation CreateFollowUpPP($dispersionStartDate: Date!, $dispersionEndDate: Date!, $paymentPlanId: ID!) {
  createFollowUpPaymentPlan(dispersionStartDate: $dispersionStartDate, dispersionEndDate: $dispersionEndDate, paymentPlanId: $paymentPlanId) {
    paymentPlan {
      id
      unicefId
    }
  }
}
    `;
export type CreateFollowUpPpMutationFn = ApolloReactCommon.MutationFunction<CreateFollowUpPpMutation, CreateFollowUpPpMutationVariables>;
export type CreateFollowUpPpComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CreateFollowUpPpMutation, CreateFollowUpPpMutationVariables>, 'mutation'>;

    export const CreateFollowUpPpComponent = (props: CreateFollowUpPpComponentProps) => (
      <ApolloReactComponents.Mutation<CreateFollowUpPpMutation, CreateFollowUpPpMutationVariables> mutation={CreateFollowUpPpDocument} {...props} />
    );
    
export type CreateFollowUpPpProps<TChildProps = {}> = ApolloReactHoc.MutateProps<CreateFollowUpPpMutation, CreateFollowUpPpMutationVariables> & TChildProps;
export function withCreateFollowUpPp<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  CreateFollowUpPpMutation,
  CreateFollowUpPpMutationVariables,
  CreateFollowUpPpProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, CreateFollowUpPpMutation, CreateFollowUpPpMutationVariables, CreateFollowUpPpProps<TChildProps>>(CreateFollowUpPpDocument, {
      alias: 'createFollowUpPp',
      ...operationOptions
    });
};

/**
 * __useCreateFollowUpPpMutation__
 *
 * To run a mutation, you first call `useCreateFollowUpPpMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateFollowUpPpMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createFollowUpPpMutation, { data, loading, error }] = useCreateFollowUpPpMutation({
 *   variables: {
 *      dispersionStartDate: // value for 'dispersionStartDate'
 *      dispersionEndDate: // value for 'dispersionEndDate'
 *      paymentPlanId: // value for 'paymentPlanId'
 *   },
 * });
 */
export function useCreateFollowUpPpMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateFollowUpPpMutation, CreateFollowUpPpMutationVariables>) {
        return ApolloReactHooks.useMutation<CreateFollowUpPpMutation, CreateFollowUpPpMutationVariables>(CreateFollowUpPpDocument, baseOptions);
      }
export type CreateFollowUpPpMutationHookResult = ReturnType<typeof useCreateFollowUpPpMutation>;
export type CreateFollowUpPpMutationResult = ApolloReactCommon.MutationResult<CreateFollowUpPpMutation>;
export type CreateFollowUpPpMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateFollowUpPpMutation, CreateFollowUpPpMutationVariables>;
export const CreatePpDocument = gql`
    mutation CreatePP($input: CreatePaymentPlanInput!) {
  createPaymentPlan(input: $input) {
    paymentPlan {
      id
    }
  }
}
    `;
export type CreatePpMutationFn = ApolloReactCommon.MutationFunction<CreatePpMutation, CreatePpMutationVariables>;
export type CreatePpComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CreatePpMutation, CreatePpMutationVariables>, 'mutation'>;

    export const CreatePpComponent = (props: CreatePpComponentProps) => (
      <ApolloReactComponents.Mutation<CreatePpMutation, CreatePpMutationVariables> mutation={CreatePpDocument} {...props} />
    );
    
export type CreatePpProps<TChildProps = {}> = ApolloReactHoc.MutateProps<CreatePpMutation, CreatePpMutationVariables> & TChildProps;
export function withCreatePp<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  CreatePpMutation,
  CreatePpMutationVariables,
  CreatePpProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, CreatePpMutation, CreatePpMutationVariables, CreatePpProps<TChildProps>>(CreatePpDocument, {
      alias: 'createPp',
      ...operationOptions
    });
};

/**
 * __useCreatePpMutation__
 *
 * To run a mutation, you first call `useCreatePpMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreatePpMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createPpMutation, { data, loading, error }] = useCreatePpMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreatePpMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreatePpMutation, CreatePpMutationVariables>) {
        return ApolloReactHooks.useMutation<CreatePpMutation, CreatePpMutationVariables>(CreatePpDocument, baseOptions);
      }
export type CreatePpMutationHookResult = ReturnType<typeof useCreatePpMutation>;
export type CreatePpMutationResult = ApolloReactCommon.MutationResult<CreatePpMutation>;
export type CreatePpMutationOptions = ApolloReactCommon.BaseMutationOptions<CreatePpMutation, CreatePpMutationVariables>;
export const DeletePpDocument = gql`
    mutation DeletePP($paymentPlanId: ID!) {
  deletePaymentPlan(paymentPlanId: $paymentPlanId) {
    paymentPlan {
      id
      status
    }
  }
}
    `;
export type DeletePpMutationFn = ApolloReactCommon.MutationFunction<DeletePpMutation, DeletePpMutationVariables>;
export type DeletePpComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<DeletePpMutation, DeletePpMutationVariables>, 'mutation'>;

    export const DeletePpComponent = (props: DeletePpComponentProps) => (
      <ApolloReactComponents.Mutation<DeletePpMutation, DeletePpMutationVariables> mutation={DeletePpDocument} {...props} />
    );
    
export type DeletePpProps<TChildProps = {}> = ApolloReactHoc.MutateProps<DeletePpMutation, DeletePpMutationVariables> & TChildProps;
export function withDeletePp<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  DeletePpMutation,
  DeletePpMutationVariables,
  DeletePpProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, DeletePpMutation, DeletePpMutationVariables, DeletePpProps<TChildProps>>(DeletePpDocument, {
      alias: 'deletePp',
      ...operationOptions
    });
};

/**
 * __useDeletePpMutation__
 *
 * To run a mutation, you first call `useDeletePpMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeletePpMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deletePpMutation, { data, loading, error }] = useDeletePpMutation({
 *   variables: {
 *      paymentPlanId: // value for 'paymentPlanId'
 *   },
 * });
 */
export function useDeletePpMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeletePpMutation, DeletePpMutationVariables>) {
        return ApolloReactHooks.useMutation<DeletePpMutation, DeletePpMutationVariables>(DeletePpDocument, baseOptions);
      }
export type DeletePpMutationHookResult = ReturnType<typeof useDeletePpMutation>;
export type DeletePpMutationResult = ApolloReactCommon.MutationResult<DeletePpMutation>;
export type DeletePpMutationOptions = ApolloReactCommon.BaseMutationOptions<DeletePpMutation, DeletePpMutationVariables>;
export const UpdatePpDocument = gql`
    mutation UpdatePP($input: UpdatePaymentPlanInput!) {
  updatePaymentPlan(input: $input) {
    paymentPlan {
      id
    }
  }
}
    `;
export type UpdatePpMutationFn = ApolloReactCommon.MutationFunction<UpdatePpMutation, UpdatePpMutationVariables>;
export type UpdatePpComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<UpdatePpMutation, UpdatePpMutationVariables>, 'mutation'>;

    export const UpdatePpComponent = (props: UpdatePpComponentProps) => (
      <ApolloReactComponents.Mutation<UpdatePpMutation, UpdatePpMutationVariables> mutation={UpdatePpDocument} {...props} />
    );
    
export type UpdatePpProps<TChildProps = {}> = ApolloReactHoc.MutateProps<UpdatePpMutation, UpdatePpMutationVariables> & TChildProps;
export function withUpdatePp<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  UpdatePpMutation,
  UpdatePpMutationVariables,
  UpdatePpProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, UpdatePpMutation, UpdatePpMutationVariables, UpdatePpProps<TChildProps>>(UpdatePpDocument, {
      alias: 'updatePp',
      ...operationOptions
    });
};

/**
 * __useUpdatePpMutation__
 *
 * To run a mutation, you first call `useUpdatePpMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdatePpMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updatePpMutation, { data, loading, error }] = useUpdatePpMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdatePpMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdatePpMutation, UpdatePpMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdatePpMutation, UpdatePpMutationVariables>(UpdatePpDocument, baseOptions);
      }
export type UpdatePpMutationHookResult = ReturnType<typeof useUpdatePpMutation>;
export type UpdatePpMutationResult = ApolloReactCommon.MutationResult<UpdatePpMutation>;
export type UpdatePpMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdatePpMutation, UpdatePpMutationVariables>;
export const ExcludeHouseholdsPpDocument = gql`
    mutation ExcludeHouseholdsPP($paymentPlanId: ID!, $excludedHouseholdsIds: [String]!, $exclusionReason: String) {
  excludeHouseholds(paymentPlanId: $paymentPlanId, excludedHouseholdsIds: $excludedHouseholdsIds, exclusionReason: $exclusionReason) {
    paymentPlan {
      id
      status
      backgroundActionStatus
      excludeHouseholdError
      exclusionReason
      excludedHouseholds {
        id
        unicefId
      }
    }
  }
}
    `;
export type ExcludeHouseholdsPpMutationFn = ApolloReactCommon.MutationFunction<ExcludeHouseholdsPpMutation, ExcludeHouseholdsPpMutationVariables>;
export type ExcludeHouseholdsPpComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<ExcludeHouseholdsPpMutation, ExcludeHouseholdsPpMutationVariables>, 'mutation'>;

    export const ExcludeHouseholdsPpComponent = (props: ExcludeHouseholdsPpComponentProps) => (
      <ApolloReactComponents.Mutation<ExcludeHouseholdsPpMutation, ExcludeHouseholdsPpMutationVariables> mutation={ExcludeHouseholdsPpDocument} {...props} />
    );
    
export type ExcludeHouseholdsPpProps<TChildProps = {}> = ApolloReactHoc.MutateProps<ExcludeHouseholdsPpMutation, ExcludeHouseholdsPpMutationVariables> & TChildProps;
export function withExcludeHouseholdsPp<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ExcludeHouseholdsPpMutation,
  ExcludeHouseholdsPpMutationVariables,
  ExcludeHouseholdsPpProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, ExcludeHouseholdsPpMutation, ExcludeHouseholdsPpMutationVariables, ExcludeHouseholdsPpProps<TChildProps>>(ExcludeHouseholdsPpDocument, {
      alias: 'excludeHouseholdsPp',
      ...operationOptions
    });
};

/**
 * __useExcludeHouseholdsPpMutation__
 *
 * To run a mutation, you first call `useExcludeHouseholdsPpMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useExcludeHouseholdsPpMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [excludeHouseholdsPpMutation, { data, loading, error }] = useExcludeHouseholdsPpMutation({
 *   variables: {
 *      paymentPlanId: // value for 'paymentPlanId'
 *      excludedHouseholdsIds: // value for 'excludedHouseholdsIds'
 *      exclusionReason: // value for 'exclusionReason'
 *   },
 * });
 */
export function useExcludeHouseholdsPpMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ExcludeHouseholdsPpMutation, ExcludeHouseholdsPpMutationVariables>) {
        return ApolloReactHooks.useMutation<ExcludeHouseholdsPpMutation, ExcludeHouseholdsPpMutationVariables>(ExcludeHouseholdsPpDocument, baseOptions);
      }
export type ExcludeHouseholdsPpMutationHookResult = ReturnType<typeof useExcludeHouseholdsPpMutation>;
export type ExcludeHouseholdsPpMutationResult = ApolloReactCommon.MutationResult<ExcludeHouseholdsPpMutation>;
export type ExcludeHouseholdsPpMutationOptions = ApolloReactCommon.BaseMutationOptions<ExcludeHouseholdsPpMutation, ExcludeHouseholdsPpMutationVariables>;
export const ExportPdfPpSummaryDocument = gql`
    mutation exportPdfPPSummary($paymentPlanId: ID!) {
  exportPdfPaymentPlanSummary(paymentPlanId: $paymentPlanId) {
    paymentPlan {
      id
    }
  }
}
    `;
export type ExportPdfPpSummaryMutationFn = ApolloReactCommon.MutationFunction<ExportPdfPpSummaryMutation, ExportPdfPpSummaryMutationVariables>;
export type ExportPdfPpSummaryComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<ExportPdfPpSummaryMutation, ExportPdfPpSummaryMutationVariables>, 'mutation'>;

    export const ExportPdfPpSummaryComponent = (props: ExportPdfPpSummaryComponentProps) => (
      <ApolloReactComponents.Mutation<ExportPdfPpSummaryMutation, ExportPdfPpSummaryMutationVariables> mutation={ExportPdfPpSummaryDocument} {...props} />
    );
    
export type ExportPdfPpSummaryProps<TChildProps = {}> = ApolloReactHoc.MutateProps<ExportPdfPpSummaryMutation, ExportPdfPpSummaryMutationVariables> & TChildProps;
export function withExportPdfPpSummary<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ExportPdfPpSummaryMutation,
  ExportPdfPpSummaryMutationVariables,
  ExportPdfPpSummaryProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, ExportPdfPpSummaryMutation, ExportPdfPpSummaryMutationVariables, ExportPdfPpSummaryProps<TChildProps>>(ExportPdfPpSummaryDocument, {
      alias: 'exportPdfPpSummary',
      ...operationOptions
    });
};

/**
 * __useExportPdfPpSummaryMutation__
 *
 * To run a mutation, you first call `useExportPdfPpSummaryMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useExportPdfPpSummaryMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [exportPdfPpSummaryMutation, { data, loading, error }] = useExportPdfPpSummaryMutation({
 *   variables: {
 *      paymentPlanId: // value for 'paymentPlanId'
 *   },
 * });
 */
export function useExportPdfPpSummaryMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ExportPdfPpSummaryMutation, ExportPdfPpSummaryMutationVariables>) {
        return ApolloReactHooks.useMutation<ExportPdfPpSummaryMutation, ExportPdfPpSummaryMutationVariables>(ExportPdfPpSummaryDocument, baseOptions);
      }
export type ExportPdfPpSummaryMutationHookResult = ReturnType<typeof useExportPdfPpSummaryMutation>;
export type ExportPdfPpSummaryMutationResult = ApolloReactCommon.MutationResult<ExportPdfPpSummaryMutation>;
export type ExportPdfPpSummaryMutationOptions = ApolloReactCommon.BaseMutationOptions<ExportPdfPpSummaryMutation, ExportPdfPpSummaryMutationVariables>;
export const ExportXlsxPpListDocument = gql`
    mutation ExportXlsxPPList($paymentPlanId: ID!) {
  exportXlsxPaymentPlanPaymentList(paymentPlanId: $paymentPlanId) {
    paymentPlan {
      id
      status
      backgroundActionStatus
    }
  }
}
    `;
export type ExportXlsxPpListMutationFn = ApolloReactCommon.MutationFunction<ExportXlsxPpListMutation, ExportXlsxPpListMutationVariables>;
export type ExportXlsxPpListComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<ExportXlsxPpListMutation, ExportXlsxPpListMutationVariables>, 'mutation'>;

    export const ExportXlsxPpListComponent = (props: ExportXlsxPpListComponentProps) => (
      <ApolloReactComponents.Mutation<ExportXlsxPpListMutation, ExportXlsxPpListMutationVariables> mutation={ExportXlsxPpListDocument} {...props} />
    );
    
export type ExportXlsxPpListProps<TChildProps = {}> = ApolloReactHoc.MutateProps<ExportXlsxPpListMutation, ExportXlsxPpListMutationVariables> & TChildProps;
export function withExportXlsxPpList<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ExportXlsxPpListMutation,
  ExportXlsxPpListMutationVariables,
  ExportXlsxPpListProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, ExportXlsxPpListMutation, ExportXlsxPpListMutationVariables, ExportXlsxPpListProps<TChildProps>>(ExportXlsxPpListDocument, {
      alias: 'exportXlsxPpList',
      ...operationOptions
    });
};

/**
 * __useExportXlsxPpListMutation__
 *
 * To run a mutation, you first call `useExportXlsxPpListMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useExportXlsxPpListMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [exportXlsxPpListMutation, { data, loading, error }] = useExportXlsxPpListMutation({
 *   variables: {
 *      paymentPlanId: // value for 'paymentPlanId'
 *   },
 * });
 */
export function useExportXlsxPpListMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ExportXlsxPpListMutation, ExportXlsxPpListMutationVariables>) {
        return ApolloReactHooks.useMutation<ExportXlsxPpListMutation, ExportXlsxPpListMutationVariables>(ExportXlsxPpListDocument, baseOptions);
      }
export type ExportXlsxPpListMutationHookResult = ReturnType<typeof useExportXlsxPpListMutation>;
export type ExportXlsxPpListMutationResult = ApolloReactCommon.MutationResult<ExportXlsxPpListMutation>;
export type ExportXlsxPpListMutationOptions = ApolloReactCommon.BaseMutationOptions<ExportXlsxPpListMutation, ExportXlsxPpListMutationVariables>;
export const ExportXlsxPpListPerFspDocument = gql`
    mutation ExportXlsxPPListPerFsp($paymentPlanId: ID!) {
  exportXlsxPaymentPlanPaymentListPerFsp(paymentPlanId: $paymentPlanId) {
    paymentPlan {
      id
      status
      backgroundActionStatus
    }
  }
}
    `;
export type ExportXlsxPpListPerFspMutationFn = ApolloReactCommon.MutationFunction<ExportXlsxPpListPerFspMutation, ExportXlsxPpListPerFspMutationVariables>;
export type ExportXlsxPpListPerFspComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<ExportXlsxPpListPerFspMutation, ExportXlsxPpListPerFspMutationVariables>, 'mutation'>;

    export const ExportXlsxPpListPerFspComponent = (props: ExportXlsxPpListPerFspComponentProps) => (
      <ApolloReactComponents.Mutation<ExportXlsxPpListPerFspMutation, ExportXlsxPpListPerFspMutationVariables> mutation={ExportXlsxPpListPerFspDocument} {...props} />
    );
    
export type ExportXlsxPpListPerFspProps<TChildProps = {}> = ApolloReactHoc.MutateProps<ExportXlsxPpListPerFspMutation, ExportXlsxPpListPerFspMutationVariables> & TChildProps;
export function withExportXlsxPpListPerFsp<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ExportXlsxPpListPerFspMutation,
  ExportXlsxPpListPerFspMutationVariables,
  ExportXlsxPpListPerFspProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, ExportXlsxPpListPerFspMutation, ExportXlsxPpListPerFspMutationVariables, ExportXlsxPpListPerFspProps<TChildProps>>(ExportXlsxPpListPerFspDocument, {
      alias: 'exportXlsxPpListPerFsp',
      ...operationOptions
    });
};

/**
 * __useExportXlsxPpListPerFspMutation__
 *
 * To run a mutation, you first call `useExportXlsxPpListPerFspMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useExportXlsxPpListPerFspMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [exportXlsxPpListPerFspMutation, { data, loading, error }] = useExportXlsxPpListPerFspMutation({
 *   variables: {
 *      paymentPlanId: // value for 'paymentPlanId'
 *   },
 * });
 */
export function useExportXlsxPpListPerFspMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ExportXlsxPpListPerFspMutation, ExportXlsxPpListPerFspMutationVariables>) {
        return ApolloReactHooks.useMutation<ExportXlsxPpListPerFspMutation, ExportXlsxPpListPerFspMutationVariables>(ExportXlsxPpListPerFspDocument, baseOptions);
      }
export type ExportXlsxPpListPerFspMutationHookResult = ReturnType<typeof useExportXlsxPpListPerFspMutation>;
export type ExportXlsxPpListPerFspMutationResult = ApolloReactCommon.MutationResult<ExportXlsxPpListPerFspMutation>;
export type ExportXlsxPpListPerFspMutationOptions = ApolloReactCommon.BaseMutationOptions<ExportXlsxPpListPerFspMutation, ExportXlsxPpListPerFspMutationVariables>;
export const ImportXlsxPpListDocument = gql`
    mutation importXlsxPPList($paymentPlanId: ID!, $file: Upload!) {
  importXlsxPaymentPlanPaymentList(paymentPlanId: $paymentPlanId, file: $file) {
    paymentPlan {
      id
      status
    }
    errors {
      sheet
      coordinates
      message
    }
  }
}
    `;
export type ImportXlsxPpListMutationFn = ApolloReactCommon.MutationFunction<ImportXlsxPpListMutation, ImportXlsxPpListMutationVariables>;
export type ImportXlsxPpListComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<ImportXlsxPpListMutation, ImportXlsxPpListMutationVariables>, 'mutation'>;

    export const ImportXlsxPpListComponent = (props: ImportXlsxPpListComponentProps) => (
      <ApolloReactComponents.Mutation<ImportXlsxPpListMutation, ImportXlsxPpListMutationVariables> mutation={ImportXlsxPpListDocument} {...props} />
    );
    
export type ImportXlsxPpListProps<TChildProps = {}> = ApolloReactHoc.MutateProps<ImportXlsxPpListMutation, ImportXlsxPpListMutationVariables> & TChildProps;
export function withImportXlsxPpList<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ImportXlsxPpListMutation,
  ImportXlsxPpListMutationVariables,
  ImportXlsxPpListProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, ImportXlsxPpListMutation, ImportXlsxPpListMutationVariables, ImportXlsxPpListProps<TChildProps>>(ImportXlsxPpListDocument, {
      alias: 'importXlsxPpList',
      ...operationOptions
    });
};

/**
 * __useImportXlsxPpListMutation__
 *
 * To run a mutation, you first call `useImportXlsxPpListMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useImportXlsxPpListMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [importXlsxPpListMutation, { data, loading, error }] = useImportXlsxPpListMutation({
 *   variables: {
 *      paymentPlanId: // value for 'paymentPlanId'
 *      file: // value for 'file'
 *   },
 * });
 */
export function useImportXlsxPpListMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ImportXlsxPpListMutation, ImportXlsxPpListMutationVariables>) {
        return ApolloReactHooks.useMutation<ImportXlsxPpListMutation, ImportXlsxPpListMutationVariables>(ImportXlsxPpListDocument, baseOptions);
      }
export type ImportXlsxPpListMutationHookResult = ReturnType<typeof useImportXlsxPpListMutation>;
export type ImportXlsxPpListMutationResult = ApolloReactCommon.MutationResult<ImportXlsxPpListMutation>;
export type ImportXlsxPpListMutationOptions = ApolloReactCommon.BaseMutationOptions<ImportXlsxPpListMutation, ImportXlsxPpListMutationVariables>;
export const ImportXlsxPpListPerFspDocument = gql`
    mutation importXlsxPPListPerFsp($paymentPlanId: ID!, $file: Upload!) {
  importXlsxPaymentPlanPaymentListPerFsp(paymentPlanId: $paymentPlanId, file: $file) {
    paymentPlan {
      id
      status
    }
    errors {
      sheet
      coordinates
      message
    }
  }
}
    `;
export type ImportXlsxPpListPerFspMutationFn = ApolloReactCommon.MutationFunction<ImportXlsxPpListPerFspMutation, ImportXlsxPpListPerFspMutationVariables>;
export type ImportXlsxPpListPerFspComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<ImportXlsxPpListPerFspMutation, ImportXlsxPpListPerFspMutationVariables>, 'mutation'>;

    export const ImportXlsxPpListPerFspComponent = (props: ImportXlsxPpListPerFspComponentProps) => (
      <ApolloReactComponents.Mutation<ImportXlsxPpListPerFspMutation, ImportXlsxPpListPerFspMutationVariables> mutation={ImportXlsxPpListPerFspDocument} {...props} />
    );
    
export type ImportXlsxPpListPerFspProps<TChildProps = {}> = ApolloReactHoc.MutateProps<ImportXlsxPpListPerFspMutation, ImportXlsxPpListPerFspMutationVariables> & TChildProps;
export function withImportXlsxPpListPerFsp<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ImportXlsxPpListPerFspMutation,
  ImportXlsxPpListPerFspMutationVariables,
  ImportXlsxPpListPerFspProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, ImportXlsxPpListPerFspMutation, ImportXlsxPpListPerFspMutationVariables, ImportXlsxPpListPerFspProps<TChildProps>>(ImportXlsxPpListPerFspDocument, {
      alias: 'importXlsxPpListPerFsp',
      ...operationOptions
    });
};

/**
 * __useImportXlsxPpListPerFspMutation__
 *
 * To run a mutation, you first call `useImportXlsxPpListPerFspMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useImportXlsxPpListPerFspMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [importXlsxPpListPerFspMutation, { data, loading, error }] = useImportXlsxPpListPerFspMutation({
 *   variables: {
 *      paymentPlanId: // value for 'paymentPlanId'
 *      file: // value for 'file'
 *   },
 * });
 */
export function useImportXlsxPpListPerFspMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ImportXlsxPpListPerFspMutation, ImportXlsxPpListPerFspMutationVariables>) {
        return ApolloReactHooks.useMutation<ImportXlsxPpListPerFspMutation, ImportXlsxPpListPerFspMutationVariables>(ImportXlsxPpListPerFspDocument, baseOptions);
      }
export type ImportXlsxPpListPerFspMutationHookResult = ReturnType<typeof useImportXlsxPpListPerFspMutation>;
export type ImportXlsxPpListPerFspMutationResult = ApolloReactCommon.MutationResult<ImportXlsxPpListPerFspMutation>;
export type ImportXlsxPpListPerFspMutationOptions = ApolloReactCommon.BaseMutationOptions<ImportXlsxPpListPerFspMutation, ImportXlsxPpListPerFspMutationVariables>;
export const MarkPayAsFailedDocument = gql`
    mutation markPayAsFailed($paymentId: ID!) {
  markPaymentAsFailed(paymentId: $paymentId) {
    payment {
      id
      unicefId
      status
      statusDate
      deliveredQuantity
      deliveryDate
    }
  }
}
    `;
export type MarkPayAsFailedMutationFn = ApolloReactCommon.MutationFunction<MarkPayAsFailedMutation, MarkPayAsFailedMutationVariables>;
export type MarkPayAsFailedComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<MarkPayAsFailedMutation, MarkPayAsFailedMutationVariables>, 'mutation'>;

    export const MarkPayAsFailedComponent = (props: MarkPayAsFailedComponentProps) => (
      <ApolloReactComponents.Mutation<MarkPayAsFailedMutation, MarkPayAsFailedMutationVariables> mutation={MarkPayAsFailedDocument} {...props} />
    );
    
export type MarkPayAsFailedProps<TChildProps = {}> = ApolloReactHoc.MutateProps<MarkPayAsFailedMutation, MarkPayAsFailedMutationVariables> & TChildProps;
export function withMarkPayAsFailed<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  MarkPayAsFailedMutation,
  MarkPayAsFailedMutationVariables,
  MarkPayAsFailedProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, MarkPayAsFailedMutation, MarkPayAsFailedMutationVariables, MarkPayAsFailedProps<TChildProps>>(MarkPayAsFailedDocument, {
      alias: 'markPayAsFailed',
      ...operationOptions
    });
};

/**
 * __useMarkPayAsFailedMutation__
 *
 * To run a mutation, you first call `useMarkPayAsFailedMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useMarkPayAsFailedMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [markPayAsFailedMutation, { data, loading, error }] = useMarkPayAsFailedMutation({
 *   variables: {
 *      paymentId: // value for 'paymentId'
 *   },
 * });
 */
export function useMarkPayAsFailedMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<MarkPayAsFailedMutation, MarkPayAsFailedMutationVariables>) {
        return ApolloReactHooks.useMutation<MarkPayAsFailedMutation, MarkPayAsFailedMutationVariables>(MarkPayAsFailedDocument, baseOptions);
      }
export type MarkPayAsFailedMutationHookResult = ReturnType<typeof useMarkPayAsFailedMutation>;
export type MarkPayAsFailedMutationResult = ApolloReactCommon.MutationResult<MarkPayAsFailedMutation>;
export type MarkPayAsFailedMutationOptions = ApolloReactCommon.BaseMutationOptions<MarkPayAsFailedMutation, MarkPayAsFailedMutationVariables>;
export const RevertMarkPayAsFailedDocument = gql`
    mutation revertMarkPayAsFailed($paymentId: ID!, $deliveredQuantity: Decimal!, $deliveryDate: Date!) {
  revertMarkPaymentAsFailed(paymentId: $paymentId, deliveredQuantity: $deliveredQuantity, deliveryDate: $deliveryDate) {
    payment {
      id
      unicefId
      status
      statusDate
      deliveredQuantity
      deliveryDate
    }
  }
}
    `;
export type RevertMarkPayAsFailedMutationFn = ApolloReactCommon.MutationFunction<RevertMarkPayAsFailedMutation, RevertMarkPayAsFailedMutationVariables>;
export type RevertMarkPayAsFailedComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<RevertMarkPayAsFailedMutation, RevertMarkPayAsFailedMutationVariables>, 'mutation'>;

    export const RevertMarkPayAsFailedComponent = (props: RevertMarkPayAsFailedComponentProps) => (
      <ApolloReactComponents.Mutation<RevertMarkPayAsFailedMutation, RevertMarkPayAsFailedMutationVariables> mutation={RevertMarkPayAsFailedDocument} {...props} />
    );
    
export type RevertMarkPayAsFailedProps<TChildProps = {}> = ApolloReactHoc.MutateProps<RevertMarkPayAsFailedMutation, RevertMarkPayAsFailedMutationVariables> & TChildProps;
export function withRevertMarkPayAsFailed<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  RevertMarkPayAsFailedMutation,
  RevertMarkPayAsFailedMutationVariables,
  RevertMarkPayAsFailedProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, RevertMarkPayAsFailedMutation, RevertMarkPayAsFailedMutationVariables, RevertMarkPayAsFailedProps<TChildProps>>(RevertMarkPayAsFailedDocument, {
      alias: 'revertMarkPayAsFailed',
      ...operationOptions
    });
};

/**
 * __useRevertMarkPayAsFailedMutation__
 *
 * To run a mutation, you first call `useRevertMarkPayAsFailedMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRevertMarkPayAsFailedMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [revertMarkPayAsFailedMutation, { data, loading, error }] = useRevertMarkPayAsFailedMutation({
 *   variables: {
 *      paymentId: // value for 'paymentId'
 *      deliveredQuantity: // value for 'deliveredQuantity'
 *      deliveryDate: // value for 'deliveryDate'
 *   },
 * });
 */
export function useRevertMarkPayAsFailedMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RevertMarkPayAsFailedMutation, RevertMarkPayAsFailedMutationVariables>) {
        return ApolloReactHooks.useMutation<RevertMarkPayAsFailedMutation, RevertMarkPayAsFailedMutationVariables>(RevertMarkPayAsFailedDocument, baseOptions);
      }
export type RevertMarkPayAsFailedMutationHookResult = ReturnType<typeof useRevertMarkPayAsFailedMutation>;
export type RevertMarkPayAsFailedMutationResult = ApolloReactCommon.MutationResult<RevertMarkPayAsFailedMutation>;
export type RevertMarkPayAsFailedMutationOptions = ApolloReactCommon.BaseMutationOptions<RevertMarkPayAsFailedMutation, RevertMarkPayAsFailedMutationVariables>;
export const SetSteficonRuleOnPpListDocument = gql`
    mutation SetSteficonRuleOnPPList($paymentPlanId: ID!, $steficonRuleId: ID!) {
  setSteficonRuleOnPaymentPlanPaymentList(paymentPlanId: $paymentPlanId, steficonRuleId: $steficonRuleId) {
    paymentPlan {
      id
      steficonRule {
        id
        rule {
          id
          name
        }
      }
    }
  }
}
    `;
export type SetSteficonRuleOnPpListMutationFn = ApolloReactCommon.MutationFunction<SetSteficonRuleOnPpListMutation, SetSteficonRuleOnPpListMutationVariables>;
export type SetSteficonRuleOnPpListComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<SetSteficonRuleOnPpListMutation, SetSteficonRuleOnPpListMutationVariables>, 'mutation'>;

    export const SetSteficonRuleOnPpListComponent = (props: SetSteficonRuleOnPpListComponentProps) => (
      <ApolloReactComponents.Mutation<SetSteficonRuleOnPpListMutation, SetSteficonRuleOnPpListMutationVariables> mutation={SetSteficonRuleOnPpListDocument} {...props} />
    );
    
export type SetSteficonRuleOnPpListProps<TChildProps = {}> = ApolloReactHoc.MutateProps<SetSteficonRuleOnPpListMutation, SetSteficonRuleOnPpListMutationVariables> & TChildProps;
export function withSetSteficonRuleOnPpList<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  SetSteficonRuleOnPpListMutation,
  SetSteficonRuleOnPpListMutationVariables,
  SetSteficonRuleOnPpListProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, SetSteficonRuleOnPpListMutation, SetSteficonRuleOnPpListMutationVariables, SetSteficonRuleOnPpListProps<TChildProps>>(SetSteficonRuleOnPpListDocument, {
      alias: 'setSteficonRuleOnPpList',
      ...operationOptions
    });
};

/**
 * __useSetSteficonRuleOnPpListMutation__
 *
 * To run a mutation, you first call `useSetSteficonRuleOnPpListMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetSteficonRuleOnPpListMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setSteficonRuleOnPpListMutation, { data, loading, error }] = useSetSteficonRuleOnPpListMutation({
 *   variables: {
 *      paymentPlanId: // value for 'paymentPlanId'
 *      steficonRuleId: // value for 'steficonRuleId'
 *   },
 * });
 */
export function useSetSteficonRuleOnPpListMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetSteficonRuleOnPpListMutation, SetSteficonRuleOnPpListMutationVariables>) {
        return ApolloReactHooks.useMutation<SetSteficonRuleOnPpListMutation, SetSteficonRuleOnPpListMutationVariables>(SetSteficonRuleOnPpListDocument, baseOptions);
      }
export type SetSteficonRuleOnPpListMutationHookResult = ReturnType<typeof useSetSteficonRuleOnPpListMutation>;
export type SetSteficonRuleOnPpListMutationResult = ApolloReactCommon.MutationResult<SetSteficonRuleOnPpListMutation>;
export type SetSteficonRuleOnPpListMutationOptions = ApolloReactCommon.BaseMutationOptions<SetSteficonRuleOnPpListMutation, SetSteficonRuleOnPpListMutationVariables>;
export const ActivatePaymentVerificationPlanDocument = gql`
    mutation ActivatePaymentVerificationPlan($paymentVerificationPlanId: ID!) {
  activatePaymentVerificationPlan(paymentVerificationPlanId: $paymentVerificationPlanId) {
    paymentPlan {
      id
      verificationPlans {
        edges {
          node {
            id
            status
            activationDate
          }
        }
      }
      paymentVerificationSummary {
        id
        status
        activationDate
      }
    }
    validationErrors
  }
}
    `;
export type ActivatePaymentVerificationPlanMutationFn = ApolloReactCommon.MutationFunction<ActivatePaymentVerificationPlanMutation, ActivatePaymentVerificationPlanMutationVariables>;
export type ActivatePaymentVerificationPlanComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<ActivatePaymentVerificationPlanMutation, ActivatePaymentVerificationPlanMutationVariables>, 'mutation'>;

    export const ActivatePaymentVerificationPlanComponent = (props: ActivatePaymentVerificationPlanComponentProps) => (
      <ApolloReactComponents.Mutation<ActivatePaymentVerificationPlanMutation, ActivatePaymentVerificationPlanMutationVariables> mutation={ActivatePaymentVerificationPlanDocument} {...props} />
    );
    
export type ActivatePaymentVerificationPlanProps<TChildProps = {}> = ApolloReactHoc.MutateProps<ActivatePaymentVerificationPlanMutation, ActivatePaymentVerificationPlanMutationVariables> & TChildProps;
export function withActivatePaymentVerificationPlan<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ActivatePaymentVerificationPlanMutation,
  ActivatePaymentVerificationPlanMutationVariables,
  ActivatePaymentVerificationPlanProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, ActivatePaymentVerificationPlanMutation, ActivatePaymentVerificationPlanMutationVariables, ActivatePaymentVerificationPlanProps<TChildProps>>(ActivatePaymentVerificationPlanDocument, {
      alias: 'activatePaymentVerificationPlan',
      ...operationOptions
    });
};

/**
 * __useActivatePaymentVerificationPlanMutation__
 *
 * To run a mutation, you first call `useActivatePaymentVerificationPlanMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useActivatePaymentVerificationPlanMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [activatePaymentVerificationPlanMutation, { data, loading, error }] = useActivatePaymentVerificationPlanMutation({
 *   variables: {
 *      paymentVerificationPlanId: // value for 'paymentVerificationPlanId'
 *   },
 * });
 */
export function useActivatePaymentVerificationPlanMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ActivatePaymentVerificationPlanMutation, ActivatePaymentVerificationPlanMutationVariables>) {
        return ApolloReactHooks.useMutation<ActivatePaymentVerificationPlanMutation, ActivatePaymentVerificationPlanMutationVariables>(ActivatePaymentVerificationPlanDocument, baseOptions);
      }
export type ActivatePaymentVerificationPlanMutationHookResult = ReturnType<typeof useActivatePaymentVerificationPlanMutation>;
export type ActivatePaymentVerificationPlanMutationResult = ApolloReactCommon.MutationResult<ActivatePaymentVerificationPlanMutation>;
export type ActivatePaymentVerificationPlanMutationOptions = ApolloReactCommon.BaseMutationOptions<ActivatePaymentVerificationPlanMutation, ActivatePaymentVerificationPlanMutationVariables>;
export const CreatePaymentVerificationPlanDocument = gql`
    mutation CreatePaymentVerificationPlan($input: CreatePaymentVerificationInput!, $version: BigInt) {
  createPaymentVerificationPlan(input: $input, version: $version) {
    paymentPlan {
      id
    }
  }
}
    `;
export type CreatePaymentVerificationPlanMutationFn = ApolloReactCommon.MutationFunction<CreatePaymentVerificationPlanMutation, CreatePaymentVerificationPlanMutationVariables>;
export type CreatePaymentVerificationPlanComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CreatePaymentVerificationPlanMutation, CreatePaymentVerificationPlanMutationVariables>, 'mutation'>;

    export const CreatePaymentVerificationPlanComponent = (props: CreatePaymentVerificationPlanComponentProps) => (
      <ApolloReactComponents.Mutation<CreatePaymentVerificationPlanMutation, CreatePaymentVerificationPlanMutationVariables> mutation={CreatePaymentVerificationPlanDocument} {...props} />
    );
    
export type CreatePaymentVerificationPlanProps<TChildProps = {}> = ApolloReactHoc.MutateProps<CreatePaymentVerificationPlanMutation, CreatePaymentVerificationPlanMutationVariables> & TChildProps;
export function withCreatePaymentVerificationPlan<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  CreatePaymentVerificationPlanMutation,
  CreatePaymentVerificationPlanMutationVariables,
  CreatePaymentVerificationPlanProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, CreatePaymentVerificationPlanMutation, CreatePaymentVerificationPlanMutationVariables, CreatePaymentVerificationPlanProps<TChildProps>>(CreatePaymentVerificationPlanDocument, {
      alias: 'createPaymentVerificationPlan',
      ...operationOptions
    });
};

/**
 * __useCreatePaymentVerificationPlanMutation__
 *
 * To run a mutation, you first call `useCreatePaymentVerificationPlanMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreatePaymentVerificationPlanMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createPaymentVerificationPlanMutation, { data, loading, error }] = useCreatePaymentVerificationPlanMutation({
 *   variables: {
 *      input: // value for 'input'
 *      version: // value for 'version'
 *   },
 * });
 */
export function useCreatePaymentVerificationPlanMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreatePaymentVerificationPlanMutation, CreatePaymentVerificationPlanMutationVariables>) {
        return ApolloReactHooks.useMutation<CreatePaymentVerificationPlanMutation, CreatePaymentVerificationPlanMutationVariables>(CreatePaymentVerificationPlanDocument, baseOptions);
      }
export type CreatePaymentVerificationPlanMutationHookResult = ReturnType<typeof useCreatePaymentVerificationPlanMutation>;
export type CreatePaymentVerificationPlanMutationResult = ApolloReactCommon.MutationResult<CreatePaymentVerificationPlanMutation>;
export type CreatePaymentVerificationPlanMutationOptions = ApolloReactCommon.BaseMutationOptions<CreatePaymentVerificationPlanMutation, CreatePaymentVerificationPlanMutationVariables>;
export const DeletePaymentVerificationPlanDocument = gql`
    mutation DeletePaymentVerificationPlan($paymentVerificationPlanId: ID!) {
  deletePaymentVerificationPlan(paymentVerificationPlanId: $paymentVerificationPlanId) {
    paymentPlan {
      id
      verificationPlans {
        totalCount
        edges {
          node {
            id
            status
            sampleSize
            receivedCount
            notReceivedCount
            respondedCount
            receivedCount
            receivedWithProblemsCount
            activationDate
          }
        }
      }
      paymentVerificationSummary {
        id
        status
      }
    }
  }
}
    `;
export type DeletePaymentVerificationPlanMutationFn = ApolloReactCommon.MutationFunction<DeletePaymentVerificationPlanMutation, DeletePaymentVerificationPlanMutationVariables>;
export type DeletePaymentVerificationPlanComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<DeletePaymentVerificationPlanMutation, DeletePaymentVerificationPlanMutationVariables>, 'mutation'>;

    export const DeletePaymentVerificationPlanComponent = (props: DeletePaymentVerificationPlanComponentProps) => (
      <ApolloReactComponents.Mutation<DeletePaymentVerificationPlanMutation, DeletePaymentVerificationPlanMutationVariables> mutation={DeletePaymentVerificationPlanDocument} {...props} />
    );
    
export type DeletePaymentVerificationPlanProps<TChildProps = {}> = ApolloReactHoc.MutateProps<DeletePaymentVerificationPlanMutation, DeletePaymentVerificationPlanMutationVariables> & TChildProps;
export function withDeletePaymentVerificationPlan<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  DeletePaymentVerificationPlanMutation,
  DeletePaymentVerificationPlanMutationVariables,
  DeletePaymentVerificationPlanProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, DeletePaymentVerificationPlanMutation, DeletePaymentVerificationPlanMutationVariables, DeletePaymentVerificationPlanProps<TChildProps>>(DeletePaymentVerificationPlanDocument, {
      alias: 'deletePaymentVerificationPlan',
      ...operationOptions
    });
};

/**
 * __useDeletePaymentVerificationPlanMutation__
 *
 * To run a mutation, you first call `useDeletePaymentVerificationPlanMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeletePaymentVerificationPlanMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deletePaymentVerificationPlanMutation, { data, loading, error }] = useDeletePaymentVerificationPlanMutation({
 *   variables: {
 *      paymentVerificationPlanId: // value for 'paymentVerificationPlanId'
 *   },
 * });
 */
export function useDeletePaymentVerificationPlanMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeletePaymentVerificationPlanMutation, DeletePaymentVerificationPlanMutationVariables>) {
        return ApolloReactHooks.useMutation<DeletePaymentVerificationPlanMutation, DeletePaymentVerificationPlanMutationVariables>(DeletePaymentVerificationPlanDocument, baseOptions);
      }
export type DeletePaymentVerificationPlanMutationHookResult = ReturnType<typeof useDeletePaymentVerificationPlanMutation>;
export type DeletePaymentVerificationPlanMutationResult = ApolloReactCommon.MutationResult<DeletePaymentVerificationPlanMutation>;
export type DeletePaymentVerificationPlanMutationOptions = ApolloReactCommon.BaseMutationOptions<DeletePaymentVerificationPlanMutation, DeletePaymentVerificationPlanMutationVariables>;
export const DiscardPaymentVerificationPlanDocument = gql`
    mutation DiscardPaymentVerificationPlan($paymentVerificationPlanId: ID!) {
  discardPaymentVerificationPlan(paymentVerificationPlanId: $paymentVerificationPlanId) {
    paymentPlan {
      id
      verificationPlans {
        totalCount
        edges {
          node {
            id
            status
            sampleSize
            receivedCount
            notReceivedCount
            respondedCount
            receivedCount
            receivedWithProblemsCount
            activationDate
          }
        }
      }
      paymentVerificationSummary {
        id
        status
      }
    }
  }
}
    `;
export type DiscardPaymentVerificationPlanMutationFn = ApolloReactCommon.MutationFunction<DiscardPaymentVerificationPlanMutation, DiscardPaymentVerificationPlanMutationVariables>;
export type DiscardPaymentVerificationPlanComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<DiscardPaymentVerificationPlanMutation, DiscardPaymentVerificationPlanMutationVariables>, 'mutation'>;

    export const DiscardPaymentVerificationPlanComponent = (props: DiscardPaymentVerificationPlanComponentProps) => (
      <ApolloReactComponents.Mutation<DiscardPaymentVerificationPlanMutation, DiscardPaymentVerificationPlanMutationVariables> mutation={DiscardPaymentVerificationPlanDocument} {...props} />
    );
    
export type DiscardPaymentVerificationPlanProps<TChildProps = {}> = ApolloReactHoc.MutateProps<DiscardPaymentVerificationPlanMutation, DiscardPaymentVerificationPlanMutationVariables> & TChildProps;
export function withDiscardPaymentVerificationPlan<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  DiscardPaymentVerificationPlanMutation,
  DiscardPaymentVerificationPlanMutationVariables,
  DiscardPaymentVerificationPlanProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, DiscardPaymentVerificationPlanMutation, DiscardPaymentVerificationPlanMutationVariables, DiscardPaymentVerificationPlanProps<TChildProps>>(DiscardPaymentVerificationPlanDocument, {
      alias: 'discardPaymentVerificationPlan',
      ...operationOptions
    });
};

/**
 * __useDiscardPaymentVerificationPlanMutation__
 *
 * To run a mutation, you first call `useDiscardPaymentVerificationPlanMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDiscardPaymentVerificationPlanMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [discardPaymentVerificationPlanMutation, { data, loading, error }] = useDiscardPaymentVerificationPlanMutation({
 *   variables: {
 *      paymentVerificationPlanId: // value for 'paymentVerificationPlanId'
 *   },
 * });
 */
export function useDiscardPaymentVerificationPlanMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DiscardPaymentVerificationPlanMutation, DiscardPaymentVerificationPlanMutationVariables>) {
        return ApolloReactHooks.useMutation<DiscardPaymentVerificationPlanMutation, DiscardPaymentVerificationPlanMutationVariables>(DiscardPaymentVerificationPlanDocument, baseOptions);
      }
export type DiscardPaymentVerificationPlanMutationHookResult = ReturnType<typeof useDiscardPaymentVerificationPlanMutation>;
export type DiscardPaymentVerificationPlanMutationResult = ApolloReactCommon.MutationResult<DiscardPaymentVerificationPlanMutation>;
export type DiscardPaymentVerificationPlanMutationOptions = ApolloReactCommon.BaseMutationOptions<DiscardPaymentVerificationPlanMutation, DiscardPaymentVerificationPlanMutationVariables>;
export const EditPaymentVerificationPlanDocument = gql`
    mutation EditPaymentVerificationPlan($input: EditPaymentVerificationInput!) {
  editPaymentVerificationPlan(input: $input) {
    paymentPlan {
      id
    }
  }
}
    `;
export type EditPaymentVerificationPlanMutationFn = ApolloReactCommon.MutationFunction<EditPaymentVerificationPlanMutation, EditPaymentVerificationPlanMutationVariables>;
export type EditPaymentVerificationPlanComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<EditPaymentVerificationPlanMutation, EditPaymentVerificationPlanMutationVariables>, 'mutation'>;

    export const EditPaymentVerificationPlanComponent = (props: EditPaymentVerificationPlanComponentProps) => (
      <ApolloReactComponents.Mutation<EditPaymentVerificationPlanMutation, EditPaymentVerificationPlanMutationVariables> mutation={EditPaymentVerificationPlanDocument} {...props} />
    );
    
export type EditPaymentVerificationPlanProps<TChildProps = {}> = ApolloReactHoc.MutateProps<EditPaymentVerificationPlanMutation, EditPaymentVerificationPlanMutationVariables> & TChildProps;
export function withEditPaymentVerificationPlan<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  EditPaymentVerificationPlanMutation,
  EditPaymentVerificationPlanMutationVariables,
  EditPaymentVerificationPlanProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, EditPaymentVerificationPlanMutation, EditPaymentVerificationPlanMutationVariables, EditPaymentVerificationPlanProps<TChildProps>>(EditPaymentVerificationPlanDocument, {
      alias: 'editPaymentVerificationPlan',
      ...operationOptions
    });
};

/**
 * __useEditPaymentVerificationPlanMutation__
 *
 * To run a mutation, you first call `useEditPaymentVerificationPlanMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useEditPaymentVerificationPlanMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [editPaymentVerificationPlanMutation, { data, loading, error }] = useEditPaymentVerificationPlanMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useEditPaymentVerificationPlanMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<EditPaymentVerificationPlanMutation, EditPaymentVerificationPlanMutationVariables>) {
        return ApolloReactHooks.useMutation<EditPaymentVerificationPlanMutation, EditPaymentVerificationPlanMutationVariables>(EditPaymentVerificationPlanDocument, baseOptions);
      }
export type EditPaymentVerificationPlanMutationHookResult = ReturnType<typeof useEditPaymentVerificationPlanMutation>;
export type EditPaymentVerificationPlanMutationResult = ApolloReactCommon.MutationResult<EditPaymentVerificationPlanMutation>;
export type EditPaymentVerificationPlanMutationOptions = ApolloReactCommon.BaseMutationOptions<EditPaymentVerificationPlanMutation, EditPaymentVerificationPlanMutationVariables>;
export const ExportXlsxPaymentVerificationPlanFileDocument = gql`
    mutation ExportXlsxPaymentVerificationPlanFile($paymentVerificationPlanId: ID!) {
  exportXlsxPaymentVerificationPlanFile(paymentVerificationPlanId: $paymentVerificationPlanId) {
    paymentPlan {
      id
    }
  }
}
    `;
export type ExportXlsxPaymentVerificationPlanFileMutationFn = ApolloReactCommon.MutationFunction<ExportXlsxPaymentVerificationPlanFileMutation, ExportXlsxPaymentVerificationPlanFileMutationVariables>;
export type ExportXlsxPaymentVerificationPlanFileComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<ExportXlsxPaymentVerificationPlanFileMutation, ExportXlsxPaymentVerificationPlanFileMutationVariables>, 'mutation'>;

    export const ExportXlsxPaymentVerificationPlanFileComponent = (props: ExportXlsxPaymentVerificationPlanFileComponentProps) => (
      <ApolloReactComponents.Mutation<ExportXlsxPaymentVerificationPlanFileMutation, ExportXlsxPaymentVerificationPlanFileMutationVariables> mutation={ExportXlsxPaymentVerificationPlanFileDocument} {...props} />
    );
    
export type ExportXlsxPaymentVerificationPlanFileProps<TChildProps = {}> = ApolloReactHoc.MutateProps<ExportXlsxPaymentVerificationPlanFileMutation, ExportXlsxPaymentVerificationPlanFileMutationVariables> & TChildProps;
export function withExportXlsxPaymentVerificationPlanFile<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ExportXlsxPaymentVerificationPlanFileMutation,
  ExportXlsxPaymentVerificationPlanFileMutationVariables,
  ExportXlsxPaymentVerificationPlanFileProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, ExportXlsxPaymentVerificationPlanFileMutation, ExportXlsxPaymentVerificationPlanFileMutationVariables, ExportXlsxPaymentVerificationPlanFileProps<TChildProps>>(ExportXlsxPaymentVerificationPlanFileDocument, {
      alias: 'exportXlsxPaymentVerificationPlanFile',
      ...operationOptions
    });
};

/**
 * __useExportXlsxPaymentVerificationPlanFileMutation__
 *
 * To run a mutation, you first call `useExportXlsxPaymentVerificationPlanFileMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useExportXlsxPaymentVerificationPlanFileMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [exportXlsxPaymentVerificationPlanFileMutation, { data, loading, error }] = useExportXlsxPaymentVerificationPlanFileMutation({
 *   variables: {
 *      paymentVerificationPlanId: // value for 'paymentVerificationPlanId'
 *   },
 * });
 */
export function useExportXlsxPaymentVerificationPlanFileMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ExportXlsxPaymentVerificationPlanFileMutation, ExportXlsxPaymentVerificationPlanFileMutationVariables>) {
        return ApolloReactHooks.useMutation<ExportXlsxPaymentVerificationPlanFileMutation, ExportXlsxPaymentVerificationPlanFileMutationVariables>(ExportXlsxPaymentVerificationPlanFileDocument, baseOptions);
      }
export type ExportXlsxPaymentVerificationPlanFileMutationHookResult = ReturnType<typeof useExportXlsxPaymentVerificationPlanFileMutation>;
export type ExportXlsxPaymentVerificationPlanFileMutationResult = ApolloReactCommon.MutationResult<ExportXlsxPaymentVerificationPlanFileMutation>;
export type ExportXlsxPaymentVerificationPlanFileMutationOptions = ApolloReactCommon.BaseMutationOptions<ExportXlsxPaymentVerificationPlanFileMutation, ExportXlsxPaymentVerificationPlanFileMutationVariables>;
export const FinishPaymentVerificationPlanDocument = gql`
    mutation FinishPaymentVerificationPlan($paymentVerificationPlanId: ID!) {
  finishPaymentVerificationPlan(paymentVerificationPlanId: $paymentVerificationPlanId) {
    paymentPlan {
      id
      verificationPlans {
        totalCount
        edges {
          node {
            id
            status
            completionDate
          }
        }
      }
      paymentVerificationSummary {
        id
        status
      }
    }
  }
}
    `;
export type FinishPaymentVerificationPlanMutationFn = ApolloReactCommon.MutationFunction<FinishPaymentVerificationPlanMutation, FinishPaymentVerificationPlanMutationVariables>;
export type FinishPaymentVerificationPlanComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<FinishPaymentVerificationPlanMutation, FinishPaymentVerificationPlanMutationVariables>, 'mutation'>;

    export const FinishPaymentVerificationPlanComponent = (props: FinishPaymentVerificationPlanComponentProps) => (
      <ApolloReactComponents.Mutation<FinishPaymentVerificationPlanMutation, FinishPaymentVerificationPlanMutationVariables> mutation={FinishPaymentVerificationPlanDocument} {...props} />
    );
    
export type FinishPaymentVerificationPlanProps<TChildProps = {}> = ApolloReactHoc.MutateProps<FinishPaymentVerificationPlanMutation, FinishPaymentVerificationPlanMutationVariables> & TChildProps;
export function withFinishPaymentVerificationPlan<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  FinishPaymentVerificationPlanMutation,
  FinishPaymentVerificationPlanMutationVariables,
  FinishPaymentVerificationPlanProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, FinishPaymentVerificationPlanMutation, FinishPaymentVerificationPlanMutationVariables, FinishPaymentVerificationPlanProps<TChildProps>>(FinishPaymentVerificationPlanDocument, {
      alias: 'finishPaymentVerificationPlan',
      ...operationOptions
    });
};

/**
 * __useFinishPaymentVerificationPlanMutation__
 *
 * To run a mutation, you first call `useFinishPaymentVerificationPlanMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useFinishPaymentVerificationPlanMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [finishPaymentVerificationPlanMutation, { data, loading, error }] = useFinishPaymentVerificationPlanMutation({
 *   variables: {
 *      paymentVerificationPlanId: // value for 'paymentVerificationPlanId'
 *   },
 * });
 */
export function useFinishPaymentVerificationPlanMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<FinishPaymentVerificationPlanMutation, FinishPaymentVerificationPlanMutationVariables>) {
        return ApolloReactHooks.useMutation<FinishPaymentVerificationPlanMutation, FinishPaymentVerificationPlanMutationVariables>(FinishPaymentVerificationPlanDocument, baseOptions);
      }
export type FinishPaymentVerificationPlanMutationHookResult = ReturnType<typeof useFinishPaymentVerificationPlanMutation>;
export type FinishPaymentVerificationPlanMutationResult = ApolloReactCommon.MutationResult<FinishPaymentVerificationPlanMutation>;
export type FinishPaymentVerificationPlanMutationOptions = ApolloReactCommon.BaseMutationOptions<FinishPaymentVerificationPlanMutation, FinishPaymentVerificationPlanMutationVariables>;
export const ImportXlsxPaymentVerificationPlanFileDocument = gql`
    mutation ImportXlsxPaymentVerificationPlanFile($paymentVerificationPlanId: ID!, $file: Upload!) {
  importXlsxPaymentVerificationPlanFile(paymentVerificationPlanId: $paymentVerificationPlanId, file: $file) {
    paymentPlan {
      id
    }
    errors {
      sheet
      coordinates
      message
    }
  }
}
    `;
export type ImportXlsxPaymentVerificationPlanFileMutationFn = ApolloReactCommon.MutationFunction<ImportXlsxPaymentVerificationPlanFileMutation, ImportXlsxPaymentVerificationPlanFileMutationVariables>;
export type ImportXlsxPaymentVerificationPlanFileComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<ImportXlsxPaymentVerificationPlanFileMutation, ImportXlsxPaymentVerificationPlanFileMutationVariables>, 'mutation'>;

    export const ImportXlsxPaymentVerificationPlanFileComponent = (props: ImportXlsxPaymentVerificationPlanFileComponentProps) => (
      <ApolloReactComponents.Mutation<ImportXlsxPaymentVerificationPlanFileMutation, ImportXlsxPaymentVerificationPlanFileMutationVariables> mutation={ImportXlsxPaymentVerificationPlanFileDocument} {...props} />
    );
    
export type ImportXlsxPaymentVerificationPlanFileProps<TChildProps = {}> = ApolloReactHoc.MutateProps<ImportXlsxPaymentVerificationPlanFileMutation, ImportXlsxPaymentVerificationPlanFileMutationVariables> & TChildProps;
export function withImportXlsxPaymentVerificationPlanFile<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ImportXlsxPaymentVerificationPlanFileMutation,
  ImportXlsxPaymentVerificationPlanFileMutationVariables,
  ImportXlsxPaymentVerificationPlanFileProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, ImportXlsxPaymentVerificationPlanFileMutation, ImportXlsxPaymentVerificationPlanFileMutationVariables, ImportXlsxPaymentVerificationPlanFileProps<TChildProps>>(ImportXlsxPaymentVerificationPlanFileDocument, {
      alias: 'importXlsxPaymentVerificationPlanFile',
      ...operationOptions
    });
};

/**
 * __useImportXlsxPaymentVerificationPlanFileMutation__
 *
 * To run a mutation, you first call `useImportXlsxPaymentVerificationPlanFileMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useImportXlsxPaymentVerificationPlanFileMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [importXlsxPaymentVerificationPlanFileMutation, { data, loading, error }] = useImportXlsxPaymentVerificationPlanFileMutation({
 *   variables: {
 *      paymentVerificationPlanId: // value for 'paymentVerificationPlanId'
 *      file: // value for 'file'
 *   },
 * });
 */
export function useImportXlsxPaymentVerificationPlanFileMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ImportXlsxPaymentVerificationPlanFileMutation, ImportXlsxPaymentVerificationPlanFileMutationVariables>) {
        return ApolloReactHooks.useMutation<ImportXlsxPaymentVerificationPlanFileMutation, ImportXlsxPaymentVerificationPlanFileMutationVariables>(ImportXlsxPaymentVerificationPlanFileDocument, baseOptions);
      }
export type ImportXlsxPaymentVerificationPlanFileMutationHookResult = ReturnType<typeof useImportXlsxPaymentVerificationPlanFileMutation>;
export type ImportXlsxPaymentVerificationPlanFileMutationResult = ApolloReactCommon.MutationResult<ImportXlsxPaymentVerificationPlanFileMutation>;
export type ImportXlsxPaymentVerificationPlanFileMutationOptions = ApolloReactCommon.BaseMutationOptions<ImportXlsxPaymentVerificationPlanFileMutation, ImportXlsxPaymentVerificationPlanFileMutationVariables>;
export const InvalidPaymentVerificationPlanDocument = gql`
    mutation InvalidPaymentVerificationPlan($paymentVerificationPlanId: ID!) {
  invalidPaymentVerificationPlan(paymentVerificationPlanId: $paymentVerificationPlanId) {
    paymentPlan {
      id
      verificationPlans {
        edges {
          node {
            id
            xlsxFileExporting
            hasXlsxFile
            xlsxFileWasDownloaded
            xlsxFileImported
          }
        }
      }
    }
  }
}
    `;
export type InvalidPaymentVerificationPlanMutationFn = ApolloReactCommon.MutationFunction<InvalidPaymentVerificationPlanMutation, InvalidPaymentVerificationPlanMutationVariables>;
export type InvalidPaymentVerificationPlanComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<InvalidPaymentVerificationPlanMutation, InvalidPaymentVerificationPlanMutationVariables>, 'mutation'>;

    export const InvalidPaymentVerificationPlanComponent = (props: InvalidPaymentVerificationPlanComponentProps) => (
      <ApolloReactComponents.Mutation<InvalidPaymentVerificationPlanMutation, InvalidPaymentVerificationPlanMutationVariables> mutation={InvalidPaymentVerificationPlanDocument} {...props} />
    );
    
export type InvalidPaymentVerificationPlanProps<TChildProps = {}> = ApolloReactHoc.MutateProps<InvalidPaymentVerificationPlanMutation, InvalidPaymentVerificationPlanMutationVariables> & TChildProps;
export function withInvalidPaymentVerificationPlan<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  InvalidPaymentVerificationPlanMutation,
  InvalidPaymentVerificationPlanMutationVariables,
  InvalidPaymentVerificationPlanProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, InvalidPaymentVerificationPlanMutation, InvalidPaymentVerificationPlanMutationVariables, InvalidPaymentVerificationPlanProps<TChildProps>>(InvalidPaymentVerificationPlanDocument, {
      alias: 'invalidPaymentVerificationPlan',
      ...operationOptions
    });
};

/**
 * __useInvalidPaymentVerificationPlanMutation__
 *
 * To run a mutation, you first call `useInvalidPaymentVerificationPlanMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInvalidPaymentVerificationPlanMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [invalidPaymentVerificationPlanMutation, { data, loading, error }] = useInvalidPaymentVerificationPlanMutation({
 *   variables: {
 *      paymentVerificationPlanId: // value for 'paymentVerificationPlanId'
 *   },
 * });
 */
export function useInvalidPaymentVerificationPlanMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InvalidPaymentVerificationPlanMutation, InvalidPaymentVerificationPlanMutationVariables>) {
        return ApolloReactHooks.useMutation<InvalidPaymentVerificationPlanMutation, InvalidPaymentVerificationPlanMutationVariables>(InvalidPaymentVerificationPlanDocument, baseOptions);
      }
export type InvalidPaymentVerificationPlanMutationHookResult = ReturnType<typeof useInvalidPaymentVerificationPlanMutation>;
export type InvalidPaymentVerificationPlanMutationResult = ApolloReactCommon.MutationResult<InvalidPaymentVerificationPlanMutation>;
export type InvalidPaymentVerificationPlanMutationOptions = ApolloReactCommon.BaseMutationOptions<InvalidPaymentVerificationPlanMutation, InvalidPaymentVerificationPlanMutationVariables>;
export const MarkPrAsFailedDocument = gql`
    mutation markPRAsFailed($paymentRecordId: ID!) {
  markPaymentRecordAsFailed(paymentRecordId: $paymentRecordId) {
    paymentRecord {
      ...paymentRecordDetails
    }
  }
}
    ${PaymentRecordDetailsFragmentDoc}`;
export type MarkPrAsFailedMutationFn = ApolloReactCommon.MutationFunction<MarkPrAsFailedMutation, MarkPrAsFailedMutationVariables>;
export type MarkPrAsFailedComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<MarkPrAsFailedMutation, MarkPrAsFailedMutationVariables>, 'mutation'>;

    export const MarkPrAsFailedComponent = (props: MarkPrAsFailedComponentProps) => (
      <ApolloReactComponents.Mutation<MarkPrAsFailedMutation, MarkPrAsFailedMutationVariables> mutation={MarkPrAsFailedDocument} {...props} />
    );
    
export type MarkPrAsFailedProps<TChildProps = {}> = ApolloReactHoc.MutateProps<MarkPrAsFailedMutation, MarkPrAsFailedMutationVariables> & TChildProps;
export function withMarkPrAsFailed<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  MarkPrAsFailedMutation,
  MarkPrAsFailedMutationVariables,
  MarkPrAsFailedProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, MarkPrAsFailedMutation, MarkPrAsFailedMutationVariables, MarkPrAsFailedProps<TChildProps>>(MarkPrAsFailedDocument, {
      alias: 'markPrAsFailed',
      ...operationOptions
    });
};

/**
 * __useMarkPrAsFailedMutation__
 *
 * To run a mutation, you first call `useMarkPrAsFailedMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useMarkPrAsFailedMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [markPrAsFailedMutation, { data, loading, error }] = useMarkPrAsFailedMutation({
 *   variables: {
 *      paymentRecordId: // value for 'paymentRecordId'
 *   },
 * });
 */
export function useMarkPrAsFailedMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<MarkPrAsFailedMutation, MarkPrAsFailedMutationVariables>) {
        return ApolloReactHooks.useMutation<MarkPrAsFailedMutation, MarkPrAsFailedMutationVariables>(MarkPrAsFailedDocument, baseOptions);
      }
export type MarkPrAsFailedMutationHookResult = ReturnType<typeof useMarkPrAsFailedMutation>;
export type MarkPrAsFailedMutationResult = ApolloReactCommon.MutationResult<MarkPrAsFailedMutation>;
export type MarkPrAsFailedMutationOptions = ApolloReactCommon.BaseMutationOptions<MarkPrAsFailedMutation, MarkPrAsFailedMutationVariables>;
export const RevertMarkPrAsFailedDocument = gql`
    mutation revertMarkPRAsFailed($paymentRecordId: ID!, $deliveredQuantity: Decimal!, $deliveryDate: Date!) {
  revertMarkPaymentRecordAsFailed(paymentRecordId: $paymentRecordId, deliveredQuantity: $deliveredQuantity, deliveryDate: $deliveryDate) {
    paymentRecord {
      ...paymentRecordDetails
    }
  }
}
    ${PaymentRecordDetailsFragmentDoc}`;
export type RevertMarkPrAsFailedMutationFn = ApolloReactCommon.MutationFunction<RevertMarkPrAsFailedMutation, RevertMarkPrAsFailedMutationVariables>;
export type RevertMarkPrAsFailedComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<RevertMarkPrAsFailedMutation, RevertMarkPrAsFailedMutationVariables>, 'mutation'>;

    export const RevertMarkPrAsFailedComponent = (props: RevertMarkPrAsFailedComponentProps) => (
      <ApolloReactComponents.Mutation<RevertMarkPrAsFailedMutation, RevertMarkPrAsFailedMutationVariables> mutation={RevertMarkPrAsFailedDocument} {...props} />
    );
    
export type RevertMarkPrAsFailedProps<TChildProps = {}> = ApolloReactHoc.MutateProps<RevertMarkPrAsFailedMutation, RevertMarkPrAsFailedMutationVariables> & TChildProps;
export function withRevertMarkPrAsFailed<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  RevertMarkPrAsFailedMutation,
  RevertMarkPrAsFailedMutationVariables,
  RevertMarkPrAsFailedProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, RevertMarkPrAsFailedMutation, RevertMarkPrAsFailedMutationVariables, RevertMarkPrAsFailedProps<TChildProps>>(RevertMarkPrAsFailedDocument, {
      alias: 'revertMarkPrAsFailed',
      ...operationOptions
    });
};

/**
 * __useRevertMarkPrAsFailedMutation__
 *
 * To run a mutation, you first call `useRevertMarkPrAsFailedMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRevertMarkPrAsFailedMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [revertMarkPrAsFailedMutation, { data, loading, error }] = useRevertMarkPrAsFailedMutation({
 *   variables: {
 *      paymentRecordId: // value for 'paymentRecordId'
 *      deliveredQuantity: // value for 'deliveredQuantity'
 *      deliveryDate: // value for 'deliveryDate'
 *   },
 * });
 */
export function useRevertMarkPrAsFailedMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RevertMarkPrAsFailedMutation, RevertMarkPrAsFailedMutationVariables>) {
        return ApolloReactHooks.useMutation<RevertMarkPrAsFailedMutation, RevertMarkPrAsFailedMutationVariables>(RevertMarkPrAsFailedDocument, baseOptions);
      }
export type RevertMarkPrAsFailedMutationHookResult = ReturnType<typeof useRevertMarkPrAsFailedMutation>;
export type RevertMarkPrAsFailedMutationResult = ApolloReactCommon.MutationResult<RevertMarkPrAsFailedMutation>;
export type RevertMarkPrAsFailedMutationOptions = ApolloReactCommon.BaseMutationOptions<RevertMarkPrAsFailedMutation, RevertMarkPrAsFailedMutationVariables>;
export const UpdatePaymentVerificationReceivedAndReceivedAmountDocument = gql`
    mutation updatePaymentVerificationReceivedAndReceivedAmount($paymentVerificationId: ID!, $receivedAmount: Decimal!, $received: Boolean!) {
  updatePaymentVerificationReceivedAndReceivedAmount(paymentVerificationId: $paymentVerificationId, receivedAmount: $receivedAmount, received: $received) {
    paymentVerification {
      id
      status
      receivedAmount
      paymentVerificationPlan {
        id
        receivedCount
        notReceivedCount
        respondedCount
        receivedCount
        receivedWithProblemsCount
      }
    }
  }
}
    `;
export type UpdatePaymentVerificationReceivedAndReceivedAmountMutationFn = ApolloReactCommon.MutationFunction<UpdatePaymentVerificationReceivedAndReceivedAmountMutation, UpdatePaymentVerificationReceivedAndReceivedAmountMutationVariables>;
export type UpdatePaymentVerificationReceivedAndReceivedAmountComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<UpdatePaymentVerificationReceivedAndReceivedAmountMutation, UpdatePaymentVerificationReceivedAndReceivedAmountMutationVariables>, 'mutation'>;

    export const UpdatePaymentVerificationReceivedAndReceivedAmountComponent = (props: UpdatePaymentVerificationReceivedAndReceivedAmountComponentProps) => (
      <ApolloReactComponents.Mutation<UpdatePaymentVerificationReceivedAndReceivedAmountMutation, UpdatePaymentVerificationReceivedAndReceivedAmountMutationVariables> mutation={UpdatePaymentVerificationReceivedAndReceivedAmountDocument} {...props} />
    );
    
export type UpdatePaymentVerificationReceivedAndReceivedAmountProps<TChildProps = {}> = ApolloReactHoc.MutateProps<UpdatePaymentVerificationReceivedAndReceivedAmountMutation, UpdatePaymentVerificationReceivedAndReceivedAmountMutationVariables> & TChildProps;
export function withUpdatePaymentVerificationReceivedAndReceivedAmount<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  UpdatePaymentVerificationReceivedAndReceivedAmountMutation,
  UpdatePaymentVerificationReceivedAndReceivedAmountMutationVariables,
  UpdatePaymentVerificationReceivedAndReceivedAmountProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, UpdatePaymentVerificationReceivedAndReceivedAmountMutation, UpdatePaymentVerificationReceivedAndReceivedAmountMutationVariables, UpdatePaymentVerificationReceivedAndReceivedAmountProps<TChildProps>>(UpdatePaymentVerificationReceivedAndReceivedAmountDocument, {
      alias: 'updatePaymentVerificationReceivedAndReceivedAmount',
      ...operationOptions
    });
};

/**
 * __useUpdatePaymentVerificationReceivedAndReceivedAmountMutation__
 *
 * To run a mutation, you first call `useUpdatePaymentVerificationReceivedAndReceivedAmountMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdatePaymentVerificationReceivedAndReceivedAmountMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updatePaymentVerificationReceivedAndReceivedAmountMutation, { data, loading, error }] = useUpdatePaymentVerificationReceivedAndReceivedAmountMutation({
 *   variables: {
 *      paymentVerificationId: // value for 'paymentVerificationId'
 *      receivedAmount: // value for 'receivedAmount'
 *      received: // value for 'received'
 *   },
 * });
 */
export function useUpdatePaymentVerificationReceivedAndReceivedAmountMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdatePaymentVerificationReceivedAndReceivedAmountMutation, UpdatePaymentVerificationReceivedAndReceivedAmountMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdatePaymentVerificationReceivedAndReceivedAmountMutation, UpdatePaymentVerificationReceivedAndReceivedAmountMutationVariables>(UpdatePaymentVerificationReceivedAndReceivedAmountDocument, baseOptions);
      }
export type UpdatePaymentVerificationReceivedAndReceivedAmountMutationHookResult = ReturnType<typeof useUpdatePaymentVerificationReceivedAndReceivedAmountMutation>;
export type UpdatePaymentVerificationReceivedAndReceivedAmountMutationResult = ApolloReactCommon.MutationResult<UpdatePaymentVerificationReceivedAndReceivedAmountMutation>;
export type UpdatePaymentVerificationReceivedAndReceivedAmountMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdatePaymentVerificationReceivedAndReceivedAmountMutation, UpdatePaymentVerificationReceivedAndReceivedAmountMutationVariables>;
export const UpdatePaymentVerificationStatusAndReceivedAmountDocument = gql`
    mutation updatePaymentVerificationStatusAndReceivedAmount($paymentVerificationId: ID!, $receivedAmount: Decimal!, $status: PaymentVerificationStatusForUpdate) {
  updatePaymentVerificationStatusAndReceivedAmount(paymentVerificationId: $paymentVerificationId, receivedAmount: $receivedAmount, status: $status) {
    paymentVerification {
      id
      status
      receivedAmount
    }
  }
}
    `;
export type UpdatePaymentVerificationStatusAndReceivedAmountMutationFn = ApolloReactCommon.MutationFunction<UpdatePaymentVerificationStatusAndReceivedAmountMutation, UpdatePaymentVerificationStatusAndReceivedAmountMutationVariables>;
export type UpdatePaymentVerificationStatusAndReceivedAmountComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<UpdatePaymentVerificationStatusAndReceivedAmountMutation, UpdatePaymentVerificationStatusAndReceivedAmountMutationVariables>, 'mutation'>;

    export const UpdatePaymentVerificationStatusAndReceivedAmountComponent = (props: UpdatePaymentVerificationStatusAndReceivedAmountComponentProps) => (
      <ApolloReactComponents.Mutation<UpdatePaymentVerificationStatusAndReceivedAmountMutation, UpdatePaymentVerificationStatusAndReceivedAmountMutationVariables> mutation={UpdatePaymentVerificationStatusAndReceivedAmountDocument} {...props} />
    );
    
export type UpdatePaymentVerificationStatusAndReceivedAmountProps<TChildProps = {}> = ApolloReactHoc.MutateProps<UpdatePaymentVerificationStatusAndReceivedAmountMutation, UpdatePaymentVerificationStatusAndReceivedAmountMutationVariables> & TChildProps;
export function withUpdatePaymentVerificationStatusAndReceivedAmount<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  UpdatePaymentVerificationStatusAndReceivedAmountMutation,
  UpdatePaymentVerificationStatusAndReceivedAmountMutationVariables,
  UpdatePaymentVerificationStatusAndReceivedAmountProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, UpdatePaymentVerificationStatusAndReceivedAmountMutation, UpdatePaymentVerificationStatusAndReceivedAmountMutationVariables, UpdatePaymentVerificationStatusAndReceivedAmountProps<TChildProps>>(UpdatePaymentVerificationStatusAndReceivedAmountDocument, {
      alias: 'updatePaymentVerificationStatusAndReceivedAmount',
      ...operationOptions
    });
};

/**
 * __useUpdatePaymentVerificationStatusAndReceivedAmountMutation__
 *
 * To run a mutation, you first call `useUpdatePaymentVerificationStatusAndReceivedAmountMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdatePaymentVerificationStatusAndReceivedAmountMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updatePaymentVerificationStatusAndReceivedAmountMutation, { data, loading, error }] = useUpdatePaymentVerificationStatusAndReceivedAmountMutation({
 *   variables: {
 *      paymentVerificationId: // value for 'paymentVerificationId'
 *      receivedAmount: // value for 'receivedAmount'
 *      status: // value for 'status'
 *   },
 * });
 */
export function useUpdatePaymentVerificationStatusAndReceivedAmountMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdatePaymentVerificationStatusAndReceivedAmountMutation, UpdatePaymentVerificationStatusAndReceivedAmountMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdatePaymentVerificationStatusAndReceivedAmountMutation, UpdatePaymentVerificationStatusAndReceivedAmountMutationVariables>(UpdatePaymentVerificationStatusAndReceivedAmountDocument, baseOptions);
      }
export type UpdatePaymentVerificationStatusAndReceivedAmountMutationHookResult = ReturnType<typeof useUpdatePaymentVerificationStatusAndReceivedAmountMutation>;
export type UpdatePaymentVerificationStatusAndReceivedAmountMutationResult = ApolloReactCommon.MutationResult<UpdatePaymentVerificationStatusAndReceivedAmountMutation>;
export type UpdatePaymentVerificationStatusAndReceivedAmountMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdatePaymentVerificationStatusAndReceivedAmountMutation, UpdatePaymentVerificationStatusAndReceivedAmountMutationVariables>;
export const CopyProgramDocument = gql`
    mutation CopyProgram($programData: CopyProgramInput!) {
  copyProgram(programData: $programData) {
    program {
      id
    }
  }
}
    `;
export type CopyProgramMutationFn = ApolloReactCommon.MutationFunction<CopyProgramMutation, CopyProgramMutationVariables>;
export type CopyProgramComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CopyProgramMutation, CopyProgramMutationVariables>, 'mutation'>;

    export const CopyProgramComponent = (props: CopyProgramComponentProps) => (
      <ApolloReactComponents.Mutation<CopyProgramMutation, CopyProgramMutationVariables> mutation={CopyProgramDocument} {...props} />
    );
    
export type CopyProgramProps<TChildProps = {}> = ApolloReactHoc.MutateProps<CopyProgramMutation, CopyProgramMutationVariables> & TChildProps;
export function withCopyProgram<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  CopyProgramMutation,
  CopyProgramMutationVariables,
  CopyProgramProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, CopyProgramMutation, CopyProgramMutationVariables, CopyProgramProps<TChildProps>>(CopyProgramDocument, {
      alias: 'copyProgram',
      ...operationOptions
    });
};

/**
 * __useCopyProgramMutation__
 *
 * To run a mutation, you first call `useCopyProgramMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCopyProgramMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [copyProgramMutation, { data, loading, error }] = useCopyProgramMutation({
 *   variables: {
 *      programData: // value for 'programData'
 *   },
 * });
 */
export function useCopyProgramMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CopyProgramMutation, CopyProgramMutationVariables>) {
        return ApolloReactHooks.useMutation<CopyProgramMutation, CopyProgramMutationVariables>(CopyProgramDocument, baseOptions);
      }
export type CopyProgramMutationHookResult = ReturnType<typeof useCopyProgramMutation>;
export type CopyProgramMutationResult = ApolloReactCommon.MutationResult<CopyProgramMutation>;
export type CopyProgramMutationOptions = ApolloReactCommon.BaseMutationOptions<CopyProgramMutation, CopyProgramMutationVariables>;
export const CreateProgramDocument = gql`
    mutation CreateProgram($programData: CreateProgramInput!) {
  createProgram(programData: $programData) {
    program {
      id
      name
      status
      startDate
      endDate
      caId
      budget
      description
      frequencyOfPayments
      sector
      scope
      cashPlus
      populationGoal
      individualDataNeeded
    }
    validationErrors
  }
}
    `;
export type CreateProgramMutationFn = ApolloReactCommon.MutationFunction<CreateProgramMutation, CreateProgramMutationVariables>;
export type CreateProgramComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CreateProgramMutation, CreateProgramMutationVariables>, 'mutation'>;

    export const CreateProgramComponent = (props: CreateProgramComponentProps) => (
      <ApolloReactComponents.Mutation<CreateProgramMutation, CreateProgramMutationVariables> mutation={CreateProgramDocument} {...props} />
    );
    
export type CreateProgramProps<TChildProps = {}> = ApolloReactHoc.MutateProps<CreateProgramMutation, CreateProgramMutationVariables> & TChildProps;
export function withCreateProgram<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  CreateProgramMutation,
  CreateProgramMutationVariables,
  CreateProgramProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, CreateProgramMutation, CreateProgramMutationVariables, CreateProgramProps<TChildProps>>(CreateProgramDocument, {
      alias: 'createProgram',
      ...operationOptions
    });
};

/**
 * __useCreateProgramMutation__
 *
 * To run a mutation, you first call `useCreateProgramMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateProgramMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createProgramMutation, { data, loading, error }] = useCreateProgramMutation({
 *   variables: {
 *      programData: // value for 'programData'
 *   },
 * });
 */
export function useCreateProgramMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateProgramMutation, CreateProgramMutationVariables>) {
        return ApolloReactHooks.useMutation<CreateProgramMutation, CreateProgramMutationVariables>(CreateProgramDocument, baseOptions);
      }
export type CreateProgramMutationHookResult = ReturnType<typeof useCreateProgramMutation>;
export type CreateProgramMutationResult = ApolloReactCommon.MutationResult<CreateProgramMutation>;
export type CreateProgramMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateProgramMutation, CreateProgramMutationVariables>;
export const DeleteProgramDocument = gql`
    mutation DeleteProgram($programId: String!) {
  deleteProgram(programId: $programId) {
    ok
  }
}
    `;
export type DeleteProgramMutationFn = ApolloReactCommon.MutationFunction<DeleteProgramMutation, DeleteProgramMutationVariables>;
export type DeleteProgramComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<DeleteProgramMutation, DeleteProgramMutationVariables>, 'mutation'>;

    export const DeleteProgramComponent = (props: DeleteProgramComponentProps) => (
      <ApolloReactComponents.Mutation<DeleteProgramMutation, DeleteProgramMutationVariables> mutation={DeleteProgramDocument} {...props} />
    );
    
export type DeleteProgramProps<TChildProps = {}> = ApolloReactHoc.MutateProps<DeleteProgramMutation, DeleteProgramMutationVariables> & TChildProps;
export function withDeleteProgram<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  DeleteProgramMutation,
  DeleteProgramMutationVariables,
  DeleteProgramProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, DeleteProgramMutation, DeleteProgramMutationVariables, DeleteProgramProps<TChildProps>>(DeleteProgramDocument, {
      alias: 'deleteProgram',
      ...operationOptions
    });
};

/**
 * __useDeleteProgramMutation__
 *
 * To run a mutation, you first call `useDeleteProgramMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteProgramMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteProgramMutation, { data, loading, error }] = useDeleteProgramMutation({
 *   variables: {
 *      programId: // value for 'programId'
 *   },
 * });
 */
export function useDeleteProgramMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteProgramMutation, DeleteProgramMutationVariables>) {
        return ApolloReactHooks.useMutation<DeleteProgramMutation, DeleteProgramMutationVariables>(DeleteProgramDocument, baseOptions);
      }
export type DeleteProgramMutationHookResult = ReturnType<typeof useDeleteProgramMutation>;
export type DeleteProgramMutationResult = ApolloReactCommon.MutationResult<DeleteProgramMutation>;
export type DeleteProgramMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteProgramMutation, DeleteProgramMutationVariables>;
export const UpdateProgramDocument = gql`
    mutation UpdateProgram($programData: UpdateProgramInput!, $version: BigInt!) {
  updateProgram(programData: $programData, version: $version) {
    program {
      id
      name
      startDate
      endDate
      status
      caId
      description
      budget
      frequencyOfPayments
      cashPlus
      populationGoal
      scope
      sector
      totalNumberOfHouseholds
      administrativeAreasOfImplementation
      individualDataNeeded
      version
    }
    validationErrors
  }
}
    `;
export type UpdateProgramMutationFn = ApolloReactCommon.MutationFunction<UpdateProgramMutation, UpdateProgramMutationVariables>;
export type UpdateProgramComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<UpdateProgramMutation, UpdateProgramMutationVariables>, 'mutation'>;

    export const UpdateProgramComponent = (props: UpdateProgramComponentProps) => (
      <ApolloReactComponents.Mutation<UpdateProgramMutation, UpdateProgramMutationVariables> mutation={UpdateProgramDocument} {...props} />
    );
    
export type UpdateProgramProps<TChildProps = {}> = ApolloReactHoc.MutateProps<UpdateProgramMutation, UpdateProgramMutationVariables> & TChildProps;
export function withUpdateProgram<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  UpdateProgramMutation,
  UpdateProgramMutationVariables,
  UpdateProgramProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, UpdateProgramMutation, UpdateProgramMutationVariables, UpdateProgramProps<TChildProps>>(UpdateProgramDocument, {
      alias: 'updateProgram',
      ...operationOptions
    });
};

/**
 * __useUpdateProgramMutation__
 *
 * To run a mutation, you first call `useUpdateProgramMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateProgramMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateProgramMutation, { data, loading, error }] = useUpdateProgramMutation({
 *   variables: {
 *      programData: // value for 'programData'
 *      version: // value for 'version'
 *   },
 * });
 */
export function useUpdateProgramMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateProgramMutation, UpdateProgramMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateProgramMutation, UpdateProgramMutationVariables>(UpdateProgramDocument, baseOptions);
      }
export type UpdateProgramMutationHookResult = ReturnType<typeof useUpdateProgramMutation>;
export type UpdateProgramMutationResult = ApolloReactCommon.MutationResult<UpdateProgramMutation>;
export type UpdateProgramMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateProgramMutation, UpdateProgramMutationVariables>;
export const CreateRegistrationKoboImportDocument = gql`
    mutation CreateRegistrationKoboImport($registrationDataImportData: RegistrationKoboImportMutationInput!) {
  registrationKoboImport(registrationDataImportData: $registrationDataImportData) {
    registrationDataImport {
      id
      name
      dataSource
      datahubId
      screenBeneficiary
    }
    validationErrors
  }
}
    `;
export type CreateRegistrationKoboImportMutationFn = ApolloReactCommon.MutationFunction<CreateRegistrationKoboImportMutation, CreateRegistrationKoboImportMutationVariables>;
export type CreateRegistrationKoboImportComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CreateRegistrationKoboImportMutation, CreateRegistrationKoboImportMutationVariables>, 'mutation'>;

    export const CreateRegistrationKoboImportComponent = (props: CreateRegistrationKoboImportComponentProps) => (
      <ApolloReactComponents.Mutation<CreateRegistrationKoboImportMutation, CreateRegistrationKoboImportMutationVariables> mutation={CreateRegistrationKoboImportDocument} {...props} />
    );
    
export type CreateRegistrationKoboImportProps<TChildProps = {}> = ApolloReactHoc.MutateProps<CreateRegistrationKoboImportMutation, CreateRegistrationKoboImportMutationVariables> & TChildProps;
export function withCreateRegistrationKoboImport<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  CreateRegistrationKoboImportMutation,
  CreateRegistrationKoboImportMutationVariables,
  CreateRegistrationKoboImportProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, CreateRegistrationKoboImportMutation, CreateRegistrationKoboImportMutationVariables, CreateRegistrationKoboImportProps<TChildProps>>(CreateRegistrationKoboImportDocument, {
      alias: 'createRegistrationKoboImport',
      ...operationOptions
    });
};

/**
 * __useCreateRegistrationKoboImportMutation__
 *
 * To run a mutation, you first call `useCreateRegistrationKoboImportMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateRegistrationKoboImportMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createRegistrationKoboImportMutation, { data, loading, error }] = useCreateRegistrationKoboImportMutation({
 *   variables: {
 *      registrationDataImportData: // value for 'registrationDataImportData'
 *   },
 * });
 */
export function useCreateRegistrationKoboImportMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateRegistrationKoboImportMutation, CreateRegistrationKoboImportMutationVariables>) {
        return ApolloReactHooks.useMutation<CreateRegistrationKoboImportMutation, CreateRegistrationKoboImportMutationVariables>(CreateRegistrationKoboImportDocument, baseOptions);
      }
export type CreateRegistrationKoboImportMutationHookResult = ReturnType<typeof useCreateRegistrationKoboImportMutation>;
export type CreateRegistrationKoboImportMutationResult = ApolloReactCommon.MutationResult<CreateRegistrationKoboImportMutation>;
export type CreateRegistrationKoboImportMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateRegistrationKoboImportMutation, CreateRegistrationKoboImportMutationVariables>;
export const CreateRegistrationXlsxImportDocument = gql`
    mutation CreateRegistrationXlsxImport($registrationDataImportData: RegistrationXlsxImportMutationInput!) {
  registrationXlsxImport(registrationDataImportData: $registrationDataImportData) {
    registrationDataImport {
      id
      name
      dataSource
      datahubId
      screenBeneficiary
    }
    validationErrors
  }
}
    `;
export type CreateRegistrationXlsxImportMutationFn = ApolloReactCommon.MutationFunction<CreateRegistrationXlsxImportMutation, CreateRegistrationXlsxImportMutationVariables>;
export type CreateRegistrationXlsxImportComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CreateRegistrationXlsxImportMutation, CreateRegistrationXlsxImportMutationVariables>, 'mutation'>;

    export const CreateRegistrationXlsxImportComponent = (props: CreateRegistrationXlsxImportComponentProps) => (
      <ApolloReactComponents.Mutation<CreateRegistrationXlsxImportMutation, CreateRegistrationXlsxImportMutationVariables> mutation={CreateRegistrationXlsxImportDocument} {...props} />
    );
    
export type CreateRegistrationXlsxImportProps<TChildProps = {}> = ApolloReactHoc.MutateProps<CreateRegistrationXlsxImportMutation, CreateRegistrationXlsxImportMutationVariables> & TChildProps;
export function withCreateRegistrationXlsxImport<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  CreateRegistrationXlsxImportMutation,
  CreateRegistrationXlsxImportMutationVariables,
  CreateRegistrationXlsxImportProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, CreateRegistrationXlsxImportMutation, CreateRegistrationXlsxImportMutationVariables, CreateRegistrationXlsxImportProps<TChildProps>>(CreateRegistrationXlsxImportDocument, {
      alias: 'createRegistrationXlsxImport',
      ...operationOptions
    });
};

/**
 * __useCreateRegistrationXlsxImportMutation__
 *
 * To run a mutation, you first call `useCreateRegistrationXlsxImportMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateRegistrationXlsxImportMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createRegistrationXlsxImportMutation, { data, loading, error }] = useCreateRegistrationXlsxImportMutation({
 *   variables: {
 *      registrationDataImportData: // value for 'registrationDataImportData'
 *   },
 * });
 */
export function useCreateRegistrationXlsxImportMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateRegistrationXlsxImportMutation, CreateRegistrationXlsxImportMutationVariables>) {
        return ApolloReactHooks.useMutation<CreateRegistrationXlsxImportMutation, CreateRegistrationXlsxImportMutationVariables>(CreateRegistrationXlsxImportDocument, baseOptions);
      }
export type CreateRegistrationXlsxImportMutationHookResult = ReturnType<typeof useCreateRegistrationXlsxImportMutation>;
export type CreateRegistrationXlsxImportMutationResult = ApolloReactCommon.MutationResult<CreateRegistrationXlsxImportMutation>;
export type CreateRegistrationXlsxImportMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateRegistrationXlsxImportMutation, CreateRegistrationXlsxImportMutationVariables>;
export const EraseRdiDocument = gql`
    mutation eraseRDI($id: ID!) {
  eraseRegistrationDataImport(id: $id) {
    registrationDataImport {
      id
      status
      erased
    }
  }
}
    `;
export type EraseRdiMutationFn = ApolloReactCommon.MutationFunction<EraseRdiMutation, EraseRdiMutationVariables>;
export type EraseRdiComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<EraseRdiMutation, EraseRdiMutationVariables>, 'mutation'>;

    export const EraseRdiComponent = (props: EraseRdiComponentProps) => (
      <ApolloReactComponents.Mutation<EraseRdiMutation, EraseRdiMutationVariables> mutation={EraseRdiDocument} {...props} />
    );
    
export type EraseRdiProps<TChildProps = {}> = ApolloReactHoc.MutateProps<EraseRdiMutation, EraseRdiMutationVariables> & TChildProps;
export function withEraseRdi<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  EraseRdiMutation,
  EraseRdiMutationVariables,
  EraseRdiProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, EraseRdiMutation, EraseRdiMutationVariables, EraseRdiProps<TChildProps>>(EraseRdiDocument, {
      alias: 'eraseRdi',
      ...operationOptions
    });
};

/**
 * __useEraseRdiMutation__
 *
 * To run a mutation, you first call `useEraseRdiMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useEraseRdiMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [eraseRdiMutation, { data, loading, error }] = useEraseRdiMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useEraseRdiMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<EraseRdiMutation, EraseRdiMutationVariables>) {
        return ApolloReactHooks.useMutation<EraseRdiMutation, EraseRdiMutationVariables>(EraseRdiDocument, baseOptions);
      }
export type EraseRdiMutationHookResult = ReturnType<typeof useEraseRdiMutation>;
export type EraseRdiMutationResult = ApolloReactCommon.MutationResult<EraseRdiMutation>;
export type EraseRdiMutationOptions = ApolloReactCommon.BaseMutationOptions<EraseRdiMutation, EraseRdiMutationVariables>;
export const MergeRdiDocument = gql`
    mutation MergeRDI($id: ID!) {
  mergeRegistrationDataImport(id: $id) {
    registrationDataImport {
      ...registrationDetailed
    }
  }
}
    ${RegistrationDetailedFragmentDoc}`;
export type MergeRdiMutationFn = ApolloReactCommon.MutationFunction<MergeRdiMutation, MergeRdiMutationVariables>;
export type MergeRdiComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<MergeRdiMutation, MergeRdiMutationVariables>, 'mutation'>;

    export const MergeRdiComponent = (props: MergeRdiComponentProps) => (
      <ApolloReactComponents.Mutation<MergeRdiMutation, MergeRdiMutationVariables> mutation={MergeRdiDocument} {...props} />
    );
    
export type MergeRdiProps<TChildProps = {}> = ApolloReactHoc.MutateProps<MergeRdiMutation, MergeRdiMutationVariables> & TChildProps;
export function withMergeRdi<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  MergeRdiMutation,
  MergeRdiMutationVariables,
  MergeRdiProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, MergeRdiMutation, MergeRdiMutationVariables, MergeRdiProps<TChildProps>>(MergeRdiDocument, {
      alias: 'mergeRdi',
      ...operationOptions
    });
};

/**
 * __useMergeRdiMutation__
 *
 * To run a mutation, you first call `useMergeRdiMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useMergeRdiMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [mergeRdiMutation, { data, loading, error }] = useMergeRdiMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useMergeRdiMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<MergeRdiMutation, MergeRdiMutationVariables>) {
        return ApolloReactHooks.useMutation<MergeRdiMutation, MergeRdiMutationVariables>(MergeRdiDocument, baseOptions);
      }
export type MergeRdiMutationHookResult = ReturnType<typeof useMergeRdiMutation>;
export type MergeRdiMutationResult = ApolloReactCommon.MutationResult<MergeRdiMutation>;
export type MergeRdiMutationOptions = ApolloReactCommon.BaseMutationOptions<MergeRdiMutation, MergeRdiMutationVariables>;
export const RefuseRdiDocument = gql`
    mutation RefuseRDI($id: ID!, $refuseReason: String) {
  refuseRegistrationDataImport(id: $id, refuseReason: $refuseReason) {
    registrationDataImport {
      id
      status
      refuseReason
    }
  }
}
    `;
export type RefuseRdiMutationFn = ApolloReactCommon.MutationFunction<RefuseRdiMutation, RefuseRdiMutationVariables>;
export type RefuseRdiComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<RefuseRdiMutation, RefuseRdiMutationVariables>, 'mutation'>;

    export const RefuseRdiComponent = (props: RefuseRdiComponentProps) => (
      <ApolloReactComponents.Mutation<RefuseRdiMutation, RefuseRdiMutationVariables> mutation={RefuseRdiDocument} {...props} />
    );
    
export type RefuseRdiProps<TChildProps = {}> = ApolloReactHoc.MutateProps<RefuseRdiMutation, RefuseRdiMutationVariables> & TChildProps;
export function withRefuseRdi<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  RefuseRdiMutation,
  RefuseRdiMutationVariables,
  RefuseRdiProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, RefuseRdiMutation, RefuseRdiMutationVariables, RefuseRdiProps<TChildProps>>(RefuseRdiDocument, {
      alias: 'refuseRdi',
      ...operationOptions
    });
};

/**
 * __useRefuseRdiMutation__
 *
 * To run a mutation, you first call `useRefuseRdiMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRefuseRdiMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [refuseRdiMutation, { data, loading, error }] = useRefuseRdiMutation({
 *   variables: {
 *      id: // value for 'id'
 *      refuseReason: // value for 'refuseReason'
 *   },
 * });
 */
export function useRefuseRdiMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RefuseRdiMutation, RefuseRdiMutationVariables>) {
        return ApolloReactHooks.useMutation<RefuseRdiMutation, RefuseRdiMutationVariables>(RefuseRdiDocument, baseOptions);
      }
export type RefuseRdiMutationHookResult = ReturnType<typeof useRefuseRdiMutation>;
export type RefuseRdiMutationResult = ApolloReactCommon.MutationResult<RefuseRdiMutation>;
export type RefuseRdiMutationOptions = ApolloReactCommon.BaseMutationOptions<RefuseRdiMutation, RefuseRdiMutationVariables>;
export const RerunDedupeDocument = gql`
    mutation RerunDedupe($registrationDataImportDatahubId: ID!) {
  rerunDedupe(registrationDataImportDatahubId: $registrationDataImportDatahubId) {
    ok
  }
}
    `;
export type RerunDedupeMutationFn = ApolloReactCommon.MutationFunction<RerunDedupeMutation, RerunDedupeMutationVariables>;
export type RerunDedupeComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<RerunDedupeMutation, RerunDedupeMutationVariables>, 'mutation'>;

    export const RerunDedupeComponent = (props: RerunDedupeComponentProps) => (
      <ApolloReactComponents.Mutation<RerunDedupeMutation, RerunDedupeMutationVariables> mutation={RerunDedupeDocument} {...props} />
    );
    
export type RerunDedupeProps<TChildProps = {}> = ApolloReactHoc.MutateProps<RerunDedupeMutation, RerunDedupeMutationVariables> & TChildProps;
export function withRerunDedupe<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  RerunDedupeMutation,
  RerunDedupeMutationVariables,
  RerunDedupeProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, RerunDedupeMutation, RerunDedupeMutationVariables, RerunDedupeProps<TChildProps>>(RerunDedupeDocument, {
      alias: 'rerunDedupe',
      ...operationOptions
    });
};

/**
 * __useRerunDedupeMutation__
 *
 * To run a mutation, you first call `useRerunDedupeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRerunDedupeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [rerunDedupeMutation, { data, loading, error }] = useRerunDedupeMutation({
 *   variables: {
 *      registrationDataImportDatahubId: // value for 'registrationDataImportDatahubId'
 *   },
 * });
 */
export function useRerunDedupeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RerunDedupeMutation, RerunDedupeMutationVariables>) {
        return ApolloReactHooks.useMutation<RerunDedupeMutation, RerunDedupeMutationVariables>(RerunDedupeDocument, baseOptions);
      }
export type RerunDedupeMutationHookResult = ReturnType<typeof useRerunDedupeMutation>;
export type RerunDedupeMutationResult = ApolloReactCommon.MutationResult<RerunDedupeMutation>;
export type RerunDedupeMutationOptions = ApolloReactCommon.BaseMutationOptions<RerunDedupeMutation, RerunDedupeMutationVariables>;
export const SaveKoboImportDataDocument = gql`
    mutation SaveKoboImportData($businessAreaSlug: String!, $projectId: Upload!, $onlyActiveSubmissions: Boolean!) {
  saveKoboImportDataAsync(businessAreaSlug: $businessAreaSlug, uid: $projectId, onlyActiveSubmissions: $onlyActiveSubmissions) {
    importData {
      id
    }
  }
}
    `;
export type SaveKoboImportDataMutationFn = ApolloReactCommon.MutationFunction<SaveKoboImportDataMutation, SaveKoboImportDataMutationVariables>;
export type SaveKoboImportDataComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<SaveKoboImportDataMutation, SaveKoboImportDataMutationVariables>, 'mutation'>;

    export const SaveKoboImportDataComponent = (props: SaveKoboImportDataComponentProps) => (
      <ApolloReactComponents.Mutation<SaveKoboImportDataMutation, SaveKoboImportDataMutationVariables> mutation={SaveKoboImportDataDocument} {...props} />
    );
    
export type SaveKoboImportDataProps<TChildProps = {}> = ApolloReactHoc.MutateProps<SaveKoboImportDataMutation, SaveKoboImportDataMutationVariables> & TChildProps;
export function withSaveKoboImportData<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  SaveKoboImportDataMutation,
  SaveKoboImportDataMutationVariables,
  SaveKoboImportDataProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, SaveKoboImportDataMutation, SaveKoboImportDataMutationVariables, SaveKoboImportDataProps<TChildProps>>(SaveKoboImportDataDocument, {
      alias: 'saveKoboImportData',
      ...operationOptions
    });
};

/**
 * __useSaveKoboImportDataMutation__
 *
 * To run a mutation, you first call `useSaveKoboImportDataMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSaveKoboImportDataMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [saveKoboImportDataMutation, { data, loading, error }] = useSaveKoboImportDataMutation({
 *   variables: {
 *      businessAreaSlug: // value for 'businessAreaSlug'
 *      projectId: // value for 'projectId'
 *      onlyActiveSubmissions: // value for 'onlyActiveSubmissions'
 *   },
 * });
 */
export function useSaveKoboImportDataMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SaveKoboImportDataMutation, SaveKoboImportDataMutationVariables>) {
        return ApolloReactHooks.useMutation<SaveKoboImportDataMutation, SaveKoboImportDataMutationVariables>(SaveKoboImportDataDocument, baseOptions);
      }
export type SaveKoboImportDataMutationHookResult = ReturnType<typeof useSaveKoboImportDataMutation>;
export type SaveKoboImportDataMutationResult = ApolloReactCommon.MutationResult<SaveKoboImportDataMutation>;
export type SaveKoboImportDataMutationOptions = ApolloReactCommon.BaseMutationOptions<SaveKoboImportDataMutation, SaveKoboImportDataMutationVariables>;
export const SaveKoboImportDataAsyncDocument = gql`
    mutation SaveKoboImportDataAsync($businessAreaSlug: String!, $koboAssetId: Upload!, $onlyActiveSubmissions: Boolean!) {
  saveKoboImportDataAsync(businessAreaSlug: $businessAreaSlug, uid: $koboAssetId, onlyActiveSubmissions: $onlyActiveSubmissions) {
    importData {
      id
      status
    }
  }
}
    `;
export type SaveKoboImportDataAsyncMutationFn = ApolloReactCommon.MutationFunction<SaveKoboImportDataAsyncMutation, SaveKoboImportDataAsyncMutationVariables>;
export type SaveKoboImportDataAsyncComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<SaveKoboImportDataAsyncMutation, SaveKoboImportDataAsyncMutationVariables>, 'mutation'>;

    export const SaveKoboImportDataAsyncComponent = (props: SaveKoboImportDataAsyncComponentProps) => (
      <ApolloReactComponents.Mutation<SaveKoboImportDataAsyncMutation, SaveKoboImportDataAsyncMutationVariables> mutation={SaveKoboImportDataAsyncDocument} {...props} />
    );
    
export type SaveKoboImportDataAsyncProps<TChildProps = {}> = ApolloReactHoc.MutateProps<SaveKoboImportDataAsyncMutation, SaveKoboImportDataAsyncMutationVariables> & TChildProps;
export function withSaveKoboImportDataAsync<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  SaveKoboImportDataAsyncMutation,
  SaveKoboImportDataAsyncMutationVariables,
  SaveKoboImportDataAsyncProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, SaveKoboImportDataAsyncMutation, SaveKoboImportDataAsyncMutationVariables, SaveKoboImportDataAsyncProps<TChildProps>>(SaveKoboImportDataAsyncDocument, {
      alias: 'saveKoboImportDataAsync',
      ...operationOptions
    });
};

/**
 * __useSaveKoboImportDataAsyncMutation__
 *
 * To run a mutation, you first call `useSaveKoboImportDataAsyncMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSaveKoboImportDataAsyncMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [saveKoboImportDataAsyncMutation, { data, loading, error }] = useSaveKoboImportDataAsyncMutation({
 *   variables: {
 *      businessAreaSlug: // value for 'businessAreaSlug'
 *      koboAssetId: // value for 'koboAssetId'
 *      onlyActiveSubmissions: // value for 'onlyActiveSubmissions'
 *   },
 * });
 */
export function useSaveKoboImportDataAsyncMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SaveKoboImportDataAsyncMutation, SaveKoboImportDataAsyncMutationVariables>) {
        return ApolloReactHooks.useMutation<SaveKoboImportDataAsyncMutation, SaveKoboImportDataAsyncMutationVariables>(SaveKoboImportDataAsyncDocument, baseOptions);
      }
export type SaveKoboImportDataAsyncMutationHookResult = ReturnType<typeof useSaveKoboImportDataAsyncMutation>;
export type SaveKoboImportDataAsyncMutationResult = ApolloReactCommon.MutationResult<SaveKoboImportDataAsyncMutation>;
export type SaveKoboImportDataAsyncMutationOptions = ApolloReactCommon.BaseMutationOptions<SaveKoboImportDataAsyncMutation, SaveKoboImportDataAsyncMutationVariables>;
export const UploadImportDataXlsxFileAsyncDocument = gql`
    mutation UploadImportDataXlsxFileAsync($file: Upload!, $businessAreaSlug: String!) {
  uploadImportDataXlsxFileAsync(file: $file, businessAreaSlug: $businessAreaSlug) {
    errors {
      header
      message
      rowNumber
    }
    importData {
      id
      numberOfIndividuals
      numberOfHouseholds
      registrationDataImport {
        id
      }
    }
  }
}
    `;
export type UploadImportDataXlsxFileAsyncMutationFn = ApolloReactCommon.MutationFunction<UploadImportDataXlsxFileAsyncMutation, UploadImportDataXlsxFileAsyncMutationVariables>;
export type UploadImportDataXlsxFileAsyncComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<UploadImportDataXlsxFileAsyncMutation, UploadImportDataXlsxFileAsyncMutationVariables>, 'mutation'>;

    export const UploadImportDataXlsxFileAsyncComponent = (props: UploadImportDataXlsxFileAsyncComponentProps) => (
      <ApolloReactComponents.Mutation<UploadImportDataXlsxFileAsyncMutation, UploadImportDataXlsxFileAsyncMutationVariables> mutation={UploadImportDataXlsxFileAsyncDocument} {...props} />
    );
    
export type UploadImportDataXlsxFileAsyncProps<TChildProps = {}> = ApolloReactHoc.MutateProps<UploadImportDataXlsxFileAsyncMutation, UploadImportDataXlsxFileAsyncMutationVariables> & TChildProps;
export function withUploadImportDataXlsxFileAsync<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  UploadImportDataXlsxFileAsyncMutation,
  UploadImportDataXlsxFileAsyncMutationVariables,
  UploadImportDataXlsxFileAsyncProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, UploadImportDataXlsxFileAsyncMutation, UploadImportDataXlsxFileAsyncMutationVariables, UploadImportDataXlsxFileAsyncProps<TChildProps>>(UploadImportDataXlsxFileAsyncDocument, {
      alias: 'uploadImportDataXlsxFileAsync',
      ...operationOptions
    });
};

/**
 * __useUploadImportDataXlsxFileAsyncMutation__
 *
 * To run a mutation, you first call `useUploadImportDataXlsxFileAsyncMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUploadImportDataXlsxFileAsyncMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [uploadImportDataXlsxFileAsyncMutation, { data, loading, error }] = useUploadImportDataXlsxFileAsyncMutation({
 *   variables: {
 *      file: // value for 'file'
 *      businessAreaSlug: // value for 'businessAreaSlug'
 *   },
 * });
 */
export function useUploadImportDataXlsxFileAsyncMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UploadImportDataXlsxFileAsyncMutation, UploadImportDataXlsxFileAsyncMutationVariables>) {
        return ApolloReactHooks.useMutation<UploadImportDataXlsxFileAsyncMutation, UploadImportDataXlsxFileAsyncMutationVariables>(UploadImportDataXlsxFileAsyncDocument, baseOptions);
      }
export type UploadImportDataXlsxFileAsyncMutationHookResult = ReturnType<typeof useUploadImportDataXlsxFileAsyncMutation>;
export type UploadImportDataXlsxFileAsyncMutationResult = ApolloReactCommon.MutationResult<UploadImportDataXlsxFileAsyncMutation>;
export type UploadImportDataXlsxFileAsyncMutationOptions = ApolloReactCommon.BaseMutationOptions<UploadImportDataXlsxFileAsyncMutation, UploadImportDataXlsxFileAsyncMutationVariables>;
export const CreateDashboardReportDocument = gql`
    mutation CreateDashboardReport($reportData: CreateDashboardReportInput!) {
  createDashboardReport(reportData: $reportData) {
    success
  }
}
    `;
export type CreateDashboardReportMutationFn = ApolloReactCommon.MutationFunction<CreateDashboardReportMutation, CreateDashboardReportMutationVariables>;
export type CreateDashboardReportComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CreateDashboardReportMutation, CreateDashboardReportMutationVariables>, 'mutation'>;

    export const CreateDashboardReportComponent = (props: CreateDashboardReportComponentProps) => (
      <ApolloReactComponents.Mutation<CreateDashboardReportMutation, CreateDashboardReportMutationVariables> mutation={CreateDashboardReportDocument} {...props} />
    );
    
export type CreateDashboardReportProps<TChildProps = {}> = ApolloReactHoc.MutateProps<CreateDashboardReportMutation, CreateDashboardReportMutationVariables> & TChildProps;
export function withCreateDashboardReport<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  CreateDashboardReportMutation,
  CreateDashboardReportMutationVariables,
  CreateDashboardReportProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, CreateDashboardReportMutation, CreateDashboardReportMutationVariables, CreateDashboardReportProps<TChildProps>>(CreateDashboardReportDocument, {
      alias: 'createDashboardReport',
      ...operationOptions
    });
};

/**
 * __useCreateDashboardReportMutation__
 *
 * To run a mutation, you first call `useCreateDashboardReportMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateDashboardReportMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createDashboardReportMutation, { data, loading, error }] = useCreateDashboardReportMutation({
 *   variables: {
 *      reportData: // value for 'reportData'
 *   },
 * });
 */
export function useCreateDashboardReportMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateDashboardReportMutation, CreateDashboardReportMutationVariables>) {
        return ApolloReactHooks.useMutation<CreateDashboardReportMutation, CreateDashboardReportMutationVariables>(CreateDashboardReportDocument, baseOptions);
      }
export type CreateDashboardReportMutationHookResult = ReturnType<typeof useCreateDashboardReportMutation>;
export type CreateDashboardReportMutationResult = ApolloReactCommon.MutationResult<CreateDashboardReportMutation>;
export type CreateDashboardReportMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateDashboardReportMutation, CreateDashboardReportMutationVariables>;
export const CreateReportDocument = gql`
    mutation CreateReport($reportData: CreateReportInput!) {
  createReport(reportData: $reportData) {
    report {
      id
      status
      reportType
      createdAt
      dateFrom
      dateTo
      fileUrl
      createdBy {
        firstName
        lastName
      }
      adminArea {
        edges {
          node {
            name
          }
        }
      }
      program {
        name
      }
    }
  }
}
    `;
export type CreateReportMutationFn = ApolloReactCommon.MutationFunction<CreateReportMutation, CreateReportMutationVariables>;
export type CreateReportComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CreateReportMutation, CreateReportMutationVariables>, 'mutation'>;

    export const CreateReportComponent = (props: CreateReportComponentProps) => (
      <ApolloReactComponents.Mutation<CreateReportMutation, CreateReportMutationVariables> mutation={CreateReportDocument} {...props} />
    );
    
export type CreateReportProps<TChildProps = {}> = ApolloReactHoc.MutateProps<CreateReportMutation, CreateReportMutationVariables> & TChildProps;
export function withCreateReport<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  CreateReportMutation,
  CreateReportMutationVariables,
  CreateReportProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, CreateReportMutation, CreateReportMutationVariables, CreateReportProps<TChildProps>>(CreateReportDocument, {
      alias: 'createReport',
      ...operationOptions
    });
};

/**
 * __useCreateReportMutation__
 *
 * To run a mutation, you first call `useCreateReportMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateReportMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createReportMutation, { data, loading, error }] = useCreateReportMutation({
 *   variables: {
 *      reportData: // value for 'reportData'
 *   },
 * });
 */
export function useCreateReportMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateReportMutation, CreateReportMutationVariables>) {
        return ApolloReactHooks.useMutation<CreateReportMutation, CreateReportMutationVariables>(CreateReportDocument, baseOptions);
      }
export type CreateReportMutationHookResult = ReturnType<typeof useCreateReportMutation>;
export type CreateReportMutationResult = ApolloReactCommon.MutationResult<CreateReportMutation>;
export type CreateReportMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateReportMutation, CreateReportMutationVariables>;
export const RestartCreateReportDocument = gql`
    mutation RestartCreateReport($reportData: RestartCreateReportInput!) {
  restartCreateReport(reportData: $reportData) {
    report {
      id
      status
      reportType
      createdAt
      dateFrom
      dateTo
      fileUrl
      createdBy {
        firstName
        lastName
      }
      adminArea {
        edges {
          node {
            name
          }
        }
      }
      program {
        name
      }
    }
  }
}
    `;
export type RestartCreateReportMutationFn = ApolloReactCommon.MutationFunction<RestartCreateReportMutation, RestartCreateReportMutationVariables>;
export type RestartCreateReportComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<RestartCreateReportMutation, RestartCreateReportMutationVariables>, 'mutation'>;

    export const RestartCreateReportComponent = (props: RestartCreateReportComponentProps) => (
      <ApolloReactComponents.Mutation<RestartCreateReportMutation, RestartCreateReportMutationVariables> mutation={RestartCreateReportDocument} {...props} />
    );
    
export type RestartCreateReportProps<TChildProps = {}> = ApolloReactHoc.MutateProps<RestartCreateReportMutation, RestartCreateReportMutationVariables> & TChildProps;
export function withRestartCreateReport<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  RestartCreateReportMutation,
  RestartCreateReportMutationVariables,
  RestartCreateReportProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, RestartCreateReportMutation, RestartCreateReportMutationVariables, RestartCreateReportProps<TChildProps>>(RestartCreateReportDocument, {
      alias: 'restartCreateReport',
      ...operationOptions
    });
};

/**
 * __useRestartCreateReportMutation__
 *
 * To run a mutation, you first call `useRestartCreateReportMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRestartCreateReportMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [restartCreateReportMutation, { data, loading, error }] = useRestartCreateReportMutation({
 *   variables: {
 *      reportData: // value for 'reportData'
 *   },
 * });
 */
export function useRestartCreateReportMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RestartCreateReportMutation, RestartCreateReportMutationVariables>) {
        return ApolloReactHooks.useMutation<RestartCreateReportMutation, RestartCreateReportMutationVariables>(RestartCreateReportDocument, baseOptions);
      }
export type RestartCreateReportMutationHookResult = ReturnType<typeof useRestartCreateReportMutation>;
export type RestartCreateReportMutationResult = ApolloReactCommon.MutationResult<RestartCreateReportMutation>;
export type RestartCreateReportMutationOptions = ApolloReactCommon.BaseMutationOptions<RestartCreateReportMutation, RestartCreateReportMutationVariables>;
export const CreateTpDocument = gql`
    mutation CreateTP($input: CreateTargetPopulationInput!) {
  createTargetPopulation(input: $input) {
    targetPopulation {
      id
      status
      totalHouseholdsCount
      totalIndividualsCount
    }
    validationErrors
  }
}
    `;
export type CreateTpMutationFn = ApolloReactCommon.MutationFunction<CreateTpMutation, CreateTpMutationVariables>;
export type CreateTpComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CreateTpMutation, CreateTpMutationVariables>, 'mutation'>;

    export const CreateTpComponent = (props: CreateTpComponentProps) => (
      <ApolloReactComponents.Mutation<CreateTpMutation, CreateTpMutationVariables> mutation={CreateTpDocument} {...props} />
    );
    
export type CreateTpProps<TChildProps = {}> = ApolloReactHoc.MutateProps<CreateTpMutation, CreateTpMutationVariables> & TChildProps;
export function withCreateTp<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  CreateTpMutation,
  CreateTpMutationVariables,
  CreateTpProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, CreateTpMutation, CreateTpMutationVariables, CreateTpProps<TChildProps>>(CreateTpDocument, {
      alias: 'createTp',
      ...operationOptions
    });
};

/**
 * __useCreateTpMutation__
 *
 * To run a mutation, you first call `useCreateTpMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateTpMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createTpMutation, { data, loading, error }] = useCreateTpMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateTpMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateTpMutation, CreateTpMutationVariables>) {
        return ApolloReactHooks.useMutation<CreateTpMutation, CreateTpMutationVariables>(CreateTpDocument, baseOptions);
      }
export type CreateTpMutationHookResult = ReturnType<typeof useCreateTpMutation>;
export type CreateTpMutationResult = ApolloReactCommon.MutationResult<CreateTpMutation>;
export type CreateTpMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateTpMutation, CreateTpMutationVariables>;
export const DeleteTargetPopulationDocument = gql`
    mutation DeleteTargetPopulation($input: DeleteTargetPopulationMutationInput!) {
  deleteTargetPopulation(input: $input) {
    clientMutationId
  }
}
    `;
export type DeleteTargetPopulationMutationFn = ApolloReactCommon.MutationFunction<DeleteTargetPopulationMutation, DeleteTargetPopulationMutationVariables>;
export type DeleteTargetPopulationComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<DeleteTargetPopulationMutation, DeleteTargetPopulationMutationVariables>, 'mutation'>;

    export const DeleteTargetPopulationComponent = (props: DeleteTargetPopulationComponentProps) => (
      <ApolloReactComponents.Mutation<DeleteTargetPopulationMutation, DeleteTargetPopulationMutationVariables> mutation={DeleteTargetPopulationDocument} {...props} />
    );
    
export type DeleteTargetPopulationProps<TChildProps = {}> = ApolloReactHoc.MutateProps<DeleteTargetPopulationMutation, DeleteTargetPopulationMutationVariables> & TChildProps;
export function withDeleteTargetPopulation<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  DeleteTargetPopulationMutation,
  DeleteTargetPopulationMutationVariables,
  DeleteTargetPopulationProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, DeleteTargetPopulationMutation, DeleteTargetPopulationMutationVariables, DeleteTargetPopulationProps<TChildProps>>(DeleteTargetPopulationDocument, {
      alias: 'deleteTargetPopulation',
      ...operationOptions
    });
};

/**
 * __useDeleteTargetPopulationMutation__
 *
 * To run a mutation, you first call `useDeleteTargetPopulationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteTargetPopulationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteTargetPopulationMutation, { data, loading, error }] = useDeleteTargetPopulationMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteTargetPopulationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteTargetPopulationMutation, DeleteTargetPopulationMutationVariables>) {
        return ApolloReactHooks.useMutation<DeleteTargetPopulationMutation, DeleteTargetPopulationMutationVariables>(DeleteTargetPopulationDocument, baseOptions);
      }
export type DeleteTargetPopulationMutationHookResult = ReturnType<typeof useDeleteTargetPopulationMutation>;
export type DeleteTargetPopulationMutationResult = ApolloReactCommon.MutationResult<DeleteTargetPopulationMutation>;
export type DeleteTargetPopulationMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteTargetPopulationMutation, DeleteTargetPopulationMutationVariables>;
export const CopyTargetPopulationDocument = gql`
    mutation CopyTargetPopulation($input: CopyTargetPopulationMutationInput!) {
  copyTargetPopulation(input: $input) {
    clientMutationId
    targetPopulation {
      id
    }
    validationErrors
  }
}
    `;
export type CopyTargetPopulationMutationFn = ApolloReactCommon.MutationFunction<CopyTargetPopulationMutation, CopyTargetPopulationMutationVariables>;
export type CopyTargetPopulationComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CopyTargetPopulationMutation, CopyTargetPopulationMutationVariables>, 'mutation'>;

    export const CopyTargetPopulationComponent = (props: CopyTargetPopulationComponentProps) => (
      <ApolloReactComponents.Mutation<CopyTargetPopulationMutation, CopyTargetPopulationMutationVariables> mutation={CopyTargetPopulationDocument} {...props} />
    );
    
export type CopyTargetPopulationProps<TChildProps = {}> = ApolloReactHoc.MutateProps<CopyTargetPopulationMutation, CopyTargetPopulationMutationVariables> & TChildProps;
export function withCopyTargetPopulation<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  CopyTargetPopulationMutation,
  CopyTargetPopulationMutationVariables,
  CopyTargetPopulationProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, CopyTargetPopulationMutation, CopyTargetPopulationMutationVariables, CopyTargetPopulationProps<TChildProps>>(CopyTargetPopulationDocument, {
      alias: 'copyTargetPopulation',
      ...operationOptions
    });
};

/**
 * __useCopyTargetPopulationMutation__
 *
 * To run a mutation, you first call `useCopyTargetPopulationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCopyTargetPopulationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [copyTargetPopulationMutation, { data, loading, error }] = useCopyTargetPopulationMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCopyTargetPopulationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CopyTargetPopulationMutation, CopyTargetPopulationMutationVariables>) {
        return ApolloReactHooks.useMutation<CopyTargetPopulationMutation, CopyTargetPopulationMutationVariables>(CopyTargetPopulationDocument, baseOptions);
      }
export type CopyTargetPopulationMutationHookResult = ReturnType<typeof useCopyTargetPopulationMutation>;
export type CopyTargetPopulationMutationResult = ApolloReactCommon.MutationResult<CopyTargetPopulationMutation>;
export type CopyTargetPopulationMutationOptions = ApolloReactCommon.BaseMutationOptions<CopyTargetPopulationMutation, CopyTargetPopulationMutationVariables>;
export const FinalizeTpDocument = gql`
    mutation FinalizeTP($id: ID!) {
  finalizeTargetPopulation(id: $id) {
    targetPopulation {
      ...targetPopulationDetailed
    }
  }
}
    ${TargetPopulationDetailedFragmentDoc}`;
export type FinalizeTpMutationFn = ApolloReactCommon.MutationFunction<FinalizeTpMutation, FinalizeTpMutationVariables>;
export type FinalizeTpComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<FinalizeTpMutation, FinalizeTpMutationVariables>, 'mutation'>;

    export const FinalizeTpComponent = (props: FinalizeTpComponentProps) => (
      <ApolloReactComponents.Mutation<FinalizeTpMutation, FinalizeTpMutationVariables> mutation={FinalizeTpDocument} {...props} />
    );
    
export type FinalizeTpProps<TChildProps = {}> = ApolloReactHoc.MutateProps<FinalizeTpMutation, FinalizeTpMutationVariables> & TChildProps;
export function withFinalizeTp<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  FinalizeTpMutation,
  FinalizeTpMutationVariables,
  FinalizeTpProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, FinalizeTpMutation, FinalizeTpMutationVariables, FinalizeTpProps<TChildProps>>(FinalizeTpDocument, {
      alias: 'finalizeTp',
      ...operationOptions
    });
};

/**
 * __useFinalizeTpMutation__
 *
 * To run a mutation, you first call `useFinalizeTpMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useFinalizeTpMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [finalizeTpMutation, { data, loading, error }] = useFinalizeTpMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useFinalizeTpMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<FinalizeTpMutation, FinalizeTpMutationVariables>) {
        return ApolloReactHooks.useMutation<FinalizeTpMutation, FinalizeTpMutationVariables>(FinalizeTpDocument, baseOptions);
      }
export type FinalizeTpMutationHookResult = ReturnType<typeof useFinalizeTpMutation>;
export type FinalizeTpMutationResult = ApolloReactCommon.MutationResult<FinalizeTpMutation>;
export type FinalizeTpMutationOptions = ApolloReactCommon.BaseMutationOptions<FinalizeTpMutation, FinalizeTpMutationVariables>;
export const LockTpDocument = gql`
    mutation LockTP($id: ID!) {
  lockTargetPopulation(id: $id) {
    targetPopulation {
      ...targetPopulationDetailed
    }
  }
}
    ${TargetPopulationDetailedFragmentDoc}`;
export type LockTpMutationFn = ApolloReactCommon.MutationFunction<LockTpMutation, LockTpMutationVariables>;
export type LockTpComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<LockTpMutation, LockTpMutationVariables>, 'mutation'>;

    export const LockTpComponent = (props: LockTpComponentProps) => (
      <ApolloReactComponents.Mutation<LockTpMutation, LockTpMutationVariables> mutation={LockTpDocument} {...props} />
    );
    
export type LockTpProps<TChildProps = {}> = ApolloReactHoc.MutateProps<LockTpMutation, LockTpMutationVariables> & TChildProps;
export function withLockTp<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  LockTpMutation,
  LockTpMutationVariables,
  LockTpProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, LockTpMutation, LockTpMutationVariables, LockTpProps<TChildProps>>(LockTpDocument, {
      alias: 'lockTp',
      ...operationOptions
    });
};

/**
 * __useLockTpMutation__
 *
 * To run a mutation, you first call `useLockTpMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLockTpMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [lockTpMutation, { data, loading, error }] = useLockTpMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useLockTpMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LockTpMutation, LockTpMutationVariables>) {
        return ApolloReactHooks.useMutation<LockTpMutation, LockTpMutationVariables>(LockTpDocument, baseOptions);
      }
export type LockTpMutationHookResult = ReturnType<typeof useLockTpMutation>;
export type LockTpMutationResult = ApolloReactCommon.MutationResult<LockTpMutation>;
export type LockTpMutationOptions = ApolloReactCommon.BaseMutationOptions<LockTpMutation, LockTpMutationVariables>;
export const RebuildTpDocument = gql`
    mutation RebuildTP($id: ID!) {
  targetPopulationRebuild(id: $id) {
    targetPopulation {
      ...targetPopulationDetailed
    }
  }
}
    ${TargetPopulationDetailedFragmentDoc}`;
export type RebuildTpMutationFn = ApolloReactCommon.MutationFunction<RebuildTpMutation, RebuildTpMutationVariables>;
export type RebuildTpComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<RebuildTpMutation, RebuildTpMutationVariables>, 'mutation'>;

    export const RebuildTpComponent = (props: RebuildTpComponentProps) => (
      <ApolloReactComponents.Mutation<RebuildTpMutation, RebuildTpMutationVariables> mutation={RebuildTpDocument} {...props} />
    );
    
export type RebuildTpProps<TChildProps = {}> = ApolloReactHoc.MutateProps<RebuildTpMutation, RebuildTpMutationVariables> & TChildProps;
export function withRebuildTp<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  RebuildTpMutation,
  RebuildTpMutationVariables,
  RebuildTpProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, RebuildTpMutation, RebuildTpMutationVariables, RebuildTpProps<TChildProps>>(RebuildTpDocument, {
      alias: 'rebuildTp',
      ...operationOptions
    });
};

/**
 * __useRebuildTpMutation__
 *
 * To run a mutation, you first call `useRebuildTpMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRebuildTpMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [rebuildTpMutation, { data, loading, error }] = useRebuildTpMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useRebuildTpMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RebuildTpMutation, RebuildTpMutationVariables>) {
        return ApolloReactHooks.useMutation<RebuildTpMutation, RebuildTpMutationVariables>(RebuildTpDocument, baseOptions);
      }
export type RebuildTpMutationHookResult = ReturnType<typeof useRebuildTpMutation>;
export type RebuildTpMutationResult = ApolloReactCommon.MutationResult<RebuildTpMutation>;
export type RebuildTpMutationOptions = ApolloReactCommon.BaseMutationOptions<RebuildTpMutation, RebuildTpMutationVariables>;
export const SetSteficonRuleOnTargetPopulationDocument = gql`
    mutation setSteficonRuleOnTargetPopulation($input: SetSteficonRuleOnTargetPopulationMutationInput!) {
  setSteficonRuleOnTargetPopulation(input: $input) {
    targetPopulation {
      ...targetPopulationDetailed
    }
  }
}
    ${TargetPopulationDetailedFragmentDoc}`;
export type SetSteficonRuleOnTargetPopulationMutationFn = ApolloReactCommon.MutationFunction<SetSteficonRuleOnTargetPopulationMutation, SetSteficonRuleOnTargetPopulationMutationVariables>;
export type SetSteficonRuleOnTargetPopulationComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<SetSteficonRuleOnTargetPopulationMutation, SetSteficonRuleOnTargetPopulationMutationVariables>, 'mutation'>;

    export const SetSteficonRuleOnTargetPopulationComponent = (props: SetSteficonRuleOnTargetPopulationComponentProps) => (
      <ApolloReactComponents.Mutation<SetSteficonRuleOnTargetPopulationMutation, SetSteficonRuleOnTargetPopulationMutationVariables> mutation={SetSteficonRuleOnTargetPopulationDocument} {...props} />
    );
    
export type SetSteficonRuleOnTargetPopulationProps<TChildProps = {}> = ApolloReactHoc.MutateProps<SetSteficonRuleOnTargetPopulationMutation, SetSteficonRuleOnTargetPopulationMutationVariables> & TChildProps;
export function withSetSteficonRuleOnTargetPopulation<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  SetSteficonRuleOnTargetPopulationMutation,
  SetSteficonRuleOnTargetPopulationMutationVariables,
  SetSteficonRuleOnTargetPopulationProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, SetSteficonRuleOnTargetPopulationMutation, SetSteficonRuleOnTargetPopulationMutationVariables, SetSteficonRuleOnTargetPopulationProps<TChildProps>>(SetSteficonRuleOnTargetPopulationDocument, {
      alias: 'setSteficonRuleOnTargetPopulation',
      ...operationOptions
    });
};

/**
 * __useSetSteficonRuleOnTargetPopulationMutation__
 *
 * To run a mutation, you first call `useSetSteficonRuleOnTargetPopulationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetSteficonRuleOnTargetPopulationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setSteficonRuleOnTargetPopulationMutation, { data, loading, error }] = useSetSteficonRuleOnTargetPopulationMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSetSteficonRuleOnTargetPopulationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetSteficonRuleOnTargetPopulationMutation, SetSteficonRuleOnTargetPopulationMutationVariables>) {
        return ApolloReactHooks.useMutation<SetSteficonRuleOnTargetPopulationMutation, SetSteficonRuleOnTargetPopulationMutationVariables>(SetSteficonRuleOnTargetPopulationDocument, baseOptions);
      }
export type SetSteficonRuleOnTargetPopulationMutationHookResult = ReturnType<typeof useSetSteficonRuleOnTargetPopulationMutation>;
export type SetSteficonRuleOnTargetPopulationMutationResult = ApolloReactCommon.MutationResult<SetSteficonRuleOnTargetPopulationMutation>;
export type SetSteficonRuleOnTargetPopulationMutationOptions = ApolloReactCommon.BaseMutationOptions<SetSteficonRuleOnTargetPopulationMutation, SetSteficonRuleOnTargetPopulationMutationVariables>;
export const UnlockTpDocument = gql`
    mutation UnlockTP($id: ID!) {
  unlockTargetPopulation(id: $id) {
    targetPopulation {
      ...targetPopulationDetailed
    }
  }
}
    ${TargetPopulationDetailedFragmentDoc}`;
export type UnlockTpMutationFn = ApolloReactCommon.MutationFunction<UnlockTpMutation, UnlockTpMutationVariables>;
export type UnlockTpComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<UnlockTpMutation, UnlockTpMutationVariables>, 'mutation'>;

    export const UnlockTpComponent = (props: UnlockTpComponentProps) => (
      <ApolloReactComponents.Mutation<UnlockTpMutation, UnlockTpMutationVariables> mutation={UnlockTpDocument} {...props} />
    );
    
export type UnlockTpProps<TChildProps = {}> = ApolloReactHoc.MutateProps<UnlockTpMutation, UnlockTpMutationVariables> & TChildProps;
export function withUnlockTp<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  UnlockTpMutation,
  UnlockTpMutationVariables,
  UnlockTpProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, UnlockTpMutation, UnlockTpMutationVariables, UnlockTpProps<TChildProps>>(UnlockTpDocument, {
      alias: 'unlockTp',
      ...operationOptions
    });
};

/**
 * __useUnlockTpMutation__
 *
 * To run a mutation, you first call `useUnlockTpMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUnlockTpMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [unlockTpMutation, { data, loading, error }] = useUnlockTpMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useUnlockTpMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UnlockTpMutation, UnlockTpMutationVariables>) {
        return ApolloReactHooks.useMutation<UnlockTpMutation, UnlockTpMutationVariables>(UnlockTpDocument, baseOptions);
      }
export type UnlockTpMutationHookResult = ReturnType<typeof useUnlockTpMutation>;
export type UnlockTpMutationResult = ApolloReactCommon.MutationResult<UnlockTpMutation>;
export type UnlockTpMutationOptions = ApolloReactCommon.BaseMutationOptions<UnlockTpMutation, UnlockTpMutationVariables>;
export const UpdateTpDocument = gql`
    mutation UpdateTP($input: UpdateTargetPopulationInput!) {
  updateTargetPopulation(input: $input) {
    targetPopulation {
      id
      status
      totalHouseholdsCount
      totalIndividualsCount
    }
    validationErrors
  }
}
    `;
export type UpdateTpMutationFn = ApolloReactCommon.MutationFunction<UpdateTpMutation, UpdateTpMutationVariables>;
export type UpdateTpComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<UpdateTpMutation, UpdateTpMutationVariables>, 'mutation'>;

    export const UpdateTpComponent = (props: UpdateTpComponentProps) => (
      <ApolloReactComponents.Mutation<UpdateTpMutation, UpdateTpMutationVariables> mutation={UpdateTpDocument} {...props} />
    );
    
export type UpdateTpProps<TChildProps = {}> = ApolloReactHoc.MutateProps<UpdateTpMutation, UpdateTpMutationVariables> & TChildProps;
export function withUpdateTp<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  UpdateTpMutation,
  UpdateTpMutationVariables,
  UpdateTpProps<TChildProps>>) {
    return ApolloReactHoc.withMutation<TProps, UpdateTpMutation, UpdateTpMutationVariables, UpdateTpProps<TChildProps>>(UpdateTpDocument, {
      alias: 'updateTp',
      ...operationOptions
    });
};

/**
 * __useUpdateTpMutation__
 *
 * To run a mutation, you first call `useUpdateTpMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateTpMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateTpMutation, { data, loading, error }] = useUpdateTpMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateTpMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateTpMutation, UpdateTpMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateTpMutation, UpdateTpMutationVariables>(UpdateTpDocument, baseOptions);
      }
export type UpdateTpMutationHookResult = ReturnType<typeof useUpdateTpMutation>;
export type UpdateTpMutationResult = ApolloReactCommon.MutationResult<UpdateTpMutation>;
export type UpdateTpMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateTpMutation, UpdateTpMutationVariables>;
export const AccountabilityCommunicationMessageDocument = gql`
    query AccountabilityCommunicationMessage($id: ID!) {
  accountabilityCommunicationMessage(id: $id) {
    id
    unicefId
    createdBy {
      id
      firstName
      lastName
      email
    }
    createdAt
    targetPopulation {
      id
      name
    }
    registrationDataImport {
      id
      name
    }
    title
    body
  }
}
    `;
export type AccountabilityCommunicationMessageComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AccountabilityCommunicationMessageQuery, AccountabilityCommunicationMessageQueryVariables>, 'query'> & ({ variables: AccountabilityCommunicationMessageQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const AccountabilityCommunicationMessageComponent = (props: AccountabilityCommunicationMessageComponentProps) => (
      <ApolloReactComponents.Query<AccountabilityCommunicationMessageQuery, AccountabilityCommunicationMessageQueryVariables> query={AccountabilityCommunicationMessageDocument} {...props} />
    );
    
export type AccountabilityCommunicationMessageProps<TChildProps = {}> = ApolloReactHoc.DataProps<AccountabilityCommunicationMessageQuery, AccountabilityCommunicationMessageQueryVariables> & TChildProps;
export function withAccountabilityCommunicationMessage<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AccountabilityCommunicationMessageQuery,
  AccountabilityCommunicationMessageQueryVariables,
  AccountabilityCommunicationMessageProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AccountabilityCommunicationMessageQuery, AccountabilityCommunicationMessageQueryVariables, AccountabilityCommunicationMessageProps<TChildProps>>(AccountabilityCommunicationMessageDocument, {
      alias: 'accountabilityCommunicationMessage',
      ...operationOptions
    });
};

/**
 * __useAccountabilityCommunicationMessageQuery__
 *
 * To run a query within a React component, call `useAccountabilityCommunicationMessageQuery` and pass it any options that fit your needs.
 * When your component renders, `useAccountabilityCommunicationMessageQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAccountabilityCommunicationMessageQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useAccountabilityCommunicationMessageQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AccountabilityCommunicationMessageQuery, AccountabilityCommunicationMessageQueryVariables>) {
        return ApolloReactHooks.useQuery<AccountabilityCommunicationMessageQuery, AccountabilityCommunicationMessageQueryVariables>(AccountabilityCommunicationMessageDocument, baseOptions);
      }
export function useAccountabilityCommunicationMessageLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AccountabilityCommunicationMessageQuery, AccountabilityCommunicationMessageQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AccountabilityCommunicationMessageQuery, AccountabilityCommunicationMessageQueryVariables>(AccountabilityCommunicationMessageDocument, baseOptions);
        }
export type AccountabilityCommunicationMessageQueryHookResult = ReturnType<typeof useAccountabilityCommunicationMessageQuery>;
export type AccountabilityCommunicationMessageLazyQueryHookResult = ReturnType<typeof useAccountabilityCommunicationMessageLazyQuery>;
export type AccountabilityCommunicationMessageQueryResult = ApolloReactCommon.QueryResult<AccountabilityCommunicationMessageQuery, AccountabilityCommunicationMessageQueryVariables>;
export const AccountabilityCommunicationMessageSampleSizeDocument = gql`
    query AccountabilityCommunicationMessageSampleSize($input: GetAccountabilityCommunicationMessageSampleSizeInput!) {
  accountabilityCommunicationMessageSampleSize(input: $input) {
    numberOfRecipients
    sampleSize
  }
}
    `;
export type AccountabilityCommunicationMessageSampleSizeComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AccountabilityCommunicationMessageSampleSizeQuery, AccountabilityCommunicationMessageSampleSizeQueryVariables>, 'query'> & ({ variables: AccountabilityCommunicationMessageSampleSizeQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const AccountabilityCommunicationMessageSampleSizeComponent = (props: AccountabilityCommunicationMessageSampleSizeComponentProps) => (
      <ApolloReactComponents.Query<AccountabilityCommunicationMessageSampleSizeQuery, AccountabilityCommunicationMessageSampleSizeQueryVariables> query={AccountabilityCommunicationMessageSampleSizeDocument} {...props} />
    );
    
export type AccountabilityCommunicationMessageSampleSizeProps<TChildProps = {}> = ApolloReactHoc.DataProps<AccountabilityCommunicationMessageSampleSizeQuery, AccountabilityCommunicationMessageSampleSizeQueryVariables> & TChildProps;
export function withAccountabilityCommunicationMessageSampleSize<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AccountabilityCommunicationMessageSampleSizeQuery,
  AccountabilityCommunicationMessageSampleSizeQueryVariables,
  AccountabilityCommunicationMessageSampleSizeProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AccountabilityCommunicationMessageSampleSizeQuery, AccountabilityCommunicationMessageSampleSizeQueryVariables, AccountabilityCommunicationMessageSampleSizeProps<TChildProps>>(AccountabilityCommunicationMessageSampleSizeDocument, {
      alias: 'accountabilityCommunicationMessageSampleSize',
      ...operationOptions
    });
};

/**
 * __useAccountabilityCommunicationMessageSampleSizeQuery__
 *
 * To run a query within a React component, call `useAccountabilityCommunicationMessageSampleSizeQuery` and pass it any options that fit your needs.
 * When your component renders, `useAccountabilityCommunicationMessageSampleSizeQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAccountabilityCommunicationMessageSampleSizeQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAccountabilityCommunicationMessageSampleSizeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AccountabilityCommunicationMessageSampleSizeQuery, AccountabilityCommunicationMessageSampleSizeQueryVariables>) {
        return ApolloReactHooks.useQuery<AccountabilityCommunicationMessageSampleSizeQuery, AccountabilityCommunicationMessageSampleSizeQueryVariables>(AccountabilityCommunicationMessageSampleSizeDocument, baseOptions);
      }
export function useAccountabilityCommunicationMessageSampleSizeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AccountabilityCommunicationMessageSampleSizeQuery, AccountabilityCommunicationMessageSampleSizeQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AccountabilityCommunicationMessageSampleSizeQuery, AccountabilityCommunicationMessageSampleSizeQueryVariables>(AccountabilityCommunicationMessageSampleSizeDocument, baseOptions);
        }
export type AccountabilityCommunicationMessageSampleSizeQueryHookResult = ReturnType<typeof useAccountabilityCommunicationMessageSampleSizeQuery>;
export type AccountabilityCommunicationMessageSampleSizeLazyQueryHookResult = ReturnType<typeof useAccountabilityCommunicationMessageSampleSizeLazyQuery>;
export type AccountabilityCommunicationMessageSampleSizeQueryResult = ApolloReactCommon.QueryResult<AccountabilityCommunicationMessageSampleSizeQuery, AccountabilityCommunicationMessageSampleSizeQueryVariables>;
export const AccountabilitySampleSizeDocument = gql`
    query AccountabilitySampleSize($input: AccountabilitySampleSizeInput!) {
  accountabilitySampleSize(input: $input) {
    numberOfRecipients
    sampleSize
  }
}
    `;
export type AccountabilitySampleSizeComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AccountabilitySampleSizeQuery, AccountabilitySampleSizeQueryVariables>, 'query'> & ({ variables: AccountabilitySampleSizeQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const AccountabilitySampleSizeComponent = (props: AccountabilitySampleSizeComponentProps) => (
      <ApolloReactComponents.Query<AccountabilitySampleSizeQuery, AccountabilitySampleSizeQueryVariables> query={AccountabilitySampleSizeDocument} {...props} />
    );
    
export type AccountabilitySampleSizeProps<TChildProps = {}> = ApolloReactHoc.DataProps<AccountabilitySampleSizeQuery, AccountabilitySampleSizeQueryVariables> & TChildProps;
export function withAccountabilitySampleSize<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AccountabilitySampleSizeQuery,
  AccountabilitySampleSizeQueryVariables,
  AccountabilitySampleSizeProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AccountabilitySampleSizeQuery, AccountabilitySampleSizeQueryVariables, AccountabilitySampleSizeProps<TChildProps>>(AccountabilitySampleSizeDocument, {
      alias: 'accountabilitySampleSize',
      ...operationOptions
    });
};

/**
 * __useAccountabilitySampleSizeQuery__
 *
 * To run a query within a React component, call `useAccountabilitySampleSizeQuery` and pass it any options that fit your needs.
 * When your component renders, `useAccountabilitySampleSizeQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAccountabilitySampleSizeQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAccountabilitySampleSizeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AccountabilitySampleSizeQuery, AccountabilitySampleSizeQueryVariables>) {
        return ApolloReactHooks.useQuery<AccountabilitySampleSizeQuery, AccountabilitySampleSizeQueryVariables>(AccountabilitySampleSizeDocument, baseOptions);
      }
export function useAccountabilitySampleSizeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AccountabilitySampleSizeQuery, AccountabilitySampleSizeQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AccountabilitySampleSizeQuery, AccountabilitySampleSizeQueryVariables>(AccountabilitySampleSizeDocument, baseOptions);
        }
export type AccountabilitySampleSizeQueryHookResult = ReturnType<typeof useAccountabilitySampleSizeQuery>;
export type AccountabilitySampleSizeLazyQueryHookResult = ReturnType<typeof useAccountabilitySampleSizeLazyQuery>;
export type AccountabilitySampleSizeQueryResult = ApolloReactCommon.QueryResult<AccountabilitySampleSizeQuery, AccountabilitySampleSizeQueryVariables>;
export const AllAccountabilityCommunicationMessageRecipientsDocument = gql`
    query AllAccountabilityCommunicationMessageRecipients($offset: Int, $before: String, $after: String, $first: Int, $last: Int, $messageId: String!, $recipientId: String, $fullName: String, $phoneNo: String, $sex: String, $orderBy: String) {
  allAccountabilityCommunicationMessageRecipients(offset: $offset, before: $before, after: $after, first: $first, last: $last, messageId: $messageId, recipientId: $recipientId, fullName: $fullName, phoneNo: $phoneNo, sex: $sex, orderBy: $orderBy) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    totalCount
    edgeCount
    edges {
      cursor
      node {
        id
        headOfHousehold {
          id
          fullName
          household {
            id
            unicefId
            size
            status
            admin2 {
              id
              name
            }
            residenceStatus
            lastRegistrationDate
          }
        }
      }
    }
  }
}
    `;
export type AllAccountabilityCommunicationMessageRecipientsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllAccountabilityCommunicationMessageRecipientsQuery, AllAccountabilityCommunicationMessageRecipientsQueryVariables>, 'query'> & ({ variables: AllAccountabilityCommunicationMessageRecipientsQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const AllAccountabilityCommunicationMessageRecipientsComponent = (props: AllAccountabilityCommunicationMessageRecipientsComponentProps) => (
      <ApolloReactComponents.Query<AllAccountabilityCommunicationMessageRecipientsQuery, AllAccountabilityCommunicationMessageRecipientsQueryVariables> query={AllAccountabilityCommunicationMessageRecipientsDocument} {...props} />
    );
    
export type AllAccountabilityCommunicationMessageRecipientsProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllAccountabilityCommunicationMessageRecipientsQuery, AllAccountabilityCommunicationMessageRecipientsQueryVariables> & TChildProps;
export function withAllAccountabilityCommunicationMessageRecipients<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllAccountabilityCommunicationMessageRecipientsQuery,
  AllAccountabilityCommunicationMessageRecipientsQueryVariables,
  AllAccountabilityCommunicationMessageRecipientsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllAccountabilityCommunicationMessageRecipientsQuery, AllAccountabilityCommunicationMessageRecipientsQueryVariables, AllAccountabilityCommunicationMessageRecipientsProps<TChildProps>>(AllAccountabilityCommunicationMessageRecipientsDocument, {
      alias: 'allAccountabilityCommunicationMessageRecipients',
      ...operationOptions
    });
};

/**
 * __useAllAccountabilityCommunicationMessageRecipientsQuery__
 *
 * To run a query within a React component, call `useAllAccountabilityCommunicationMessageRecipientsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllAccountabilityCommunicationMessageRecipientsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllAccountabilityCommunicationMessageRecipientsQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      before: // value for 'before'
 *      after: // value for 'after'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      messageId: // value for 'messageId'
 *      recipientId: // value for 'recipientId'
 *      fullName: // value for 'fullName'
 *      phoneNo: // value for 'phoneNo'
 *      sex: // value for 'sex'
 *      orderBy: // value for 'orderBy'
 *   },
 * });
 */
export function useAllAccountabilityCommunicationMessageRecipientsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllAccountabilityCommunicationMessageRecipientsQuery, AllAccountabilityCommunicationMessageRecipientsQueryVariables>) {
        return ApolloReactHooks.useQuery<AllAccountabilityCommunicationMessageRecipientsQuery, AllAccountabilityCommunicationMessageRecipientsQueryVariables>(AllAccountabilityCommunicationMessageRecipientsDocument, baseOptions);
      }
export function useAllAccountabilityCommunicationMessageRecipientsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllAccountabilityCommunicationMessageRecipientsQuery, AllAccountabilityCommunicationMessageRecipientsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllAccountabilityCommunicationMessageRecipientsQuery, AllAccountabilityCommunicationMessageRecipientsQueryVariables>(AllAccountabilityCommunicationMessageRecipientsDocument, baseOptions);
        }
export type AllAccountabilityCommunicationMessageRecipientsQueryHookResult = ReturnType<typeof useAllAccountabilityCommunicationMessageRecipientsQuery>;
export type AllAccountabilityCommunicationMessageRecipientsLazyQueryHookResult = ReturnType<typeof useAllAccountabilityCommunicationMessageRecipientsLazyQuery>;
export type AllAccountabilityCommunicationMessageRecipientsQueryResult = ApolloReactCommon.QueryResult<AllAccountabilityCommunicationMessageRecipientsQuery, AllAccountabilityCommunicationMessageRecipientsQueryVariables>;
export const AllAccountabilityCommunicationMessagesDocument = gql`
    query allAccountabilityCommunicationMessages($offset: Int, $before: String, $after: String, $first: Int, $last: Int, $numberOfRecipients: Int, $numberOfRecipients_Gte: Int, $numberOfRecipients_Lte: Int, $targetPopulation: ID, $createdBy: ID, $program: String, $createdAtRange: String, $title: String, $body: String, $samplingType: String, $orderBy: String) {
  allAccountabilityCommunicationMessages(offset: $offset, before: $before, after: $after, first: $first, last: $last, numberOfRecipients: $numberOfRecipients, numberOfRecipients_Gte: $numberOfRecipients_Gte, numberOfRecipients_Lte: $numberOfRecipients_Lte, targetPopulation: $targetPopulation, createdBy: $createdBy, program: $program, createdAtRange: $createdAtRange, title: $title, body: $body, samplingType: $samplingType, orderBy: $orderBy) {
    totalCount
    pageInfo {
      startCursor
      endCursor
    }
    edges {
      cursor
      node {
        id
        unicefId
        title
        numberOfRecipients
        createdBy {
          id
          firstName
          lastName
          email
        }
        createdAt
      }
    }
  }
}
    `;
export type AllAccountabilityCommunicationMessagesComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllAccountabilityCommunicationMessagesQuery, AllAccountabilityCommunicationMessagesQueryVariables>, 'query'>;

    export const AllAccountabilityCommunicationMessagesComponent = (props: AllAccountabilityCommunicationMessagesComponentProps) => (
      <ApolloReactComponents.Query<AllAccountabilityCommunicationMessagesQuery, AllAccountabilityCommunicationMessagesQueryVariables> query={AllAccountabilityCommunicationMessagesDocument} {...props} />
    );
    
export type AllAccountabilityCommunicationMessagesProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllAccountabilityCommunicationMessagesQuery, AllAccountabilityCommunicationMessagesQueryVariables> & TChildProps;
export function withAllAccountabilityCommunicationMessages<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllAccountabilityCommunicationMessagesQuery,
  AllAccountabilityCommunicationMessagesQueryVariables,
  AllAccountabilityCommunicationMessagesProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllAccountabilityCommunicationMessagesQuery, AllAccountabilityCommunicationMessagesQueryVariables, AllAccountabilityCommunicationMessagesProps<TChildProps>>(AllAccountabilityCommunicationMessagesDocument, {
      alias: 'allAccountabilityCommunicationMessages',
      ...operationOptions
    });
};

/**
 * __useAllAccountabilityCommunicationMessagesQuery__
 *
 * To run a query within a React component, call `useAllAccountabilityCommunicationMessagesQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllAccountabilityCommunicationMessagesQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllAccountabilityCommunicationMessagesQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      before: // value for 'before'
 *      after: // value for 'after'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      numberOfRecipients: // value for 'numberOfRecipients'
 *      numberOfRecipients_Gte: // value for 'numberOfRecipients_Gte'
 *      numberOfRecipients_Lte: // value for 'numberOfRecipients_Lte'
 *      targetPopulation: // value for 'targetPopulation'
 *      createdBy: // value for 'createdBy'
 *      program: // value for 'program'
 *      createdAtRange: // value for 'createdAtRange'
 *      title: // value for 'title'
 *      body: // value for 'body'
 *      samplingType: // value for 'samplingType'
 *      orderBy: // value for 'orderBy'
 *   },
 * });
 */
export function useAllAccountabilityCommunicationMessagesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllAccountabilityCommunicationMessagesQuery, AllAccountabilityCommunicationMessagesQueryVariables>) {
        return ApolloReactHooks.useQuery<AllAccountabilityCommunicationMessagesQuery, AllAccountabilityCommunicationMessagesQueryVariables>(AllAccountabilityCommunicationMessagesDocument, baseOptions);
      }
export function useAllAccountabilityCommunicationMessagesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllAccountabilityCommunicationMessagesQuery, AllAccountabilityCommunicationMessagesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllAccountabilityCommunicationMessagesQuery, AllAccountabilityCommunicationMessagesQueryVariables>(AllAccountabilityCommunicationMessagesDocument, baseOptions);
        }
export type AllAccountabilityCommunicationMessagesQueryHookResult = ReturnType<typeof useAllAccountabilityCommunicationMessagesQuery>;
export type AllAccountabilityCommunicationMessagesLazyQueryHookResult = ReturnType<typeof useAllAccountabilityCommunicationMessagesLazyQuery>;
export type AllAccountabilityCommunicationMessagesQueryResult = ApolloReactCommon.QueryResult<AllAccountabilityCommunicationMessagesQuery, AllAccountabilityCommunicationMessagesQueryVariables>;
export const AllAdminAreasDocument = gql`
    query AllAdminAreas($name: String, $businessArea: String, $level: Int, $first: Int, $parentId: String) {
  allAdminAreas(name_Istartswith: $name, businessArea: $businessArea, first: $first, level: $level, parentId: $parentId) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      endCursor
      startCursor
    }
    edges {
      node {
        id
        name
        pCode
      }
    }
  }
}
    `;
export type AllAdminAreasComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllAdminAreasQuery, AllAdminAreasQueryVariables>, 'query'>;

    export const AllAdminAreasComponent = (props: AllAdminAreasComponentProps) => (
      <ApolloReactComponents.Query<AllAdminAreasQuery, AllAdminAreasQueryVariables> query={AllAdminAreasDocument} {...props} />
    );
    
export type AllAdminAreasProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllAdminAreasQuery, AllAdminAreasQueryVariables> & TChildProps;
export function withAllAdminAreas<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllAdminAreasQuery,
  AllAdminAreasQueryVariables,
  AllAdminAreasProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllAdminAreasQuery, AllAdminAreasQueryVariables, AllAdminAreasProps<TChildProps>>(AllAdminAreasDocument, {
      alias: 'allAdminAreas',
      ...operationOptions
    });
};

/**
 * __useAllAdminAreasQuery__
 *
 * To run a query within a React component, call `useAllAdminAreasQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllAdminAreasQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllAdminAreasQuery({
 *   variables: {
 *      name: // value for 'name'
 *      businessArea: // value for 'businessArea'
 *      level: // value for 'level'
 *      first: // value for 'first'
 *      parentId: // value for 'parentId'
 *   },
 * });
 */
export function useAllAdminAreasQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllAdminAreasQuery, AllAdminAreasQueryVariables>) {
        return ApolloReactHooks.useQuery<AllAdminAreasQuery, AllAdminAreasQueryVariables>(AllAdminAreasDocument, baseOptions);
      }
export function useAllAdminAreasLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllAdminAreasQuery, AllAdminAreasQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllAdminAreasQuery, AllAdminAreasQueryVariables>(AllAdminAreasDocument, baseOptions);
        }
export type AllAdminAreasQueryHookResult = ReturnType<typeof useAllAdminAreasQuery>;
export type AllAdminAreasLazyQueryHookResult = ReturnType<typeof useAllAdminAreasLazyQuery>;
export type AllAdminAreasQueryResult = ApolloReactCommon.QueryResult<AllAdminAreasQuery, AllAdminAreasQueryVariables>;
export const AllBusinessAreasDocument = gql`
    query AllBusinessAreas($slug: String) {
  allBusinessAreas(slug: $slug) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      endCursor
      startCursor
    }
    edges {
      node {
        id
        name
        slug
      }
    }
  }
}
    `;
export type AllBusinessAreasComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllBusinessAreasQuery, AllBusinessAreasQueryVariables>, 'query'>;

    export const AllBusinessAreasComponent = (props: AllBusinessAreasComponentProps) => (
      <ApolloReactComponents.Query<AllBusinessAreasQuery, AllBusinessAreasQueryVariables> query={AllBusinessAreasDocument} {...props} />
    );
    
export type AllBusinessAreasProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllBusinessAreasQuery, AllBusinessAreasQueryVariables> & TChildProps;
export function withAllBusinessAreas<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllBusinessAreasQuery,
  AllBusinessAreasQueryVariables,
  AllBusinessAreasProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllBusinessAreasQuery, AllBusinessAreasQueryVariables, AllBusinessAreasProps<TChildProps>>(AllBusinessAreasDocument, {
      alias: 'allBusinessAreas',
      ...operationOptions
    });
};

/**
 * __useAllBusinessAreasQuery__
 *
 * To run a query within a React component, call `useAllBusinessAreasQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllBusinessAreasQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllBusinessAreasQuery({
 *   variables: {
 *      slug: // value for 'slug'
 *   },
 * });
 */
export function useAllBusinessAreasQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllBusinessAreasQuery, AllBusinessAreasQueryVariables>) {
        return ApolloReactHooks.useQuery<AllBusinessAreasQuery, AllBusinessAreasQueryVariables>(AllBusinessAreasDocument, baseOptions);
      }
export function useAllBusinessAreasLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllBusinessAreasQuery, AllBusinessAreasQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllBusinessAreasQuery, AllBusinessAreasQueryVariables>(AllBusinessAreasDocument, baseOptions);
        }
export type AllBusinessAreasQueryHookResult = ReturnType<typeof useAllBusinessAreasQuery>;
export type AllBusinessAreasLazyQueryHookResult = ReturnType<typeof useAllBusinessAreasLazyQuery>;
export type AllBusinessAreasQueryResult = ApolloReactCommon.QueryResult<AllBusinessAreasQuery, AllBusinessAreasQueryVariables>;
export const AllLogEntriesDocument = gql`
    query AllLogEntries($businessArea: String!, $objectId: UUID, $after: String, $before: String, $first: Int, $last: Int, $search: String, $module: String, $userId: String, $programId: String) {
  allLogEntries(after: $after, before: $before, first: $first, last: $last, objectId: $objectId, businessArea: $businessArea, search: $search, module: $module, userId: $userId, programId: $programId) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        id
        action
        changes
        objectRepr
        objectId
        timestamp
        isUserGenerated
        contentType {
          id
          appLabel
          model
          name
        }
        user {
          id
          firstName
          lastName
        }
      }
    }
  }
  logEntryActionChoices {
    name
    value
  }
}
    `;
export type AllLogEntriesComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllLogEntriesQuery, AllLogEntriesQueryVariables>, 'query'> & ({ variables: AllLogEntriesQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const AllLogEntriesComponent = (props: AllLogEntriesComponentProps) => (
      <ApolloReactComponents.Query<AllLogEntriesQuery, AllLogEntriesQueryVariables> query={AllLogEntriesDocument} {...props} />
    );
    
export type AllLogEntriesProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllLogEntriesQuery, AllLogEntriesQueryVariables> & TChildProps;
export function withAllLogEntries<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllLogEntriesQuery,
  AllLogEntriesQueryVariables,
  AllLogEntriesProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllLogEntriesQuery, AllLogEntriesQueryVariables, AllLogEntriesProps<TChildProps>>(AllLogEntriesDocument, {
      alias: 'allLogEntries',
      ...operationOptions
    });
};

/**
 * __useAllLogEntriesQuery__
 *
 * To run a query within a React component, call `useAllLogEntriesQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllLogEntriesQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllLogEntriesQuery({
 *   variables: {
 *      businessArea: // value for 'businessArea'
 *      objectId: // value for 'objectId'
 *      after: // value for 'after'
 *      before: // value for 'before'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      search: // value for 'search'
 *      module: // value for 'module'
 *      userId: // value for 'userId'
 *      programId: // value for 'programId'
 *   },
 * });
 */
export function useAllLogEntriesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllLogEntriesQuery, AllLogEntriesQueryVariables>) {
        return ApolloReactHooks.useQuery<AllLogEntriesQuery, AllLogEntriesQueryVariables>(AllLogEntriesDocument, baseOptions);
      }
export function useAllLogEntriesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllLogEntriesQuery, AllLogEntriesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllLogEntriesQuery, AllLogEntriesQueryVariables>(AllLogEntriesDocument, baseOptions);
        }
export type AllLogEntriesQueryHookResult = ReturnType<typeof useAllLogEntriesQuery>;
export type AllLogEntriesLazyQueryHookResult = ReturnType<typeof useAllLogEntriesLazyQuery>;
export type AllLogEntriesQueryResult = ApolloReactCommon.QueryResult<AllLogEntriesQuery, AllLogEntriesQueryVariables>;
export const AllSanctionListIndividualsDocument = gql`
    query AllSanctionListIndividuals($referenceNumber: String!, $first: Int, $last: Int, $after: String, $before: String, $orderBy: String, $fullNameContains: String) {
  allSanctionListIndividuals(fullName_Startswith: $fullNameContains, referenceNumber: $referenceNumber, first: $first, last: $last, after: $after, before: $before, orderBy: $orderBy) {
    totalCount
    pageInfo {
      hasNextPage
      hasPreviousPage
      endCursor
      startCursor
    }
    edges {
      cursor
      node {
        id
        referenceNumber
        fullName
        listedOn
        documents {
          edges {
            node {
              id
              documentNumber
              typeOfDocument
              issuingCountry
            }
          }
        }
        aliasNames {
          edges {
            node {
              id
              name
            }
          }
        }
        datesOfBirth {
          edges {
            node {
              id
              date
            }
          }
        }
      }
    }
  }
}
    `;
export type AllSanctionListIndividualsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllSanctionListIndividualsQuery, AllSanctionListIndividualsQueryVariables>, 'query'> & ({ variables: AllSanctionListIndividualsQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const AllSanctionListIndividualsComponent = (props: AllSanctionListIndividualsComponentProps) => (
      <ApolloReactComponents.Query<AllSanctionListIndividualsQuery, AllSanctionListIndividualsQueryVariables> query={AllSanctionListIndividualsDocument} {...props} />
    );
    
export type AllSanctionListIndividualsProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllSanctionListIndividualsQuery, AllSanctionListIndividualsQueryVariables> & TChildProps;
export function withAllSanctionListIndividuals<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllSanctionListIndividualsQuery,
  AllSanctionListIndividualsQueryVariables,
  AllSanctionListIndividualsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllSanctionListIndividualsQuery, AllSanctionListIndividualsQueryVariables, AllSanctionListIndividualsProps<TChildProps>>(AllSanctionListIndividualsDocument, {
      alias: 'allSanctionListIndividuals',
      ...operationOptions
    });
};

/**
 * __useAllSanctionListIndividualsQuery__
 *
 * To run a query within a React component, call `useAllSanctionListIndividualsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllSanctionListIndividualsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllSanctionListIndividualsQuery({
 *   variables: {
 *      referenceNumber: // value for 'referenceNumber'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      after: // value for 'after'
 *      before: // value for 'before'
 *      orderBy: // value for 'orderBy'
 *      fullNameContains: // value for 'fullNameContains'
 *   },
 * });
 */
export function useAllSanctionListIndividualsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllSanctionListIndividualsQuery, AllSanctionListIndividualsQueryVariables>) {
        return ApolloReactHooks.useQuery<AllSanctionListIndividualsQuery, AllSanctionListIndividualsQueryVariables>(AllSanctionListIndividualsDocument, baseOptions);
      }
export function useAllSanctionListIndividualsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllSanctionListIndividualsQuery, AllSanctionListIndividualsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllSanctionListIndividualsQuery, AllSanctionListIndividualsQueryVariables>(AllSanctionListIndividualsDocument, baseOptions);
        }
export type AllSanctionListIndividualsQueryHookResult = ReturnType<typeof useAllSanctionListIndividualsQuery>;
export type AllSanctionListIndividualsLazyQueryHookResult = ReturnType<typeof useAllSanctionListIndividualsLazyQuery>;
export type AllSanctionListIndividualsQueryResult = ApolloReactCommon.QueryResult<AllSanctionListIndividualsQuery, AllSanctionListIndividualsQueryVariables>;
export const AllUsersDocument = gql`
    query AllUsers($search: String, $status: [String], $partner: [String], $roles: [String], $businessArea: String!, $first: Int, $last: Int, $after: String, $before: String, $orderBy: String) {
  allUsers(search: $search, status: $status, partner: $partner, roles: $roles, businessArea: $businessArea, first: $first, last: $last, after: $after, before: $before, orderBy: $orderBy) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      endCursor
      startCursor
    }
    edges {
      node {
        id
        firstName
        lastName
        username
        email
        isActive
        lastLogin
        status
        partner {
          name
        }
        userRoles {
          businessArea {
            name
          }
          role {
            name
            permissions
          }
        }
      }
      cursor
    }
    totalCount
    edgeCount
  }
}
    `;
export type AllUsersComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllUsersQuery, AllUsersQueryVariables>, 'query'> & ({ variables: AllUsersQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const AllUsersComponent = (props: AllUsersComponentProps) => (
      <ApolloReactComponents.Query<AllUsersQuery, AllUsersQueryVariables> query={AllUsersDocument} {...props} />
    );
    
export type AllUsersProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllUsersQuery, AllUsersQueryVariables> & TChildProps;
export function withAllUsers<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllUsersQuery,
  AllUsersQueryVariables,
  AllUsersProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllUsersQuery, AllUsersQueryVariables, AllUsersProps<TChildProps>>(AllUsersDocument, {
      alias: 'allUsers',
      ...operationOptions
    });
};

/**
 * __useAllUsersQuery__
 *
 * To run a query within a React component, call `useAllUsersQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllUsersQuery({
 *   variables: {
 *      search: // value for 'search'
 *      status: // value for 'status'
 *      partner: // value for 'partner'
 *      roles: // value for 'roles'
 *      businessArea: // value for 'businessArea'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      after: // value for 'after'
 *      before: // value for 'before'
 *      orderBy: // value for 'orderBy'
 *   },
 * });
 */
export function useAllUsersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllUsersQuery, AllUsersQueryVariables>) {
        return ApolloReactHooks.useQuery<AllUsersQuery, AllUsersQueryVariables>(AllUsersDocument, baseOptions);
      }
export function useAllUsersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllUsersQuery, AllUsersQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllUsersQuery, AllUsersQueryVariables>(AllUsersDocument, baseOptions);
        }
export type AllUsersQueryHookResult = ReturnType<typeof useAllUsersQuery>;
export type AllUsersLazyQueryHookResult = ReturnType<typeof useAllUsersLazyQuery>;
export type AllUsersQueryResult = ApolloReactCommon.QueryResult<AllUsersQuery, AllUsersQueryVariables>;
export const AllUsersForFiltersDocument = gql`
    query AllUsersForFilters($businessArea: String!, $first: Int, $last: Int, $after: String, $before: String, $orderBy: String, $search: String, $isTicketCreator: Boolean) {
  allUsers(businessArea: $businessArea, first: $first, last: $last, after: $after, before: $before, orderBy: $orderBy, search: $search, isTicketCreator: $isTicketCreator) {
    edges {
      node {
        id
        firstName
        lastName
        email
      }
    }
  }
}
    `;
export type AllUsersForFiltersComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllUsersForFiltersQuery, AllUsersForFiltersQueryVariables>, 'query'> & ({ variables: AllUsersForFiltersQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const AllUsersForFiltersComponent = (props: AllUsersForFiltersComponentProps) => (
      <ApolloReactComponents.Query<AllUsersForFiltersQuery, AllUsersForFiltersQueryVariables> query={AllUsersForFiltersDocument} {...props} />
    );
    
export type AllUsersForFiltersProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllUsersForFiltersQuery, AllUsersForFiltersQueryVariables> & TChildProps;
export function withAllUsersForFilters<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllUsersForFiltersQuery,
  AllUsersForFiltersQueryVariables,
  AllUsersForFiltersProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllUsersForFiltersQuery, AllUsersForFiltersQueryVariables, AllUsersForFiltersProps<TChildProps>>(AllUsersForFiltersDocument, {
      alias: 'allUsersForFilters',
      ...operationOptions
    });
};

/**
 * __useAllUsersForFiltersQuery__
 *
 * To run a query within a React component, call `useAllUsersForFiltersQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllUsersForFiltersQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllUsersForFiltersQuery({
 *   variables: {
 *      businessArea: // value for 'businessArea'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      after: // value for 'after'
 *      before: // value for 'before'
 *      orderBy: // value for 'orderBy'
 *      search: // value for 'search'
 *      isTicketCreator: // value for 'isTicketCreator'
 *   },
 * });
 */
export function useAllUsersForFiltersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllUsersForFiltersQuery, AllUsersForFiltersQueryVariables>) {
        return ApolloReactHooks.useQuery<AllUsersForFiltersQuery, AllUsersForFiltersQueryVariables>(AllUsersForFiltersDocument, baseOptions);
      }
export function useAllUsersForFiltersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllUsersForFiltersQuery, AllUsersForFiltersQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllUsersForFiltersQuery, AllUsersForFiltersQueryVariables>(AllUsersForFiltersDocument, baseOptions);
        }
export type AllUsersForFiltersQueryHookResult = ReturnType<typeof useAllUsersForFiltersQuery>;
export type AllUsersForFiltersLazyQueryHookResult = ReturnType<typeof useAllUsersForFiltersLazyQuery>;
export type AllUsersForFiltersQueryResult = ApolloReactCommon.QueryResult<AllUsersForFiltersQuery, AllUsersForFiltersQueryVariables>;
export const BusinessAreaDataDocument = gql`
    query BusinessAreaData($businessAreaSlug: String!) {
  businessArea(businessAreaSlug: $businessAreaSlug) {
    id
    screenBeneficiary
    isPaymentPlanApplicable
    isAccountabilityApplicable
  }
}
    `;
export type BusinessAreaDataComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<BusinessAreaDataQuery, BusinessAreaDataQueryVariables>, 'query'> & ({ variables: BusinessAreaDataQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const BusinessAreaDataComponent = (props: BusinessAreaDataComponentProps) => (
      <ApolloReactComponents.Query<BusinessAreaDataQuery, BusinessAreaDataQueryVariables> query={BusinessAreaDataDocument} {...props} />
    );
    
export type BusinessAreaDataProps<TChildProps = {}> = ApolloReactHoc.DataProps<BusinessAreaDataQuery, BusinessAreaDataQueryVariables> & TChildProps;
export function withBusinessAreaData<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  BusinessAreaDataQuery,
  BusinessAreaDataQueryVariables,
  BusinessAreaDataProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, BusinessAreaDataQuery, BusinessAreaDataQueryVariables, BusinessAreaDataProps<TChildProps>>(BusinessAreaDataDocument, {
      alias: 'businessAreaData',
      ...operationOptions
    });
};

/**
 * __useBusinessAreaDataQuery__
 *
 * To run a query within a React component, call `useBusinessAreaDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useBusinessAreaDataQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useBusinessAreaDataQuery({
 *   variables: {
 *      businessAreaSlug: // value for 'businessAreaSlug'
 *   },
 * });
 */
export function useBusinessAreaDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<BusinessAreaDataQuery, BusinessAreaDataQueryVariables>) {
        return ApolloReactHooks.useQuery<BusinessAreaDataQuery, BusinessAreaDataQueryVariables>(BusinessAreaDataDocument, baseOptions);
      }
export function useBusinessAreaDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<BusinessAreaDataQuery, BusinessAreaDataQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<BusinessAreaDataQuery, BusinessAreaDataQueryVariables>(BusinessAreaDataDocument, baseOptions);
        }
export type BusinessAreaDataQueryHookResult = ReturnType<typeof useBusinessAreaDataQuery>;
export type BusinessAreaDataLazyQueryHookResult = ReturnType<typeof useBusinessAreaDataLazyQuery>;
export type BusinessAreaDataQueryResult = ApolloReactCommon.QueryResult<BusinessAreaDataQuery, BusinessAreaDataQueryVariables>;
export const CashAssistUrlPrefixDocument = gql`
    query CashAssistUrlPrefix {
  cashAssistUrlPrefix
}
    `;
export type CashAssistUrlPrefixComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<CashAssistUrlPrefixQuery, CashAssistUrlPrefixQueryVariables>, 'query'>;

    export const CashAssistUrlPrefixComponent = (props: CashAssistUrlPrefixComponentProps) => (
      <ApolloReactComponents.Query<CashAssistUrlPrefixQuery, CashAssistUrlPrefixQueryVariables> query={CashAssistUrlPrefixDocument} {...props} />
    );
    
export type CashAssistUrlPrefixProps<TChildProps = {}> = ApolloReactHoc.DataProps<CashAssistUrlPrefixQuery, CashAssistUrlPrefixQueryVariables> & TChildProps;
export function withCashAssistUrlPrefix<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  CashAssistUrlPrefixQuery,
  CashAssistUrlPrefixQueryVariables,
  CashAssistUrlPrefixProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, CashAssistUrlPrefixQuery, CashAssistUrlPrefixQueryVariables, CashAssistUrlPrefixProps<TChildProps>>(CashAssistUrlPrefixDocument, {
      alias: 'cashAssistUrlPrefix',
      ...operationOptions
    });
};

/**
 * __useCashAssistUrlPrefixQuery__
 *
 * To run a query within a React component, call `useCashAssistUrlPrefixQuery` and pass it any options that fit your needs.
 * When your component renders, `useCashAssistUrlPrefixQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCashAssistUrlPrefixQuery({
 *   variables: {
 *   },
 * });
 */
export function useCashAssistUrlPrefixQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CashAssistUrlPrefixQuery, CashAssistUrlPrefixQueryVariables>) {
        return ApolloReactHooks.useQuery<CashAssistUrlPrefixQuery, CashAssistUrlPrefixQueryVariables>(CashAssistUrlPrefixDocument, baseOptions);
      }
export function useCashAssistUrlPrefixLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CashAssistUrlPrefixQuery, CashAssistUrlPrefixQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<CashAssistUrlPrefixQuery, CashAssistUrlPrefixQueryVariables>(CashAssistUrlPrefixDocument, baseOptions);
        }
export type CashAssistUrlPrefixQueryHookResult = ReturnType<typeof useCashAssistUrlPrefixQuery>;
export type CashAssistUrlPrefixLazyQueryHookResult = ReturnType<typeof useCashAssistUrlPrefixLazyQuery>;
export type CashAssistUrlPrefixQueryResult = ApolloReactCommon.QueryResult<CashAssistUrlPrefixQuery, CashAssistUrlPrefixQueryVariables>;
export const CurrencyChoicesDocument = gql`
    query currencyChoices {
  currencyChoices {
    name
    value
  }
}
    `;
export type CurrencyChoicesComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<CurrencyChoicesQuery, CurrencyChoicesQueryVariables>, 'query'>;

    export const CurrencyChoicesComponent = (props: CurrencyChoicesComponentProps) => (
      <ApolloReactComponents.Query<CurrencyChoicesQuery, CurrencyChoicesQueryVariables> query={CurrencyChoicesDocument} {...props} />
    );
    
export type CurrencyChoicesProps<TChildProps = {}> = ApolloReactHoc.DataProps<CurrencyChoicesQuery, CurrencyChoicesQueryVariables> & TChildProps;
export function withCurrencyChoices<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  CurrencyChoicesQuery,
  CurrencyChoicesQueryVariables,
  CurrencyChoicesProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, CurrencyChoicesQuery, CurrencyChoicesQueryVariables, CurrencyChoicesProps<TChildProps>>(CurrencyChoicesDocument, {
      alias: 'currencyChoices',
      ...operationOptions
    });
};

/**
 * __useCurrencyChoicesQuery__
 *
 * To run a query within a React component, call `useCurrencyChoicesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCurrencyChoicesQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCurrencyChoicesQuery({
 *   variables: {
 *   },
 * });
 */
export function useCurrencyChoicesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CurrencyChoicesQuery, CurrencyChoicesQueryVariables>) {
        return ApolloReactHooks.useQuery<CurrencyChoicesQuery, CurrencyChoicesQueryVariables>(CurrencyChoicesDocument, baseOptions);
      }
export function useCurrencyChoicesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CurrencyChoicesQuery, CurrencyChoicesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<CurrencyChoicesQuery, CurrencyChoicesQueryVariables>(CurrencyChoicesDocument, baseOptions);
        }
export type CurrencyChoicesQueryHookResult = ReturnType<typeof useCurrencyChoicesQuery>;
export type CurrencyChoicesLazyQueryHookResult = ReturnType<typeof useCurrencyChoicesLazyQuery>;
export type CurrencyChoicesQueryResult = ApolloReactCommon.QueryResult<CurrencyChoicesQuery, CurrencyChoicesQueryVariables>;
export const LoggedCheckerDocument = gql`
    query LoggedChecker {
  me {
    id
  }
}
    `;
export type LoggedCheckerComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<LoggedCheckerQuery, LoggedCheckerQueryVariables>, 'query'>;

    export const LoggedCheckerComponent = (props: LoggedCheckerComponentProps) => (
      <ApolloReactComponents.Query<LoggedCheckerQuery, LoggedCheckerQueryVariables> query={LoggedCheckerDocument} {...props} />
    );
    
export type LoggedCheckerProps<TChildProps = {}> = ApolloReactHoc.DataProps<LoggedCheckerQuery, LoggedCheckerQueryVariables> & TChildProps;
export function withLoggedChecker<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  LoggedCheckerQuery,
  LoggedCheckerQueryVariables,
  LoggedCheckerProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, LoggedCheckerQuery, LoggedCheckerQueryVariables, LoggedCheckerProps<TChildProps>>(LoggedCheckerDocument, {
      alias: 'loggedChecker',
      ...operationOptions
    });
};

/**
 * __useLoggedCheckerQuery__
 *
 * To run a query within a React component, call `useLoggedCheckerQuery` and pass it any options that fit your needs.
 * When your component renders, `useLoggedCheckerQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useLoggedCheckerQuery({
 *   variables: {
 *   },
 * });
 */
export function useLoggedCheckerQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<LoggedCheckerQuery, LoggedCheckerQueryVariables>) {
        return ApolloReactHooks.useQuery<LoggedCheckerQuery, LoggedCheckerQueryVariables>(LoggedCheckerDocument, baseOptions);
      }
export function useLoggedCheckerLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<LoggedCheckerQuery, LoggedCheckerQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<LoggedCheckerQuery, LoggedCheckerQueryVariables>(LoggedCheckerDocument, baseOptions);
        }
export type LoggedCheckerQueryHookResult = ReturnType<typeof useLoggedCheckerQuery>;
export type LoggedCheckerLazyQueryHookResult = ReturnType<typeof useLoggedCheckerLazyQuery>;
export type LoggedCheckerQueryResult = ApolloReactCommon.QueryResult<LoggedCheckerQuery, LoggedCheckerQueryVariables>;
export const MeDocument = gql`
    query Me {
  me {
    id
    username
    email
    firstName
    lastName
    businessAreas {
      edges {
        node {
          id
          name
          slug
          permissions
        }
      }
    }
  }
}
    `;
export type MeComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<MeQuery, MeQueryVariables>, 'query'>;

    export const MeComponent = (props: MeComponentProps) => (
      <ApolloReactComponents.Query<MeQuery, MeQueryVariables> query={MeDocument} {...props} />
    );
    
export type MeProps<TChildProps = {}> = ApolloReactHoc.DataProps<MeQuery, MeQueryVariables> & TChildProps;
export function withMe<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  MeQuery,
  MeQueryVariables,
  MeProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, MeQuery, MeQueryVariables, MeProps<TChildProps>>(MeDocument, {
      alias: 'me',
      ...operationOptions
    });
};

/**
 * __useMeQuery__
 *
 * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.
 * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMeQuery({
 *   variables: {
 *   },
 * });
 */
export function useMeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MeQuery, MeQueryVariables>) {
        return ApolloReactHooks.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);
      }
export function useMeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);
        }
export type MeQueryHookResult = ReturnType<typeof useMeQuery>;
export type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;
export type MeQueryResult = ApolloReactCommon.QueryResult<MeQuery, MeQueryVariables>;
export const UserChoiceDataDocument = gql`
    query userChoiceData {
  userRolesChoices {
    name
    value
  }
  userStatusChoices {
    name
    value
  }
  userPartnerChoices {
    name
    value
  }
}
    `;
export type UserChoiceDataComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<UserChoiceDataQuery, UserChoiceDataQueryVariables>, 'query'>;

    export const UserChoiceDataComponent = (props: UserChoiceDataComponentProps) => (
      <ApolloReactComponents.Query<UserChoiceDataQuery, UserChoiceDataQueryVariables> query={UserChoiceDataDocument} {...props} />
    );
    
export type UserChoiceDataProps<TChildProps = {}> = ApolloReactHoc.DataProps<UserChoiceDataQuery, UserChoiceDataQueryVariables> & TChildProps;
export function withUserChoiceData<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  UserChoiceDataQuery,
  UserChoiceDataQueryVariables,
  UserChoiceDataProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, UserChoiceDataQuery, UserChoiceDataQueryVariables, UserChoiceDataProps<TChildProps>>(UserChoiceDataDocument, {
      alias: 'userChoiceData',
      ...operationOptions
    });
};

/**
 * __useUserChoiceDataQuery__
 *
 * To run a query within a React component, call `useUserChoiceDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useUserChoiceDataQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useUserChoiceDataQuery({
 *   variables: {
 *   },
 * });
 */
export function useUserChoiceDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<UserChoiceDataQuery, UserChoiceDataQueryVariables>) {
        return ApolloReactHooks.useQuery<UserChoiceDataQuery, UserChoiceDataQueryVariables>(UserChoiceDataDocument, baseOptions);
      }
export function useUserChoiceDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<UserChoiceDataQuery, UserChoiceDataQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<UserChoiceDataQuery, UserChoiceDataQueryVariables>(UserChoiceDataDocument, baseOptions);
        }
export type UserChoiceDataQueryHookResult = ReturnType<typeof useUserChoiceDataQuery>;
export type UserChoiceDataLazyQueryHookResult = ReturnType<typeof useUserChoiceDataLazyQuery>;
export type UserChoiceDataQueryResult = ApolloReactCommon.QueryResult<UserChoiceDataQuery, UserChoiceDataQueryVariables>;
export const AllAddIndividualFieldsDocument = gql`
    query AllAddIndividualFields {
  allAddIndividualsFieldsAttributes {
    isFlexField
    id
    type
    name
    required
    associatedWith
    labels {
      language
      label
    }
    labelEn
    hint
    choices {
      labels {
        label
        language
      }
      labelEn
      value
      admin
      listName
    }
  }
  countriesChoices {
    name
    value
  }
  documentTypeChoices {
    name
    value
  }
  identityTypeChoices {
    name
    value
  }
}
    `;
export type AllAddIndividualFieldsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllAddIndividualFieldsQuery, AllAddIndividualFieldsQueryVariables>, 'query'>;

    export const AllAddIndividualFieldsComponent = (props: AllAddIndividualFieldsComponentProps) => (
      <ApolloReactComponents.Query<AllAddIndividualFieldsQuery, AllAddIndividualFieldsQueryVariables> query={AllAddIndividualFieldsDocument} {...props} />
    );
    
export type AllAddIndividualFieldsProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllAddIndividualFieldsQuery, AllAddIndividualFieldsQueryVariables> & TChildProps;
export function withAllAddIndividualFields<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllAddIndividualFieldsQuery,
  AllAddIndividualFieldsQueryVariables,
  AllAddIndividualFieldsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllAddIndividualFieldsQuery, AllAddIndividualFieldsQueryVariables, AllAddIndividualFieldsProps<TChildProps>>(AllAddIndividualFieldsDocument, {
      alias: 'allAddIndividualFields',
      ...operationOptions
    });
};

/**
 * __useAllAddIndividualFieldsQuery__
 *
 * To run a query within a React component, call `useAllAddIndividualFieldsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllAddIndividualFieldsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllAddIndividualFieldsQuery({
 *   variables: {
 *   },
 * });
 */
export function useAllAddIndividualFieldsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllAddIndividualFieldsQuery, AllAddIndividualFieldsQueryVariables>) {
        return ApolloReactHooks.useQuery<AllAddIndividualFieldsQuery, AllAddIndividualFieldsQueryVariables>(AllAddIndividualFieldsDocument, baseOptions);
      }
export function useAllAddIndividualFieldsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllAddIndividualFieldsQuery, AllAddIndividualFieldsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllAddIndividualFieldsQuery, AllAddIndividualFieldsQueryVariables>(AllAddIndividualFieldsDocument, baseOptions);
        }
export type AllAddIndividualFieldsQueryHookResult = ReturnType<typeof useAllAddIndividualFieldsQuery>;
export type AllAddIndividualFieldsLazyQueryHookResult = ReturnType<typeof useAllAddIndividualFieldsLazyQuery>;
export type AllAddIndividualFieldsQueryResult = ApolloReactCommon.QueryResult<AllAddIndividualFieldsQuery, AllAddIndividualFieldsQueryVariables>;
export const AllEditHouseholdFieldsDocument = gql`
    query AllEditHouseholdFields {
  allEditHouseholdFieldsAttributes {
    isFlexField
    id
    type
    name
    required
    associatedWith
    labels {
      language
      label
    }
    labelEn
    hint
    choices {
      labels {
        label
        language
      }
      labelEn
      value
      admin
      listName
    }
  }
  countriesChoices {
    name
    value
  }
}
    `;
export type AllEditHouseholdFieldsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllEditHouseholdFieldsQuery, AllEditHouseholdFieldsQueryVariables>, 'query'>;

    export const AllEditHouseholdFieldsComponent = (props: AllEditHouseholdFieldsComponentProps) => (
      <ApolloReactComponents.Query<AllEditHouseholdFieldsQuery, AllEditHouseholdFieldsQueryVariables> query={AllEditHouseholdFieldsDocument} {...props} />
    );
    
export type AllEditHouseholdFieldsProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllEditHouseholdFieldsQuery, AllEditHouseholdFieldsQueryVariables> & TChildProps;
export function withAllEditHouseholdFields<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllEditHouseholdFieldsQuery,
  AllEditHouseholdFieldsQueryVariables,
  AllEditHouseholdFieldsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllEditHouseholdFieldsQuery, AllEditHouseholdFieldsQueryVariables, AllEditHouseholdFieldsProps<TChildProps>>(AllEditHouseholdFieldsDocument, {
      alias: 'allEditHouseholdFields',
      ...operationOptions
    });
};

/**
 * __useAllEditHouseholdFieldsQuery__
 *
 * To run a query within a React component, call `useAllEditHouseholdFieldsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllEditHouseholdFieldsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllEditHouseholdFieldsQuery({
 *   variables: {
 *   },
 * });
 */
export function useAllEditHouseholdFieldsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllEditHouseholdFieldsQuery, AllEditHouseholdFieldsQueryVariables>) {
        return ApolloReactHooks.useQuery<AllEditHouseholdFieldsQuery, AllEditHouseholdFieldsQueryVariables>(AllEditHouseholdFieldsDocument, baseOptions);
      }
export function useAllEditHouseholdFieldsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllEditHouseholdFieldsQuery, AllEditHouseholdFieldsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllEditHouseholdFieldsQuery, AllEditHouseholdFieldsQueryVariables>(AllEditHouseholdFieldsDocument, baseOptions);
        }
export type AllEditHouseholdFieldsQueryHookResult = ReturnType<typeof useAllEditHouseholdFieldsQuery>;
export type AllEditHouseholdFieldsLazyQueryHookResult = ReturnType<typeof useAllEditHouseholdFieldsLazyQuery>;
export type AllEditHouseholdFieldsQueryResult = ApolloReactCommon.QueryResult<AllEditHouseholdFieldsQuery, AllEditHouseholdFieldsQueryVariables>;
export const AllHouseholdsFlexFieldsAttributesDocument = gql`
    query AllHouseholdsFlexFieldsAttributes {
  allHouseholdsFlexFieldsAttributes {
    isFlexField
    id
    type
    name
    required
    associatedWith
    labels {
      language
      label
    }
    labelEn
    hint
    choices {
      labels {
        label
        language
      }
      labelEn
      value
      admin
      listName
    }
  }
}
    `;
export type AllHouseholdsFlexFieldsAttributesComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllHouseholdsFlexFieldsAttributesQuery, AllHouseholdsFlexFieldsAttributesQueryVariables>, 'query'>;

    export const AllHouseholdsFlexFieldsAttributesComponent = (props: AllHouseholdsFlexFieldsAttributesComponentProps) => (
      <ApolloReactComponents.Query<AllHouseholdsFlexFieldsAttributesQuery, AllHouseholdsFlexFieldsAttributesQueryVariables> query={AllHouseholdsFlexFieldsAttributesDocument} {...props} />
    );
    
export type AllHouseholdsFlexFieldsAttributesProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllHouseholdsFlexFieldsAttributesQuery, AllHouseholdsFlexFieldsAttributesQueryVariables> & TChildProps;
export function withAllHouseholdsFlexFieldsAttributes<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllHouseholdsFlexFieldsAttributesQuery,
  AllHouseholdsFlexFieldsAttributesQueryVariables,
  AllHouseholdsFlexFieldsAttributesProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllHouseholdsFlexFieldsAttributesQuery, AllHouseholdsFlexFieldsAttributesQueryVariables, AllHouseholdsFlexFieldsAttributesProps<TChildProps>>(AllHouseholdsFlexFieldsAttributesDocument, {
      alias: 'allHouseholdsFlexFieldsAttributes',
      ...operationOptions
    });
};

/**
 * __useAllHouseholdsFlexFieldsAttributesQuery__
 *
 * To run a query within a React component, call `useAllHouseholdsFlexFieldsAttributesQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllHouseholdsFlexFieldsAttributesQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllHouseholdsFlexFieldsAttributesQuery({
 *   variables: {
 *   },
 * });
 */
export function useAllHouseholdsFlexFieldsAttributesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllHouseholdsFlexFieldsAttributesQuery, AllHouseholdsFlexFieldsAttributesQueryVariables>) {
        return ApolloReactHooks.useQuery<AllHouseholdsFlexFieldsAttributesQuery, AllHouseholdsFlexFieldsAttributesQueryVariables>(AllHouseholdsFlexFieldsAttributesDocument, baseOptions);
      }
export function useAllHouseholdsFlexFieldsAttributesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllHouseholdsFlexFieldsAttributesQuery, AllHouseholdsFlexFieldsAttributesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllHouseholdsFlexFieldsAttributesQuery, AllHouseholdsFlexFieldsAttributesQueryVariables>(AllHouseholdsFlexFieldsAttributesDocument, baseOptions);
        }
export type AllHouseholdsFlexFieldsAttributesQueryHookResult = ReturnType<typeof useAllHouseholdsFlexFieldsAttributesQuery>;
export type AllHouseholdsFlexFieldsAttributesLazyQueryHookResult = ReturnType<typeof useAllHouseholdsFlexFieldsAttributesLazyQuery>;
export type AllHouseholdsFlexFieldsAttributesQueryResult = ApolloReactCommon.QueryResult<AllHouseholdsFlexFieldsAttributesQuery, AllHouseholdsFlexFieldsAttributesQueryVariables>;
export const AllIndividualsFlexFieldsAttributesDocument = gql`
    query AllIndividualsFlexFieldsAttributes {
  allIndividualsFlexFieldsAttributes {
    isFlexField
    id
    type
    name
    required
    associatedWith
    labels {
      language
      label
    }
    labelEn
    hint
    choices {
      labels {
        label
        language
      }
      labelEn
      value
      admin
      listName
    }
  }
}
    `;
export type AllIndividualsFlexFieldsAttributesComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllIndividualsFlexFieldsAttributesQuery, AllIndividualsFlexFieldsAttributesQueryVariables>, 'query'>;

    export const AllIndividualsFlexFieldsAttributesComponent = (props: AllIndividualsFlexFieldsAttributesComponentProps) => (
      <ApolloReactComponents.Query<AllIndividualsFlexFieldsAttributesQuery, AllIndividualsFlexFieldsAttributesQueryVariables> query={AllIndividualsFlexFieldsAttributesDocument} {...props} />
    );
    
export type AllIndividualsFlexFieldsAttributesProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllIndividualsFlexFieldsAttributesQuery, AllIndividualsFlexFieldsAttributesQueryVariables> & TChildProps;
export function withAllIndividualsFlexFieldsAttributes<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllIndividualsFlexFieldsAttributesQuery,
  AllIndividualsFlexFieldsAttributesQueryVariables,
  AllIndividualsFlexFieldsAttributesProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllIndividualsFlexFieldsAttributesQuery, AllIndividualsFlexFieldsAttributesQueryVariables, AllIndividualsFlexFieldsAttributesProps<TChildProps>>(AllIndividualsFlexFieldsAttributesDocument, {
      alias: 'allIndividualsFlexFieldsAttributes',
      ...operationOptions
    });
};

/**
 * __useAllIndividualsFlexFieldsAttributesQuery__
 *
 * To run a query within a React component, call `useAllIndividualsFlexFieldsAttributesQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllIndividualsFlexFieldsAttributesQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllIndividualsFlexFieldsAttributesQuery({
 *   variables: {
 *   },
 * });
 */
export function useAllIndividualsFlexFieldsAttributesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllIndividualsFlexFieldsAttributesQuery, AllIndividualsFlexFieldsAttributesQueryVariables>) {
        return ApolloReactHooks.useQuery<AllIndividualsFlexFieldsAttributesQuery, AllIndividualsFlexFieldsAttributesQueryVariables>(AllIndividualsFlexFieldsAttributesDocument, baseOptions);
      }
export function useAllIndividualsFlexFieldsAttributesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllIndividualsFlexFieldsAttributesQuery, AllIndividualsFlexFieldsAttributesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllIndividualsFlexFieldsAttributesQuery, AllIndividualsFlexFieldsAttributesQueryVariables>(AllIndividualsFlexFieldsAttributesDocument, baseOptions);
        }
export type AllIndividualsFlexFieldsAttributesQueryHookResult = ReturnType<typeof useAllIndividualsFlexFieldsAttributesQuery>;
export type AllIndividualsFlexFieldsAttributesLazyQueryHookResult = ReturnType<typeof useAllIndividualsFlexFieldsAttributesLazyQuery>;
export type AllIndividualsFlexFieldsAttributesQueryResult = ApolloReactCommon.QueryResult<AllIndividualsFlexFieldsAttributesQuery, AllIndividualsFlexFieldsAttributesQueryVariables>;
export const FlexFieldsDocument = gql`
    query FlexFields {
  allGroupsWithFields {
    name
    labelEn
    flexAttributes {
      id
      labelEn
      associatedWith
    }
  }
}
    `;
export type FlexFieldsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<FlexFieldsQuery, FlexFieldsQueryVariables>, 'query'>;

    export const FlexFieldsComponent = (props: FlexFieldsComponentProps) => (
      <ApolloReactComponents.Query<FlexFieldsQuery, FlexFieldsQueryVariables> query={FlexFieldsDocument} {...props} />
    );
    
export type FlexFieldsProps<TChildProps = {}> = ApolloReactHoc.DataProps<FlexFieldsQuery, FlexFieldsQueryVariables> & TChildProps;
export function withFlexFields<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  FlexFieldsQuery,
  FlexFieldsQueryVariables,
  FlexFieldsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, FlexFieldsQuery, FlexFieldsQueryVariables, FlexFieldsProps<TChildProps>>(FlexFieldsDocument, {
      alias: 'flexFields',
      ...operationOptions
    });
};

/**
 * __useFlexFieldsQuery__
 *
 * To run a query within a React component, call `useFlexFieldsQuery` and pass it any options that fit your needs.
 * When your component renders, `useFlexFieldsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFlexFieldsQuery({
 *   variables: {
 *   },
 * });
 */
export function useFlexFieldsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<FlexFieldsQuery, FlexFieldsQueryVariables>) {
        return ApolloReactHooks.useQuery<FlexFieldsQuery, FlexFieldsQueryVariables>(FlexFieldsDocument, baseOptions);
      }
export function useFlexFieldsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<FlexFieldsQuery, FlexFieldsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<FlexFieldsQuery, FlexFieldsQueryVariables>(FlexFieldsDocument, baseOptions);
        }
export type FlexFieldsQueryHookResult = ReturnType<typeof useFlexFieldsQuery>;
export type FlexFieldsLazyQueryHookResult = ReturnType<typeof useFlexFieldsLazyQuery>;
export type FlexFieldsQueryResult = ApolloReactCommon.QueryResult<FlexFieldsQuery, FlexFieldsQueryVariables>;
export const ImportedIndividualFieldsDocument = gql`
    query ImportedIndividualFields($businessAreaSlug: String) {
  allFieldsAttributes(businessAreaSlug: $businessAreaSlug) {
    isFlexField
    id
    type
    name
    associatedWith
    labels {
      language
      label
    }
    labelEn
    hint
    choices {
      labels {
        label
        language
      }
      labelEn
      value
      admin
      listName
    }
  }
}
    `;
export type ImportedIndividualFieldsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<ImportedIndividualFieldsQuery, ImportedIndividualFieldsQueryVariables>, 'query'>;

    export const ImportedIndividualFieldsComponent = (props: ImportedIndividualFieldsComponentProps) => (
      <ApolloReactComponents.Query<ImportedIndividualFieldsQuery, ImportedIndividualFieldsQueryVariables> query={ImportedIndividualFieldsDocument} {...props} />
    );
    
export type ImportedIndividualFieldsProps<TChildProps = {}> = ApolloReactHoc.DataProps<ImportedIndividualFieldsQuery, ImportedIndividualFieldsQueryVariables> & TChildProps;
export function withImportedIndividualFields<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ImportedIndividualFieldsQuery,
  ImportedIndividualFieldsQueryVariables,
  ImportedIndividualFieldsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, ImportedIndividualFieldsQuery, ImportedIndividualFieldsQueryVariables, ImportedIndividualFieldsProps<TChildProps>>(ImportedIndividualFieldsDocument, {
      alias: 'importedIndividualFields',
      ...operationOptions
    });
};

/**
 * __useImportedIndividualFieldsQuery__
 *
 * To run a query within a React component, call `useImportedIndividualFieldsQuery` and pass it any options that fit your needs.
 * When your component renders, `useImportedIndividualFieldsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useImportedIndividualFieldsQuery({
 *   variables: {
 *      businessAreaSlug: // value for 'businessAreaSlug'
 *   },
 * });
 */
export function useImportedIndividualFieldsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ImportedIndividualFieldsQuery, ImportedIndividualFieldsQueryVariables>) {
        return ApolloReactHooks.useQuery<ImportedIndividualFieldsQuery, ImportedIndividualFieldsQueryVariables>(ImportedIndividualFieldsDocument, baseOptions);
      }
export function useImportedIndividualFieldsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ImportedIndividualFieldsQuery, ImportedIndividualFieldsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<ImportedIndividualFieldsQuery, ImportedIndividualFieldsQueryVariables>(ImportedIndividualFieldsDocument, baseOptions);
        }
export type ImportedIndividualFieldsQueryHookResult = ReturnType<typeof useImportedIndividualFieldsQuery>;
export type ImportedIndividualFieldsLazyQueryHookResult = ReturnType<typeof useImportedIndividualFieldsLazyQuery>;
export type ImportedIndividualFieldsQueryResult = ApolloReactCommon.QueryResult<ImportedIndividualFieldsQuery, ImportedIndividualFieldsQueryVariables>;
export const AllFeedbacksDocument = gql`
    query AllFeedbacks($offset: Int, $before: String, $after: String, $first: Int, $last: Int, $issueType: String, $createdAtRange: String, $createdBy: String, $feedbackId: String, $orderBy: String) {
  allFeedbacks(offset: $offset, before: $before, after: $after, first: $first, last: $last, issueType: $issueType, createdAtRange: $createdAtRange, createdBy: $createdBy, feedbackId: $feedbackId, orderBy: $orderBy) {
    totalCount
    pageInfo {
      startCursor
      endCursor
    }
    edges {
      cursor
      node {
        id
        unicefId
        issueType
        householdLookup {
          id
          unicefId
        }
        createdAt
        createdBy {
          id
          firstName
          lastName
          email
        }
        linkedGrievance {
          id
          unicefId
          category
        }
      }
    }
  }
}
    `;
export type AllFeedbacksComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllFeedbacksQuery, AllFeedbacksQueryVariables>, 'query'>;

    export const AllFeedbacksComponent = (props: AllFeedbacksComponentProps) => (
      <ApolloReactComponents.Query<AllFeedbacksQuery, AllFeedbacksQueryVariables> query={AllFeedbacksDocument} {...props} />
    );
    
export type AllFeedbacksProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllFeedbacksQuery, AllFeedbacksQueryVariables> & TChildProps;
export function withAllFeedbacks<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllFeedbacksQuery,
  AllFeedbacksQueryVariables,
  AllFeedbacksProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllFeedbacksQuery, AllFeedbacksQueryVariables, AllFeedbacksProps<TChildProps>>(AllFeedbacksDocument, {
      alias: 'allFeedbacks',
      ...operationOptions
    });
};

/**
 * __useAllFeedbacksQuery__
 *
 * To run a query within a React component, call `useAllFeedbacksQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllFeedbacksQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllFeedbacksQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      before: // value for 'before'
 *      after: // value for 'after'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      issueType: // value for 'issueType'
 *      createdAtRange: // value for 'createdAtRange'
 *      createdBy: // value for 'createdBy'
 *      feedbackId: // value for 'feedbackId'
 *      orderBy: // value for 'orderBy'
 *   },
 * });
 */
export function useAllFeedbacksQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllFeedbacksQuery, AllFeedbacksQueryVariables>) {
        return ApolloReactHooks.useQuery<AllFeedbacksQuery, AllFeedbacksQueryVariables>(AllFeedbacksDocument, baseOptions);
      }
export function useAllFeedbacksLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllFeedbacksQuery, AllFeedbacksQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllFeedbacksQuery, AllFeedbacksQueryVariables>(AllFeedbacksDocument, baseOptions);
        }
export type AllFeedbacksQueryHookResult = ReturnType<typeof useAllFeedbacksQuery>;
export type AllFeedbacksLazyQueryHookResult = ReturnType<typeof useAllFeedbacksLazyQuery>;
export type AllFeedbacksQueryResult = ApolloReactCommon.QueryResult<AllFeedbacksQuery, AllFeedbacksQueryVariables>;
export const FeedbackDocument = gql`
    query Feedback($id: ID!) {
  feedback(id: $id) {
    id
    unicefId
    issueType
    householdLookup {
      id
      unicefId
      headOfHousehold {
        id
        fullName
      }
    }
    individualLookup {
      id
      unicefId
    }
    program {
      id
      name
    }
    createdBy {
      id
      firstName
      lastName
      username
      email
    }
    createdAt
    updatedAt
    admin2 {
      id
      name
    }
    area
    language
    description
    comments
    linkedGrievance {
      id
      unicefId
      category
    }
    feedbackMessages {
      edges {
        node {
          id
          createdAt
          updatedAt
          description
          createdBy {
            id
            firstName
            lastName
            username
            email
          }
        }
      }
    }
  }
}
    `;
export type FeedbackComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<FeedbackQuery, FeedbackQueryVariables>, 'query'> & ({ variables: FeedbackQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const FeedbackComponent = (props: FeedbackComponentProps) => (
      <ApolloReactComponents.Query<FeedbackQuery, FeedbackQueryVariables> query={FeedbackDocument} {...props} />
    );
    
export type FeedbackProps<TChildProps = {}> = ApolloReactHoc.DataProps<FeedbackQuery, FeedbackQueryVariables> & TChildProps;
export function withFeedback<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  FeedbackQuery,
  FeedbackQueryVariables,
  FeedbackProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, FeedbackQuery, FeedbackQueryVariables, FeedbackProps<TChildProps>>(FeedbackDocument, {
      alias: 'feedback',
      ...operationOptions
    });
};

/**
 * __useFeedbackQuery__
 *
 * To run a query within a React component, call `useFeedbackQuery` and pass it any options that fit your needs.
 * When your component renders, `useFeedbackQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFeedbackQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useFeedbackQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<FeedbackQuery, FeedbackQueryVariables>) {
        return ApolloReactHooks.useQuery<FeedbackQuery, FeedbackQueryVariables>(FeedbackDocument, baseOptions);
      }
export function useFeedbackLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<FeedbackQuery, FeedbackQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<FeedbackQuery, FeedbackQueryVariables>(FeedbackDocument, baseOptions);
        }
export type FeedbackQueryHookResult = ReturnType<typeof useFeedbackQuery>;
export type FeedbackLazyQueryHookResult = ReturnType<typeof useFeedbackLazyQuery>;
export type FeedbackQueryResult = ApolloReactCommon.QueryResult<FeedbackQuery, FeedbackQueryVariables>;
export const FeedbackIssueTypeChoicesDocument = gql`
    query FeedbackIssueTypeChoices {
  feedbackIssueTypeChoices {
    name
    value
  }
}
    `;
export type FeedbackIssueTypeChoicesComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<FeedbackIssueTypeChoicesQuery, FeedbackIssueTypeChoicesQueryVariables>, 'query'>;

    export const FeedbackIssueTypeChoicesComponent = (props: FeedbackIssueTypeChoicesComponentProps) => (
      <ApolloReactComponents.Query<FeedbackIssueTypeChoicesQuery, FeedbackIssueTypeChoicesQueryVariables> query={FeedbackIssueTypeChoicesDocument} {...props} />
    );
    
export type FeedbackIssueTypeChoicesProps<TChildProps = {}> = ApolloReactHoc.DataProps<FeedbackIssueTypeChoicesQuery, FeedbackIssueTypeChoicesQueryVariables> & TChildProps;
export function withFeedbackIssueTypeChoices<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  FeedbackIssueTypeChoicesQuery,
  FeedbackIssueTypeChoicesQueryVariables,
  FeedbackIssueTypeChoicesProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, FeedbackIssueTypeChoicesQuery, FeedbackIssueTypeChoicesQueryVariables, FeedbackIssueTypeChoicesProps<TChildProps>>(FeedbackIssueTypeChoicesDocument, {
      alias: 'feedbackIssueTypeChoices',
      ...operationOptions
    });
};

/**
 * __useFeedbackIssueTypeChoicesQuery__
 *
 * To run a query within a React component, call `useFeedbackIssueTypeChoicesQuery` and pass it any options that fit your needs.
 * When your component renders, `useFeedbackIssueTypeChoicesQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFeedbackIssueTypeChoicesQuery({
 *   variables: {
 *   },
 * });
 */
export function useFeedbackIssueTypeChoicesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<FeedbackIssueTypeChoicesQuery, FeedbackIssueTypeChoicesQueryVariables>) {
        return ApolloReactHooks.useQuery<FeedbackIssueTypeChoicesQuery, FeedbackIssueTypeChoicesQueryVariables>(FeedbackIssueTypeChoicesDocument, baseOptions);
      }
export function useFeedbackIssueTypeChoicesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<FeedbackIssueTypeChoicesQuery, FeedbackIssueTypeChoicesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<FeedbackIssueTypeChoicesQuery, FeedbackIssueTypeChoicesQueryVariables>(FeedbackIssueTypeChoicesDocument, baseOptions);
        }
export type FeedbackIssueTypeChoicesQueryHookResult = ReturnType<typeof useFeedbackIssueTypeChoicesQuery>;
export type FeedbackIssueTypeChoicesLazyQueryHookResult = ReturnType<typeof useFeedbackIssueTypeChoicesLazyQuery>;
export type FeedbackIssueTypeChoicesQueryResult = ApolloReactCommon.QueryResult<FeedbackIssueTypeChoicesQuery, FeedbackIssueTypeChoicesQueryVariables>;
export const AllGrievanceDashboardChartsDocument = gql`
    query AllGrievanceDashboardCharts($businessAreaSlug: String!) {
  ticketsByType(businessAreaSlug: $businessAreaSlug) {
    userGeneratedCount
    systemGeneratedCount
    closedUserGeneratedCount
    closedSystemGeneratedCount
    userGeneratedAvgResolution
    systemGeneratedAvgResolution
  }
  ticketsByStatus(businessAreaSlug: $businessAreaSlug) {
    datasets {
      data
    }
    labels
  }
  ticketsByCategory(businessAreaSlug: $businessAreaSlug) {
    datasets {
      data
    }
    labels
  }
  ticketsByLocationAndCategory(businessAreaSlug: $businessAreaSlug) {
    datasets {
      data
      label
    }
    labels
  }
}
    `;
export type AllGrievanceDashboardChartsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllGrievanceDashboardChartsQuery, AllGrievanceDashboardChartsQueryVariables>, 'query'> & ({ variables: AllGrievanceDashboardChartsQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const AllGrievanceDashboardChartsComponent = (props: AllGrievanceDashboardChartsComponentProps) => (
      <ApolloReactComponents.Query<AllGrievanceDashboardChartsQuery, AllGrievanceDashboardChartsQueryVariables> query={AllGrievanceDashboardChartsDocument} {...props} />
    );
    
export type AllGrievanceDashboardChartsProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllGrievanceDashboardChartsQuery, AllGrievanceDashboardChartsQueryVariables> & TChildProps;
export function withAllGrievanceDashboardCharts<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllGrievanceDashboardChartsQuery,
  AllGrievanceDashboardChartsQueryVariables,
  AllGrievanceDashboardChartsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllGrievanceDashboardChartsQuery, AllGrievanceDashboardChartsQueryVariables, AllGrievanceDashboardChartsProps<TChildProps>>(AllGrievanceDashboardChartsDocument, {
      alias: 'allGrievanceDashboardCharts',
      ...operationOptions
    });
};

/**
 * __useAllGrievanceDashboardChartsQuery__
 *
 * To run a query within a React component, call `useAllGrievanceDashboardChartsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllGrievanceDashboardChartsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllGrievanceDashboardChartsQuery({
 *   variables: {
 *      businessAreaSlug: // value for 'businessAreaSlug'
 *   },
 * });
 */
export function useAllGrievanceDashboardChartsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllGrievanceDashboardChartsQuery, AllGrievanceDashboardChartsQueryVariables>) {
        return ApolloReactHooks.useQuery<AllGrievanceDashboardChartsQuery, AllGrievanceDashboardChartsQueryVariables>(AllGrievanceDashboardChartsDocument, baseOptions);
      }
export function useAllGrievanceDashboardChartsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllGrievanceDashboardChartsQuery, AllGrievanceDashboardChartsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllGrievanceDashboardChartsQuery, AllGrievanceDashboardChartsQueryVariables>(AllGrievanceDashboardChartsDocument, baseOptions);
        }
export type AllGrievanceDashboardChartsQueryHookResult = ReturnType<typeof useAllGrievanceDashboardChartsQuery>;
export type AllGrievanceDashboardChartsLazyQueryHookResult = ReturnType<typeof useAllGrievanceDashboardChartsLazyQuery>;
export type AllGrievanceDashboardChartsQueryResult = ApolloReactCommon.QueryResult<AllGrievanceDashboardChartsQuery, AllGrievanceDashboardChartsQueryVariables>;
export const AllGrievanceTicketDocument = gql`
    query AllGrievanceTicket($before: String, $after: String, $first: Int, $last: Int, $id: UUID, $category: String, $issueType: String, $businessArea: String!, $search: String, $status: [String], $fsp: String, $createdAtRange: String, $admin2: ID, $orderBy: String, $registrationDataImport: ID, $assignedTo: ID, $createdBy: ID, $cashPlan: String, $scoreMin: String, $scoreMax: String, $household: String, $grievanceType: String, $grievanceStatus: String, $priority: String, $urgency: String, $preferredLanguage: String, $program: String) {
  allGrievanceTicket(before: $before, after: $after, first: $first, last: $last, id: $id, category: $category, issueType: $issueType, businessArea: $businessArea, search: $search, status: $status, fsp: $fsp, createdAtRange: $createdAtRange, orderBy: $orderBy, admin2: $admin2, registrationDataImport: $registrationDataImport, assignedTo: $assignedTo, createdBy: $createdBy, cashPlan: $cashPlan, scoreMin: $scoreMin, scoreMax: $scoreMax, household: $household, grievanceType: $grievanceType, grievanceStatus: $grievanceStatus, priority: $priority, urgency: $urgency, preferredLanguage: $preferredLanguage, program: $program) {
    totalCount
    pageInfo {
      startCursor
      endCursor
    }
    edges {
      cursor
      node {
        id
        status
        assignedTo {
          id
          firstName
          lastName
          email
        }
        createdBy {
          id
        }
        category
        issueType
        createdAt
        userModified
        admin
        household {
          unicefId
          id
        }
        unicefId
        relatedTickets {
          id
        }
        priority
        urgency
        updatedAt
        totalDays
      }
    }
  }
}
    `;
export type AllGrievanceTicketComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllGrievanceTicketQuery, AllGrievanceTicketQueryVariables>, 'query'> & ({ variables: AllGrievanceTicketQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const AllGrievanceTicketComponent = (props: AllGrievanceTicketComponentProps) => (
      <ApolloReactComponents.Query<AllGrievanceTicketQuery, AllGrievanceTicketQueryVariables> query={AllGrievanceTicketDocument} {...props} />
    );
    
export type AllGrievanceTicketProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllGrievanceTicketQuery, AllGrievanceTicketQueryVariables> & TChildProps;
export function withAllGrievanceTicket<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllGrievanceTicketQuery,
  AllGrievanceTicketQueryVariables,
  AllGrievanceTicketProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllGrievanceTicketQuery, AllGrievanceTicketQueryVariables, AllGrievanceTicketProps<TChildProps>>(AllGrievanceTicketDocument, {
      alias: 'allGrievanceTicket',
      ...operationOptions
    });
};

/**
 * __useAllGrievanceTicketQuery__
 *
 * To run a query within a React component, call `useAllGrievanceTicketQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllGrievanceTicketQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllGrievanceTicketQuery({
 *   variables: {
 *      before: // value for 'before'
 *      after: // value for 'after'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      id: // value for 'id'
 *      category: // value for 'category'
 *      issueType: // value for 'issueType'
 *      businessArea: // value for 'businessArea'
 *      search: // value for 'search'
 *      status: // value for 'status'
 *      fsp: // value for 'fsp'
 *      createdAtRange: // value for 'createdAtRange'
 *      admin2: // value for 'admin2'
 *      orderBy: // value for 'orderBy'
 *      registrationDataImport: // value for 'registrationDataImport'
 *      assignedTo: // value for 'assignedTo'
 *      createdBy: // value for 'createdBy'
 *      cashPlan: // value for 'cashPlan'
 *      scoreMin: // value for 'scoreMin'
 *      scoreMax: // value for 'scoreMax'
 *      household: // value for 'household'
 *      grievanceType: // value for 'grievanceType'
 *      grievanceStatus: // value for 'grievanceStatus'
 *      priority: // value for 'priority'
 *      urgency: // value for 'urgency'
 *      preferredLanguage: // value for 'preferredLanguage'
 *      program: // value for 'program'
 *   },
 * });
 */
export function useAllGrievanceTicketQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllGrievanceTicketQuery, AllGrievanceTicketQueryVariables>) {
        return ApolloReactHooks.useQuery<AllGrievanceTicketQuery, AllGrievanceTicketQueryVariables>(AllGrievanceTicketDocument, baseOptions);
      }
export function useAllGrievanceTicketLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllGrievanceTicketQuery, AllGrievanceTicketQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllGrievanceTicketQuery, AllGrievanceTicketQueryVariables>(AllGrievanceTicketDocument, baseOptions);
        }
export type AllGrievanceTicketQueryHookResult = ReturnType<typeof useAllGrievanceTicketQuery>;
export type AllGrievanceTicketLazyQueryHookResult = ReturnType<typeof useAllGrievanceTicketLazyQuery>;
export type AllGrievanceTicketQueryResult = ApolloReactCommon.QueryResult<AllGrievanceTicketQuery, AllGrievanceTicketQueryVariables>;
export const ExistingGrievanceTicketsDocument = gql`
    query ExistingGrievanceTickets($before: String, $after: String, $first: Int, $last: Int, $id: UUID, $businessArea: String!, $household: ID, $individual: ID, $paymentRecord: [ID], $category: String, $issueType: String, $orderBy: String) {
  existingGrievanceTickets(before: $before, after: $after, first: $first, last: $last, id: $id, businessArea: $businessArea, household: $household, individual: $individual, paymentRecord: $paymentRecord, category: $category, issueType: $issueType, orderBy: $orderBy) {
    totalCount
    pageInfo {
      startCursor
      endCursor
    }
    edges {
      cursor
      node {
        id
        unicefId
        status
        assignedTo {
          id
          firstName
          lastName
          email
        }
        category
        createdAt
        issueType
        userModified
        admin
        household {
          unicefId
          id
        }
        individual {
          unicefId
          id
        }
      }
    }
  }
}
    `;
export type ExistingGrievanceTicketsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<ExistingGrievanceTicketsQuery, ExistingGrievanceTicketsQueryVariables>, 'query'> & ({ variables: ExistingGrievanceTicketsQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const ExistingGrievanceTicketsComponent = (props: ExistingGrievanceTicketsComponentProps) => (
      <ApolloReactComponents.Query<ExistingGrievanceTicketsQuery, ExistingGrievanceTicketsQueryVariables> query={ExistingGrievanceTicketsDocument} {...props} />
    );
    
export type ExistingGrievanceTicketsProps<TChildProps = {}> = ApolloReactHoc.DataProps<ExistingGrievanceTicketsQuery, ExistingGrievanceTicketsQueryVariables> & TChildProps;
export function withExistingGrievanceTickets<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ExistingGrievanceTicketsQuery,
  ExistingGrievanceTicketsQueryVariables,
  ExistingGrievanceTicketsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, ExistingGrievanceTicketsQuery, ExistingGrievanceTicketsQueryVariables, ExistingGrievanceTicketsProps<TChildProps>>(ExistingGrievanceTicketsDocument, {
      alias: 'existingGrievanceTickets',
      ...operationOptions
    });
};

/**
 * __useExistingGrievanceTicketsQuery__
 *
 * To run a query within a React component, call `useExistingGrievanceTicketsQuery` and pass it any options that fit your needs.
 * When your component renders, `useExistingGrievanceTicketsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useExistingGrievanceTicketsQuery({
 *   variables: {
 *      before: // value for 'before'
 *      after: // value for 'after'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      id: // value for 'id'
 *      businessArea: // value for 'businessArea'
 *      household: // value for 'household'
 *      individual: // value for 'individual'
 *      paymentRecord: // value for 'paymentRecord'
 *      category: // value for 'category'
 *      issueType: // value for 'issueType'
 *      orderBy: // value for 'orderBy'
 *   },
 * });
 */
export function useExistingGrievanceTicketsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ExistingGrievanceTicketsQuery, ExistingGrievanceTicketsQueryVariables>) {
        return ApolloReactHooks.useQuery<ExistingGrievanceTicketsQuery, ExistingGrievanceTicketsQueryVariables>(ExistingGrievanceTicketsDocument, baseOptions);
      }
export function useExistingGrievanceTicketsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ExistingGrievanceTicketsQuery, ExistingGrievanceTicketsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<ExistingGrievanceTicketsQuery, ExistingGrievanceTicketsQueryVariables>(ExistingGrievanceTicketsDocument, baseOptions);
        }
export type ExistingGrievanceTicketsQueryHookResult = ReturnType<typeof useExistingGrievanceTicketsQuery>;
export type ExistingGrievanceTicketsLazyQueryHookResult = ReturnType<typeof useExistingGrievanceTicketsLazyQuery>;
export type ExistingGrievanceTicketsQueryResult = ApolloReactCommon.QueryResult<ExistingGrievanceTicketsQuery, ExistingGrievanceTicketsQueryVariables>;
export const GrievanceTicketDocument = gql`
    query GrievanceTicket($id: ID!) {
  grievanceTicket(id: $id) {
    ...grievanceTicketDetailed
  }
}
    ${GrievanceTicketDetailedFragmentDoc}`;
export type GrievanceTicketComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GrievanceTicketQuery, GrievanceTicketQueryVariables>, 'query'> & ({ variables: GrievanceTicketQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const GrievanceTicketComponent = (props: GrievanceTicketComponentProps) => (
      <ApolloReactComponents.Query<GrievanceTicketQuery, GrievanceTicketQueryVariables> query={GrievanceTicketDocument} {...props} />
    );
    
export type GrievanceTicketProps<TChildProps = {}> = ApolloReactHoc.DataProps<GrievanceTicketQuery, GrievanceTicketQueryVariables> & TChildProps;
export function withGrievanceTicket<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GrievanceTicketQuery,
  GrievanceTicketQueryVariables,
  GrievanceTicketProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, GrievanceTicketQuery, GrievanceTicketQueryVariables, GrievanceTicketProps<TChildProps>>(GrievanceTicketDocument, {
      alias: 'grievanceTicket',
      ...operationOptions
    });
};

/**
 * __useGrievanceTicketQuery__
 *
 * To run a query within a React component, call `useGrievanceTicketQuery` and pass it any options that fit your needs.
 * When your component renders, `useGrievanceTicketQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGrievanceTicketQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGrievanceTicketQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GrievanceTicketQuery, GrievanceTicketQueryVariables>) {
        return ApolloReactHooks.useQuery<GrievanceTicketQuery, GrievanceTicketQueryVariables>(GrievanceTicketDocument, baseOptions);
      }
export function useGrievanceTicketLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GrievanceTicketQuery, GrievanceTicketQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GrievanceTicketQuery, GrievanceTicketQueryVariables>(GrievanceTicketDocument, baseOptions);
        }
export type GrievanceTicketQueryHookResult = ReturnType<typeof useGrievanceTicketQuery>;
export type GrievanceTicketLazyQueryHookResult = ReturnType<typeof useGrievanceTicketLazyQuery>;
export type GrievanceTicketQueryResult = ApolloReactCommon.QueryResult<GrievanceTicketQuery, GrievanceTicketQueryVariables>;
export const GrievanceTicketFlexFieldsDocument = gql`
    query GrievanceTicketFlexFields($id: ID!) {
  grievanceTicket(id: $id) {
    id
    individualDataUpdateTicketDetails {
      id
      individualData
    }
    householdDataUpdateTicketDetails {
      id
      householdData
    }
  }
}
    `;
export type GrievanceTicketFlexFieldsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GrievanceTicketFlexFieldsQuery, GrievanceTicketFlexFieldsQueryVariables>, 'query'> & ({ variables: GrievanceTicketFlexFieldsQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const GrievanceTicketFlexFieldsComponent = (props: GrievanceTicketFlexFieldsComponentProps) => (
      <ApolloReactComponents.Query<GrievanceTicketFlexFieldsQuery, GrievanceTicketFlexFieldsQueryVariables> query={GrievanceTicketFlexFieldsDocument} {...props} />
    );
    
export type GrievanceTicketFlexFieldsProps<TChildProps = {}> = ApolloReactHoc.DataProps<GrievanceTicketFlexFieldsQuery, GrievanceTicketFlexFieldsQueryVariables> & TChildProps;
export function withGrievanceTicketFlexFields<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GrievanceTicketFlexFieldsQuery,
  GrievanceTicketFlexFieldsQueryVariables,
  GrievanceTicketFlexFieldsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, GrievanceTicketFlexFieldsQuery, GrievanceTicketFlexFieldsQueryVariables, GrievanceTicketFlexFieldsProps<TChildProps>>(GrievanceTicketFlexFieldsDocument, {
      alias: 'grievanceTicketFlexFields',
      ...operationOptions
    });
};

/**
 * __useGrievanceTicketFlexFieldsQuery__
 *
 * To run a query within a React component, call `useGrievanceTicketFlexFieldsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGrievanceTicketFlexFieldsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGrievanceTicketFlexFieldsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGrievanceTicketFlexFieldsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GrievanceTicketFlexFieldsQuery, GrievanceTicketFlexFieldsQueryVariables>) {
        return ApolloReactHooks.useQuery<GrievanceTicketFlexFieldsQuery, GrievanceTicketFlexFieldsQueryVariables>(GrievanceTicketFlexFieldsDocument, baseOptions);
      }
export function useGrievanceTicketFlexFieldsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GrievanceTicketFlexFieldsQuery, GrievanceTicketFlexFieldsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GrievanceTicketFlexFieldsQuery, GrievanceTicketFlexFieldsQueryVariables>(GrievanceTicketFlexFieldsDocument, baseOptions);
        }
export type GrievanceTicketFlexFieldsQueryHookResult = ReturnType<typeof useGrievanceTicketFlexFieldsQuery>;
export type GrievanceTicketFlexFieldsLazyQueryHookResult = ReturnType<typeof useGrievanceTicketFlexFieldsLazyQuery>;
export type GrievanceTicketFlexFieldsQueryResult = ApolloReactCommon.QueryResult<GrievanceTicketFlexFieldsQuery, GrievanceTicketFlexFieldsQueryVariables>;
export const GrievanceTicketUnicefIdDocument = gql`
    query GrievanceTicketUnicefId($id: ID!) {
  grievanceTicket(id: $id) {
    id
    unicefId
  }
}
    `;
export type GrievanceTicketUnicefIdComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GrievanceTicketUnicefIdQuery, GrievanceTicketUnicefIdQueryVariables>, 'query'> & ({ variables: GrievanceTicketUnicefIdQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const GrievanceTicketUnicefIdComponent = (props: GrievanceTicketUnicefIdComponentProps) => (
      <ApolloReactComponents.Query<GrievanceTicketUnicefIdQuery, GrievanceTicketUnicefIdQueryVariables> query={GrievanceTicketUnicefIdDocument} {...props} />
    );
    
export type GrievanceTicketUnicefIdProps<TChildProps = {}> = ApolloReactHoc.DataProps<GrievanceTicketUnicefIdQuery, GrievanceTicketUnicefIdQueryVariables> & TChildProps;
export function withGrievanceTicketUnicefId<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GrievanceTicketUnicefIdQuery,
  GrievanceTicketUnicefIdQueryVariables,
  GrievanceTicketUnicefIdProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, GrievanceTicketUnicefIdQuery, GrievanceTicketUnicefIdQueryVariables, GrievanceTicketUnicefIdProps<TChildProps>>(GrievanceTicketUnicefIdDocument, {
      alias: 'grievanceTicketUnicefId',
      ...operationOptions
    });
};

/**
 * __useGrievanceTicketUnicefIdQuery__
 *
 * To run a query within a React component, call `useGrievanceTicketUnicefIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGrievanceTicketUnicefIdQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGrievanceTicketUnicefIdQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGrievanceTicketUnicefIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GrievanceTicketUnicefIdQuery, GrievanceTicketUnicefIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GrievanceTicketUnicefIdQuery, GrievanceTicketUnicefIdQueryVariables>(GrievanceTicketUnicefIdDocument, baseOptions);
      }
export function useGrievanceTicketUnicefIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GrievanceTicketUnicefIdQuery, GrievanceTicketUnicefIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GrievanceTicketUnicefIdQuery, GrievanceTicketUnicefIdQueryVariables>(GrievanceTicketUnicefIdDocument, baseOptions);
        }
export type GrievanceTicketUnicefIdQueryHookResult = ReturnType<typeof useGrievanceTicketUnicefIdQuery>;
export type GrievanceTicketUnicefIdLazyQueryHookResult = ReturnType<typeof useGrievanceTicketUnicefIdLazyQuery>;
export type GrievanceTicketUnicefIdQueryResult = ApolloReactCommon.QueryResult<GrievanceTicketUnicefIdQuery, GrievanceTicketUnicefIdQueryVariables>;
export const GrievancesChoiceDataDocument = gql`
    query GrievancesChoiceData {
  grievanceTicketStatusChoices {
    name
    value
  }
  grievanceTicketCategoryChoices {
    name
    value
  }
  grievanceTicketManualCategoryChoices {
    name
    value
  }
  grievanceTicketSystemCategoryChoices {
    name
    value
  }
  grievanceTicketPriorityChoices {
    name
    value
  }
  grievanceTicketUrgencyChoices {
    name
    value
  }
  grievanceTicketIssueTypeChoices {
    category
    label
    subCategories {
      name
      value
    }
  }
  grievanceTicketSearchTypesChoices {
    name
    value
  }
}
    `;
export type GrievancesChoiceDataComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GrievancesChoiceDataQuery, GrievancesChoiceDataQueryVariables>, 'query'>;

    export const GrievancesChoiceDataComponent = (props: GrievancesChoiceDataComponentProps) => (
      <ApolloReactComponents.Query<GrievancesChoiceDataQuery, GrievancesChoiceDataQueryVariables> query={GrievancesChoiceDataDocument} {...props} />
    );
    
export type GrievancesChoiceDataProps<TChildProps = {}> = ApolloReactHoc.DataProps<GrievancesChoiceDataQuery, GrievancesChoiceDataQueryVariables> & TChildProps;
export function withGrievancesChoiceData<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GrievancesChoiceDataQuery,
  GrievancesChoiceDataQueryVariables,
  GrievancesChoiceDataProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, GrievancesChoiceDataQuery, GrievancesChoiceDataQueryVariables, GrievancesChoiceDataProps<TChildProps>>(GrievancesChoiceDataDocument, {
      alias: 'grievancesChoiceData',
      ...operationOptions
    });
};

/**
 * __useGrievancesChoiceDataQuery__
 *
 * To run a query within a React component, call `useGrievancesChoiceDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useGrievancesChoiceDataQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGrievancesChoiceDataQuery({
 *   variables: {
 *   },
 * });
 */
export function useGrievancesChoiceDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GrievancesChoiceDataQuery, GrievancesChoiceDataQueryVariables>) {
        return ApolloReactHooks.useQuery<GrievancesChoiceDataQuery, GrievancesChoiceDataQueryVariables>(GrievancesChoiceDataDocument, baseOptions);
      }
export function useGrievancesChoiceDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GrievancesChoiceDataQuery, GrievancesChoiceDataQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GrievancesChoiceDataQuery, GrievancesChoiceDataQueryVariables>(GrievancesChoiceDataDocument, baseOptions);
        }
export type GrievancesChoiceDataQueryHookResult = ReturnType<typeof useGrievancesChoiceDataQuery>;
export type GrievancesChoiceDataLazyQueryHookResult = ReturnType<typeof useGrievancesChoiceDataLazyQuery>;
export type GrievancesChoiceDataQueryResult = ApolloReactCommon.QueryResult<GrievancesChoiceDataQuery, GrievancesChoiceDataQueryVariables>;
export const RelatedGrievanceTicketsDocument = gql`
    query RelatedGrievanceTickets($id: ID!) {
  grievanceTicket(id: $id) {
    relatedTickets {
      id
      status
      category
      issueType
      unicefId
    }
  }
}
    `;
export type RelatedGrievanceTicketsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<RelatedGrievanceTicketsQuery, RelatedGrievanceTicketsQueryVariables>, 'query'> & ({ variables: RelatedGrievanceTicketsQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const RelatedGrievanceTicketsComponent = (props: RelatedGrievanceTicketsComponentProps) => (
      <ApolloReactComponents.Query<RelatedGrievanceTicketsQuery, RelatedGrievanceTicketsQueryVariables> query={RelatedGrievanceTicketsDocument} {...props} />
    );
    
export type RelatedGrievanceTicketsProps<TChildProps = {}> = ApolloReactHoc.DataProps<RelatedGrievanceTicketsQuery, RelatedGrievanceTicketsQueryVariables> & TChildProps;
export function withRelatedGrievanceTickets<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  RelatedGrievanceTicketsQuery,
  RelatedGrievanceTicketsQueryVariables,
  RelatedGrievanceTicketsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, RelatedGrievanceTicketsQuery, RelatedGrievanceTicketsQueryVariables, RelatedGrievanceTicketsProps<TChildProps>>(RelatedGrievanceTicketsDocument, {
      alias: 'relatedGrievanceTickets',
      ...operationOptions
    });
};

/**
 * __useRelatedGrievanceTicketsQuery__
 *
 * To run a query within a React component, call `useRelatedGrievanceTicketsQuery` and pass it any options that fit your needs.
 * When your component renders, `useRelatedGrievanceTicketsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useRelatedGrievanceTicketsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useRelatedGrievanceTicketsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<RelatedGrievanceTicketsQuery, RelatedGrievanceTicketsQueryVariables>) {
        return ApolloReactHooks.useQuery<RelatedGrievanceTicketsQuery, RelatedGrievanceTicketsQueryVariables>(RelatedGrievanceTicketsDocument, baseOptions);
      }
export function useRelatedGrievanceTicketsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<RelatedGrievanceTicketsQuery, RelatedGrievanceTicketsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<RelatedGrievanceTicketsQuery, RelatedGrievanceTicketsQueryVariables>(RelatedGrievanceTicketsDocument, baseOptions);
        }
export type RelatedGrievanceTicketsQueryHookResult = ReturnType<typeof useRelatedGrievanceTicketsQuery>;
export type RelatedGrievanceTicketsLazyQueryHookResult = ReturnType<typeof useRelatedGrievanceTicketsLazyQuery>;
export type RelatedGrievanceTicketsQueryResult = ApolloReactCommon.QueryResult<RelatedGrievanceTicketsQuery, RelatedGrievanceTicketsQueryVariables>;
export const AllDeliveryMechanismsDocument = gql`
    query AllDeliveryMechanisms {
  allDeliveryMechanisms {
    name
    value
  }
}
    `;
export type AllDeliveryMechanismsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllDeliveryMechanismsQuery, AllDeliveryMechanismsQueryVariables>, 'query'>;

    export const AllDeliveryMechanismsComponent = (props: AllDeliveryMechanismsComponentProps) => (
      <ApolloReactComponents.Query<AllDeliveryMechanismsQuery, AllDeliveryMechanismsQueryVariables> query={AllDeliveryMechanismsDocument} {...props} />
    );
    
export type AllDeliveryMechanismsProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllDeliveryMechanismsQuery, AllDeliveryMechanismsQueryVariables> & TChildProps;
export function withAllDeliveryMechanisms<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllDeliveryMechanismsQuery,
  AllDeliveryMechanismsQueryVariables,
  AllDeliveryMechanismsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllDeliveryMechanismsQuery, AllDeliveryMechanismsQueryVariables, AllDeliveryMechanismsProps<TChildProps>>(AllDeliveryMechanismsDocument, {
      alias: 'allDeliveryMechanisms',
      ...operationOptions
    });
};

/**
 * __useAllDeliveryMechanismsQuery__
 *
 * To run a query within a React component, call `useAllDeliveryMechanismsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllDeliveryMechanismsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllDeliveryMechanismsQuery({
 *   variables: {
 *   },
 * });
 */
export function useAllDeliveryMechanismsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllDeliveryMechanismsQuery, AllDeliveryMechanismsQueryVariables>) {
        return ApolloReactHooks.useQuery<AllDeliveryMechanismsQuery, AllDeliveryMechanismsQueryVariables>(AllDeliveryMechanismsDocument, baseOptions);
      }
export function useAllDeliveryMechanismsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllDeliveryMechanismsQuery, AllDeliveryMechanismsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllDeliveryMechanismsQuery, AllDeliveryMechanismsQueryVariables>(AllDeliveryMechanismsDocument, baseOptions);
        }
export type AllDeliveryMechanismsQueryHookResult = ReturnType<typeof useAllDeliveryMechanismsQuery>;
export type AllDeliveryMechanismsLazyQueryHookResult = ReturnType<typeof useAllDeliveryMechanismsLazyQuery>;
export type AllDeliveryMechanismsQueryResult = ApolloReactCommon.QueryResult<AllDeliveryMechanismsQuery, AllDeliveryMechanismsQueryVariables>;
export const AllPaymentPlansForTableDocument = gql`
    query AllPaymentPlansForTable($after: String, $before: String, $first: Int, $last: Int, $orderBy: String, $businessArea: String!, $search: String, $status: [String], $totalEntitledQuantityFrom: Float, $totalEntitledQuantityTo: Float, $dispersionStartDate: Date, $dispersionEndDate: Date, $isFollowUp: Boolean, $program: String) {
  allPaymentPlans(after: $after, before: $before, first: $first, last: $last, orderBy: $orderBy, businessArea: $businessArea, search: $search, status: $status, totalEntitledQuantityFrom: $totalEntitledQuantityFrom, totalEntitledQuantityTo: $totalEntitledQuantityTo, dispersionStartDate: $dispersionStartDate, dispersionEndDate: $dispersionEndDate, isFollowUp: $isFollowUp, program: $program) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        id
        unicefId
        isFollowUp
        followUps {
          totalCount
          edges {
            node {
              id
              unicefId
            }
          }
        }
        status
        createdBy {
          id
          firstName
          lastName
          email
        }
        program {
          id
          name
        }
        targetPopulation {
          id
          name
        }
        currency
        currencyName
        startDate
        endDate
        dispersionStartDate
        dispersionEndDate
        femaleChildrenCount
        femaleAdultsCount
        maleChildrenCount
        maleAdultsCount
        totalHouseholdsCount
        totalIndividualsCount
        totalEntitledQuantity
        totalDeliveredQuantity
        totalUndeliveredQuantity
      }
    }
  }
}
    `;
export type AllPaymentPlansForTableComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllPaymentPlansForTableQuery, AllPaymentPlansForTableQueryVariables>, 'query'> & ({ variables: AllPaymentPlansForTableQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const AllPaymentPlansForTableComponent = (props: AllPaymentPlansForTableComponentProps) => (
      <ApolloReactComponents.Query<AllPaymentPlansForTableQuery, AllPaymentPlansForTableQueryVariables> query={AllPaymentPlansForTableDocument} {...props} />
    );
    
export type AllPaymentPlansForTableProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllPaymentPlansForTableQuery, AllPaymentPlansForTableQueryVariables> & TChildProps;
export function withAllPaymentPlansForTable<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllPaymentPlansForTableQuery,
  AllPaymentPlansForTableQueryVariables,
  AllPaymentPlansForTableProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllPaymentPlansForTableQuery, AllPaymentPlansForTableQueryVariables, AllPaymentPlansForTableProps<TChildProps>>(AllPaymentPlansForTableDocument, {
      alias: 'allPaymentPlansForTable',
      ...operationOptions
    });
};

/**
 * __useAllPaymentPlansForTableQuery__
 *
 * To run a query within a React component, call `useAllPaymentPlansForTableQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllPaymentPlansForTableQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllPaymentPlansForTableQuery({
 *   variables: {
 *      after: // value for 'after'
 *      before: // value for 'before'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      orderBy: // value for 'orderBy'
 *      businessArea: // value for 'businessArea'
 *      search: // value for 'search'
 *      status: // value for 'status'
 *      totalEntitledQuantityFrom: // value for 'totalEntitledQuantityFrom'
 *      totalEntitledQuantityTo: // value for 'totalEntitledQuantityTo'
 *      dispersionStartDate: // value for 'dispersionStartDate'
 *      dispersionEndDate: // value for 'dispersionEndDate'
 *      isFollowUp: // value for 'isFollowUp'
 *      program: // value for 'program'
 *   },
 * });
 */
export function useAllPaymentPlansForTableQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllPaymentPlansForTableQuery, AllPaymentPlansForTableQueryVariables>) {
        return ApolloReactHooks.useQuery<AllPaymentPlansForTableQuery, AllPaymentPlansForTableQueryVariables>(AllPaymentPlansForTableDocument, baseOptions);
      }
export function useAllPaymentPlansForTableLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllPaymentPlansForTableQuery, AllPaymentPlansForTableQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllPaymentPlansForTableQuery, AllPaymentPlansForTableQueryVariables>(AllPaymentPlansForTableDocument, baseOptions);
        }
export type AllPaymentPlansForTableQueryHookResult = ReturnType<typeof useAllPaymentPlansForTableQuery>;
export type AllPaymentPlansForTableLazyQueryHookResult = ReturnType<typeof useAllPaymentPlansForTableLazyQuery>;
export type AllPaymentPlansForTableQueryResult = ApolloReactCommon.QueryResult<AllPaymentPlansForTableQuery, AllPaymentPlansForTableQueryVariables>;
export const AvailableFspsForDeliveryMechanismsDocument = gql`
    query AvailableFspsForDeliveryMechanisms($input: AvailableFspsForDeliveryMechanismsInput!) {
  availableFspsForDeliveryMechanisms(input: $input) {
    deliveryMechanism
    fsps {
      id
      name
    }
  }
}
    `;
export type AvailableFspsForDeliveryMechanismsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AvailableFspsForDeliveryMechanismsQuery, AvailableFspsForDeliveryMechanismsQueryVariables>, 'query'> & ({ variables: AvailableFspsForDeliveryMechanismsQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const AvailableFspsForDeliveryMechanismsComponent = (props: AvailableFspsForDeliveryMechanismsComponentProps) => (
      <ApolloReactComponents.Query<AvailableFspsForDeliveryMechanismsQuery, AvailableFspsForDeliveryMechanismsQueryVariables> query={AvailableFspsForDeliveryMechanismsDocument} {...props} />
    );
    
export type AvailableFspsForDeliveryMechanismsProps<TChildProps = {}> = ApolloReactHoc.DataProps<AvailableFspsForDeliveryMechanismsQuery, AvailableFspsForDeliveryMechanismsQueryVariables> & TChildProps;
export function withAvailableFspsForDeliveryMechanisms<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AvailableFspsForDeliveryMechanismsQuery,
  AvailableFspsForDeliveryMechanismsQueryVariables,
  AvailableFspsForDeliveryMechanismsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AvailableFspsForDeliveryMechanismsQuery, AvailableFspsForDeliveryMechanismsQueryVariables, AvailableFspsForDeliveryMechanismsProps<TChildProps>>(AvailableFspsForDeliveryMechanismsDocument, {
      alias: 'availableFspsForDeliveryMechanisms',
      ...operationOptions
    });
};

/**
 * __useAvailableFspsForDeliveryMechanismsQuery__
 *
 * To run a query within a React component, call `useAvailableFspsForDeliveryMechanismsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAvailableFspsForDeliveryMechanismsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAvailableFspsForDeliveryMechanismsQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAvailableFspsForDeliveryMechanismsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AvailableFspsForDeliveryMechanismsQuery, AvailableFspsForDeliveryMechanismsQueryVariables>) {
        return ApolloReactHooks.useQuery<AvailableFspsForDeliveryMechanismsQuery, AvailableFspsForDeliveryMechanismsQueryVariables>(AvailableFspsForDeliveryMechanismsDocument, baseOptions);
      }
export function useAvailableFspsForDeliveryMechanismsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AvailableFspsForDeliveryMechanismsQuery, AvailableFspsForDeliveryMechanismsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AvailableFspsForDeliveryMechanismsQuery, AvailableFspsForDeliveryMechanismsQueryVariables>(AvailableFspsForDeliveryMechanismsDocument, baseOptions);
        }
export type AvailableFspsForDeliveryMechanismsQueryHookResult = ReturnType<typeof useAvailableFspsForDeliveryMechanismsQuery>;
export type AvailableFspsForDeliveryMechanismsLazyQueryHookResult = ReturnType<typeof useAvailableFspsForDeliveryMechanismsLazyQuery>;
export type AvailableFspsForDeliveryMechanismsQueryResult = ApolloReactCommon.QueryResult<AvailableFspsForDeliveryMechanismsQuery, AvailableFspsForDeliveryMechanismsQueryVariables>;
export const PaymentDocument = gql`
    query Payment($id: ID!) {
  payment(id: $id) {
    id
    unicefId
    distributionModality
    status
    statusDate
    targetPopulation {
      id
      name
    }
    verification {
      id
      status
      statusDate
      receivedAmount
      isManuallyEditable
    }
    currency
    entitlementQuantity
    deliveredQuantity
    deliveryDate
    household {
      id
      size
      status
      unicefId
      headOfHousehold {
        id
        phoneNo
        phoneNoAlternative
        phoneNoValid
        phoneNoAlternativeValid
        fullName
      }
    }
    collector {
      id
      unicefId
      fullName
      phoneNo
      phoneNoValid
      phoneNoAlternative
      phoneNoAlternativeValid
    }
    parent {
      id
      status
      isFollowUp
      unicefId
      program {
        id
        name
      }
      verificationPlans {
        edges {
          node {
            id
            status
            verificationChannel
          }
        }
      }
    }
    deliveredQuantityUsd
    deliveryType
    transactionReferenceId
    serviceProvider {
      id
      fullName
    }
  }
}
    `;
export type PaymentComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<PaymentQuery, PaymentQueryVariables>, 'query'> & ({ variables: PaymentQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const PaymentComponent = (props: PaymentComponentProps) => (
      <ApolloReactComponents.Query<PaymentQuery, PaymentQueryVariables> query={PaymentDocument} {...props} />
    );
    
export type PaymentProps<TChildProps = {}> = ApolloReactHoc.DataProps<PaymentQuery, PaymentQueryVariables> & TChildProps;
export function withPayment<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  PaymentQuery,
  PaymentQueryVariables,
  PaymentProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, PaymentQuery, PaymentQueryVariables, PaymentProps<TChildProps>>(PaymentDocument, {
      alias: 'payment',
      ...operationOptions
    });
};

/**
 * __usePaymentQuery__
 *
 * To run a query within a React component, call `usePaymentQuery` and pass it any options that fit your needs.
 * When your component renders, `usePaymentQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePaymentQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function usePaymentQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<PaymentQuery, PaymentQueryVariables>) {
        return ApolloReactHooks.useQuery<PaymentQuery, PaymentQueryVariables>(PaymentDocument, baseOptions);
      }
export function usePaymentLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<PaymentQuery, PaymentQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<PaymentQuery, PaymentQueryVariables>(PaymentDocument, baseOptions);
        }
export type PaymentQueryHookResult = ReturnType<typeof usePaymentQuery>;
export type PaymentLazyQueryHookResult = ReturnType<typeof usePaymentLazyQuery>;
export type PaymentQueryResult = ApolloReactCommon.QueryResult<PaymentQuery, PaymentQueryVariables>;
export const PaymentPlanDocument = gql`
    query PaymentPlan($id: ID!) {
  paymentPlan(id: $id) {
    id
    version
    unicefId
    status
    canCreateFollowUp
    backgroundActionStatus
    canCreatePaymentVerificationPlan
    availablePaymentRecordsCount
    bankReconciliationSuccess
    bankReconciliationError
    createdBy {
      id
      firstName
      lastName
      email
    }
    program {
      id
      name
      caId
    }
    targetPopulation {
      id
      name
    }
    currency
    currencyName
    startDate
    endDate
    dispersionStartDate
    dispersionEndDate
    femaleChildrenCount
    femaleAdultsCount
    maleChildrenCount
    maleAdultsCount
    totalHouseholdsCount
    totalIndividualsCount
    totalEntitledQuantity
    totalDeliveredQuantity
    totalUndeliveredQuantity
    totalWithdrawnHouseholdsCount
    approvalProcess {
      totalCount
      edgeCount
      edges {
        node {
          id
          sentForApprovalBy {
            id
            firstName
            lastName
            email
          }
          sentForApprovalDate
          sentForAuthorizationBy {
            id
            firstName
            lastName
            email
          }
          sentForAuthorizationDate
          sentForFinanceReleaseBy {
            id
            firstName
            lastName
            email
          }
          sentForFinanceReleaseDate
          approvalNumberRequired
          authorizationNumberRequired
          financeReleaseNumberRequired
          actions {
            approval {
              createdAt
              comment
              info
              createdBy {
                id
                firstName
                lastName
                email
              }
            }
            authorization {
              createdAt
              comment
              info
              createdBy {
                id
                firstName
                lastName
                email
              }
            }
            financeRelease {
              createdAt
              comment
              info
              createdBy {
                id
                firstName
                lastName
                email
              }
            }
            reject {
              createdAt
              comment
              info
              createdBy {
                id
                firstName
                lastName
                email
              }
            }
          }
          rejectedOn
        }
      }
    }
    steficonRule {
      id
      rule {
        id
        name
      }
    }
    hasPaymentListExportFile
    hasFspDeliveryMechanismXlsxTemplate
    importedFileDate
    importedFileName
    totalEntitledQuantityUsd
    paymentsConflictsCount
    deliveryMechanisms {
      id
      name
      order
      fsp {
        id
        name
        communicationChannel
      }
    }
    volumeByDeliveryMechanism {
      deliveryMechanism {
        id
        name
        order
        fsp {
          id
          name
        }
      }
      volume
      volumeUsd
    }
    verificationPlans {
      totalCount
      edges {
        node {
          id
          unicefId
          status
          sampleSize
          receivedCount
          notReceivedCount
          respondedCount
          verificationChannel
          sampling
          receivedCount
          receivedWithProblemsCount
          rapidProFlowId
          confidenceInterval
          marginOfError
          activationDate
          completionDate
          ageFilter {
            min
            max
          }
          excludedAdminAreasFilter
          sexFilter
          xlsxFileExporting
          hasXlsxFile
          xlsxFileWasDownloaded
          xlsxFileImported
        }
      }
    }
    paymentVerificationSummary {
      id
      createdAt
      updatedAt
      status
      activationDate
      completionDate
    }
    paymentItems {
      totalCount
      edgeCount
      edges {
        node {
          id
          status
        }
      }
    }
    reconciliationSummary {
      deliveredFully
      deliveredPartially
      notDelivered
      unsuccessful
      pending
      numberOfPayments
      reconciled
    }
    excludedHouseholds {
      id
      unicefId
    }
    exclusionReason
    excludeHouseholdError
    isFollowUp
    followUps {
      totalCount
      edges {
        node {
          id
          unicefId
          createdAt
          paymentItems {
            totalCount
          }
        }
      }
    }
    sourcePaymentPlan {
      id
      unicefId
    }
    unsuccessfulPaymentsCount
  }
}
    `;
export type PaymentPlanComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<PaymentPlanQuery, PaymentPlanQueryVariables>, 'query'> & ({ variables: PaymentPlanQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const PaymentPlanComponent = (props: PaymentPlanComponentProps) => (
      <ApolloReactComponents.Query<PaymentPlanQuery, PaymentPlanQueryVariables> query={PaymentPlanDocument} {...props} />
    );
    
export type PaymentPlanProps<TChildProps = {}> = ApolloReactHoc.DataProps<PaymentPlanQuery, PaymentPlanQueryVariables> & TChildProps;
export function withPaymentPlan<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  PaymentPlanQuery,
  PaymentPlanQueryVariables,
  PaymentPlanProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, PaymentPlanQuery, PaymentPlanQueryVariables, PaymentPlanProps<TChildProps>>(PaymentPlanDocument, {
      alias: 'paymentPlan',
      ...operationOptions
    });
};

/**
 * __usePaymentPlanQuery__
 *
 * To run a query within a React component, call `usePaymentPlanQuery` and pass it any options that fit your needs.
 * When your component renders, `usePaymentPlanQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePaymentPlanQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function usePaymentPlanQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<PaymentPlanQuery, PaymentPlanQueryVariables>) {
        return ApolloReactHooks.useQuery<PaymentPlanQuery, PaymentPlanQueryVariables>(PaymentPlanDocument, baseOptions);
      }
export function usePaymentPlanLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<PaymentPlanQuery, PaymentPlanQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<PaymentPlanQuery, PaymentPlanQueryVariables>(PaymentPlanDocument, baseOptions);
        }
export type PaymentPlanQueryHookResult = ReturnType<typeof usePaymentPlanQuery>;
export type PaymentPlanLazyQueryHookResult = ReturnType<typeof usePaymentPlanLazyQuery>;
export type PaymentPlanQueryResult = ApolloReactCommon.QueryResult<PaymentPlanQuery, PaymentPlanQueryVariables>;
export const AllCashPlansDocument = gql`
    query AllCashPlans($program: ID, $after: String, $before: String, $first: Int, $last: Int, $orderBy: String, $search: String, $serviceProvider: String, $deliveryType: [String], $verificationStatus: [String], $startDateGte: DateTime, $endDateLte: DateTime, $businessArea: String) {
  allCashPlans(program: $program, after: $after, before: $before, first: $first, last: $last, orderBy: $orderBy, search: $search, serviceProvider_FullName_Startswith: $serviceProvider, deliveryType: $deliveryType, verificationStatus: $verificationStatus, startDate_Gte: $startDateGte, endDate_Lte: $endDateLte, businessArea: $businessArea) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        id
        caId
        assistanceThrough
        totalNumberOfHouseholds
        serviceProvider {
          id
          caId
          fullName
        }
        deliveryType
        startDate
        endDate
        program {
          id
          name
        }
        totalPersonsCovered
        dispersionDate
        assistanceMeasurement
        status
        currency
        totalEntitledQuantity
        totalDeliveredQuantity
        totalUndeliveredQuantity
        updatedAt
        paymentVerificationSummary {
          id
          status
        }
      }
    }
  }
}
    `;
export type AllCashPlansComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllCashPlansQuery, AllCashPlansQueryVariables>, 'query'>;

    export const AllCashPlansComponent = (props: AllCashPlansComponentProps) => (
      <ApolloReactComponents.Query<AllCashPlansQuery, AllCashPlansQueryVariables> query={AllCashPlansDocument} {...props} />
    );
    
export type AllCashPlansProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllCashPlansQuery, AllCashPlansQueryVariables> & TChildProps;
export function withAllCashPlans<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllCashPlansQuery,
  AllCashPlansQueryVariables,
  AllCashPlansProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllCashPlansQuery, AllCashPlansQueryVariables, AllCashPlansProps<TChildProps>>(AllCashPlansDocument, {
      alias: 'allCashPlans',
      ...operationOptions
    });
};

/**
 * __useAllCashPlansQuery__
 *
 * To run a query within a React component, call `useAllCashPlansQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllCashPlansQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllCashPlansQuery({
 *   variables: {
 *      program: // value for 'program'
 *      after: // value for 'after'
 *      before: // value for 'before'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      orderBy: // value for 'orderBy'
 *      search: // value for 'search'
 *      serviceProvider: // value for 'serviceProvider'
 *      deliveryType: // value for 'deliveryType'
 *      verificationStatus: // value for 'verificationStatus'
 *      startDateGte: // value for 'startDateGte'
 *      endDateLte: // value for 'endDateLte'
 *      businessArea: // value for 'businessArea'
 *   },
 * });
 */
export function useAllCashPlansQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllCashPlansQuery, AllCashPlansQueryVariables>) {
        return ApolloReactHooks.useQuery<AllCashPlansQuery, AllCashPlansQueryVariables>(AllCashPlansDocument, baseOptions);
      }
export function useAllCashPlansLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllCashPlansQuery, AllCashPlansQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllCashPlansQuery, AllCashPlansQueryVariables>(AllCashPlansDocument, baseOptions);
        }
export type AllCashPlansQueryHookResult = ReturnType<typeof useAllCashPlansQuery>;
export type AllCashPlansLazyQueryHookResult = ReturnType<typeof useAllCashPlansLazyQuery>;
export type AllCashPlansQueryResult = ApolloReactCommon.QueryResult<AllCashPlansQuery, AllCashPlansQueryVariables>;
export const AllCashPlansAndPaymentPlansDocument = gql`
    query allCashPlansAndPaymentPlans($businessArea: String!, $program: String, $search: String, $serviceProvider: String, $deliveryType: [String], $verificationStatus: [String], $startDateGte: String, $endDateLte: String, $orderBy: String, $first: Int, $last: Int, $before: String, $after: String) {
  allCashPlansAndPaymentPlans(businessArea: $businessArea, program: $program, search: $search, serviceProvider: $serviceProvider, deliveryType: $deliveryType, verificationStatus: $verificationStatus, startDateGte: $startDateGte, endDateLte: $endDateLte, orderBy: $orderBy, first: $first, last: $last, before: $before, after: $after) {
    pageInfo {
      startCursor
      endCursor
      hasNextPage
      hasPreviousPage
    }
    totalCount
    edges {
      cursor
      node {
        objType
        id
        unicefId
        verificationStatus
        currency
        totalDeliveredQuantity
        startDate
        endDate
        programName
        updatedAt
        verificationPlans {
          id
          createdAt
          unicefId
        }
        totalNumberOfHouseholds
        assistanceMeasurement
        totalEntitledQuantity
        totalUndeliveredQuantity
        dispersionDate
        serviceProviderFullName
      }
    }
  }
}
    `;
export type AllCashPlansAndPaymentPlansComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllCashPlansAndPaymentPlansQuery, AllCashPlansAndPaymentPlansQueryVariables>, 'query'> & ({ variables: AllCashPlansAndPaymentPlansQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const AllCashPlansAndPaymentPlansComponent = (props: AllCashPlansAndPaymentPlansComponentProps) => (
      <ApolloReactComponents.Query<AllCashPlansAndPaymentPlansQuery, AllCashPlansAndPaymentPlansQueryVariables> query={AllCashPlansAndPaymentPlansDocument} {...props} />
    );
    
export type AllCashPlansAndPaymentPlansProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllCashPlansAndPaymentPlansQuery, AllCashPlansAndPaymentPlansQueryVariables> & TChildProps;
export function withAllCashPlansAndPaymentPlans<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllCashPlansAndPaymentPlansQuery,
  AllCashPlansAndPaymentPlansQueryVariables,
  AllCashPlansAndPaymentPlansProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllCashPlansAndPaymentPlansQuery, AllCashPlansAndPaymentPlansQueryVariables, AllCashPlansAndPaymentPlansProps<TChildProps>>(AllCashPlansAndPaymentPlansDocument, {
      alias: 'allCashPlansAndPaymentPlans',
      ...operationOptions
    });
};

/**
 * __useAllCashPlansAndPaymentPlansQuery__
 *
 * To run a query within a React component, call `useAllCashPlansAndPaymentPlansQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllCashPlansAndPaymentPlansQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllCashPlansAndPaymentPlansQuery({
 *   variables: {
 *      businessArea: // value for 'businessArea'
 *      program: // value for 'program'
 *      search: // value for 'search'
 *      serviceProvider: // value for 'serviceProvider'
 *      deliveryType: // value for 'deliveryType'
 *      verificationStatus: // value for 'verificationStatus'
 *      startDateGte: // value for 'startDateGte'
 *      endDateLte: // value for 'endDateLte'
 *      orderBy: // value for 'orderBy'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      before: // value for 'before'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useAllCashPlansAndPaymentPlansQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllCashPlansAndPaymentPlansQuery, AllCashPlansAndPaymentPlansQueryVariables>) {
        return ApolloReactHooks.useQuery<AllCashPlansAndPaymentPlansQuery, AllCashPlansAndPaymentPlansQueryVariables>(AllCashPlansAndPaymentPlansDocument, baseOptions);
      }
export function useAllCashPlansAndPaymentPlansLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllCashPlansAndPaymentPlansQuery, AllCashPlansAndPaymentPlansQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllCashPlansAndPaymentPlansQuery, AllCashPlansAndPaymentPlansQueryVariables>(AllCashPlansAndPaymentPlansDocument, baseOptions);
        }
export type AllCashPlansAndPaymentPlansQueryHookResult = ReturnType<typeof useAllCashPlansAndPaymentPlansQuery>;
export type AllCashPlansAndPaymentPlansLazyQueryHookResult = ReturnType<typeof useAllCashPlansAndPaymentPlansLazyQuery>;
export type AllCashPlansAndPaymentPlansQueryResult = ApolloReactCommon.QueryResult<AllCashPlansAndPaymentPlansQuery, AllCashPlansAndPaymentPlansQueryVariables>;
export const AllPaymentRecordsDocument = gql`
    query AllPaymentRecords($parent: ID, $household: ID, $after: String, $before: String, $orderBy: String, $first: Int, $last: Int, $businessArea: String) {
  allPaymentRecords(parent: $parent, household: $household, after: $after, before: $before, first: $first, last: $last, orderBy: $orderBy, businessArea: $businessArea) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    edges {
      cursor
      node {
        id
        createdAt
        updatedAt
        fullName
        statusDate
        status
        caId
        totalPersonsCovered
        household {
          id
          unicefId
          size
        }
        headOfHousehold {
          id
          fullName
        }
        currency
        entitlementQuantity
        deliveredQuantity
        deliveredQuantityUsd
        deliveryDate
        parent {
          id
          program {
            id
            name
          }
        }
      }
    }
    totalCount
    edgeCount
  }
}
    `;
export type AllPaymentRecordsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllPaymentRecordsQuery, AllPaymentRecordsQueryVariables>, 'query'>;

    export const AllPaymentRecordsComponent = (props: AllPaymentRecordsComponentProps) => (
      <ApolloReactComponents.Query<AllPaymentRecordsQuery, AllPaymentRecordsQueryVariables> query={AllPaymentRecordsDocument} {...props} />
    );
    
export type AllPaymentRecordsProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllPaymentRecordsQuery, AllPaymentRecordsQueryVariables> & TChildProps;
export function withAllPaymentRecords<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllPaymentRecordsQuery,
  AllPaymentRecordsQueryVariables,
  AllPaymentRecordsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllPaymentRecordsQuery, AllPaymentRecordsQueryVariables, AllPaymentRecordsProps<TChildProps>>(AllPaymentRecordsDocument, {
      alias: 'allPaymentRecords',
      ...operationOptions
    });
};

/**
 * __useAllPaymentRecordsQuery__
 *
 * To run a query within a React component, call `useAllPaymentRecordsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllPaymentRecordsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllPaymentRecordsQuery({
 *   variables: {
 *      parent: // value for 'parent'
 *      household: // value for 'household'
 *      after: // value for 'after'
 *      before: // value for 'before'
 *      orderBy: // value for 'orderBy'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      businessArea: // value for 'businessArea'
 *   },
 * });
 */
export function useAllPaymentRecordsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllPaymentRecordsQuery, AllPaymentRecordsQueryVariables>) {
        return ApolloReactHooks.useQuery<AllPaymentRecordsQuery, AllPaymentRecordsQueryVariables>(AllPaymentRecordsDocument, baseOptions);
      }
export function useAllPaymentRecordsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllPaymentRecordsQuery, AllPaymentRecordsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllPaymentRecordsQuery, AllPaymentRecordsQueryVariables>(AllPaymentRecordsDocument, baseOptions);
        }
export type AllPaymentRecordsQueryHookResult = ReturnType<typeof useAllPaymentRecordsQuery>;
export type AllPaymentRecordsLazyQueryHookResult = ReturnType<typeof useAllPaymentRecordsLazyQuery>;
export type AllPaymentRecordsQueryResult = ApolloReactCommon.QueryResult<AllPaymentRecordsQuery, AllPaymentRecordsQueryVariables>;
export const AllPaymentRecordsAndPaymentsDocument = gql`
    query AllPaymentRecordsAndPayments($household: ID, $after: String, $before: String, $orderBy: String, $first: Int, $last: Int, $businessArea: String!) {
  allPaymentRecordsAndPayments(household: $household, after: $after, before: $before, first: $first, last: $last, orderBy: $orderBy, businessArea: $businessArea) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    edges {
      cursor
      node {
        objType
        id
        fullName
        status
        caId
        currency
        entitlementQuantity
        deliveredQuantity
        deliveredQuantityUsd
        deliveryDate
        parent {
          id
          programName
        }
        verification {
          id
          receivedAmount
        }
      }
    }
    totalCount
  }
}
    `;
export type AllPaymentRecordsAndPaymentsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllPaymentRecordsAndPaymentsQuery, AllPaymentRecordsAndPaymentsQueryVariables>, 'query'> & ({ variables: AllPaymentRecordsAndPaymentsQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const AllPaymentRecordsAndPaymentsComponent = (props: AllPaymentRecordsAndPaymentsComponentProps) => (
      <ApolloReactComponents.Query<AllPaymentRecordsAndPaymentsQuery, AllPaymentRecordsAndPaymentsQueryVariables> query={AllPaymentRecordsAndPaymentsDocument} {...props} />
    );
    
export type AllPaymentRecordsAndPaymentsProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllPaymentRecordsAndPaymentsQuery, AllPaymentRecordsAndPaymentsQueryVariables> & TChildProps;
export function withAllPaymentRecordsAndPayments<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllPaymentRecordsAndPaymentsQuery,
  AllPaymentRecordsAndPaymentsQueryVariables,
  AllPaymentRecordsAndPaymentsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllPaymentRecordsAndPaymentsQuery, AllPaymentRecordsAndPaymentsQueryVariables, AllPaymentRecordsAndPaymentsProps<TChildProps>>(AllPaymentRecordsAndPaymentsDocument, {
      alias: 'allPaymentRecordsAndPayments',
      ...operationOptions
    });
};

/**
 * __useAllPaymentRecordsAndPaymentsQuery__
 *
 * To run a query within a React component, call `useAllPaymentRecordsAndPaymentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllPaymentRecordsAndPaymentsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllPaymentRecordsAndPaymentsQuery({
 *   variables: {
 *      household: // value for 'household'
 *      after: // value for 'after'
 *      before: // value for 'before'
 *      orderBy: // value for 'orderBy'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      businessArea: // value for 'businessArea'
 *   },
 * });
 */
export function useAllPaymentRecordsAndPaymentsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllPaymentRecordsAndPaymentsQuery, AllPaymentRecordsAndPaymentsQueryVariables>) {
        return ApolloReactHooks.useQuery<AllPaymentRecordsAndPaymentsQuery, AllPaymentRecordsAndPaymentsQueryVariables>(AllPaymentRecordsAndPaymentsDocument, baseOptions);
      }
export function useAllPaymentRecordsAndPaymentsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllPaymentRecordsAndPaymentsQuery, AllPaymentRecordsAndPaymentsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllPaymentRecordsAndPaymentsQuery, AllPaymentRecordsAndPaymentsQueryVariables>(AllPaymentRecordsAndPaymentsDocument, baseOptions);
        }
export type AllPaymentRecordsAndPaymentsQueryHookResult = ReturnType<typeof useAllPaymentRecordsAndPaymentsQuery>;
export type AllPaymentRecordsAndPaymentsLazyQueryHookResult = ReturnType<typeof useAllPaymentRecordsAndPaymentsLazyQuery>;
export type AllPaymentRecordsAndPaymentsQueryResult = ApolloReactCommon.QueryResult<AllPaymentRecordsAndPaymentsQuery, AllPaymentRecordsAndPaymentsQueryVariables>;
export const AllPaymentsForTableDocument = gql`
    query AllPaymentsForTable($after: String, $before: String, $first: Int, $last: Int, $orderBy: String, $businessArea: String!, $paymentPlanId: String!) {
  allPayments(after: $after, before: $before, first: $first, last: $last, orderBy: $orderBy, businessArea: $businessArea, paymentPlanId: $paymentPlanId) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        id
        unicefId
        status
        household {
          id
          unicefId
          size
          admin2 {
            id
            name
          }
        }
        entitlementQuantity
        entitlementQuantityUsd
        currency
        deliveredQuantity
        deliveredQuantityUsd
        paymentPlanHardConflicted
        paymentPlanSoftConflicted
        paymentPlanHardConflictedData {
          paymentPlanUnicefId
          paymentPlanId
          paymentPlanStartDate
          paymentPlanEndDate
          paymentPlanStatus
          paymentId
          paymentUnicefId
        }
        paymentPlanSoftConflictedData {
          paymentPlanUnicefId
          paymentPlanId
          paymentPlanStartDate
          paymentPlanEndDate
          paymentPlanStatus
          paymentId
          paymentUnicefId
        }
        collector {
          id
          fullName
        }
        financialServiceProvider {
          id
          name
        }
      }
    }
  }
}
    `;
export type AllPaymentsForTableComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllPaymentsForTableQuery, AllPaymentsForTableQueryVariables>, 'query'> & ({ variables: AllPaymentsForTableQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const AllPaymentsForTableComponent = (props: AllPaymentsForTableComponentProps) => (
      <ApolloReactComponents.Query<AllPaymentsForTableQuery, AllPaymentsForTableQueryVariables> query={AllPaymentsForTableDocument} {...props} />
    );
    
export type AllPaymentsForTableProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllPaymentsForTableQuery, AllPaymentsForTableQueryVariables> & TChildProps;
export function withAllPaymentsForTable<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllPaymentsForTableQuery,
  AllPaymentsForTableQueryVariables,
  AllPaymentsForTableProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllPaymentsForTableQuery, AllPaymentsForTableQueryVariables, AllPaymentsForTableProps<TChildProps>>(AllPaymentsForTableDocument, {
      alias: 'allPaymentsForTable',
      ...operationOptions
    });
};

/**
 * __useAllPaymentsForTableQuery__
 *
 * To run a query within a React component, call `useAllPaymentsForTableQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllPaymentsForTableQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllPaymentsForTableQuery({
 *   variables: {
 *      after: // value for 'after'
 *      before: // value for 'before'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      orderBy: // value for 'orderBy'
 *      businessArea: // value for 'businessArea'
 *      paymentPlanId: // value for 'paymentPlanId'
 *   },
 * });
 */
export function useAllPaymentsForTableQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllPaymentsForTableQuery, AllPaymentsForTableQueryVariables>) {
        return ApolloReactHooks.useQuery<AllPaymentsForTableQuery, AllPaymentsForTableQueryVariables>(AllPaymentsForTableDocument, baseOptions);
      }
export function useAllPaymentsForTableLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllPaymentsForTableQuery, AllPaymentsForTableQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllPaymentsForTableQuery, AllPaymentsForTableQueryVariables>(AllPaymentsForTableDocument, baseOptions);
        }
export type AllPaymentsForTableQueryHookResult = ReturnType<typeof useAllPaymentsForTableQuery>;
export type AllPaymentsForTableLazyQueryHookResult = ReturnType<typeof useAllPaymentsForTableLazyQuery>;
export type AllPaymentsForTableQueryResult = ApolloReactCommon.QueryResult<AllPaymentsForTableQuery, AllPaymentsForTableQueryVariables>;
export const CashPlanDocument = gql`
    query CashPlan($id: ID!) {
  cashPlan(id: $id) {
    id
    version
    canCreatePaymentVerificationPlan
    availablePaymentRecordsCount
    name
    startDate
    endDate
    updatedAt
    status
    deliveryType
    fundsCommitment
    downPayment
    dispersionDate
    assistanceThrough
    serviceProvider {
      id
      caId
      fullName
    }
    caId
    caHashId
    dispersionDate
    bankReconciliationSuccess
    bankReconciliationError
    totalNumberOfHouseholds
    verificationPlans {
      totalCount
      edges {
        node {
          id
          unicefId
          status
          sampleSize
          receivedCount
          notReceivedCount
          respondedCount
          verificationChannel
          sampling
          receivedCount
          receivedWithProblemsCount
          rapidProFlowId
          confidenceInterval
          marginOfError
          activationDate
          completionDate
          ageFilter {
            min
            max
          }
          excludedAdminAreasFilter
          sexFilter
          xlsxFileExporting
          hasXlsxFile
          xlsxFileWasDownloaded
          xlsxFileImported
        }
      }
    }
    paymentVerificationSummary {
      id
      createdAt
      updatedAt
      status
      activationDate
      completionDate
    }
    program {
      id
      name
      caId
    }
    paymentItems {
      totalCount
      edgeCount
      edges {
        node {
          targetPopulation {
            id
            name
          }
        }
      }
    }
  }
}
    `;
export type CashPlanComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<CashPlanQuery, CashPlanQueryVariables>, 'query'> & ({ variables: CashPlanQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const CashPlanComponent = (props: CashPlanComponentProps) => (
      <ApolloReactComponents.Query<CashPlanQuery, CashPlanQueryVariables> query={CashPlanDocument} {...props} />
    );
    
export type CashPlanProps<TChildProps = {}> = ApolloReactHoc.DataProps<CashPlanQuery, CashPlanQueryVariables> & TChildProps;
export function withCashPlan<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  CashPlanQuery,
  CashPlanQueryVariables,
  CashPlanProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, CashPlanQuery, CashPlanQueryVariables, CashPlanProps<TChildProps>>(CashPlanDocument, {
      alias: 'cashPlan',
      ...operationOptions
    });
};

/**
 * __useCashPlanQuery__
 *
 * To run a query within a React component, call `useCashPlanQuery` and pass it any options that fit your needs.
 * When your component renders, `useCashPlanQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCashPlanQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useCashPlanQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CashPlanQuery, CashPlanQueryVariables>) {
        return ApolloReactHooks.useQuery<CashPlanQuery, CashPlanQueryVariables>(CashPlanDocument, baseOptions);
      }
export function useCashPlanLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CashPlanQuery, CashPlanQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<CashPlanQuery, CashPlanQueryVariables>(CashPlanDocument, baseOptions);
        }
export type CashPlanQueryHookResult = ReturnType<typeof useCashPlanQuery>;
export type CashPlanLazyQueryHookResult = ReturnType<typeof useCashPlanLazyQuery>;
export type CashPlanQueryResult = ApolloReactCommon.QueryResult<CashPlanQuery, CashPlanQueryVariables>;
export const IndividualPhotosDocument = gql`
    query IndividualPhotos($id: ID!) {
  individual(id: $id) {
    id
    photo
    documents {
      edges {
        node {
          id
          documentNumber
          photo
        }
      }
    }
  }
}
    `;
export type IndividualPhotosComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<IndividualPhotosQuery, IndividualPhotosQueryVariables>, 'query'> & ({ variables: IndividualPhotosQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const IndividualPhotosComponent = (props: IndividualPhotosComponentProps) => (
      <ApolloReactComponents.Query<IndividualPhotosQuery, IndividualPhotosQueryVariables> query={IndividualPhotosDocument} {...props} />
    );
    
export type IndividualPhotosProps<TChildProps = {}> = ApolloReactHoc.DataProps<IndividualPhotosQuery, IndividualPhotosQueryVariables> & TChildProps;
export function withIndividualPhotos<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  IndividualPhotosQuery,
  IndividualPhotosQueryVariables,
  IndividualPhotosProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, IndividualPhotosQuery, IndividualPhotosQueryVariables, IndividualPhotosProps<TChildProps>>(IndividualPhotosDocument, {
      alias: 'individualPhotos',
      ...operationOptions
    });
};

/**
 * __useIndividualPhotosQuery__
 *
 * To run a query within a React component, call `useIndividualPhotosQuery` and pass it any options that fit your needs.
 * When your component renders, `useIndividualPhotosQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useIndividualPhotosQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useIndividualPhotosQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<IndividualPhotosQuery, IndividualPhotosQueryVariables>) {
        return ApolloReactHooks.useQuery<IndividualPhotosQuery, IndividualPhotosQueryVariables>(IndividualPhotosDocument, baseOptions);
      }
export function useIndividualPhotosLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<IndividualPhotosQuery, IndividualPhotosQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<IndividualPhotosQuery, IndividualPhotosQueryVariables>(IndividualPhotosDocument, baseOptions);
        }
export type IndividualPhotosQueryHookResult = ReturnType<typeof useIndividualPhotosQuery>;
export type IndividualPhotosLazyQueryHookResult = ReturnType<typeof useIndividualPhotosLazyQuery>;
export type IndividualPhotosQueryResult = ApolloReactCommon.QueryResult<IndividualPhotosQuery, IndividualPhotosQueryVariables>;
export const ImportedIndividualPhotosDocument = gql`
    query ImportedIndividualPhotos($id: ID!) {
  importedIndividual(id: $id) {
    id
    photo
    documents {
      edges {
        node {
          id
          photo
        }
      }
    }
  }
}
    `;
export type ImportedIndividualPhotosComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<ImportedIndividualPhotosQuery, ImportedIndividualPhotosQueryVariables>, 'query'> & ({ variables: ImportedIndividualPhotosQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const ImportedIndividualPhotosComponent = (props: ImportedIndividualPhotosComponentProps) => (
      <ApolloReactComponents.Query<ImportedIndividualPhotosQuery, ImportedIndividualPhotosQueryVariables> query={ImportedIndividualPhotosDocument} {...props} />
    );
    
export type ImportedIndividualPhotosProps<TChildProps = {}> = ApolloReactHoc.DataProps<ImportedIndividualPhotosQuery, ImportedIndividualPhotosQueryVariables> & TChildProps;
export function withImportedIndividualPhotos<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ImportedIndividualPhotosQuery,
  ImportedIndividualPhotosQueryVariables,
  ImportedIndividualPhotosProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, ImportedIndividualPhotosQuery, ImportedIndividualPhotosQueryVariables, ImportedIndividualPhotosProps<TChildProps>>(ImportedIndividualPhotosDocument, {
      alias: 'importedIndividualPhotos',
      ...operationOptions
    });
};

/**
 * __useImportedIndividualPhotosQuery__
 *
 * To run a query within a React component, call `useImportedIndividualPhotosQuery` and pass it any options that fit your needs.
 * When your component renders, `useImportedIndividualPhotosQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useImportedIndividualPhotosQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useImportedIndividualPhotosQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ImportedIndividualPhotosQuery, ImportedIndividualPhotosQueryVariables>) {
        return ApolloReactHooks.useQuery<ImportedIndividualPhotosQuery, ImportedIndividualPhotosQueryVariables>(ImportedIndividualPhotosDocument, baseOptions);
      }
export function useImportedIndividualPhotosLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ImportedIndividualPhotosQuery, ImportedIndividualPhotosQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<ImportedIndividualPhotosQuery, ImportedIndividualPhotosQueryVariables>(ImportedIndividualPhotosDocument, baseOptions);
        }
export type ImportedIndividualPhotosQueryHookResult = ReturnType<typeof useImportedIndividualPhotosQuery>;
export type ImportedIndividualPhotosLazyQueryHookResult = ReturnType<typeof useImportedIndividualPhotosLazyQuery>;
export type ImportedIndividualPhotosQueryResult = ApolloReactCommon.QueryResult<ImportedIndividualPhotosQuery, ImportedIndividualPhotosQueryVariables>;
export const LookUpPaymentRecordsDocument = gql`
    query LookUpPaymentRecords($parent: ID, $household: ID, $after: String, $before: String, $orderBy: String, $first: Int, $last: Int, $businessArea: String) {
  allPaymentRecords(parent: $parent, household: $household, after: $after, before: $before, first: $first, last: $last, orderBy: $orderBy, businessArea: $businessArea) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    edges {
      cursor
      node {
        id
        caId
        parent {
          id
          name
        }
        deliveredQuantity
      }
    }
    totalCount
    edgeCount
  }
}
    `;
export type LookUpPaymentRecordsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<LookUpPaymentRecordsQuery, LookUpPaymentRecordsQueryVariables>, 'query'>;

    export const LookUpPaymentRecordsComponent = (props: LookUpPaymentRecordsComponentProps) => (
      <ApolloReactComponents.Query<LookUpPaymentRecordsQuery, LookUpPaymentRecordsQueryVariables> query={LookUpPaymentRecordsDocument} {...props} />
    );
    
export type LookUpPaymentRecordsProps<TChildProps = {}> = ApolloReactHoc.DataProps<LookUpPaymentRecordsQuery, LookUpPaymentRecordsQueryVariables> & TChildProps;
export function withLookUpPaymentRecords<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  LookUpPaymentRecordsQuery,
  LookUpPaymentRecordsQueryVariables,
  LookUpPaymentRecordsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, LookUpPaymentRecordsQuery, LookUpPaymentRecordsQueryVariables, LookUpPaymentRecordsProps<TChildProps>>(LookUpPaymentRecordsDocument, {
      alias: 'lookUpPaymentRecords',
      ...operationOptions
    });
};

/**
 * __useLookUpPaymentRecordsQuery__
 *
 * To run a query within a React component, call `useLookUpPaymentRecordsQuery` and pass it any options that fit your needs.
 * When your component renders, `useLookUpPaymentRecordsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useLookUpPaymentRecordsQuery({
 *   variables: {
 *      parent: // value for 'parent'
 *      household: // value for 'household'
 *      after: // value for 'after'
 *      before: // value for 'before'
 *      orderBy: // value for 'orderBy'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      businessArea: // value for 'businessArea'
 *   },
 * });
 */
export function useLookUpPaymentRecordsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<LookUpPaymentRecordsQuery, LookUpPaymentRecordsQueryVariables>) {
        return ApolloReactHooks.useQuery<LookUpPaymentRecordsQuery, LookUpPaymentRecordsQueryVariables>(LookUpPaymentRecordsDocument, baseOptions);
      }
export function useLookUpPaymentRecordsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<LookUpPaymentRecordsQuery, LookUpPaymentRecordsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<LookUpPaymentRecordsQuery, LookUpPaymentRecordsQueryVariables>(LookUpPaymentRecordsDocument, baseOptions);
        }
export type LookUpPaymentRecordsQueryHookResult = ReturnType<typeof useLookUpPaymentRecordsQuery>;
export type LookUpPaymentRecordsLazyQueryHookResult = ReturnType<typeof useLookUpPaymentRecordsLazyQuery>;
export type LookUpPaymentRecordsQueryResult = ApolloReactCommon.QueryResult<LookUpPaymentRecordsQuery, LookUpPaymentRecordsQueryVariables>;
export const PaymentRecordDocument = gql`
    query PaymentRecord($id: ID!) {
  paymentRecord(id: $id) {
    id
    status
    statusDate
    caId
    caHashId
    registrationCaId
    fullName
    distributionModality
    totalPersonsCovered
    targetPopulation {
      id
      name
    }
    verification {
      id
      status
      statusDate
      receivedAmount
      isManuallyEditable
    }
    currency
    entitlementQuantity
    deliveredQuantity
    deliveryDate
    entitlementCardIssueDate
    entitlementCardNumber
    household {
      id
      size
      status
      unicefId
      headOfHousehold {
        id
        phoneNo
        phoneNoAlternative
        phoneNoValid
        phoneNoAlternativeValid
      }
    }
    parent {
      id
      caId
      program {
        id
        name
      }
      verificationPlans {
        edges {
          node {
            id
            status
            verificationChannel
          }
        }
      }
    }
    deliveredQuantityUsd
    deliveryType
    transactionReferenceId
    serviceProvider {
      id
      fullName
      shortName
    }
  }
}
    `;
export type PaymentRecordComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<PaymentRecordQuery, PaymentRecordQueryVariables>, 'query'> & ({ variables: PaymentRecordQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const PaymentRecordComponent = (props: PaymentRecordComponentProps) => (
      <ApolloReactComponents.Query<PaymentRecordQuery, PaymentRecordQueryVariables> query={PaymentRecordDocument} {...props} />
    );
    
export type PaymentRecordProps<TChildProps = {}> = ApolloReactHoc.DataProps<PaymentRecordQuery, PaymentRecordQueryVariables> & TChildProps;
export function withPaymentRecord<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  PaymentRecordQuery,
  PaymentRecordQueryVariables,
  PaymentRecordProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, PaymentRecordQuery, PaymentRecordQueryVariables, PaymentRecordProps<TChildProps>>(PaymentRecordDocument, {
      alias: 'paymentRecord',
      ...operationOptions
    });
};

/**
 * __usePaymentRecordQuery__
 *
 * To run a query within a React component, call `usePaymentRecordQuery` and pass it any options that fit your needs.
 * When your component renders, `usePaymentRecordQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePaymentRecordQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function usePaymentRecordQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<PaymentRecordQuery, PaymentRecordQueryVariables>) {
        return ApolloReactHooks.useQuery<PaymentRecordQuery, PaymentRecordQueryVariables>(PaymentRecordDocument, baseOptions);
      }
export function usePaymentRecordLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<PaymentRecordQuery, PaymentRecordQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<PaymentRecordQuery, PaymentRecordQueryVariables>(PaymentRecordDocument, baseOptions);
        }
export type PaymentRecordQueryHookResult = ReturnType<typeof usePaymentRecordQuery>;
export type PaymentRecordLazyQueryHookResult = ReturnType<typeof usePaymentRecordLazyQuery>;
export type PaymentRecordQueryResult = ApolloReactCommon.QueryResult<PaymentRecordQuery, PaymentRecordQueryVariables>;
export const AllPaymentVerificationLogEntriesDocument = gql`
    query AllPaymentVerificationLogEntries($businessArea: String!, $objectId: UUID, $objectType: String, $after: String, $before: String, $first: Int, $last: Int, $search: String, $module: String) {
  allPaymentVerificationLogEntries(after: $after, before: $before, first: $first, last: $last, objectId: $objectId, objectType: $objectType, businessArea: $businessArea, search: $search, module: $module) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        id
        action
        changes
        objectRepr
        objectId
        timestamp
        contentType {
          id
          appLabel
          model
          name
        }
        user {
          id
          firstName
          lastName
        }
        contentObject {
          id
          unicefId
        }
      }
    }
  }
  logEntryActionChoices {
    name
    value
  }
}
    `;
export type AllPaymentVerificationLogEntriesComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllPaymentVerificationLogEntriesQuery, AllPaymentVerificationLogEntriesQueryVariables>, 'query'> & ({ variables: AllPaymentVerificationLogEntriesQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const AllPaymentVerificationLogEntriesComponent = (props: AllPaymentVerificationLogEntriesComponentProps) => (
      <ApolloReactComponents.Query<AllPaymentVerificationLogEntriesQuery, AllPaymentVerificationLogEntriesQueryVariables> query={AllPaymentVerificationLogEntriesDocument} {...props} />
    );
    
export type AllPaymentVerificationLogEntriesProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllPaymentVerificationLogEntriesQuery, AllPaymentVerificationLogEntriesQueryVariables> & TChildProps;
export function withAllPaymentVerificationLogEntries<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllPaymentVerificationLogEntriesQuery,
  AllPaymentVerificationLogEntriesQueryVariables,
  AllPaymentVerificationLogEntriesProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllPaymentVerificationLogEntriesQuery, AllPaymentVerificationLogEntriesQueryVariables, AllPaymentVerificationLogEntriesProps<TChildProps>>(AllPaymentVerificationLogEntriesDocument, {
      alias: 'allPaymentVerificationLogEntries',
      ...operationOptions
    });
};

/**
 * __useAllPaymentVerificationLogEntriesQuery__
 *
 * To run a query within a React component, call `useAllPaymentVerificationLogEntriesQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllPaymentVerificationLogEntriesQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllPaymentVerificationLogEntriesQuery({
 *   variables: {
 *      businessArea: // value for 'businessArea'
 *      objectId: // value for 'objectId'
 *      objectType: // value for 'objectType'
 *      after: // value for 'after'
 *      before: // value for 'before'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      search: // value for 'search'
 *      module: // value for 'module'
 *   },
 * });
 */
export function useAllPaymentVerificationLogEntriesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllPaymentVerificationLogEntriesQuery, AllPaymentVerificationLogEntriesQueryVariables>) {
        return ApolloReactHooks.useQuery<AllPaymentVerificationLogEntriesQuery, AllPaymentVerificationLogEntriesQueryVariables>(AllPaymentVerificationLogEntriesDocument, baseOptions);
      }
export function useAllPaymentVerificationLogEntriesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllPaymentVerificationLogEntriesQuery, AllPaymentVerificationLogEntriesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllPaymentVerificationLogEntriesQuery, AllPaymentVerificationLogEntriesQueryVariables>(AllPaymentVerificationLogEntriesDocument, baseOptions);
        }
export type AllPaymentVerificationLogEntriesQueryHookResult = ReturnType<typeof useAllPaymentVerificationLogEntriesQuery>;
export type AllPaymentVerificationLogEntriesLazyQueryHookResult = ReturnType<typeof useAllPaymentVerificationLogEntriesLazyQuery>;
export type AllPaymentVerificationLogEntriesQueryResult = ApolloReactCommon.QueryResult<AllPaymentVerificationLogEntriesQuery, AllPaymentVerificationLogEntriesQueryVariables>;
export const AllPaymentVerificationsDocument = gql`
    query AllPaymentVerifications($after: String, $before: String, $first: Int, $last: Int, $orderBy: String, $paymentVerificationPlan: ID, $search: String, $status: String, $businessArea: String!, $verificationChannel: String, $paymentPlanId: String) {
  allPaymentVerifications(after: $after, before: $before, first: $first, last: $last, orderBy: $orderBy, paymentVerificationPlan: $paymentVerificationPlan, search: $search, status: $status, businessArea: $businessArea, verificationChannel: $verificationChannel, paymentPlanId: $paymentPlanId) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        id
        paymentVerificationPlan {
          id
          unicefId
          verificationChannel
        }
        payment {
          id
          unicefId
          deliveredQuantity
          currency
          household {
            status
            unicefId
            id
            headOfHousehold {
              id
              fullName
              familyName
              phoneNo
              phoneNoAlternative
            }
          }
        }
        status
        receivedAmount
      }
    }
  }
}
    `;
export type AllPaymentVerificationsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllPaymentVerificationsQuery, AllPaymentVerificationsQueryVariables>, 'query'> & ({ variables: AllPaymentVerificationsQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const AllPaymentVerificationsComponent = (props: AllPaymentVerificationsComponentProps) => (
      <ApolloReactComponents.Query<AllPaymentVerificationsQuery, AllPaymentVerificationsQueryVariables> query={AllPaymentVerificationsDocument} {...props} />
    );
    
export type AllPaymentVerificationsProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllPaymentVerificationsQuery, AllPaymentVerificationsQueryVariables> & TChildProps;
export function withAllPaymentVerifications<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllPaymentVerificationsQuery,
  AllPaymentVerificationsQueryVariables,
  AllPaymentVerificationsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllPaymentVerificationsQuery, AllPaymentVerificationsQueryVariables, AllPaymentVerificationsProps<TChildProps>>(AllPaymentVerificationsDocument, {
      alias: 'allPaymentVerifications',
      ...operationOptions
    });
};

/**
 * __useAllPaymentVerificationsQuery__
 *
 * To run a query within a React component, call `useAllPaymentVerificationsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllPaymentVerificationsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllPaymentVerificationsQuery({
 *   variables: {
 *      after: // value for 'after'
 *      before: // value for 'before'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      orderBy: // value for 'orderBy'
 *      paymentVerificationPlan: // value for 'paymentVerificationPlan'
 *      search: // value for 'search'
 *      status: // value for 'status'
 *      businessArea: // value for 'businessArea'
 *      verificationChannel: // value for 'verificationChannel'
 *      paymentPlanId: // value for 'paymentPlanId'
 *   },
 * });
 */
export function useAllPaymentVerificationsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllPaymentVerificationsQuery, AllPaymentVerificationsQueryVariables>) {
        return ApolloReactHooks.useQuery<AllPaymentVerificationsQuery, AllPaymentVerificationsQueryVariables>(AllPaymentVerificationsDocument, baseOptions);
      }
export function useAllPaymentVerificationsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllPaymentVerificationsQuery, AllPaymentVerificationsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllPaymentVerificationsQuery, AllPaymentVerificationsQueryVariables>(AllPaymentVerificationsDocument, baseOptions);
        }
export type AllPaymentVerificationsQueryHookResult = ReturnType<typeof useAllPaymentVerificationsQuery>;
export type AllPaymentVerificationsLazyQueryHookResult = ReturnType<typeof useAllPaymentVerificationsLazyQuery>;
export type AllPaymentVerificationsQueryResult = ApolloReactCommon.QueryResult<AllPaymentVerificationsQuery, AllPaymentVerificationsQueryVariables>;
export const AllRapidProFlowsDocument = gql`
    query AllRapidProFlows($businessAreaSlug: String!) {
  allRapidProFlows(businessAreaSlug: $businessAreaSlug) {
    id
    name
  }
}
    `;
export type AllRapidProFlowsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllRapidProFlowsQuery, AllRapidProFlowsQueryVariables>, 'query'> & ({ variables: AllRapidProFlowsQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const AllRapidProFlowsComponent = (props: AllRapidProFlowsComponentProps) => (
      <ApolloReactComponents.Query<AllRapidProFlowsQuery, AllRapidProFlowsQueryVariables> query={AllRapidProFlowsDocument} {...props} />
    );
    
export type AllRapidProFlowsProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllRapidProFlowsQuery, AllRapidProFlowsQueryVariables> & TChildProps;
export function withAllRapidProFlows<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllRapidProFlowsQuery,
  AllRapidProFlowsQueryVariables,
  AllRapidProFlowsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllRapidProFlowsQuery, AllRapidProFlowsQueryVariables, AllRapidProFlowsProps<TChildProps>>(AllRapidProFlowsDocument, {
      alias: 'allRapidProFlows',
      ...operationOptions
    });
};

/**
 * __useAllRapidProFlowsQuery__
 *
 * To run a query within a React component, call `useAllRapidProFlowsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllRapidProFlowsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllRapidProFlowsQuery({
 *   variables: {
 *      businessAreaSlug: // value for 'businessAreaSlug'
 *   },
 * });
 */
export function useAllRapidProFlowsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllRapidProFlowsQuery, AllRapidProFlowsQueryVariables>) {
        return ApolloReactHooks.useQuery<AllRapidProFlowsQuery, AllRapidProFlowsQueryVariables>(AllRapidProFlowsDocument, baseOptions);
      }
export function useAllRapidProFlowsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllRapidProFlowsQuery, AllRapidProFlowsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllRapidProFlowsQuery, AllRapidProFlowsQueryVariables>(AllRapidProFlowsDocument, baseOptions);
        }
export type AllRapidProFlowsQueryHookResult = ReturnType<typeof useAllRapidProFlowsQuery>;
export type AllRapidProFlowsLazyQueryHookResult = ReturnType<typeof useAllRapidProFlowsLazyQuery>;
export type AllRapidProFlowsQueryResult = ApolloReactCommon.QueryResult<AllRapidProFlowsQuery, AllRapidProFlowsQueryVariables>;
export const PaymentVerificationPlanDocument = gql`
    query PaymentVerificationPlan($id: ID!) {
  paymentVerificationPlan(id: $id) {
    id
  }
}
    `;
export type PaymentVerificationPlanComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<PaymentVerificationPlanQuery, PaymentVerificationPlanQueryVariables>, 'query'> & ({ variables: PaymentVerificationPlanQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const PaymentVerificationPlanComponent = (props: PaymentVerificationPlanComponentProps) => (
      <ApolloReactComponents.Query<PaymentVerificationPlanQuery, PaymentVerificationPlanQueryVariables> query={PaymentVerificationPlanDocument} {...props} />
    );
    
export type PaymentVerificationPlanProps<TChildProps = {}> = ApolloReactHoc.DataProps<PaymentVerificationPlanQuery, PaymentVerificationPlanQueryVariables> & TChildProps;
export function withPaymentVerificationPlan<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  PaymentVerificationPlanQuery,
  PaymentVerificationPlanQueryVariables,
  PaymentVerificationPlanProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, PaymentVerificationPlanQuery, PaymentVerificationPlanQueryVariables, PaymentVerificationPlanProps<TChildProps>>(PaymentVerificationPlanDocument, {
      alias: 'paymentVerificationPlan',
      ...operationOptions
    });
};

/**
 * __usePaymentVerificationPlanQuery__
 *
 * To run a query within a React component, call `usePaymentVerificationPlanQuery` and pass it any options that fit your needs.
 * When your component renders, `usePaymentVerificationPlanQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePaymentVerificationPlanQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function usePaymentVerificationPlanQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<PaymentVerificationPlanQuery, PaymentVerificationPlanQueryVariables>) {
        return ApolloReactHooks.useQuery<PaymentVerificationPlanQuery, PaymentVerificationPlanQueryVariables>(PaymentVerificationPlanDocument, baseOptions);
      }
export function usePaymentVerificationPlanLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<PaymentVerificationPlanQuery, PaymentVerificationPlanQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<PaymentVerificationPlanQuery, PaymentVerificationPlanQueryVariables>(PaymentVerificationPlanDocument, baseOptions);
        }
export type PaymentVerificationPlanQueryHookResult = ReturnType<typeof usePaymentVerificationPlanQuery>;
export type PaymentVerificationPlanLazyQueryHookResult = ReturnType<typeof usePaymentVerificationPlanLazyQuery>;
export type PaymentVerificationPlanQueryResult = ApolloReactCommon.QueryResult<PaymentVerificationPlanQuery, PaymentVerificationPlanQueryVariables>;
export const CashPlanVerificationStatusChoicesDocument = gql`
    query cashPlanVerificationStatusChoices {
  cashPlanVerificationStatusChoices {
    name
    value
  }
  paymentRecordDeliveryTypeChoices {
    name
    value
  }
}
    `;
export type CashPlanVerificationStatusChoicesComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<CashPlanVerificationStatusChoicesQuery, CashPlanVerificationStatusChoicesQueryVariables>, 'query'>;

    export const CashPlanVerificationStatusChoicesComponent = (props: CashPlanVerificationStatusChoicesComponentProps) => (
      <ApolloReactComponents.Query<CashPlanVerificationStatusChoicesQuery, CashPlanVerificationStatusChoicesQueryVariables> query={CashPlanVerificationStatusChoicesDocument} {...props} />
    );
    
export type CashPlanVerificationStatusChoicesProps<TChildProps = {}> = ApolloReactHoc.DataProps<CashPlanVerificationStatusChoicesQuery, CashPlanVerificationStatusChoicesQueryVariables> & TChildProps;
export function withCashPlanVerificationStatusChoices<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  CashPlanVerificationStatusChoicesQuery,
  CashPlanVerificationStatusChoicesQueryVariables,
  CashPlanVerificationStatusChoicesProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, CashPlanVerificationStatusChoicesQuery, CashPlanVerificationStatusChoicesQueryVariables, CashPlanVerificationStatusChoicesProps<TChildProps>>(CashPlanVerificationStatusChoicesDocument, {
      alias: 'cashPlanVerificationStatusChoices',
      ...operationOptions
    });
};

/**
 * __useCashPlanVerificationStatusChoicesQuery__
 *
 * To run a query within a React component, call `useCashPlanVerificationStatusChoicesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCashPlanVerificationStatusChoicesQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCashPlanVerificationStatusChoicesQuery({
 *   variables: {
 *   },
 * });
 */
export function useCashPlanVerificationStatusChoicesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CashPlanVerificationStatusChoicesQuery, CashPlanVerificationStatusChoicesQueryVariables>) {
        return ApolloReactHooks.useQuery<CashPlanVerificationStatusChoicesQuery, CashPlanVerificationStatusChoicesQueryVariables>(CashPlanVerificationStatusChoicesDocument, baseOptions);
      }
export function useCashPlanVerificationStatusChoicesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CashPlanVerificationStatusChoicesQuery, CashPlanVerificationStatusChoicesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<CashPlanVerificationStatusChoicesQuery, CashPlanVerificationStatusChoicesQueryVariables>(CashPlanVerificationStatusChoicesDocument, baseOptions);
        }
export type CashPlanVerificationStatusChoicesQueryHookResult = ReturnType<typeof useCashPlanVerificationStatusChoicesQuery>;
export type CashPlanVerificationStatusChoicesLazyQueryHookResult = ReturnType<typeof useCashPlanVerificationStatusChoicesLazyQuery>;
export type CashPlanVerificationStatusChoicesQueryResult = ApolloReactCommon.QueryResult<CashPlanVerificationStatusChoicesQuery, CashPlanVerificationStatusChoicesQueryVariables>;
export const PaymentPlanStatusChoicesQueryDocument = gql`
    query PaymentPlanStatusChoicesQuery {
  paymentPlanStatusChoices {
    name
    value
  }
}
    `;
export type PaymentPlanStatusChoicesQueryComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<PaymentPlanStatusChoicesQueryQuery, PaymentPlanStatusChoicesQueryQueryVariables>, 'query'>;

    export const PaymentPlanStatusChoicesQueryComponent = (props: PaymentPlanStatusChoicesQueryComponentProps) => (
      <ApolloReactComponents.Query<PaymentPlanStatusChoicesQueryQuery, PaymentPlanStatusChoicesQueryQueryVariables> query={PaymentPlanStatusChoicesQueryDocument} {...props} />
    );
    
export type PaymentPlanStatusChoicesQueryProps<TChildProps = {}> = ApolloReactHoc.DataProps<PaymentPlanStatusChoicesQueryQuery, PaymentPlanStatusChoicesQueryQueryVariables> & TChildProps;
export function withPaymentPlanStatusChoicesQuery<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  PaymentPlanStatusChoicesQueryQuery,
  PaymentPlanStatusChoicesQueryQueryVariables,
  PaymentPlanStatusChoicesQueryProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, PaymentPlanStatusChoicesQueryQuery, PaymentPlanStatusChoicesQueryQueryVariables, PaymentPlanStatusChoicesQueryProps<TChildProps>>(PaymentPlanStatusChoicesQueryDocument, {
      alias: 'paymentPlanStatusChoicesQuery',
      ...operationOptions
    });
};

/**
 * __usePaymentPlanStatusChoicesQueryQuery__
 *
 * To run a query within a React component, call `usePaymentPlanStatusChoicesQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `usePaymentPlanStatusChoicesQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePaymentPlanStatusChoicesQueryQuery({
 *   variables: {
 *   },
 * });
 */
export function usePaymentPlanStatusChoicesQueryQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<PaymentPlanStatusChoicesQueryQuery, PaymentPlanStatusChoicesQueryQueryVariables>) {
        return ApolloReactHooks.useQuery<PaymentPlanStatusChoicesQueryQuery, PaymentPlanStatusChoicesQueryQueryVariables>(PaymentPlanStatusChoicesQueryDocument, baseOptions);
      }
export function usePaymentPlanStatusChoicesQueryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<PaymentPlanStatusChoicesQueryQuery, PaymentPlanStatusChoicesQueryQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<PaymentPlanStatusChoicesQueryQuery, PaymentPlanStatusChoicesQueryQueryVariables>(PaymentPlanStatusChoicesQueryDocument, baseOptions);
        }
export type PaymentPlanStatusChoicesQueryQueryHookResult = ReturnType<typeof usePaymentPlanStatusChoicesQueryQuery>;
export type PaymentPlanStatusChoicesQueryLazyQueryHookResult = ReturnType<typeof usePaymentPlanStatusChoicesQueryLazyQuery>;
export type PaymentPlanStatusChoicesQueryQueryResult = ApolloReactCommon.QueryResult<PaymentPlanStatusChoicesQueryQuery, PaymentPlanStatusChoicesQueryQueryVariables>;
export const PaymentRecordVerificationDocument = gql`
    query PaymentRecordVerification($id: ID!) {
  paymentRecordVerification(id: $id) {
    id
    status
    statusDate
    receivedAmount
    isManuallyEditable
  }
}
    `;
export type PaymentRecordVerificationComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<PaymentRecordVerificationQuery, PaymentRecordVerificationQueryVariables>, 'query'> & ({ variables: PaymentRecordVerificationQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const PaymentRecordVerificationComponent = (props: PaymentRecordVerificationComponentProps) => (
      <ApolloReactComponents.Query<PaymentRecordVerificationQuery, PaymentRecordVerificationQueryVariables> query={PaymentRecordVerificationDocument} {...props} />
    );
    
export type PaymentRecordVerificationProps<TChildProps = {}> = ApolloReactHoc.DataProps<PaymentRecordVerificationQuery, PaymentRecordVerificationQueryVariables> & TChildProps;
export function withPaymentRecordVerification<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  PaymentRecordVerificationQuery,
  PaymentRecordVerificationQueryVariables,
  PaymentRecordVerificationProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, PaymentRecordVerificationQuery, PaymentRecordVerificationQueryVariables, PaymentRecordVerificationProps<TChildProps>>(PaymentRecordVerificationDocument, {
      alias: 'paymentRecordVerification',
      ...operationOptions
    });
};

/**
 * __usePaymentRecordVerificationQuery__
 *
 * To run a query within a React component, call `usePaymentRecordVerificationQuery` and pass it any options that fit your needs.
 * When your component renders, `usePaymentRecordVerificationQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePaymentRecordVerificationQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function usePaymentRecordVerificationQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<PaymentRecordVerificationQuery, PaymentRecordVerificationQueryVariables>) {
        return ApolloReactHooks.useQuery<PaymentRecordVerificationQuery, PaymentRecordVerificationQueryVariables>(PaymentRecordVerificationDocument, baseOptions);
      }
export function usePaymentRecordVerificationLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<PaymentRecordVerificationQuery, PaymentRecordVerificationQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<PaymentRecordVerificationQuery, PaymentRecordVerificationQueryVariables>(PaymentRecordVerificationDocument, baseOptions);
        }
export type PaymentRecordVerificationQueryHookResult = ReturnType<typeof usePaymentRecordVerificationQuery>;
export type PaymentRecordVerificationLazyQueryHookResult = ReturnType<typeof usePaymentRecordVerificationLazyQuery>;
export type PaymentRecordVerificationQueryResult = ApolloReactCommon.QueryResult<PaymentRecordVerificationQuery, PaymentRecordVerificationQueryVariables>;
export const PaymentVerificationChoicesDocument = gql`
    query paymentVerificationChoices {
  paymentVerificationStatusChoices {
    name
    value
  }
  cashPlanVerificationVerificationChannelChoices {
    name
    value
  }
  paymentRecordDeliveryTypeChoices {
    name
    value
  }
}
    `;
export type PaymentVerificationChoicesComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<PaymentVerificationChoicesQuery, PaymentVerificationChoicesQueryVariables>, 'query'>;

    export const PaymentVerificationChoicesComponent = (props: PaymentVerificationChoicesComponentProps) => (
      <ApolloReactComponents.Query<PaymentVerificationChoicesQuery, PaymentVerificationChoicesQueryVariables> query={PaymentVerificationChoicesDocument} {...props} />
    );
    
export type PaymentVerificationChoicesProps<TChildProps = {}> = ApolloReactHoc.DataProps<PaymentVerificationChoicesQuery, PaymentVerificationChoicesQueryVariables> & TChildProps;
export function withPaymentVerificationChoices<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  PaymentVerificationChoicesQuery,
  PaymentVerificationChoicesQueryVariables,
  PaymentVerificationChoicesProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, PaymentVerificationChoicesQuery, PaymentVerificationChoicesQueryVariables, PaymentVerificationChoicesProps<TChildProps>>(PaymentVerificationChoicesDocument, {
      alias: 'paymentVerificationChoices',
      ...operationOptions
    });
};

/**
 * __usePaymentVerificationChoicesQuery__
 *
 * To run a query within a React component, call `usePaymentVerificationChoicesQuery` and pass it any options that fit your needs.
 * When your component renders, `usePaymentVerificationChoicesQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePaymentVerificationChoicesQuery({
 *   variables: {
 *   },
 * });
 */
export function usePaymentVerificationChoicesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<PaymentVerificationChoicesQuery, PaymentVerificationChoicesQueryVariables>) {
        return ApolloReactHooks.useQuery<PaymentVerificationChoicesQuery, PaymentVerificationChoicesQueryVariables>(PaymentVerificationChoicesDocument, baseOptions);
      }
export function usePaymentVerificationChoicesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<PaymentVerificationChoicesQuery, PaymentVerificationChoicesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<PaymentVerificationChoicesQuery, PaymentVerificationChoicesQueryVariables>(PaymentVerificationChoicesDocument, baseOptions);
        }
export type PaymentVerificationChoicesQueryHookResult = ReturnType<typeof usePaymentVerificationChoicesQuery>;
export type PaymentVerificationChoicesLazyQueryHookResult = ReturnType<typeof usePaymentVerificationChoicesLazyQuery>;
export type PaymentVerificationChoicesQueryResult = ApolloReactCommon.QueryResult<PaymentVerificationChoicesQuery, PaymentVerificationChoicesQueryVariables>;
export const SampleSizeDocument = gql`
    query SampleSize($input: GetCashplanVerificationSampleSizeInput!) {
  sampleSize(input: $input) {
    paymentRecordCount
    sampleSize
  }
}
    `;
export type SampleSizeComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<SampleSizeQuery, SampleSizeQueryVariables>, 'query'> & ({ variables: SampleSizeQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const SampleSizeComponent = (props: SampleSizeComponentProps) => (
      <ApolloReactComponents.Query<SampleSizeQuery, SampleSizeQueryVariables> query={SampleSizeDocument} {...props} />
    );
    
export type SampleSizeProps<TChildProps = {}> = ApolloReactHoc.DataProps<SampleSizeQuery, SampleSizeQueryVariables> & TChildProps;
export function withSampleSize<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  SampleSizeQuery,
  SampleSizeQueryVariables,
  SampleSizeProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, SampleSizeQuery, SampleSizeQueryVariables, SampleSizeProps<TChildProps>>(SampleSizeDocument, {
      alias: 'sampleSize',
      ...operationOptions
    });
};

/**
 * __useSampleSizeQuery__
 *
 * To run a query within a React component, call `useSampleSizeQuery` and pass it any options that fit your needs.
 * When your component renders, `useSampleSizeQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSampleSizeQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSampleSizeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SampleSizeQuery, SampleSizeQueryVariables>) {
        return ApolloReactHooks.useQuery<SampleSizeQuery, SampleSizeQueryVariables>(SampleSizeDocument, baseOptions);
      }
export function useSampleSizeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SampleSizeQuery, SampleSizeQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<SampleSizeQuery, SampleSizeQueryVariables>(SampleSizeDocument, baseOptions);
        }
export type SampleSizeQueryHookResult = ReturnType<typeof useSampleSizeQuery>;
export type SampleSizeLazyQueryHookResult = ReturnType<typeof useSampleSizeLazyQuery>;
export type SampleSizeQueryResult = ApolloReactCommon.QueryResult<SampleSizeQuery, SampleSizeQueryVariables>;
export const CashPlanVerificationSamplingChoicesDocument = gql`
    query cashPlanVerificationSamplingChoices {
  cashPlanVerificationSamplingChoices {
    name
    value
  }
}
    `;
export type CashPlanVerificationSamplingChoicesComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<CashPlanVerificationSamplingChoicesQuery, CashPlanVerificationSamplingChoicesQueryVariables>, 'query'>;

    export const CashPlanVerificationSamplingChoicesComponent = (props: CashPlanVerificationSamplingChoicesComponentProps) => (
      <ApolloReactComponents.Query<CashPlanVerificationSamplingChoicesQuery, CashPlanVerificationSamplingChoicesQueryVariables> query={CashPlanVerificationSamplingChoicesDocument} {...props} />
    );
    
export type CashPlanVerificationSamplingChoicesProps<TChildProps = {}> = ApolloReactHoc.DataProps<CashPlanVerificationSamplingChoicesQuery, CashPlanVerificationSamplingChoicesQueryVariables> & TChildProps;
export function withCashPlanVerificationSamplingChoices<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  CashPlanVerificationSamplingChoicesQuery,
  CashPlanVerificationSamplingChoicesQueryVariables,
  CashPlanVerificationSamplingChoicesProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, CashPlanVerificationSamplingChoicesQuery, CashPlanVerificationSamplingChoicesQueryVariables, CashPlanVerificationSamplingChoicesProps<TChildProps>>(CashPlanVerificationSamplingChoicesDocument, {
      alias: 'cashPlanVerificationSamplingChoices',
      ...operationOptions
    });
};

/**
 * __useCashPlanVerificationSamplingChoicesQuery__
 *
 * To run a query within a React component, call `useCashPlanVerificationSamplingChoicesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCashPlanVerificationSamplingChoicesQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCashPlanVerificationSamplingChoicesQuery({
 *   variables: {
 *   },
 * });
 */
export function useCashPlanVerificationSamplingChoicesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CashPlanVerificationSamplingChoicesQuery, CashPlanVerificationSamplingChoicesQueryVariables>) {
        return ApolloReactHooks.useQuery<CashPlanVerificationSamplingChoicesQuery, CashPlanVerificationSamplingChoicesQueryVariables>(CashPlanVerificationSamplingChoicesDocument, baseOptions);
      }
export function useCashPlanVerificationSamplingChoicesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CashPlanVerificationSamplingChoicesQuery, CashPlanVerificationSamplingChoicesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<CashPlanVerificationSamplingChoicesQuery, CashPlanVerificationSamplingChoicesQueryVariables>(CashPlanVerificationSamplingChoicesDocument, baseOptions);
        }
export type CashPlanVerificationSamplingChoicesQueryHookResult = ReturnType<typeof useCashPlanVerificationSamplingChoicesQuery>;
export type CashPlanVerificationSamplingChoicesLazyQueryHookResult = ReturnType<typeof useCashPlanVerificationSamplingChoicesLazyQuery>;
export type CashPlanVerificationSamplingChoicesQueryResult = ApolloReactCommon.QueryResult<CashPlanVerificationSamplingChoicesQuery, CashPlanVerificationSamplingChoicesQueryVariables>;
export const AllHouseholdsDocument = gql`
    query AllHouseholds($after: String, $before: String, $first: Int, $last: Int, $businessArea: String, $orderBy: String, $familySize: String, $headOfHouseholdFullNameIcontains: String, $headOfHouseholdPhoneNoValid: Boolean, $adminArea: ID, $search: String, $residenceStatus: String, $lastRegistrationDate: String, $admin2: ID, $withdrawn: Boolean) {
  allHouseholds(after: $after, before: $before, first: $first, last: $last, businessArea: $businessArea, size: $familySize, orderBy: $orderBy, headOfHousehold_FullName_Startswith: $headOfHouseholdFullNameIcontains, headOfHousehold_PhoneNoValid: $headOfHouseholdPhoneNoValid, adminArea: $adminArea, search: $search, residenceStatus: $residenceStatus, lastRegistrationDate: $lastRegistrationDate, admin2: $admin2, withdrawn: $withdrawn) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        id
        status
        unicefId
        hasDuplicates
        sanctionListPossibleMatch
        sanctionListConfirmedMatch
        headOfHousehold {
          id
          fullName
          phoneNo
          birthDate
          phoneNo
          relationship
        }
        size
        address
        village
        maleChildrenCount
        femaleChildrenCount
        childrenDisabledCount
        admin1 {
          id
          name
        }
        admin2 {
          id
          name
        }
        residenceStatus
        totalCashReceived
        currency
        lastRegistrationDate
        programs {
          edges {
            node {
              id
              name
            }
          }
        }
      }
    }
  }
}
    `;
export type AllHouseholdsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllHouseholdsQuery, AllHouseholdsQueryVariables>, 'query'>;

    export const AllHouseholdsComponent = (props: AllHouseholdsComponentProps) => (
      <ApolloReactComponents.Query<AllHouseholdsQuery, AllHouseholdsQueryVariables> query={AllHouseholdsDocument} {...props} />
    );
    
export type AllHouseholdsProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllHouseholdsQuery, AllHouseholdsQueryVariables> & TChildProps;
export function withAllHouseholds<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllHouseholdsQuery,
  AllHouseholdsQueryVariables,
  AllHouseholdsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllHouseholdsQuery, AllHouseholdsQueryVariables, AllHouseholdsProps<TChildProps>>(AllHouseholdsDocument, {
      alias: 'allHouseholds',
      ...operationOptions
    });
};

/**
 * __useAllHouseholdsQuery__
 *
 * To run a query within a React component, call `useAllHouseholdsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllHouseholdsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllHouseholdsQuery({
 *   variables: {
 *      after: // value for 'after'
 *      before: // value for 'before'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      businessArea: // value for 'businessArea'
 *      orderBy: // value for 'orderBy'
 *      familySize: // value for 'familySize'
 *      headOfHouseholdFullNameIcontains: // value for 'headOfHouseholdFullNameIcontains'
 *      headOfHouseholdPhoneNoValid: // value for 'headOfHouseholdPhoneNoValid'
 *      adminArea: // value for 'adminArea'
 *      search: // value for 'search'
 *      residenceStatus: // value for 'residenceStatus'
 *      lastRegistrationDate: // value for 'lastRegistrationDate'
 *      admin2: // value for 'admin2'
 *      withdrawn: // value for 'withdrawn'
 *   },
 * });
 */
export function useAllHouseholdsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllHouseholdsQuery, AllHouseholdsQueryVariables>) {
        return ApolloReactHooks.useQuery<AllHouseholdsQuery, AllHouseholdsQueryVariables>(AllHouseholdsDocument, baseOptions);
      }
export function useAllHouseholdsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllHouseholdsQuery, AllHouseholdsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllHouseholdsQuery, AllHouseholdsQueryVariables>(AllHouseholdsDocument, baseOptions);
        }
export type AllHouseholdsQueryHookResult = ReturnType<typeof useAllHouseholdsQuery>;
export type AllHouseholdsLazyQueryHookResult = ReturnType<typeof useAllHouseholdsLazyQuery>;
export type AllHouseholdsQueryResult = ApolloReactCommon.QueryResult<AllHouseholdsQuery, AllHouseholdsQueryVariables>;
export const AllHouseholdsForPopulationTableDocument = gql`
    query AllHouseholdsForPopulationTable($after: String, $before: String, $first: Int, $last: Int, $businessArea: String, $orderBy: String, $familySize: String, $headOfHouseholdFullNameIcontains: String, $adminArea: ID, $search: String, $residenceStatus: String, $lastRegistrationDate: String, $admin2: ID, $withdrawn: Boolean) {
  allHouseholds(after: $after, before: $before, first: $first, last: $last, businessArea: $businessArea, size: $familySize, orderBy: $orderBy, headOfHousehold_FullName_Startswith: $headOfHouseholdFullNameIcontains, adminArea: $adminArea, search: $search, residenceStatus: $residenceStatus, lastRegistrationDate: $lastRegistrationDate, admin2: $admin2, withdrawn: $withdrawn) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        id
        status
        unicefId
        hasDuplicates
        sanctionListPossibleMatch
        sanctionListConfirmedMatch
        headOfHousehold {
          id
          fullName
        }
        size
        admin2 {
          id
          name
        }
        residenceStatus
        totalCashReceived
        currency
        lastRegistrationDate
      }
    }
  }
}
    `;
export type AllHouseholdsForPopulationTableComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllHouseholdsForPopulationTableQuery, AllHouseholdsForPopulationTableQueryVariables>, 'query'>;

    export const AllHouseholdsForPopulationTableComponent = (props: AllHouseholdsForPopulationTableComponentProps) => (
      <ApolloReactComponents.Query<AllHouseholdsForPopulationTableQuery, AllHouseholdsForPopulationTableQueryVariables> query={AllHouseholdsForPopulationTableDocument} {...props} />
    );
    
export type AllHouseholdsForPopulationTableProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllHouseholdsForPopulationTableQuery, AllHouseholdsForPopulationTableQueryVariables> & TChildProps;
export function withAllHouseholdsForPopulationTable<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllHouseholdsForPopulationTableQuery,
  AllHouseholdsForPopulationTableQueryVariables,
  AllHouseholdsForPopulationTableProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllHouseholdsForPopulationTableQuery, AllHouseholdsForPopulationTableQueryVariables, AllHouseholdsForPopulationTableProps<TChildProps>>(AllHouseholdsForPopulationTableDocument, {
      alias: 'allHouseholdsForPopulationTable',
      ...operationOptions
    });
};

/**
 * __useAllHouseholdsForPopulationTableQuery__
 *
 * To run a query within a React component, call `useAllHouseholdsForPopulationTableQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllHouseholdsForPopulationTableQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllHouseholdsForPopulationTableQuery({
 *   variables: {
 *      after: // value for 'after'
 *      before: // value for 'before'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      businessArea: // value for 'businessArea'
 *      orderBy: // value for 'orderBy'
 *      familySize: // value for 'familySize'
 *      headOfHouseholdFullNameIcontains: // value for 'headOfHouseholdFullNameIcontains'
 *      adminArea: // value for 'adminArea'
 *      search: // value for 'search'
 *      residenceStatus: // value for 'residenceStatus'
 *      lastRegistrationDate: // value for 'lastRegistrationDate'
 *      admin2: // value for 'admin2'
 *      withdrawn: // value for 'withdrawn'
 *   },
 * });
 */
export function useAllHouseholdsForPopulationTableQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllHouseholdsForPopulationTableQuery, AllHouseholdsForPopulationTableQueryVariables>) {
        return ApolloReactHooks.useQuery<AllHouseholdsForPopulationTableQuery, AllHouseholdsForPopulationTableQueryVariables>(AllHouseholdsForPopulationTableDocument, baseOptions);
      }
export function useAllHouseholdsForPopulationTableLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllHouseholdsForPopulationTableQuery, AllHouseholdsForPopulationTableQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllHouseholdsForPopulationTableQuery, AllHouseholdsForPopulationTableQueryVariables>(AllHouseholdsForPopulationTableDocument, baseOptions);
        }
export type AllHouseholdsForPopulationTableQueryHookResult = ReturnType<typeof useAllHouseholdsForPopulationTableQuery>;
export type AllHouseholdsForPopulationTableLazyQueryHookResult = ReturnType<typeof useAllHouseholdsForPopulationTableLazyQuery>;
export type AllHouseholdsForPopulationTableQueryResult = ApolloReactCommon.QueryResult<AllHouseholdsForPopulationTableQuery, AllHouseholdsForPopulationTableQueryVariables>;
export const AllIndividualsDocument = gql`
    query AllIndividuals($before: String, $after: String, $first: Int, $last: Int, $fullNameContains: String, $sex: [String], $age: String, $orderBy: String, $search: String, $status: [String], $lastRegistrationDate: String, $householdId: UUID, $excludedId: String, $businessArea: String, $adminArea: ID, $withdrawn: Boolean, $admin2: [ID], $flags: [String]) {
  allIndividuals(before: $before, after: $after, first: $first, last: $last, fullName_Startswith: $fullNameContains, sex: $sex, age: $age, orderBy: $orderBy, search: $search, status: $status, lastRegistrationDate: $lastRegistrationDate, household_Id: $householdId, excludedId: $excludedId, businessArea: $businessArea, household_AdminArea: $adminArea, withdrawn: $withdrawn, admin2: $admin2, flags: $flags) {
    totalCount
    pageInfo {
      startCursor
      endCursor
    }
    edges {
      cursor
      node {
        id
        unicefId
        sanctionListPossibleMatch
        sanctionListConfirmedMatch
        deduplicationGoldenRecordStatus
        sanctionListLastCheck
        fullName
        household {
          id
          unicefId
          admin2 {
            id
            name
          }
          programs {
            edges {
              node {
                id
                name
              }
            }
          }
        }
        relationship
        age
        sex
        lastRegistrationDate
        phoneNo
        birthDate
        documents {
          edges {
            node {
              id
              country
              countryIso3
              documentNumber
              photo
              type {
                label
                key
              }
            }
          }
        }
        identities {
          edges {
            node {
              id
              partner
              country
              countryIso3
              number
            }
          }
        }
        paymentChannels {
          id
          bankName
          bankAccountNumber
        }
      }
    }
  }
}
    `;
export type AllIndividualsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllIndividualsQuery, AllIndividualsQueryVariables>, 'query'>;

    export const AllIndividualsComponent = (props: AllIndividualsComponentProps) => (
      <ApolloReactComponents.Query<AllIndividualsQuery, AllIndividualsQueryVariables> query={AllIndividualsDocument} {...props} />
    );
    
export type AllIndividualsProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllIndividualsQuery, AllIndividualsQueryVariables> & TChildProps;
export function withAllIndividuals<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllIndividualsQuery,
  AllIndividualsQueryVariables,
  AllIndividualsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllIndividualsQuery, AllIndividualsQueryVariables, AllIndividualsProps<TChildProps>>(AllIndividualsDocument, {
      alias: 'allIndividuals',
      ...operationOptions
    });
};

/**
 * __useAllIndividualsQuery__
 *
 * To run a query within a React component, call `useAllIndividualsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllIndividualsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllIndividualsQuery({
 *   variables: {
 *      before: // value for 'before'
 *      after: // value for 'after'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      fullNameContains: // value for 'fullNameContains'
 *      sex: // value for 'sex'
 *      age: // value for 'age'
 *      orderBy: // value for 'orderBy'
 *      search: // value for 'search'
 *      status: // value for 'status'
 *      lastRegistrationDate: // value for 'lastRegistrationDate'
 *      householdId: // value for 'householdId'
 *      excludedId: // value for 'excludedId'
 *      businessArea: // value for 'businessArea'
 *      adminArea: // value for 'adminArea'
 *      withdrawn: // value for 'withdrawn'
 *      admin2: // value for 'admin2'
 *      flags: // value for 'flags'
 *   },
 * });
 */
export function useAllIndividualsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllIndividualsQuery, AllIndividualsQueryVariables>) {
        return ApolloReactHooks.useQuery<AllIndividualsQuery, AllIndividualsQueryVariables>(AllIndividualsDocument, baseOptions);
      }
export function useAllIndividualsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllIndividualsQuery, AllIndividualsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllIndividualsQuery, AllIndividualsQueryVariables>(AllIndividualsDocument, baseOptions);
        }
export type AllIndividualsQueryHookResult = ReturnType<typeof useAllIndividualsQuery>;
export type AllIndividualsLazyQueryHookResult = ReturnType<typeof useAllIndividualsLazyQuery>;
export type AllIndividualsQueryResult = ApolloReactCommon.QueryResult<AllIndividualsQuery, AllIndividualsQueryVariables>;
export const AllIndividualsForPopulationTableDocument = gql`
    query AllIndividualsForPopulationTable($before: String, $after: String, $first: Int, $last: Int, $fullNameContains: String, $sex: [String], $age: String, $orderBy: String, $search: String, $status: [String], $lastRegistrationDate: String, $householdId: UUID, $excludedId: String, $businessArea: String, $adminArea: ID, $withdrawn: Boolean, $admin2: [ID], $flags: [String]) {
  allIndividuals(before: $before, after: $after, first: $first, last: $last, fullName_Startswith: $fullNameContains, sex: $sex, age: $age, orderBy: $orderBy, search: $search, status: $status, lastRegistrationDate: $lastRegistrationDate, household_Id: $householdId, excludedId: $excludedId, businessArea: $businessArea, household_AdminArea: $adminArea, withdrawn: $withdrawn, admin2: $admin2, flags: $flags) {
    totalCount
    pageInfo {
      startCursor
      endCursor
    }
    edges {
      cursor
      node {
        id
        unicefId
        sanctionListPossibleMatch
        sanctionListConfirmedMatch
        deduplicationGoldenRecordStatus
        sanctionListLastCheck
        fullName
        household {
          id
          unicefId
          admin2 {
            id
            name
          }
        }
        relationship
        age
        sex
      }
    }
  }
}
    `;
export type AllIndividualsForPopulationTableComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllIndividualsForPopulationTableQuery, AllIndividualsForPopulationTableQueryVariables>, 'query'>;

    export const AllIndividualsForPopulationTableComponent = (props: AllIndividualsForPopulationTableComponentProps) => (
      <ApolloReactComponents.Query<AllIndividualsForPopulationTableQuery, AllIndividualsForPopulationTableQueryVariables> query={AllIndividualsForPopulationTableDocument} {...props} />
    );
    
export type AllIndividualsForPopulationTableProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllIndividualsForPopulationTableQuery, AllIndividualsForPopulationTableQueryVariables> & TChildProps;
export function withAllIndividualsForPopulationTable<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllIndividualsForPopulationTableQuery,
  AllIndividualsForPopulationTableQueryVariables,
  AllIndividualsForPopulationTableProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllIndividualsForPopulationTableQuery, AllIndividualsForPopulationTableQueryVariables, AllIndividualsForPopulationTableProps<TChildProps>>(AllIndividualsForPopulationTableDocument, {
      alias: 'allIndividualsForPopulationTable',
      ...operationOptions
    });
};

/**
 * __useAllIndividualsForPopulationTableQuery__
 *
 * To run a query within a React component, call `useAllIndividualsForPopulationTableQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllIndividualsForPopulationTableQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllIndividualsForPopulationTableQuery({
 *   variables: {
 *      before: // value for 'before'
 *      after: // value for 'after'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      fullNameContains: // value for 'fullNameContains'
 *      sex: // value for 'sex'
 *      age: // value for 'age'
 *      orderBy: // value for 'orderBy'
 *      search: // value for 'search'
 *      status: // value for 'status'
 *      lastRegistrationDate: // value for 'lastRegistrationDate'
 *      householdId: // value for 'householdId'
 *      excludedId: // value for 'excludedId'
 *      businessArea: // value for 'businessArea'
 *      adminArea: // value for 'adminArea'
 *      withdrawn: // value for 'withdrawn'
 *      admin2: // value for 'admin2'
 *      flags: // value for 'flags'
 *   },
 * });
 */
export function useAllIndividualsForPopulationTableQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllIndividualsForPopulationTableQuery, AllIndividualsForPopulationTableQueryVariables>) {
        return ApolloReactHooks.useQuery<AllIndividualsForPopulationTableQuery, AllIndividualsForPopulationTableQueryVariables>(AllIndividualsForPopulationTableDocument, baseOptions);
      }
export function useAllIndividualsForPopulationTableLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllIndividualsForPopulationTableQuery, AllIndividualsForPopulationTableQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllIndividualsForPopulationTableQuery, AllIndividualsForPopulationTableQueryVariables>(AllIndividualsForPopulationTableDocument, baseOptions);
        }
export type AllIndividualsForPopulationTableQueryHookResult = ReturnType<typeof useAllIndividualsForPopulationTableQuery>;
export type AllIndividualsForPopulationTableLazyQueryHookResult = ReturnType<typeof useAllIndividualsForPopulationTableLazyQuery>;
export type AllIndividualsForPopulationTableQueryResult = ApolloReactCommon.QueryResult<AllIndividualsForPopulationTableQuery, AllIndividualsForPopulationTableQueryVariables>;
export const HouseholdDocument = gql`
    query Household($id: ID!) {
  household(id: $id) {
    ...householdDetailed
  }
}
    ${HouseholdDetailedFragmentDoc}`;
export type HouseholdComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<HouseholdQuery, HouseholdQueryVariables>, 'query'> & ({ variables: HouseholdQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const HouseholdComponent = (props: HouseholdComponentProps) => (
      <ApolloReactComponents.Query<HouseholdQuery, HouseholdQueryVariables> query={HouseholdDocument} {...props} />
    );
    
export type HouseholdProps<TChildProps = {}> = ApolloReactHoc.DataProps<HouseholdQuery, HouseholdQueryVariables> & TChildProps;
export function withHousehold<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  HouseholdQuery,
  HouseholdQueryVariables,
  HouseholdProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, HouseholdQuery, HouseholdQueryVariables, HouseholdProps<TChildProps>>(HouseholdDocument, {
      alias: 'household',
      ...operationOptions
    });
};

/**
 * __useHouseholdQuery__
 *
 * To run a query within a React component, call `useHouseholdQuery` and pass it any options that fit your needs.
 * When your component renders, `useHouseholdQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useHouseholdQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useHouseholdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<HouseholdQuery, HouseholdQueryVariables>) {
        return ApolloReactHooks.useQuery<HouseholdQuery, HouseholdQueryVariables>(HouseholdDocument, baseOptions);
      }
export function useHouseholdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<HouseholdQuery, HouseholdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<HouseholdQuery, HouseholdQueryVariables>(HouseholdDocument, baseOptions);
        }
export type HouseholdQueryHookResult = ReturnType<typeof useHouseholdQuery>;
export type HouseholdLazyQueryHookResult = ReturnType<typeof useHouseholdLazyQuery>;
export type HouseholdQueryResult = ApolloReactCommon.QueryResult<HouseholdQuery, HouseholdQueryVariables>;
export const HouseholdChoiceDataDocument = gql`
    query householdChoiceData {
  residenceStatusChoices {
    name
    value
  }
  relationshipChoices {
    name
    value
  }
  roleChoices {
    name
    value
  }
  maritalStatusChoices {
    name
    value
  }
  workStatusChoices {
    name
    value
  }
  deduplicationBatchStatusChoices {
    name
    value
  }
  deduplicationGoldenRecordStatusChoices {
    name
    value
  }
  observedDisabilityChoices {
    name
    value
  }
  severityOfDisabilityChoices {
    name
    value
  }
}
    `;
export type HouseholdChoiceDataComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<HouseholdChoiceDataQuery, HouseholdChoiceDataQueryVariables>, 'query'>;

    export const HouseholdChoiceDataComponent = (props: HouseholdChoiceDataComponentProps) => (
      <ApolloReactComponents.Query<HouseholdChoiceDataQuery, HouseholdChoiceDataQueryVariables> query={HouseholdChoiceDataDocument} {...props} />
    );
    
export type HouseholdChoiceDataProps<TChildProps = {}> = ApolloReactHoc.DataProps<HouseholdChoiceDataQuery, HouseholdChoiceDataQueryVariables> & TChildProps;
export function withHouseholdChoiceData<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  HouseholdChoiceDataQuery,
  HouseholdChoiceDataQueryVariables,
  HouseholdChoiceDataProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, HouseholdChoiceDataQuery, HouseholdChoiceDataQueryVariables, HouseholdChoiceDataProps<TChildProps>>(HouseholdChoiceDataDocument, {
      alias: 'householdChoiceData',
      ...operationOptions
    });
};

/**
 * __useHouseholdChoiceDataQuery__
 *
 * To run a query within a React component, call `useHouseholdChoiceDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useHouseholdChoiceDataQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useHouseholdChoiceDataQuery({
 *   variables: {
 *   },
 * });
 */
export function useHouseholdChoiceDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<HouseholdChoiceDataQuery, HouseholdChoiceDataQueryVariables>) {
        return ApolloReactHooks.useQuery<HouseholdChoiceDataQuery, HouseholdChoiceDataQueryVariables>(HouseholdChoiceDataDocument, baseOptions);
      }
export function useHouseholdChoiceDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<HouseholdChoiceDataQuery, HouseholdChoiceDataQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<HouseholdChoiceDataQuery, HouseholdChoiceDataQueryVariables>(HouseholdChoiceDataDocument, baseOptions);
        }
export type HouseholdChoiceDataQueryHookResult = ReturnType<typeof useHouseholdChoiceDataQuery>;
export type HouseholdChoiceDataLazyQueryHookResult = ReturnType<typeof useHouseholdChoiceDataLazyQuery>;
export type HouseholdChoiceDataQueryResult = ApolloReactCommon.QueryResult<HouseholdChoiceDataQuery, HouseholdChoiceDataQueryVariables>;
export const HouseholdFlexFieldsDocument = gql`
    query HouseholdFlexFields($id: ID!) {
  household(id: $id) {
    id
    flexFields
  }
}
    `;
export type HouseholdFlexFieldsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<HouseholdFlexFieldsQuery, HouseholdFlexFieldsQueryVariables>, 'query'> & ({ variables: HouseholdFlexFieldsQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const HouseholdFlexFieldsComponent = (props: HouseholdFlexFieldsComponentProps) => (
      <ApolloReactComponents.Query<HouseholdFlexFieldsQuery, HouseholdFlexFieldsQueryVariables> query={HouseholdFlexFieldsDocument} {...props} />
    );
    
export type HouseholdFlexFieldsProps<TChildProps = {}> = ApolloReactHoc.DataProps<HouseholdFlexFieldsQuery, HouseholdFlexFieldsQueryVariables> & TChildProps;
export function withHouseholdFlexFields<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  HouseholdFlexFieldsQuery,
  HouseholdFlexFieldsQueryVariables,
  HouseholdFlexFieldsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, HouseholdFlexFieldsQuery, HouseholdFlexFieldsQueryVariables, HouseholdFlexFieldsProps<TChildProps>>(HouseholdFlexFieldsDocument, {
      alias: 'householdFlexFields',
      ...operationOptions
    });
};

/**
 * __useHouseholdFlexFieldsQuery__
 *
 * To run a query within a React component, call `useHouseholdFlexFieldsQuery` and pass it any options that fit your needs.
 * When your component renders, `useHouseholdFlexFieldsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useHouseholdFlexFieldsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useHouseholdFlexFieldsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<HouseholdFlexFieldsQuery, HouseholdFlexFieldsQueryVariables>) {
        return ApolloReactHooks.useQuery<HouseholdFlexFieldsQuery, HouseholdFlexFieldsQueryVariables>(HouseholdFlexFieldsDocument, baseOptions);
      }
export function useHouseholdFlexFieldsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<HouseholdFlexFieldsQuery, HouseholdFlexFieldsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<HouseholdFlexFieldsQuery, HouseholdFlexFieldsQueryVariables>(HouseholdFlexFieldsDocument, baseOptions);
        }
export type HouseholdFlexFieldsQueryHookResult = ReturnType<typeof useHouseholdFlexFieldsQuery>;
export type HouseholdFlexFieldsLazyQueryHookResult = ReturnType<typeof useHouseholdFlexFieldsLazyQuery>;
export type HouseholdFlexFieldsQueryResult = ApolloReactCommon.QueryResult<HouseholdFlexFieldsQuery, HouseholdFlexFieldsQueryVariables>;
export const IndividualDocument = gql`
    query Individual($id: ID!) {
  individual(id: $id) {
    ...individualDetailed
  }
}
    ${IndividualDetailedFragmentDoc}`;
export type IndividualComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<IndividualQuery, IndividualQueryVariables>, 'query'> & ({ variables: IndividualQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const IndividualComponent = (props: IndividualComponentProps) => (
      <ApolloReactComponents.Query<IndividualQuery, IndividualQueryVariables> query={IndividualDocument} {...props} />
    );
    
export type IndividualProps<TChildProps = {}> = ApolloReactHoc.DataProps<IndividualQuery, IndividualQueryVariables> & TChildProps;
export function withIndividual<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  IndividualQuery,
  IndividualQueryVariables,
  IndividualProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, IndividualQuery, IndividualQueryVariables, IndividualProps<TChildProps>>(IndividualDocument, {
      alias: 'individual',
      ...operationOptions
    });
};

/**
 * __useIndividualQuery__
 *
 * To run a query within a React component, call `useIndividualQuery` and pass it any options that fit your needs.
 * When your component renders, `useIndividualQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useIndividualQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useIndividualQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<IndividualQuery, IndividualQueryVariables>) {
        return ApolloReactHooks.useQuery<IndividualQuery, IndividualQueryVariables>(IndividualDocument, baseOptions);
      }
export function useIndividualLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<IndividualQuery, IndividualQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<IndividualQuery, IndividualQueryVariables>(IndividualDocument, baseOptions);
        }
export type IndividualQueryHookResult = ReturnType<typeof useIndividualQuery>;
export type IndividualLazyQueryHookResult = ReturnType<typeof useIndividualLazyQuery>;
export type IndividualQueryResult = ApolloReactCommon.QueryResult<IndividualQuery, IndividualQueryVariables>;
export const IndividualChoiceDataDocument = gql`
    query individualChoiceData {
  flagChoices {
    name
    value
  }
}
    `;
export type IndividualChoiceDataComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<IndividualChoiceDataQuery, IndividualChoiceDataQueryVariables>, 'query'>;

    export const IndividualChoiceDataComponent = (props: IndividualChoiceDataComponentProps) => (
      <ApolloReactComponents.Query<IndividualChoiceDataQuery, IndividualChoiceDataQueryVariables> query={IndividualChoiceDataDocument} {...props} />
    );
    
export type IndividualChoiceDataProps<TChildProps = {}> = ApolloReactHoc.DataProps<IndividualChoiceDataQuery, IndividualChoiceDataQueryVariables> & TChildProps;
export function withIndividualChoiceData<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  IndividualChoiceDataQuery,
  IndividualChoiceDataQueryVariables,
  IndividualChoiceDataProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, IndividualChoiceDataQuery, IndividualChoiceDataQueryVariables, IndividualChoiceDataProps<TChildProps>>(IndividualChoiceDataDocument, {
      alias: 'individualChoiceData',
      ...operationOptions
    });
};

/**
 * __useIndividualChoiceDataQuery__
 *
 * To run a query within a React component, call `useIndividualChoiceDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useIndividualChoiceDataQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useIndividualChoiceDataQuery({
 *   variables: {
 *   },
 * });
 */
export function useIndividualChoiceDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<IndividualChoiceDataQuery, IndividualChoiceDataQueryVariables>) {
        return ApolloReactHooks.useQuery<IndividualChoiceDataQuery, IndividualChoiceDataQueryVariables>(IndividualChoiceDataDocument, baseOptions);
      }
export function useIndividualChoiceDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<IndividualChoiceDataQuery, IndividualChoiceDataQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<IndividualChoiceDataQuery, IndividualChoiceDataQueryVariables>(IndividualChoiceDataDocument, baseOptions);
        }
export type IndividualChoiceDataQueryHookResult = ReturnType<typeof useIndividualChoiceDataQuery>;
export type IndividualChoiceDataLazyQueryHookResult = ReturnType<typeof useIndividualChoiceDataLazyQuery>;
export type IndividualChoiceDataQueryResult = ApolloReactCommon.QueryResult<IndividualChoiceDataQuery, IndividualChoiceDataQueryVariables>;
export const IndividualFlexFieldsDocument = gql`
    query IndividualFlexFields($id: ID!) {
  individual(id: $id) {
    id
    flexFields
  }
}
    `;
export type IndividualFlexFieldsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<IndividualFlexFieldsQuery, IndividualFlexFieldsQueryVariables>, 'query'> & ({ variables: IndividualFlexFieldsQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const IndividualFlexFieldsComponent = (props: IndividualFlexFieldsComponentProps) => (
      <ApolloReactComponents.Query<IndividualFlexFieldsQuery, IndividualFlexFieldsQueryVariables> query={IndividualFlexFieldsDocument} {...props} />
    );
    
export type IndividualFlexFieldsProps<TChildProps = {}> = ApolloReactHoc.DataProps<IndividualFlexFieldsQuery, IndividualFlexFieldsQueryVariables> & TChildProps;
export function withIndividualFlexFields<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  IndividualFlexFieldsQuery,
  IndividualFlexFieldsQueryVariables,
  IndividualFlexFieldsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, IndividualFlexFieldsQuery, IndividualFlexFieldsQueryVariables, IndividualFlexFieldsProps<TChildProps>>(IndividualFlexFieldsDocument, {
      alias: 'individualFlexFields',
      ...operationOptions
    });
};

/**
 * __useIndividualFlexFieldsQuery__
 *
 * To run a query within a React component, call `useIndividualFlexFieldsQuery` and pass it any options that fit your needs.
 * When your component renders, `useIndividualFlexFieldsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useIndividualFlexFieldsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useIndividualFlexFieldsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<IndividualFlexFieldsQuery, IndividualFlexFieldsQueryVariables>) {
        return ApolloReactHooks.useQuery<IndividualFlexFieldsQuery, IndividualFlexFieldsQueryVariables>(IndividualFlexFieldsDocument, baseOptions);
      }
export function useIndividualFlexFieldsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<IndividualFlexFieldsQuery, IndividualFlexFieldsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<IndividualFlexFieldsQuery, IndividualFlexFieldsQueryVariables>(IndividualFlexFieldsDocument, baseOptions);
        }
export type IndividualFlexFieldsQueryHookResult = ReturnType<typeof useIndividualFlexFieldsQuery>;
export type IndividualFlexFieldsLazyQueryHookResult = ReturnType<typeof useIndividualFlexFieldsLazyQuery>;
export type IndividualFlexFieldsQueryResult = ApolloReactCommon.QueryResult<IndividualFlexFieldsQuery, IndividualFlexFieldsQueryVariables>;
export const AllActiveProgramsDocument = gql`
    query AllActivePrograms($before: String, $after: String, $first: Int, $last: Int, $status: [String], $sector: [String], $businessArea: String!, $search: String, $numberOfHouseholds: String, $budget: String, $startDate: Date, $endDate: Date, $orderBy: String) {
  allActivePrograms(before: $before, after: $after, first: $first, last: $last, status: $status, sector: $sector, businessArea: $businessArea, search: $search, numberOfHouseholds: $numberOfHouseholds, budget: $budget, orderBy: $orderBy, startDate: $startDate, endDate: $endDate) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      endCursor
      startCursor
    }
    totalCount
    edgeCount
    edges {
      cursor
      node {
        id
        name
        status
        startDate
        endDate
        sector
        totalNumberOfHouseholds
        budget
      }
    }
  }
}
    `;
export type AllActiveProgramsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllActiveProgramsQuery, AllActiveProgramsQueryVariables>, 'query'> & ({ variables: AllActiveProgramsQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const AllActiveProgramsComponent = (props: AllActiveProgramsComponentProps) => (
      <ApolloReactComponents.Query<AllActiveProgramsQuery, AllActiveProgramsQueryVariables> query={AllActiveProgramsDocument} {...props} />
    );
    
export type AllActiveProgramsProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllActiveProgramsQuery, AllActiveProgramsQueryVariables> & TChildProps;
export function withAllActivePrograms<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllActiveProgramsQuery,
  AllActiveProgramsQueryVariables,
  AllActiveProgramsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllActiveProgramsQuery, AllActiveProgramsQueryVariables, AllActiveProgramsProps<TChildProps>>(AllActiveProgramsDocument, {
      alias: 'allActivePrograms',
      ...operationOptions
    });
};

/**
 * __useAllActiveProgramsQuery__
 *
 * To run a query within a React component, call `useAllActiveProgramsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllActiveProgramsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllActiveProgramsQuery({
 *   variables: {
 *      before: // value for 'before'
 *      after: // value for 'after'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      status: // value for 'status'
 *      sector: // value for 'sector'
 *      businessArea: // value for 'businessArea'
 *      search: // value for 'search'
 *      numberOfHouseholds: // value for 'numberOfHouseholds'
 *      budget: // value for 'budget'
 *      startDate: // value for 'startDate'
 *      endDate: // value for 'endDate'
 *      orderBy: // value for 'orderBy'
 *   },
 * });
 */
export function useAllActiveProgramsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllActiveProgramsQuery, AllActiveProgramsQueryVariables>) {
        return ApolloReactHooks.useQuery<AllActiveProgramsQuery, AllActiveProgramsQueryVariables>(AllActiveProgramsDocument, baseOptions);
      }
export function useAllActiveProgramsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllActiveProgramsQuery, AllActiveProgramsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllActiveProgramsQuery, AllActiveProgramsQueryVariables>(AllActiveProgramsDocument, baseOptions);
        }
export type AllActiveProgramsQueryHookResult = ReturnType<typeof useAllActiveProgramsQuery>;
export type AllActiveProgramsLazyQueryHookResult = ReturnType<typeof useAllActiveProgramsLazyQuery>;
export type AllActiveProgramsQueryResult = ApolloReactCommon.QueryResult<AllActiveProgramsQuery, AllActiveProgramsQueryVariables>;
export const AllProgramsDocument = gql`
    query AllPrograms($before: String, $after: String, $first: Int, $last: Int, $status: [String], $sector: [String], $businessArea: String!, $search: String, $numberOfHouseholds: String, $budget: String, $startDate: Date, $endDate: Date, $orderBy: String) {
  allPrograms(before: $before, after: $after, first: $first, last: $last, status: $status, sector: $sector, businessArea: $businessArea, search: $search, numberOfHouseholds: $numberOfHouseholds, budget: $budget, orderBy: $orderBy, startDate: $startDate, endDate: $endDate) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      endCursor
      startCursor
    }
    totalCount
    edgeCount
    edges {
      cursor
      node {
        id
        name
        startDate
        endDate
        status
        caId
        description
        budget
        frequencyOfPayments
        populationGoal
        sector
        totalNumberOfHouseholds
        individualDataNeeded
      }
    }
  }
}
    `;
export type AllProgramsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllProgramsQuery, AllProgramsQueryVariables>, 'query'> & ({ variables: AllProgramsQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const AllProgramsComponent = (props: AllProgramsComponentProps) => (
      <ApolloReactComponents.Query<AllProgramsQuery, AllProgramsQueryVariables> query={AllProgramsDocument} {...props} />
    );
    
export type AllProgramsProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllProgramsQuery, AllProgramsQueryVariables> & TChildProps;
export function withAllPrograms<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllProgramsQuery,
  AllProgramsQueryVariables,
  AllProgramsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllProgramsQuery, AllProgramsQueryVariables, AllProgramsProps<TChildProps>>(AllProgramsDocument, {
      alias: 'allPrograms',
      ...operationOptions
    });
};

/**
 * __useAllProgramsQuery__
 *
 * To run a query within a React component, call `useAllProgramsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllProgramsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllProgramsQuery({
 *   variables: {
 *      before: // value for 'before'
 *      after: // value for 'after'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      status: // value for 'status'
 *      sector: // value for 'sector'
 *      businessArea: // value for 'businessArea'
 *      search: // value for 'search'
 *      numberOfHouseholds: // value for 'numberOfHouseholds'
 *      budget: // value for 'budget'
 *      startDate: // value for 'startDate'
 *      endDate: // value for 'endDate'
 *      orderBy: // value for 'orderBy'
 *   },
 * });
 */
export function useAllProgramsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllProgramsQuery, AllProgramsQueryVariables>) {
        return ApolloReactHooks.useQuery<AllProgramsQuery, AllProgramsQueryVariables>(AllProgramsDocument, baseOptions);
      }
export function useAllProgramsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllProgramsQuery, AllProgramsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllProgramsQuery, AllProgramsQueryVariables>(AllProgramsDocument, baseOptions);
        }
export type AllProgramsQueryHookResult = ReturnType<typeof useAllProgramsQuery>;
export type AllProgramsLazyQueryHookResult = ReturnType<typeof useAllProgramsLazyQuery>;
export type AllProgramsQueryResult = ApolloReactCommon.QueryResult<AllProgramsQuery, AllProgramsQueryVariables>;
export const AllProgramsForChoicesDocument = gql`
    query AllProgramsForChoices($before: String, $after: String, $first: Int, $last: Int, $status: [String], $sector: [String], $businessArea: String!, $search: String, $numberOfHouseholds: String, $budget: String, $startDate: Date, $endDate: Date, $orderBy: String) {
  allPrograms(before: $before, after: $after, first: $first, last: $last, status: $status, sector: $sector, businessArea: $businessArea, search: $search, numberOfHouseholds: $numberOfHouseholds, budget: $budget, orderBy: $orderBy, startDate: $startDate, endDate: $endDate) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      endCursor
      startCursor
    }
    totalCount
    edgeCount
    edges {
      cursor
      node {
        id
        name
        individualDataNeeded
      }
    }
  }
}
    `;
export type AllProgramsForChoicesComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllProgramsForChoicesQuery, AllProgramsForChoicesQueryVariables>, 'query'> & ({ variables: AllProgramsForChoicesQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const AllProgramsForChoicesComponent = (props: AllProgramsForChoicesComponentProps) => (
      <ApolloReactComponents.Query<AllProgramsForChoicesQuery, AllProgramsForChoicesQueryVariables> query={AllProgramsForChoicesDocument} {...props} />
    );
    
export type AllProgramsForChoicesProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllProgramsForChoicesQuery, AllProgramsForChoicesQueryVariables> & TChildProps;
export function withAllProgramsForChoices<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllProgramsForChoicesQuery,
  AllProgramsForChoicesQueryVariables,
  AllProgramsForChoicesProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllProgramsForChoicesQuery, AllProgramsForChoicesQueryVariables, AllProgramsForChoicesProps<TChildProps>>(AllProgramsForChoicesDocument, {
      alias: 'allProgramsForChoices',
      ...operationOptions
    });
};

/**
 * __useAllProgramsForChoicesQuery__
 *
 * To run a query within a React component, call `useAllProgramsForChoicesQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllProgramsForChoicesQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllProgramsForChoicesQuery({
 *   variables: {
 *      before: // value for 'before'
 *      after: // value for 'after'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      status: // value for 'status'
 *      sector: // value for 'sector'
 *      businessArea: // value for 'businessArea'
 *      search: // value for 'search'
 *      numberOfHouseholds: // value for 'numberOfHouseholds'
 *      budget: // value for 'budget'
 *      startDate: // value for 'startDate'
 *      endDate: // value for 'endDate'
 *      orderBy: // value for 'orderBy'
 *   },
 * });
 */
export function useAllProgramsForChoicesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllProgramsForChoicesQuery, AllProgramsForChoicesQueryVariables>) {
        return ApolloReactHooks.useQuery<AllProgramsForChoicesQuery, AllProgramsForChoicesQueryVariables>(AllProgramsForChoicesDocument, baseOptions);
      }
export function useAllProgramsForChoicesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllProgramsForChoicesQuery, AllProgramsForChoicesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllProgramsForChoicesQuery, AllProgramsForChoicesQueryVariables>(AllProgramsForChoicesDocument, baseOptions);
        }
export type AllProgramsForChoicesQueryHookResult = ReturnType<typeof useAllProgramsForChoicesQuery>;
export type AllProgramsForChoicesLazyQueryHookResult = ReturnType<typeof useAllProgramsForChoicesLazyQuery>;
export type AllProgramsForChoicesQueryResult = ApolloReactCommon.QueryResult<AllProgramsForChoicesQuery, AllProgramsForChoicesQueryVariables>;
export const ProgramDocument = gql`
    query Program($id: ID!) {
  program(id: $id) {
    id
    name
    startDate
    endDate
    status
    caId
    caHashId
    description
    budget
    frequencyOfPayments
    cashPlus
    populationGoal
    scope
    sector
    totalNumberOfHouseholds
    administrativeAreasOfImplementation
    individualDataNeeded
    version
  }
}
    `;
export type ProgramComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<ProgramQuery, ProgramQueryVariables>, 'query'> & ({ variables: ProgramQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const ProgramComponent = (props: ProgramComponentProps) => (
      <ApolloReactComponents.Query<ProgramQuery, ProgramQueryVariables> query={ProgramDocument} {...props} />
    );
    
export type ProgramProps<TChildProps = {}> = ApolloReactHoc.DataProps<ProgramQuery, ProgramQueryVariables> & TChildProps;
export function withProgram<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ProgramQuery,
  ProgramQueryVariables,
  ProgramProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, ProgramQuery, ProgramQueryVariables, ProgramProps<TChildProps>>(ProgramDocument, {
      alias: 'program',
      ...operationOptions
    });
};

/**
 * __useProgramQuery__
 *
 * To run a query within a React component, call `useProgramQuery` and pass it any options that fit your needs.
 * When your component renders, `useProgramQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProgramQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useProgramQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ProgramQuery, ProgramQueryVariables>) {
        return ApolloReactHooks.useQuery<ProgramQuery, ProgramQueryVariables>(ProgramDocument, baseOptions);
      }
export function useProgramLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProgramQuery, ProgramQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<ProgramQuery, ProgramQueryVariables>(ProgramDocument, baseOptions);
        }
export type ProgramQueryHookResult = ReturnType<typeof useProgramQuery>;
export type ProgramLazyQueryHookResult = ReturnType<typeof useProgramLazyQuery>;
export type ProgramQueryResult = ApolloReactCommon.QueryResult<ProgramQuery, ProgramQueryVariables>;
export const ProgrammeChoiceDataDocument = gql`
    query ProgrammeChoiceData {
  programFrequencyOfPaymentsChoices {
    name
    value
  }
  programScopeChoices {
    name
    value
  }
  programSectorChoices {
    name
    value
  }
  programStatusChoices {
    name
    value
  }
}
    `;
export type ProgrammeChoiceDataComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<ProgrammeChoiceDataQuery, ProgrammeChoiceDataQueryVariables>, 'query'>;

    export const ProgrammeChoiceDataComponent = (props: ProgrammeChoiceDataComponentProps) => (
      <ApolloReactComponents.Query<ProgrammeChoiceDataQuery, ProgrammeChoiceDataQueryVariables> query={ProgrammeChoiceDataDocument} {...props} />
    );
    
export type ProgrammeChoiceDataProps<TChildProps = {}> = ApolloReactHoc.DataProps<ProgrammeChoiceDataQuery, ProgrammeChoiceDataQueryVariables> & TChildProps;
export function withProgrammeChoiceData<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ProgrammeChoiceDataQuery,
  ProgrammeChoiceDataQueryVariables,
  ProgrammeChoiceDataProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, ProgrammeChoiceDataQuery, ProgrammeChoiceDataQueryVariables, ProgrammeChoiceDataProps<TChildProps>>(ProgrammeChoiceDataDocument, {
      alias: 'programmeChoiceData',
      ...operationOptions
    });
};

/**
 * __useProgrammeChoiceDataQuery__
 *
 * To run a query within a React component, call `useProgrammeChoiceDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useProgrammeChoiceDataQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProgrammeChoiceDataQuery({
 *   variables: {
 *   },
 * });
 */
export function useProgrammeChoiceDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ProgrammeChoiceDataQuery, ProgrammeChoiceDataQueryVariables>) {
        return ApolloReactHooks.useQuery<ProgrammeChoiceDataQuery, ProgrammeChoiceDataQueryVariables>(ProgrammeChoiceDataDocument, baseOptions);
      }
export function useProgrammeChoiceDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProgrammeChoiceDataQuery, ProgrammeChoiceDataQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<ProgrammeChoiceDataQuery, ProgrammeChoiceDataQueryVariables>(ProgrammeChoiceDataDocument, baseOptions);
        }
export type ProgrammeChoiceDataQueryHookResult = ReturnType<typeof useProgrammeChoiceDataQuery>;
export type ProgrammeChoiceDataLazyQueryHookResult = ReturnType<typeof useProgrammeChoiceDataLazyQuery>;
export type ProgrammeChoiceDataQueryResult = ApolloReactCommon.QueryResult<ProgrammeChoiceDataQuery, ProgrammeChoiceDataQueryVariables>;
export const AllImportedHouseholdsDocument = gql`
    query AllImportedHouseholds($after: String, $before: String, $first: Int, $last: Int, $rdiId: String, $orderBy: String, $businessArea: String) {
  allImportedHouseholds(after: $after, before: $before, first: $first, last: $last, rdiId: $rdiId, orderBy: $orderBy, businessArea: $businessArea) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ...importedHouseholdMinimal
      }
    }
  }
}
    ${ImportedHouseholdMinimalFragmentDoc}`;
export type AllImportedHouseholdsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllImportedHouseholdsQuery, AllImportedHouseholdsQueryVariables>, 'query'>;

    export const AllImportedHouseholdsComponent = (props: AllImportedHouseholdsComponentProps) => (
      <ApolloReactComponents.Query<AllImportedHouseholdsQuery, AllImportedHouseholdsQueryVariables> query={AllImportedHouseholdsDocument} {...props} />
    );
    
export type AllImportedHouseholdsProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllImportedHouseholdsQuery, AllImportedHouseholdsQueryVariables> & TChildProps;
export function withAllImportedHouseholds<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllImportedHouseholdsQuery,
  AllImportedHouseholdsQueryVariables,
  AllImportedHouseholdsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllImportedHouseholdsQuery, AllImportedHouseholdsQueryVariables, AllImportedHouseholdsProps<TChildProps>>(AllImportedHouseholdsDocument, {
      alias: 'allImportedHouseholds',
      ...operationOptions
    });
};

/**
 * __useAllImportedHouseholdsQuery__
 *
 * To run a query within a React component, call `useAllImportedHouseholdsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllImportedHouseholdsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllImportedHouseholdsQuery({
 *   variables: {
 *      after: // value for 'after'
 *      before: // value for 'before'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      rdiId: // value for 'rdiId'
 *      orderBy: // value for 'orderBy'
 *      businessArea: // value for 'businessArea'
 *   },
 * });
 */
export function useAllImportedHouseholdsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllImportedHouseholdsQuery, AllImportedHouseholdsQueryVariables>) {
        return ApolloReactHooks.useQuery<AllImportedHouseholdsQuery, AllImportedHouseholdsQueryVariables>(AllImportedHouseholdsDocument, baseOptions);
      }
export function useAllImportedHouseholdsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllImportedHouseholdsQuery, AllImportedHouseholdsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllImportedHouseholdsQuery, AllImportedHouseholdsQueryVariables>(AllImportedHouseholdsDocument, baseOptions);
        }
export type AllImportedHouseholdsQueryHookResult = ReturnType<typeof useAllImportedHouseholdsQuery>;
export type AllImportedHouseholdsLazyQueryHookResult = ReturnType<typeof useAllImportedHouseholdsLazyQuery>;
export type AllImportedHouseholdsQueryResult = ApolloReactCommon.QueryResult<AllImportedHouseholdsQuery, AllImportedHouseholdsQueryVariables>;
export const AllImportedIndividualsDocument = gql`
    query AllImportedIndividuals($after: String, $before: String, $first: Int, $last: Int, $rdiId: String, $household: ID, $orderBy: String, $duplicatesOnly: Boolean, $businessArea: String) {
  allImportedIndividuals(after: $after, before: $before, first: $first, last: $last, rdiId: $rdiId, household: $household, orderBy: $orderBy, duplicatesOnly: $duplicatesOnly, businessArea: $businessArea) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ...importedIndividualMinimal
      }
    }
  }
}
    ${ImportedIndividualMinimalFragmentDoc}`;
export type AllImportedIndividualsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllImportedIndividualsQuery, AllImportedIndividualsQueryVariables>, 'query'>;

    export const AllImportedIndividualsComponent = (props: AllImportedIndividualsComponentProps) => (
      <ApolloReactComponents.Query<AllImportedIndividualsQuery, AllImportedIndividualsQueryVariables> query={AllImportedIndividualsDocument} {...props} />
    );
    
export type AllImportedIndividualsProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllImportedIndividualsQuery, AllImportedIndividualsQueryVariables> & TChildProps;
export function withAllImportedIndividuals<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllImportedIndividualsQuery,
  AllImportedIndividualsQueryVariables,
  AllImportedIndividualsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllImportedIndividualsQuery, AllImportedIndividualsQueryVariables, AllImportedIndividualsProps<TChildProps>>(AllImportedIndividualsDocument, {
      alias: 'allImportedIndividuals',
      ...operationOptions
    });
};

/**
 * __useAllImportedIndividualsQuery__
 *
 * To run a query within a React component, call `useAllImportedIndividualsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllImportedIndividualsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllImportedIndividualsQuery({
 *   variables: {
 *      after: // value for 'after'
 *      before: // value for 'before'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      rdiId: // value for 'rdiId'
 *      household: // value for 'household'
 *      orderBy: // value for 'orderBy'
 *      duplicatesOnly: // value for 'duplicatesOnly'
 *      businessArea: // value for 'businessArea'
 *   },
 * });
 */
export function useAllImportedIndividualsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllImportedIndividualsQuery, AllImportedIndividualsQueryVariables>) {
        return ApolloReactHooks.useQuery<AllImportedIndividualsQuery, AllImportedIndividualsQueryVariables>(AllImportedIndividualsDocument, baseOptions);
      }
export function useAllImportedIndividualsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllImportedIndividualsQuery, AllImportedIndividualsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllImportedIndividualsQuery, AllImportedIndividualsQueryVariables>(AllImportedIndividualsDocument, baseOptions);
        }
export type AllImportedIndividualsQueryHookResult = ReturnType<typeof useAllImportedIndividualsQuery>;
export type AllImportedIndividualsLazyQueryHookResult = ReturnType<typeof useAllImportedIndividualsLazyQuery>;
export type AllImportedIndividualsQueryResult = ApolloReactCommon.QueryResult<AllImportedIndividualsQuery, AllImportedIndividualsQueryVariables>;
export const AllKoboProjectsDocument = gql`
    query AllKoboProjects($after: String, $before: String, $first: Int, $last: Int, $businessAreaSlug: String!) {
  allKoboProjects(after: $after, before: $before, first: $first, last: $last, businessAreaSlug: $businessAreaSlug) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        name
        id
      }
    }
  }
}
    `;
export type AllKoboProjectsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllKoboProjectsQuery, AllKoboProjectsQueryVariables>, 'query'> & ({ variables: AllKoboProjectsQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const AllKoboProjectsComponent = (props: AllKoboProjectsComponentProps) => (
      <ApolloReactComponents.Query<AllKoboProjectsQuery, AllKoboProjectsQueryVariables> query={AllKoboProjectsDocument} {...props} />
    );
    
export type AllKoboProjectsProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllKoboProjectsQuery, AllKoboProjectsQueryVariables> & TChildProps;
export function withAllKoboProjects<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllKoboProjectsQuery,
  AllKoboProjectsQueryVariables,
  AllKoboProjectsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllKoboProjectsQuery, AllKoboProjectsQueryVariables, AllKoboProjectsProps<TChildProps>>(AllKoboProjectsDocument, {
      alias: 'allKoboProjects',
      ...operationOptions
    });
};

/**
 * __useAllKoboProjectsQuery__
 *
 * To run a query within a React component, call `useAllKoboProjectsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllKoboProjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllKoboProjectsQuery({
 *   variables: {
 *      after: // value for 'after'
 *      before: // value for 'before'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      businessAreaSlug: // value for 'businessAreaSlug'
 *   },
 * });
 */
export function useAllKoboProjectsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllKoboProjectsQuery, AllKoboProjectsQueryVariables>) {
        return ApolloReactHooks.useQuery<AllKoboProjectsQuery, AllKoboProjectsQueryVariables>(AllKoboProjectsDocument, baseOptions);
      }
export function useAllKoboProjectsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllKoboProjectsQuery, AllKoboProjectsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllKoboProjectsQuery, AllKoboProjectsQueryVariables>(AllKoboProjectsDocument, baseOptions);
        }
export type AllKoboProjectsQueryHookResult = ReturnType<typeof useAllKoboProjectsQuery>;
export type AllKoboProjectsLazyQueryHookResult = ReturnType<typeof useAllKoboProjectsLazyQuery>;
export type AllKoboProjectsQueryResult = ApolloReactCommon.QueryResult<AllKoboProjectsQuery, AllKoboProjectsQueryVariables>;
export const AllMergedHouseholdsDocument = gql`
    query AllMergedHouseholds($after: String, $before: String, $first: Int, $last: Int, $rdiId: String, $orderBy: String, $businessArea: String) {
  allMergedHouseholds(after: $after, before: $before, first: $first, last: $last, rdiId: $rdiId, orderBy: $orderBy, businessArea: $businessArea) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ...mergedHouseholdMinimal
      }
    }
  }
}
    ${MergedHouseholdMinimalFragmentDoc}`;
export type AllMergedHouseholdsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllMergedHouseholdsQuery, AllMergedHouseholdsQueryVariables>, 'query'>;

    export const AllMergedHouseholdsComponent = (props: AllMergedHouseholdsComponentProps) => (
      <ApolloReactComponents.Query<AllMergedHouseholdsQuery, AllMergedHouseholdsQueryVariables> query={AllMergedHouseholdsDocument} {...props} />
    );
    
export type AllMergedHouseholdsProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllMergedHouseholdsQuery, AllMergedHouseholdsQueryVariables> & TChildProps;
export function withAllMergedHouseholds<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllMergedHouseholdsQuery,
  AllMergedHouseholdsQueryVariables,
  AllMergedHouseholdsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllMergedHouseholdsQuery, AllMergedHouseholdsQueryVariables, AllMergedHouseholdsProps<TChildProps>>(AllMergedHouseholdsDocument, {
      alias: 'allMergedHouseholds',
      ...operationOptions
    });
};

/**
 * __useAllMergedHouseholdsQuery__
 *
 * To run a query within a React component, call `useAllMergedHouseholdsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllMergedHouseholdsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllMergedHouseholdsQuery({
 *   variables: {
 *      after: // value for 'after'
 *      before: // value for 'before'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      rdiId: // value for 'rdiId'
 *      orderBy: // value for 'orderBy'
 *      businessArea: // value for 'businessArea'
 *   },
 * });
 */
export function useAllMergedHouseholdsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllMergedHouseholdsQuery, AllMergedHouseholdsQueryVariables>) {
        return ApolloReactHooks.useQuery<AllMergedHouseholdsQuery, AllMergedHouseholdsQueryVariables>(AllMergedHouseholdsDocument, baseOptions);
      }
export function useAllMergedHouseholdsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllMergedHouseholdsQuery, AllMergedHouseholdsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllMergedHouseholdsQuery, AllMergedHouseholdsQueryVariables>(AllMergedHouseholdsDocument, baseOptions);
        }
export type AllMergedHouseholdsQueryHookResult = ReturnType<typeof useAllMergedHouseholdsQuery>;
export type AllMergedHouseholdsLazyQueryHookResult = ReturnType<typeof useAllMergedHouseholdsLazyQuery>;
export type AllMergedHouseholdsQueryResult = ApolloReactCommon.QueryResult<AllMergedHouseholdsQuery, AllMergedHouseholdsQueryVariables>;
export const AllMergedIndividualsDocument = gql`
    query AllMergedIndividuals($after: String, $before: String, $first: Int, $last: Int, $rdiId: String, $household: ID, $orderBy: String, $duplicatesOnly: Boolean, $businessArea: String) {
  allMergedIndividuals(after: $after, before: $before, first: $first, last: $last, rdiId: $rdiId, household: $household, orderBy: $orderBy, duplicatesOnly: $duplicatesOnly, businessArea: $businessArea) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ...mergedIndividualMinimal
      }
    }
  }
}
    ${MergedIndividualMinimalFragmentDoc}`;
export type AllMergedIndividualsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllMergedIndividualsQuery, AllMergedIndividualsQueryVariables>, 'query'>;

    export const AllMergedIndividualsComponent = (props: AllMergedIndividualsComponentProps) => (
      <ApolloReactComponents.Query<AllMergedIndividualsQuery, AllMergedIndividualsQueryVariables> query={AllMergedIndividualsDocument} {...props} />
    );
    
export type AllMergedIndividualsProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllMergedIndividualsQuery, AllMergedIndividualsQueryVariables> & TChildProps;
export function withAllMergedIndividuals<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllMergedIndividualsQuery,
  AllMergedIndividualsQueryVariables,
  AllMergedIndividualsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllMergedIndividualsQuery, AllMergedIndividualsQueryVariables, AllMergedIndividualsProps<TChildProps>>(AllMergedIndividualsDocument, {
      alias: 'allMergedIndividuals',
      ...operationOptions
    });
};

/**
 * __useAllMergedIndividualsQuery__
 *
 * To run a query within a React component, call `useAllMergedIndividualsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllMergedIndividualsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllMergedIndividualsQuery({
 *   variables: {
 *      after: // value for 'after'
 *      before: // value for 'before'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      rdiId: // value for 'rdiId'
 *      household: // value for 'household'
 *      orderBy: // value for 'orderBy'
 *      duplicatesOnly: // value for 'duplicatesOnly'
 *      businessArea: // value for 'businessArea'
 *   },
 * });
 */
export function useAllMergedIndividualsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllMergedIndividualsQuery, AllMergedIndividualsQueryVariables>) {
        return ApolloReactHooks.useQuery<AllMergedIndividualsQuery, AllMergedIndividualsQueryVariables>(AllMergedIndividualsDocument, baseOptions);
      }
export function useAllMergedIndividualsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllMergedIndividualsQuery, AllMergedIndividualsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllMergedIndividualsQuery, AllMergedIndividualsQueryVariables>(AllMergedIndividualsDocument, baseOptions);
        }
export type AllMergedIndividualsQueryHookResult = ReturnType<typeof useAllMergedIndividualsQuery>;
export type AllMergedIndividualsLazyQueryHookResult = ReturnType<typeof useAllMergedIndividualsLazyQuery>;
export type AllMergedIndividualsQueryResult = ApolloReactCommon.QueryResult<AllMergedIndividualsQuery, AllMergedIndividualsQueryVariables>;
export const AllRegistrationDataImportsDocument = gql`
    query AllRegistrationDataImports($after: String, $before: String, $first: Int, $last: Int, $orderBy: String, $search: String, $importedBy: UUID, $status: String, $importDate: Date, $businessArea: String, $importDateRange: String, $size: String, $program: String) {
  allRegistrationDataImports(after: $after, before: $before, first: $first, last: $last, orderBy: $orderBy, name_Startswith: $search, importedBy_Id: $importedBy, status: $status, importDate: $importDate, businessArea: $businessArea, importDateRange: $importDateRange, size: $size, program: $program) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ...registrationMinimal
      }
    }
  }
}
    ${RegistrationMinimalFragmentDoc}`;
export type AllRegistrationDataImportsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllRegistrationDataImportsQuery, AllRegistrationDataImportsQueryVariables>, 'query'>;

    export const AllRegistrationDataImportsComponent = (props: AllRegistrationDataImportsComponentProps) => (
      <ApolloReactComponents.Query<AllRegistrationDataImportsQuery, AllRegistrationDataImportsQueryVariables> query={AllRegistrationDataImportsDocument} {...props} />
    );
    
export type AllRegistrationDataImportsProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllRegistrationDataImportsQuery, AllRegistrationDataImportsQueryVariables> & TChildProps;
export function withAllRegistrationDataImports<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllRegistrationDataImportsQuery,
  AllRegistrationDataImportsQueryVariables,
  AllRegistrationDataImportsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllRegistrationDataImportsQuery, AllRegistrationDataImportsQueryVariables, AllRegistrationDataImportsProps<TChildProps>>(AllRegistrationDataImportsDocument, {
      alias: 'allRegistrationDataImports',
      ...operationOptions
    });
};

/**
 * __useAllRegistrationDataImportsQuery__
 *
 * To run a query within a React component, call `useAllRegistrationDataImportsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllRegistrationDataImportsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllRegistrationDataImportsQuery({
 *   variables: {
 *      after: // value for 'after'
 *      before: // value for 'before'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      orderBy: // value for 'orderBy'
 *      search: // value for 'search'
 *      importedBy: // value for 'importedBy'
 *      status: // value for 'status'
 *      importDate: // value for 'importDate'
 *      businessArea: // value for 'businessArea'
 *      importDateRange: // value for 'importDateRange'
 *      size: // value for 'size'
 *      program: // value for 'program'
 *   },
 * });
 */
export function useAllRegistrationDataImportsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllRegistrationDataImportsQuery, AllRegistrationDataImportsQueryVariables>) {
        return ApolloReactHooks.useQuery<AllRegistrationDataImportsQuery, AllRegistrationDataImportsQueryVariables>(AllRegistrationDataImportsDocument, baseOptions);
      }
export function useAllRegistrationDataImportsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllRegistrationDataImportsQuery, AllRegistrationDataImportsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllRegistrationDataImportsQuery, AllRegistrationDataImportsQueryVariables>(AllRegistrationDataImportsDocument, baseOptions);
        }
export type AllRegistrationDataImportsQueryHookResult = ReturnType<typeof useAllRegistrationDataImportsQuery>;
export type AllRegistrationDataImportsLazyQueryHookResult = ReturnType<typeof useAllRegistrationDataImportsLazyQuery>;
export type AllRegistrationDataImportsQueryResult = ApolloReactCommon.QueryResult<AllRegistrationDataImportsQuery, AllRegistrationDataImportsQueryVariables>;
export const ImportedHouseholdDocument = gql`
    query ImportedHousehold($id: ID!) {
  importedHousehold(id: $id) {
    ...importedHouseholdDetailed
  }
}
    ${ImportedHouseholdDetailedFragmentDoc}`;
export type ImportedHouseholdComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<ImportedHouseholdQuery, ImportedHouseholdQueryVariables>, 'query'> & ({ variables: ImportedHouseholdQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const ImportedHouseholdComponent = (props: ImportedHouseholdComponentProps) => (
      <ApolloReactComponents.Query<ImportedHouseholdQuery, ImportedHouseholdQueryVariables> query={ImportedHouseholdDocument} {...props} />
    );
    
export type ImportedHouseholdProps<TChildProps = {}> = ApolloReactHoc.DataProps<ImportedHouseholdQuery, ImportedHouseholdQueryVariables> & TChildProps;
export function withImportedHousehold<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ImportedHouseholdQuery,
  ImportedHouseholdQueryVariables,
  ImportedHouseholdProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, ImportedHouseholdQuery, ImportedHouseholdQueryVariables, ImportedHouseholdProps<TChildProps>>(ImportedHouseholdDocument, {
      alias: 'importedHousehold',
      ...operationOptions
    });
};

/**
 * __useImportedHouseholdQuery__
 *
 * To run a query within a React component, call `useImportedHouseholdQuery` and pass it any options that fit your needs.
 * When your component renders, `useImportedHouseholdQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useImportedHouseholdQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useImportedHouseholdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ImportedHouseholdQuery, ImportedHouseholdQueryVariables>) {
        return ApolloReactHooks.useQuery<ImportedHouseholdQuery, ImportedHouseholdQueryVariables>(ImportedHouseholdDocument, baseOptions);
      }
export function useImportedHouseholdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ImportedHouseholdQuery, ImportedHouseholdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<ImportedHouseholdQuery, ImportedHouseholdQueryVariables>(ImportedHouseholdDocument, baseOptions);
        }
export type ImportedHouseholdQueryHookResult = ReturnType<typeof useImportedHouseholdQuery>;
export type ImportedHouseholdLazyQueryHookResult = ReturnType<typeof useImportedHouseholdLazyQuery>;
export type ImportedHouseholdQueryResult = ApolloReactCommon.QueryResult<ImportedHouseholdQuery, ImportedHouseholdQueryVariables>;
export const ImportedIndividualDocument = gql`
    query ImportedIndividual($id: ID!) {
  importedIndividual(id: $id) {
    ...importedIndividualDetailed
  }
}
    ${ImportedIndividualDetailedFragmentDoc}`;
export type ImportedIndividualComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<ImportedIndividualQuery, ImportedIndividualQueryVariables>, 'query'> & ({ variables: ImportedIndividualQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const ImportedIndividualComponent = (props: ImportedIndividualComponentProps) => (
      <ApolloReactComponents.Query<ImportedIndividualQuery, ImportedIndividualQueryVariables> query={ImportedIndividualDocument} {...props} />
    );
    
export type ImportedIndividualProps<TChildProps = {}> = ApolloReactHoc.DataProps<ImportedIndividualQuery, ImportedIndividualQueryVariables> & TChildProps;
export function withImportedIndividual<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ImportedIndividualQuery,
  ImportedIndividualQueryVariables,
  ImportedIndividualProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, ImportedIndividualQuery, ImportedIndividualQueryVariables, ImportedIndividualProps<TChildProps>>(ImportedIndividualDocument, {
      alias: 'importedIndividual',
      ...operationOptions
    });
};

/**
 * __useImportedIndividualQuery__
 *
 * To run a query within a React component, call `useImportedIndividualQuery` and pass it any options that fit your needs.
 * When your component renders, `useImportedIndividualQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useImportedIndividualQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useImportedIndividualQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ImportedIndividualQuery, ImportedIndividualQueryVariables>) {
        return ApolloReactHooks.useQuery<ImportedIndividualQuery, ImportedIndividualQueryVariables>(ImportedIndividualDocument, baseOptions);
      }
export function useImportedIndividualLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ImportedIndividualQuery, ImportedIndividualQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<ImportedIndividualQuery, ImportedIndividualQueryVariables>(ImportedIndividualDocument, baseOptions);
        }
export type ImportedIndividualQueryHookResult = ReturnType<typeof useImportedIndividualQuery>;
export type ImportedIndividualLazyQueryHookResult = ReturnType<typeof useImportedIndividualLazyQuery>;
export type ImportedIndividualQueryResult = ApolloReactCommon.QueryResult<ImportedIndividualQuery, ImportedIndividualQueryVariables>;
export const ImportedIndividualFlexFieldsDocument = gql`
    query ImportedIndividualFlexFields($id: ID!) {
  importedIndividual(id: $id) {
    id
    flexFields
  }
}
    `;
export type ImportedIndividualFlexFieldsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<ImportedIndividualFlexFieldsQuery, ImportedIndividualFlexFieldsQueryVariables>, 'query'> & ({ variables: ImportedIndividualFlexFieldsQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const ImportedIndividualFlexFieldsComponent = (props: ImportedIndividualFlexFieldsComponentProps) => (
      <ApolloReactComponents.Query<ImportedIndividualFlexFieldsQuery, ImportedIndividualFlexFieldsQueryVariables> query={ImportedIndividualFlexFieldsDocument} {...props} />
    );
    
export type ImportedIndividualFlexFieldsProps<TChildProps = {}> = ApolloReactHoc.DataProps<ImportedIndividualFlexFieldsQuery, ImportedIndividualFlexFieldsQueryVariables> & TChildProps;
export function withImportedIndividualFlexFields<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ImportedIndividualFlexFieldsQuery,
  ImportedIndividualFlexFieldsQueryVariables,
  ImportedIndividualFlexFieldsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, ImportedIndividualFlexFieldsQuery, ImportedIndividualFlexFieldsQueryVariables, ImportedIndividualFlexFieldsProps<TChildProps>>(ImportedIndividualFlexFieldsDocument, {
      alias: 'importedIndividualFlexFields',
      ...operationOptions
    });
};

/**
 * __useImportedIndividualFlexFieldsQuery__
 *
 * To run a query within a React component, call `useImportedIndividualFlexFieldsQuery` and pass it any options that fit your needs.
 * When your component renders, `useImportedIndividualFlexFieldsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useImportedIndividualFlexFieldsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useImportedIndividualFlexFieldsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ImportedIndividualFlexFieldsQuery, ImportedIndividualFlexFieldsQueryVariables>) {
        return ApolloReactHooks.useQuery<ImportedIndividualFlexFieldsQuery, ImportedIndividualFlexFieldsQueryVariables>(ImportedIndividualFlexFieldsDocument, baseOptions);
      }
export function useImportedIndividualFlexFieldsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ImportedIndividualFlexFieldsQuery, ImportedIndividualFlexFieldsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<ImportedIndividualFlexFieldsQuery, ImportedIndividualFlexFieldsQueryVariables>(ImportedIndividualFlexFieldsDocument, baseOptions);
        }
export type ImportedIndividualFlexFieldsQueryHookResult = ReturnType<typeof useImportedIndividualFlexFieldsQuery>;
export type ImportedIndividualFlexFieldsLazyQueryHookResult = ReturnType<typeof useImportedIndividualFlexFieldsLazyQuery>;
export type ImportedIndividualFlexFieldsQueryResult = ApolloReactCommon.QueryResult<ImportedIndividualFlexFieldsQuery, ImportedIndividualFlexFieldsQueryVariables>;
export const KoboImportDataDocument = gql`
    query KoboImportData($id: ID!) {
  koboImportData(id: $id) {
    id
    status
    numberOfIndividuals
    numberOfHouseholds
    error
    koboValidationErrors {
      header
      message
    }
  }
}
    `;
export type KoboImportDataComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<KoboImportDataQuery, KoboImportDataQueryVariables>, 'query'> & ({ variables: KoboImportDataQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const KoboImportDataComponent = (props: KoboImportDataComponentProps) => (
      <ApolloReactComponents.Query<KoboImportDataQuery, KoboImportDataQueryVariables> query={KoboImportDataDocument} {...props} />
    );
    
export type KoboImportDataProps<TChildProps = {}> = ApolloReactHoc.DataProps<KoboImportDataQuery, KoboImportDataQueryVariables> & TChildProps;
export function withKoboImportData<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  KoboImportDataQuery,
  KoboImportDataQueryVariables,
  KoboImportDataProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, KoboImportDataQuery, KoboImportDataQueryVariables, KoboImportDataProps<TChildProps>>(KoboImportDataDocument, {
      alias: 'koboImportData',
      ...operationOptions
    });
};

/**
 * __useKoboImportDataQuery__
 *
 * To run a query within a React component, call `useKoboImportDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useKoboImportDataQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useKoboImportDataQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useKoboImportDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<KoboImportDataQuery, KoboImportDataQueryVariables>) {
        return ApolloReactHooks.useQuery<KoboImportDataQuery, KoboImportDataQueryVariables>(KoboImportDataDocument, baseOptions);
      }
export function useKoboImportDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<KoboImportDataQuery, KoboImportDataQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<KoboImportDataQuery, KoboImportDataQueryVariables>(KoboImportDataDocument, baseOptions);
        }
export type KoboImportDataQueryHookResult = ReturnType<typeof useKoboImportDataQuery>;
export type KoboImportDataLazyQueryHookResult = ReturnType<typeof useKoboImportDataLazyQuery>;
export type KoboImportDataQueryResult = ApolloReactCommon.QueryResult<KoboImportDataQuery, KoboImportDataQueryVariables>;
export const RegistrationChoicesDocument = gql`
    query registrationChoices {
  registrationDataStatusChoices {
    name
    value
  }
}
    `;
export type RegistrationChoicesComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<RegistrationChoicesQuery, RegistrationChoicesQueryVariables>, 'query'>;

    export const RegistrationChoicesComponent = (props: RegistrationChoicesComponentProps) => (
      <ApolloReactComponents.Query<RegistrationChoicesQuery, RegistrationChoicesQueryVariables> query={RegistrationChoicesDocument} {...props} />
    );
    
export type RegistrationChoicesProps<TChildProps = {}> = ApolloReactHoc.DataProps<RegistrationChoicesQuery, RegistrationChoicesQueryVariables> & TChildProps;
export function withRegistrationChoices<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  RegistrationChoicesQuery,
  RegistrationChoicesQueryVariables,
  RegistrationChoicesProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, RegistrationChoicesQuery, RegistrationChoicesQueryVariables, RegistrationChoicesProps<TChildProps>>(RegistrationChoicesDocument, {
      alias: 'registrationChoices',
      ...operationOptions
    });
};

/**
 * __useRegistrationChoicesQuery__
 *
 * To run a query within a React component, call `useRegistrationChoicesQuery` and pass it any options that fit your needs.
 * When your component renders, `useRegistrationChoicesQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useRegistrationChoicesQuery({
 *   variables: {
 *   },
 * });
 */
export function useRegistrationChoicesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<RegistrationChoicesQuery, RegistrationChoicesQueryVariables>) {
        return ApolloReactHooks.useQuery<RegistrationChoicesQuery, RegistrationChoicesQueryVariables>(RegistrationChoicesDocument, baseOptions);
      }
export function useRegistrationChoicesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<RegistrationChoicesQuery, RegistrationChoicesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<RegistrationChoicesQuery, RegistrationChoicesQueryVariables>(RegistrationChoicesDocument, baseOptions);
        }
export type RegistrationChoicesQueryHookResult = ReturnType<typeof useRegistrationChoicesQuery>;
export type RegistrationChoicesLazyQueryHookResult = ReturnType<typeof useRegistrationChoicesLazyQuery>;
export type RegistrationChoicesQueryResult = ApolloReactCommon.QueryResult<RegistrationChoicesQuery, RegistrationChoicesQueryVariables>;
export const RegistrationDataImportDocument = gql`
    query RegistrationDataImport($id: ID!) {
  registrationDataImport(id: $id) {
    ...registrationDetailed
  }
}
    ${RegistrationDetailedFragmentDoc}`;
export type RegistrationDataImportComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<RegistrationDataImportQuery, RegistrationDataImportQueryVariables>, 'query'> & ({ variables: RegistrationDataImportQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const RegistrationDataImportComponent = (props: RegistrationDataImportComponentProps) => (
      <ApolloReactComponents.Query<RegistrationDataImportQuery, RegistrationDataImportQueryVariables> query={RegistrationDataImportDocument} {...props} />
    );
    
export type RegistrationDataImportProps<TChildProps = {}> = ApolloReactHoc.DataProps<RegistrationDataImportQuery, RegistrationDataImportQueryVariables> & TChildProps;
export function withRegistrationDataImport<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  RegistrationDataImportQuery,
  RegistrationDataImportQueryVariables,
  RegistrationDataImportProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, RegistrationDataImportQuery, RegistrationDataImportQueryVariables, RegistrationDataImportProps<TChildProps>>(RegistrationDataImportDocument, {
      alias: 'registrationDataImport',
      ...operationOptions
    });
};

/**
 * __useRegistrationDataImportQuery__
 *
 * To run a query within a React component, call `useRegistrationDataImportQuery` and pass it any options that fit your needs.
 * When your component renders, `useRegistrationDataImportQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useRegistrationDataImportQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useRegistrationDataImportQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<RegistrationDataImportQuery, RegistrationDataImportQueryVariables>) {
        return ApolloReactHooks.useQuery<RegistrationDataImportQuery, RegistrationDataImportQueryVariables>(RegistrationDataImportDocument, baseOptions);
      }
export function useRegistrationDataImportLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<RegistrationDataImportQuery, RegistrationDataImportQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<RegistrationDataImportQuery, RegistrationDataImportQueryVariables>(RegistrationDataImportDocument, baseOptions);
        }
export type RegistrationDataImportQueryHookResult = ReturnType<typeof useRegistrationDataImportQuery>;
export type RegistrationDataImportLazyQueryHookResult = ReturnType<typeof useRegistrationDataImportLazyQuery>;
export type RegistrationDataImportQueryResult = ApolloReactCommon.QueryResult<RegistrationDataImportQuery, RegistrationDataImportQueryVariables>;
export const XlsxImportDataDocument = gql`
    query XlsxImportData($id: ID!) {
  importData(id: $id) {
    id
    status
    numberOfIndividuals
    numberOfHouseholds
    error
    xlsxValidationErrors {
      rowNumber
      header
      message
    }
  }
}
    `;
export type XlsxImportDataComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<XlsxImportDataQuery, XlsxImportDataQueryVariables>, 'query'> & ({ variables: XlsxImportDataQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const XlsxImportDataComponent = (props: XlsxImportDataComponentProps) => (
      <ApolloReactComponents.Query<XlsxImportDataQuery, XlsxImportDataQueryVariables> query={XlsxImportDataDocument} {...props} />
    );
    
export type XlsxImportDataProps<TChildProps = {}> = ApolloReactHoc.DataProps<XlsxImportDataQuery, XlsxImportDataQueryVariables> & TChildProps;
export function withXlsxImportData<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  XlsxImportDataQuery,
  XlsxImportDataQueryVariables,
  XlsxImportDataProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, XlsxImportDataQuery, XlsxImportDataQueryVariables, XlsxImportDataProps<TChildProps>>(XlsxImportDataDocument, {
      alias: 'xlsxImportData',
      ...operationOptions
    });
};

/**
 * __useXlsxImportDataQuery__
 *
 * To run a query within a React component, call `useXlsxImportDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useXlsxImportDataQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useXlsxImportDataQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useXlsxImportDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<XlsxImportDataQuery, XlsxImportDataQueryVariables>) {
        return ApolloReactHooks.useQuery<XlsxImportDataQuery, XlsxImportDataQueryVariables>(XlsxImportDataDocument, baseOptions);
      }
export function useXlsxImportDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<XlsxImportDataQuery, XlsxImportDataQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<XlsxImportDataQuery, XlsxImportDataQueryVariables>(XlsxImportDataDocument, baseOptions);
        }
export type XlsxImportDataQueryHookResult = ReturnType<typeof useXlsxImportDataQuery>;
export type XlsxImportDataLazyQueryHookResult = ReturnType<typeof useXlsxImportDataLazyQuery>;
export type XlsxImportDataQueryResult = ApolloReactCommon.QueryResult<XlsxImportDataQuery, XlsxImportDataQueryVariables>;
export const AllReportsDocument = gql`
    query AllReports($before: String, $after: String, $first: Int, $last: Int, $status: [String], $businessArea: String!, $createdFrom: DateTime, $createdTo: DateTime, $reportType: [String], $createdBy: ID, $orderBy: String) {
  allReports(before: $before, after: $after, first: $first, last: $last, status: $status, businessArea: $businessArea, createdFrom: $createdFrom, createdTo: $createdTo, reportType: $reportType, createdBy: $createdBy, orderBy: $orderBy) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      endCursor
      startCursor
    }
    totalCount
    edgeCount
    edges {
      cursor
      node {
        id
        reportType
        dateFrom
        dateTo
        status
        createdAt
        updatedAt
        createdBy {
          firstName
          lastName
        }
        fileUrl
        numberOfRecords
      }
    }
  }
}
    `;
export type AllReportsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllReportsQuery, AllReportsQueryVariables>, 'query'> & ({ variables: AllReportsQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const AllReportsComponent = (props: AllReportsComponentProps) => (
      <ApolloReactComponents.Query<AllReportsQuery, AllReportsQueryVariables> query={AllReportsDocument} {...props} />
    );
    
export type AllReportsProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllReportsQuery, AllReportsQueryVariables> & TChildProps;
export function withAllReports<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllReportsQuery,
  AllReportsQueryVariables,
  AllReportsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllReportsQuery, AllReportsQueryVariables, AllReportsProps<TChildProps>>(AllReportsDocument, {
      alias: 'allReports',
      ...operationOptions
    });
};

/**
 * __useAllReportsQuery__
 *
 * To run a query within a React component, call `useAllReportsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllReportsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllReportsQuery({
 *   variables: {
 *      before: // value for 'before'
 *      after: // value for 'after'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      status: // value for 'status'
 *      businessArea: // value for 'businessArea'
 *      createdFrom: // value for 'createdFrom'
 *      createdTo: // value for 'createdTo'
 *      reportType: // value for 'reportType'
 *      createdBy: // value for 'createdBy'
 *      orderBy: // value for 'orderBy'
 *   },
 * });
 */
export function useAllReportsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllReportsQuery, AllReportsQueryVariables>) {
        return ApolloReactHooks.useQuery<AllReportsQuery, AllReportsQueryVariables>(AllReportsDocument, baseOptions);
      }
export function useAllReportsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllReportsQuery, AllReportsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllReportsQuery, AllReportsQueryVariables>(AllReportsDocument, baseOptions);
        }
export type AllReportsQueryHookResult = ReturnType<typeof useAllReportsQuery>;
export type AllReportsLazyQueryHookResult = ReturnType<typeof useAllReportsLazyQuery>;
export type AllReportsQueryResult = ApolloReactCommon.QueryResult<AllReportsQuery, AllReportsQueryVariables>;
export const ReportDocument = gql`
    query Report($id: ID!) {
  report(id: $id) {
    id
    status
    reportType
    createdAt
    updatedAt
    dateFrom
    dateTo
    fileUrl
    numberOfRecords
    createdBy {
      firstName
      lastName
    }
    adminArea2 {
      edges {
        node {
          name
        }
      }
    }
    adminArea1 {
      edges {
        node {
          name
        }
      }
    }
    program {
      name
    }
  }
}
    `;
export type ReportComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<ReportQuery, ReportQueryVariables>, 'query'> & ({ variables: ReportQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const ReportComponent = (props: ReportComponentProps) => (
      <ApolloReactComponents.Query<ReportQuery, ReportQueryVariables> query={ReportDocument} {...props} />
    );
    
export type ReportProps<TChildProps = {}> = ApolloReactHoc.DataProps<ReportQuery, ReportQueryVariables> & TChildProps;
export function withReport<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ReportQuery,
  ReportQueryVariables,
  ReportProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, ReportQuery, ReportQueryVariables, ReportProps<TChildProps>>(ReportDocument, {
      alias: 'report',
      ...operationOptions
    });
};

/**
 * __useReportQuery__
 *
 * To run a query within a React component, call `useReportQuery` and pass it any options that fit your needs.
 * When your component renders, `useReportQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useReportQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useReportQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ReportQuery, ReportQueryVariables>) {
        return ApolloReactHooks.useQuery<ReportQuery, ReportQueryVariables>(ReportDocument, baseOptions);
      }
export function useReportLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ReportQuery, ReportQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<ReportQuery, ReportQueryVariables>(ReportDocument, baseOptions);
        }
export type ReportQueryHookResult = ReturnType<typeof useReportQuery>;
export type ReportLazyQueryHookResult = ReturnType<typeof useReportLazyQuery>;
export type ReportQueryResult = ApolloReactCommon.QueryResult<ReportQuery, ReportQueryVariables>;
export const ReportChoiceDataDocument = gql`
    query ReportChoiceData {
  reportStatusChoices {
    name
    value
  }
  reportTypesChoices {
    name
    value
  }
}
    `;
export type ReportChoiceDataComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<ReportChoiceDataQuery, ReportChoiceDataQueryVariables>, 'query'>;

    export const ReportChoiceDataComponent = (props: ReportChoiceDataComponentProps) => (
      <ApolloReactComponents.Query<ReportChoiceDataQuery, ReportChoiceDataQueryVariables> query={ReportChoiceDataDocument} {...props} />
    );
    
export type ReportChoiceDataProps<TChildProps = {}> = ApolloReactHoc.DataProps<ReportChoiceDataQuery, ReportChoiceDataQueryVariables> & TChildProps;
export function withReportChoiceData<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ReportChoiceDataQuery,
  ReportChoiceDataQueryVariables,
  ReportChoiceDataProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, ReportChoiceDataQuery, ReportChoiceDataQueryVariables, ReportChoiceDataProps<TChildProps>>(ReportChoiceDataDocument, {
      alias: 'reportChoiceData',
      ...operationOptions
    });
};

/**
 * __useReportChoiceDataQuery__
 *
 * To run a query within a React component, call `useReportChoiceDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useReportChoiceDataQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useReportChoiceDataQuery({
 *   variables: {
 *   },
 * });
 */
export function useReportChoiceDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ReportChoiceDataQuery, ReportChoiceDataQueryVariables>) {
        return ApolloReactHooks.useQuery<ReportChoiceDataQuery, ReportChoiceDataQueryVariables>(ReportChoiceDataDocument, baseOptions);
      }
export function useReportChoiceDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ReportChoiceDataQuery, ReportChoiceDataQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<ReportChoiceDataQuery, ReportChoiceDataQueryVariables>(ReportChoiceDataDocument, baseOptions);
        }
export type ReportChoiceDataQueryHookResult = ReturnType<typeof useReportChoiceDataQuery>;
export type ReportChoiceDataLazyQueryHookResult = ReturnType<typeof useReportChoiceDataLazyQuery>;
export type ReportChoiceDataQueryResult = ApolloReactCommon.QueryResult<ReportChoiceDataQuery, ReportChoiceDataQueryVariables>;
export const AllChartsDocument = gql`
    query AllCharts($businessAreaSlug: String!, $year: Int!, $program: String, $administrativeArea: String) {
  chartProgrammesBySector(businessAreaSlug: $businessAreaSlug, year: $year, program: $program, administrativeArea: $administrativeArea) {
    labels
    datasets {
      label
      data
    }
  }
  chartPaymentVerification(businessAreaSlug: $businessAreaSlug, year: $year, program: $program, administrativeArea: $administrativeArea) {
    datasets {
      label
      data
    }
    labels
    households
    averageSampleSize
  }
  chartVolumeByDeliveryMechanism(businessAreaSlug: $businessAreaSlug, year: $year, program: $program, administrativeArea: $administrativeArea) {
    datasets {
      data
    }
    labels
  }
  chartPayment(businessAreaSlug: $businessAreaSlug, year: $year, program: $program, administrativeArea: $administrativeArea) {
    datasets {
      data
    }
    labels
  }
  chartGrievances(businessAreaSlug: $businessAreaSlug, year: $year, administrativeArea: $administrativeArea) {
    datasets {
      data
    }
    labels
    totalNumberOfGrievances
    totalNumberOfFeedback
    totalNumberOfOpenSensitive
  }
  sectionHouseholdsReached(businessAreaSlug: $businessAreaSlug, year: $year, program: $program, administrativeArea: $administrativeArea) {
    total
  }
  sectionIndividualsReached(businessAreaSlug: $businessAreaSlug, year: $year, program: $program, administrativeArea: $administrativeArea) {
    total
  }
  sectionChildReached(businessAreaSlug: $businessAreaSlug, year: $year, program: $program, administrativeArea: $administrativeArea) {
    total
  }
  chartIndividualsReachedByAgeAndGender(businessAreaSlug: $businessAreaSlug, year: $year, program: $program, administrativeArea: $administrativeArea) {
    datasets {
      data
    }
    labels
  }
  chartIndividualsWithDisabilityReachedByAge(businessAreaSlug: $businessAreaSlug, year: $year, program: $program, administrativeArea: $administrativeArea) {
    datasets {
      data
      label
    }
    labels
  }
  sectionTotalTransferred(businessAreaSlug: $businessAreaSlug, year: $year, program: $program, administrativeArea: $administrativeArea) {
    total
  }
  chartTotalTransferredByMonth(businessAreaSlug: $businessAreaSlug, year: $year, program: $program, administrativeArea: $administrativeArea) {
    datasets {
      data
      label
    }
    labels
  }
}
    `;
export type AllChartsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllChartsQuery, AllChartsQueryVariables>, 'query'> & ({ variables: AllChartsQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const AllChartsComponent = (props: AllChartsComponentProps) => (
      <ApolloReactComponents.Query<AllChartsQuery, AllChartsQueryVariables> query={AllChartsDocument} {...props} />
    );
    
export type AllChartsProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllChartsQuery, AllChartsQueryVariables> & TChildProps;
export function withAllCharts<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllChartsQuery,
  AllChartsQueryVariables,
  AllChartsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllChartsQuery, AllChartsQueryVariables, AllChartsProps<TChildProps>>(AllChartsDocument, {
      alias: 'allCharts',
      ...operationOptions
    });
};

/**
 * __useAllChartsQuery__
 *
 * To run a query within a React component, call `useAllChartsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllChartsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllChartsQuery({
 *   variables: {
 *      businessAreaSlug: // value for 'businessAreaSlug'
 *      year: // value for 'year'
 *      program: // value for 'program'
 *      administrativeArea: // value for 'administrativeArea'
 *   },
 * });
 */
export function useAllChartsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllChartsQuery, AllChartsQueryVariables>) {
        return ApolloReactHooks.useQuery<AllChartsQuery, AllChartsQueryVariables>(AllChartsDocument, baseOptions);
      }
export function useAllChartsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllChartsQuery, AllChartsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllChartsQuery, AllChartsQueryVariables>(AllChartsDocument, baseOptions);
        }
export type AllChartsQueryHookResult = ReturnType<typeof useAllChartsQuery>;
export type AllChartsLazyQueryHookResult = ReturnType<typeof useAllChartsLazyQuery>;
export type AllChartsQueryResult = ApolloReactCommon.QueryResult<AllChartsQuery, AllChartsQueryVariables>;
export const CountryChartsDocument = gql`
    query CountryCharts($businessAreaSlug: String!, $year: Int!, $program: String, $administrativeArea: String, $order: String, $orderBy: String) {
  tableTotalCashTransferredByAdministrativeArea(businessAreaSlug: $businessAreaSlug, year: $year, program: $program, administrativeArea: $administrativeArea, order: $order, orderBy: $orderBy) {
    data {
      id
      admin2
      totalCashTransferred
      totalHouseholds
    }
  }
}
    `;
export type CountryChartsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<CountryChartsQuery, CountryChartsQueryVariables>, 'query'> & ({ variables: CountryChartsQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const CountryChartsComponent = (props: CountryChartsComponentProps) => (
      <ApolloReactComponents.Query<CountryChartsQuery, CountryChartsQueryVariables> query={CountryChartsDocument} {...props} />
    );
    
export type CountryChartsProps<TChildProps = {}> = ApolloReactHoc.DataProps<CountryChartsQuery, CountryChartsQueryVariables> & TChildProps;
export function withCountryCharts<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  CountryChartsQuery,
  CountryChartsQueryVariables,
  CountryChartsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, CountryChartsQuery, CountryChartsQueryVariables, CountryChartsProps<TChildProps>>(CountryChartsDocument, {
      alias: 'countryCharts',
      ...operationOptions
    });
};

/**
 * __useCountryChartsQuery__
 *
 * To run a query within a React component, call `useCountryChartsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCountryChartsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCountryChartsQuery({
 *   variables: {
 *      businessAreaSlug: // value for 'businessAreaSlug'
 *      year: // value for 'year'
 *      program: // value for 'program'
 *      administrativeArea: // value for 'administrativeArea'
 *      order: // value for 'order'
 *      orderBy: // value for 'orderBy'
 *   },
 * });
 */
export function useCountryChartsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CountryChartsQuery, CountryChartsQueryVariables>) {
        return ApolloReactHooks.useQuery<CountryChartsQuery, CountryChartsQueryVariables>(CountryChartsDocument, baseOptions);
      }
export function useCountryChartsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CountryChartsQuery, CountryChartsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<CountryChartsQuery, CountryChartsQueryVariables>(CountryChartsDocument, baseOptions);
        }
export type CountryChartsQueryHookResult = ReturnType<typeof useCountryChartsQuery>;
export type CountryChartsLazyQueryHookResult = ReturnType<typeof useCountryChartsLazyQuery>;
export type CountryChartsQueryResult = ApolloReactCommon.QueryResult<CountryChartsQuery, CountryChartsQueryVariables>;
export const DashboardReportChoiceDataDocument = gql`
    query DashboardReportChoiceData($businessArea: String!) {
  dashboardReportTypesChoices(businessAreaSlug: $businessArea) {
    name
    value
  }
}
    `;
export type DashboardReportChoiceDataComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<DashboardReportChoiceDataQuery, DashboardReportChoiceDataQueryVariables>, 'query'> & ({ variables: DashboardReportChoiceDataQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const DashboardReportChoiceDataComponent = (props: DashboardReportChoiceDataComponentProps) => (
      <ApolloReactComponents.Query<DashboardReportChoiceDataQuery, DashboardReportChoiceDataQueryVariables> query={DashboardReportChoiceDataDocument} {...props} />
    );
    
export type DashboardReportChoiceDataProps<TChildProps = {}> = ApolloReactHoc.DataProps<DashboardReportChoiceDataQuery, DashboardReportChoiceDataQueryVariables> & TChildProps;
export function withDashboardReportChoiceData<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  DashboardReportChoiceDataQuery,
  DashboardReportChoiceDataQueryVariables,
  DashboardReportChoiceDataProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, DashboardReportChoiceDataQuery, DashboardReportChoiceDataQueryVariables, DashboardReportChoiceDataProps<TChildProps>>(DashboardReportChoiceDataDocument, {
      alias: 'dashboardReportChoiceData',
      ...operationOptions
    });
};

/**
 * __useDashboardReportChoiceDataQuery__
 *
 * To run a query within a React component, call `useDashboardReportChoiceDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useDashboardReportChoiceDataQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useDashboardReportChoiceDataQuery({
 *   variables: {
 *      businessArea: // value for 'businessArea'
 *   },
 * });
 */
export function useDashboardReportChoiceDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<DashboardReportChoiceDataQuery, DashboardReportChoiceDataQueryVariables>) {
        return ApolloReactHooks.useQuery<DashboardReportChoiceDataQuery, DashboardReportChoiceDataQueryVariables>(DashboardReportChoiceDataDocument, baseOptions);
      }
export function useDashboardReportChoiceDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<DashboardReportChoiceDataQuery, DashboardReportChoiceDataQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<DashboardReportChoiceDataQuery, DashboardReportChoiceDataQueryVariables>(DashboardReportChoiceDataDocument, baseOptions);
        }
export type DashboardReportChoiceDataQueryHookResult = ReturnType<typeof useDashboardReportChoiceDataQuery>;
export type DashboardReportChoiceDataLazyQueryHookResult = ReturnType<typeof useDashboardReportChoiceDataLazyQuery>;
export type DashboardReportChoiceDataQueryResult = ApolloReactCommon.QueryResult<DashboardReportChoiceDataQuery, DashboardReportChoiceDataQueryVariables>;
export const DashboardYearsChoiceDataDocument = gql`
    query DashboardYearsChoiceData($businessArea: String!) {
  dashboardYearsChoices(businessAreaSlug: $businessArea)
}
    `;
export type DashboardYearsChoiceDataComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<DashboardYearsChoiceDataQuery, DashboardYearsChoiceDataQueryVariables>, 'query'> & ({ variables: DashboardYearsChoiceDataQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const DashboardYearsChoiceDataComponent = (props: DashboardYearsChoiceDataComponentProps) => (
      <ApolloReactComponents.Query<DashboardYearsChoiceDataQuery, DashboardYearsChoiceDataQueryVariables> query={DashboardYearsChoiceDataDocument} {...props} />
    );
    
export type DashboardYearsChoiceDataProps<TChildProps = {}> = ApolloReactHoc.DataProps<DashboardYearsChoiceDataQuery, DashboardYearsChoiceDataQueryVariables> & TChildProps;
export function withDashboardYearsChoiceData<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  DashboardYearsChoiceDataQuery,
  DashboardYearsChoiceDataQueryVariables,
  DashboardYearsChoiceDataProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, DashboardYearsChoiceDataQuery, DashboardYearsChoiceDataQueryVariables, DashboardYearsChoiceDataProps<TChildProps>>(DashboardYearsChoiceDataDocument, {
      alias: 'dashboardYearsChoiceData',
      ...operationOptions
    });
};

/**
 * __useDashboardYearsChoiceDataQuery__
 *
 * To run a query within a React component, call `useDashboardYearsChoiceDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useDashboardYearsChoiceDataQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useDashboardYearsChoiceDataQuery({
 *   variables: {
 *      businessArea: // value for 'businessArea'
 *   },
 * });
 */
export function useDashboardYearsChoiceDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<DashboardYearsChoiceDataQuery, DashboardYearsChoiceDataQueryVariables>) {
        return ApolloReactHooks.useQuery<DashboardYearsChoiceDataQuery, DashboardYearsChoiceDataQueryVariables>(DashboardYearsChoiceDataDocument, baseOptions);
      }
export function useDashboardYearsChoiceDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<DashboardYearsChoiceDataQuery, DashboardYearsChoiceDataQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<DashboardYearsChoiceDataQuery, DashboardYearsChoiceDataQueryVariables>(DashboardYearsChoiceDataDocument, baseOptions);
        }
export type DashboardYearsChoiceDataQueryHookResult = ReturnType<typeof useDashboardYearsChoiceDataQuery>;
export type DashboardYearsChoiceDataLazyQueryHookResult = ReturnType<typeof useDashboardYearsChoiceDataLazyQuery>;
export type DashboardYearsChoiceDataQueryResult = ApolloReactCommon.QueryResult<DashboardYearsChoiceDataQuery, DashboardYearsChoiceDataQueryVariables>;
export const GlobalAreaChartsDocument = gql`
    query GlobalAreaCharts($year: Int!) {
  chartTotalTransferredCashByCountry(year: $year) {
    datasets {
      data
      label
    }
    labels
  }
}
    `;
export type GlobalAreaChartsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GlobalAreaChartsQuery, GlobalAreaChartsQueryVariables>, 'query'> & ({ variables: GlobalAreaChartsQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const GlobalAreaChartsComponent = (props: GlobalAreaChartsComponentProps) => (
      <ApolloReactComponents.Query<GlobalAreaChartsQuery, GlobalAreaChartsQueryVariables> query={GlobalAreaChartsDocument} {...props} />
    );
    
export type GlobalAreaChartsProps<TChildProps = {}> = ApolloReactHoc.DataProps<GlobalAreaChartsQuery, GlobalAreaChartsQueryVariables> & TChildProps;
export function withGlobalAreaCharts<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GlobalAreaChartsQuery,
  GlobalAreaChartsQueryVariables,
  GlobalAreaChartsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, GlobalAreaChartsQuery, GlobalAreaChartsQueryVariables, GlobalAreaChartsProps<TChildProps>>(GlobalAreaChartsDocument, {
      alias: 'globalAreaCharts',
      ...operationOptions
    });
};

/**
 * __useGlobalAreaChartsQuery__
 *
 * To run a query within a React component, call `useGlobalAreaChartsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGlobalAreaChartsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGlobalAreaChartsQuery({
 *   variables: {
 *      year: // value for 'year'
 *   },
 * });
 */
export function useGlobalAreaChartsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GlobalAreaChartsQuery, GlobalAreaChartsQueryVariables>) {
        return ApolloReactHooks.useQuery<GlobalAreaChartsQuery, GlobalAreaChartsQueryVariables>(GlobalAreaChartsDocument, baseOptions);
      }
export function useGlobalAreaChartsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GlobalAreaChartsQuery, GlobalAreaChartsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GlobalAreaChartsQuery, GlobalAreaChartsQueryVariables>(GlobalAreaChartsDocument, baseOptions);
        }
export type GlobalAreaChartsQueryHookResult = ReturnType<typeof useGlobalAreaChartsQuery>;
export type GlobalAreaChartsLazyQueryHookResult = ReturnType<typeof useGlobalAreaChartsLazyQuery>;
export type GlobalAreaChartsQueryResult = ApolloReactCommon.QueryResult<GlobalAreaChartsQuery, GlobalAreaChartsQueryVariables>;
export const LanguageAutocompleteDocument = gql`
    query LanguageAutocomplete($first: Int, $code: String) {
  allLanguages(first: $first, code: $code) {
    edges {
      cursor
      node {
        english
        code
      }
    }
  }
}
    `;
export type LanguageAutocompleteComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<LanguageAutocompleteQuery, LanguageAutocompleteQueryVariables>, 'query'>;

    export const LanguageAutocompleteComponent = (props: LanguageAutocompleteComponentProps) => (
      <ApolloReactComponents.Query<LanguageAutocompleteQuery, LanguageAutocompleteQueryVariables> query={LanguageAutocompleteDocument} {...props} />
    );
    
export type LanguageAutocompleteProps<TChildProps = {}> = ApolloReactHoc.DataProps<LanguageAutocompleteQuery, LanguageAutocompleteQueryVariables> & TChildProps;
export function withLanguageAutocomplete<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  LanguageAutocompleteQuery,
  LanguageAutocompleteQueryVariables,
  LanguageAutocompleteProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, LanguageAutocompleteQuery, LanguageAutocompleteQueryVariables, LanguageAutocompleteProps<TChildProps>>(LanguageAutocompleteDocument, {
      alias: 'languageAutocomplete',
      ...operationOptions
    });
};

/**
 * __useLanguageAutocompleteQuery__
 *
 * To run a query within a React component, call `useLanguageAutocompleteQuery` and pass it any options that fit your needs.
 * When your component renders, `useLanguageAutocompleteQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useLanguageAutocompleteQuery({
 *   variables: {
 *      first: // value for 'first'
 *      code: // value for 'code'
 *   },
 * });
 */
export function useLanguageAutocompleteQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<LanguageAutocompleteQuery, LanguageAutocompleteQueryVariables>) {
        return ApolloReactHooks.useQuery<LanguageAutocompleteQuery, LanguageAutocompleteQueryVariables>(LanguageAutocompleteDocument, baseOptions);
      }
export function useLanguageAutocompleteLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<LanguageAutocompleteQuery, LanguageAutocompleteQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<LanguageAutocompleteQuery, LanguageAutocompleteQueryVariables>(LanguageAutocompleteDocument, baseOptions);
        }
export type LanguageAutocompleteQueryHookResult = ReturnType<typeof useLanguageAutocompleteQuery>;
export type LanguageAutocompleteLazyQueryHookResult = ReturnType<typeof useLanguageAutocompleteLazyQuery>;
export type LanguageAutocompleteQueryResult = ApolloReactCommon.QueryResult<LanguageAutocompleteQuery, LanguageAutocompleteQueryVariables>;
export const RdiAutocompleteDocument = gql`
    query RdiAutocomplete($businessArea: String, $first: Int, $orderBy: String, $name: String) {
  allRegistrationDataImports(businessArea: $businessArea, first: $first, orderBy: $orderBy, name_Startswith: $name) {
    edges {
      cursor
      node {
        id
        name
      }
    }
  }
}
    `;
export type RdiAutocompleteComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<RdiAutocompleteQuery, RdiAutocompleteQueryVariables>, 'query'>;

    export const RdiAutocompleteComponent = (props: RdiAutocompleteComponentProps) => (
      <ApolloReactComponents.Query<RdiAutocompleteQuery, RdiAutocompleteQueryVariables> query={RdiAutocompleteDocument} {...props} />
    );
    
export type RdiAutocompleteProps<TChildProps = {}> = ApolloReactHoc.DataProps<RdiAutocompleteQuery, RdiAutocompleteQueryVariables> & TChildProps;
export function withRdiAutocomplete<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  RdiAutocompleteQuery,
  RdiAutocompleteQueryVariables,
  RdiAutocompleteProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, RdiAutocompleteQuery, RdiAutocompleteQueryVariables, RdiAutocompleteProps<TChildProps>>(RdiAutocompleteDocument, {
      alias: 'rdiAutocomplete',
      ...operationOptions
    });
};

/**
 * __useRdiAutocompleteQuery__
 *
 * To run a query within a React component, call `useRdiAutocompleteQuery` and pass it any options that fit your needs.
 * When your component renders, `useRdiAutocompleteQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useRdiAutocompleteQuery({
 *   variables: {
 *      businessArea: // value for 'businessArea'
 *      first: // value for 'first'
 *      orderBy: // value for 'orderBy'
 *      name: // value for 'name'
 *   },
 * });
 */
export function useRdiAutocompleteQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<RdiAutocompleteQuery, RdiAutocompleteQueryVariables>) {
        return ApolloReactHooks.useQuery<RdiAutocompleteQuery, RdiAutocompleteQueryVariables>(RdiAutocompleteDocument, baseOptions);
      }
export function useRdiAutocompleteLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<RdiAutocompleteQuery, RdiAutocompleteQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<RdiAutocompleteQuery, RdiAutocompleteQueryVariables>(RdiAutocompleteDocument, baseOptions);
        }
export type RdiAutocompleteQueryHookResult = ReturnType<typeof useRdiAutocompleteQuery>;
export type RdiAutocompleteLazyQueryHookResult = ReturnType<typeof useRdiAutocompleteLazyQuery>;
export type RdiAutocompleteQueryResult = ApolloReactCommon.QueryResult<RdiAutocompleteQuery, RdiAutocompleteQueryVariables>;
export const AllSurveysDocument = gql`
    query AllSurveys($offset: Int, $before: String, $after: String, $first: Int, $last: Int, $program: ID!, $targetPopulation: ID, $createdAtRange: String, $createdBy: ID, $search: String, $orderBy: String) {
  allSurveys(offset: $offset, before: $before, after: $after, first: $first, last: $last, program: $program, targetPopulation: $targetPopulation, createdAtRange: $createdAtRange, createdBy: $createdBy, search: $search, orderBy: $orderBy) {
    totalCount
    pageInfo {
      startCursor
      endCursor
    }
    edges {
      cursor
      node {
        id
        unicefId
        title
        category
        numberOfRecipients
        createdBy {
          id
          firstName
          lastName
          email
        }
        createdAt
      }
    }
  }
}
    `;
export type AllSurveysComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllSurveysQuery, AllSurveysQueryVariables>, 'query'> & ({ variables: AllSurveysQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const AllSurveysComponent = (props: AllSurveysComponentProps) => (
      <ApolloReactComponents.Query<AllSurveysQuery, AllSurveysQueryVariables> query={AllSurveysDocument} {...props} />
    );
    
export type AllSurveysProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllSurveysQuery, AllSurveysQueryVariables> & TChildProps;
export function withAllSurveys<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllSurveysQuery,
  AllSurveysQueryVariables,
  AllSurveysProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllSurveysQuery, AllSurveysQueryVariables, AllSurveysProps<TChildProps>>(AllSurveysDocument, {
      alias: 'allSurveys',
      ...operationOptions
    });
};

/**
 * __useAllSurveysQuery__
 *
 * To run a query within a React component, call `useAllSurveysQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllSurveysQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllSurveysQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      before: // value for 'before'
 *      after: // value for 'after'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      program: // value for 'program'
 *      targetPopulation: // value for 'targetPopulation'
 *      createdAtRange: // value for 'createdAtRange'
 *      createdBy: // value for 'createdBy'
 *      search: // value for 'search'
 *      orderBy: // value for 'orderBy'
 *   },
 * });
 */
export function useAllSurveysQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllSurveysQuery, AllSurveysQueryVariables>) {
        return ApolloReactHooks.useQuery<AllSurveysQuery, AllSurveysQueryVariables>(AllSurveysDocument, baseOptions);
      }
export function useAllSurveysLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllSurveysQuery, AllSurveysQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllSurveysQuery, AllSurveysQueryVariables>(AllSurveysDocument, baseOptions);
        }
export type AllSurveysQueryHookResult = ReturnType<typeof useAllSurveysQuery>;
export type AllSurveysLazyQueryHookResult = ReturnType<typeof useAllSurveysLazyQuery>;
export type AllSurveysQueryResult = ApolloReactCommon.QueryResult<AllSurveysQuery, AllSurveysQueryVariables>;
export const SurveyAvailableFlowsDocument = gql`
    query SurveyAvailableFlows {
  surveyAvailableFlows {
    id
    name
  }
}
    `;
export type SurveyAvailableFlowsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<SurveyAvailableFlowsQuery, SurveyAvailableFlowsQueryVariables>, 'query'>;

    export const SurveyAvailableFlowsComponent = (props: SurveyAvailableFlowsComponentProps) => (
      <ApolloReactComponents.Query<SurveyAvailableFlowsQuery, SurveyAvailableFlowsQueryVariables> query={SurveyAvailableFlowsDocument} {...props} />
    );
    
export type SurveyAvailableFlowsProps<TChildProps = {}> = ApolloReactHoc.DataProps<SurveyAvailableFlowsQuery, SurveyAvailableFlowsQueryVariables> & TChildProps;
export function withSurveyAvailableFlows<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  SurveyAvailableFlowsQuery,
  SurveyAvailableFlowsQueryVariables,
  SurveyAvailableFlowsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, SurveyAvailableFlowsQuery, SurveyAvailableFlowsQueryVariables, SurveyAvailableFlowsProps<TChildProps>>(SurveyAvailableFlowsDocument, {
      alias: 'surveyAvailableFlows',
      ...operationOptions
    });
};

/**
 * __useSurveyAvailableFlowsQuery__
 *
 * To run a query within a React component, call `useSurveyAvailableFlowsQuery` and pass it any options that fit your needs.
 * When your component renders, `useSurveyAvailableFlowsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSurveyAvailableFlowsQuery({
 *   variables: {
 *   },
 * });
 */
export function useSurveyAvailableFlowsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SurveyAvailableFlowsQuery, SurveyAvailableFlowsQueryVariables>) {
        return ApolloReactHooks.useQuery<SurveyAvailableFlowsQuery, SurveyAvailableFlowsQueryVariables>(SurveyAvailableFlowsDocument, baseOptions);
      }
export function useSurveyAvailableFlowsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SurveyAvailableFlowsQuery, SurveyAvailableFlowsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<SurveyAvailableFlowsQuery, SurveyAvailableFlowsQueryVariables>(SurveyAvailableFlowsDocument, baseOptions);
        }
export type SurveyAvailableFlowsQueryHookResult = ReturnType<typeof useSurveyAvailableFlowsQuery>;
export type SurveyAvailableFlowsLazyQueryHookResult = ReturnType<typeof useSurveyAvailableFlowsLazyQuery>;
export type SurveyAvailableFlowsQueryResult = ApolloReactCommon.QueryResult<SurveyAvailableFlowsQuery, SurveyAvailableFlowsQueryVariables>;
export const RecipientsDocument = gql`
    query Recipients($offset: Int, $before: String, $after: String, $first: Int, $last: Int, $survey: String!, $orderBy: String) {
  recipients(offset: $offset, before: $before, after: $after, first: $first, last: $last, survey: $survey, orderBy: $orderBy) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    totalCount
    edgeCount
    edges {
      cursor
      node {
        id
        headOfHousehold {
          id
          fullName
          household {
            id
            unicefId
            size
            status
            admin2 {
              id
              name
            }
            residenceStatus
            lastRegistrationDate
          }
        }
      }
    }
  }
}
    `;
export type RecipientsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<RecipientsQuery, RecipientsQueryVariables>, 'query'> & ({ variables: RecipientsQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const RecipientsComponent = (props: RecipientsComponentProps) => (
      <ApolloReactComponents.Query<RecipientsQuery, RecipientsQueryVariables> query={RecipientsDocument} {...props} />
    );
    
export type RecipientsProps<TChildProps = {}> = ApolloReactHoc.DataProps<RecipientsQuery, RecipientsQueryVariables> & TChildProps;
export function withRecipients<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  RecipientsQuery,
  RecipientsQueryVariables,
  RecipientsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, RecipientsQuery, RecipientsQueryVariables, RecipientsProps<TChildProps>>(RecipientsDocument, {
      alias: 'recipients',
      ...operationOptions
    });
};

/**
 * __useRecipientsQuery__
 *
 * To run a query within a React component, call `useRecipientsQuery` and pass it any options that fit your needs.
 * When your component renders, `useRecipientsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useRecipientsQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      before: // value for 'before'
 *      after: // value for 'after'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      survey: // value for 'survey'
 *      orderBy: // value for 'orderBy'
 *   },
 * });
 */
export function useRecipientsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<RecipientsQuery, RecipientsQueryVariables>) {
        return ApolloReactHooks.useQuery<RecipientsQuery, RecipientsQueryVariables>(RecipientsDocument, baseOptions);
      }
export function useRecipientsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<RecipientsQuery, RecipientsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<RecipientsQuery, RecipientsQueryVariables>(RecipientsDocument, baseOptions);
        }
export type RecipientsQueryHookResult = ReturnType<typeof useRecipientsQuery>;
export type RecipientsLazyQueryHookResult = ReturnType<typeof useRecipientsLazyQuery>;
export type RecipientsQueryResult = ApolloReactCommon.QueryResult<RecipientsQuery, RecipientsQueryVariables>;
export const SurveyDocument = gql`
    query Survey($id: ID!) {
  survey(id: $id) {
    id
    unicefId
    category
    title
    createdBy {
      id
      firstName
      lastName
      username
      email
    }
    createdAt
    targetPopulation {
      id
      name
    }
    program {
      id
      name
    }
    body
    title
    rapidProUrl
    sampleFilePath
    hasValidSampleFile
  }
}
    `;
export type SurveyComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<SurveyQuery, SurveyQueryVariables>, 'query'> & ({ variables: SurveyQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const SurveyComponent = (props: SurveyComponentProps) => (
      <ApolloReactComponents.Query<SurveyQuery, SurveyQueryVariables> query={SurveyDocument} {...props} />
    );
    
export type SurveyProps<TChildProps = {}> = ApolloReactHoc.DataProps<SurveyQuery, SurveyQueryVariables> & TChildProps;
export function withSurvey<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  SurveyQuery,
  SurveyQueryVariables,
  SurveyProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, SurveyQuery, SurveyQueryVariables, SurveyProps<TChildProps>>(SurveyDocument, {
      alias: 'survey',
      ...operationOptions
    });
};

/**
 * __useSurveyQuery__
 *
 * To run a query within a React component, call `useSurveyQuery` and pass it any options that fit your needs.
 * When your component renders, `useSurveyQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSurveyQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useSurveyQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SurveyQuery, SurveyQueryVariables>) {
        return ApolloReactHooks.useQuery<SurveyQuery, SurveyQueryVariables>(SurveyDocument, baseOptions);
      }
export function useSurveyLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SurveyQuery, SurveyQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<SurveyQuery, SurveyQueryVariables>(SurveyDocument, baseOptions);
        }
export type SurveyQueryHookResult = ReturnType<typeof useSurveyQuery>;
export type SurveyLazyQueryHookResult = ReturnType<typeof useSurveyLazyQuery>;
export type SurveyQueryResult = ApolloReactCommon.QueryResult<SurveyQuery, SurveyQueryVariables>;
export const SurveysChoiceDataDocument = gql`
    query SurveysChoiceData {
  surveyCategoryChoices {
    name
    value
  }
}
    `;
export type SurveysChoiceDataComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<SurveysChoiceDataQuery, SurveysChoiceDataQueryVariables>, 'query'>;

    export const SurveysChoiceDataComponent = (props: SurveysChoiceDataComponentProps) => (
      <ApolloReactComponents.Query<SurveysChoiceDataQuery, SurveysChoiceDataQueryVariables> query={SurveysChoiceDataDocument} {...props} />
    );
    
export type SurveysChoiceDataProps<TChildProps = {}> = ApolloReactHoc.DataProps<SurveysChoiceDataQuery, SurveysChoiceDataQueryVariables> & TChildProps;
export function withSurveysChoiceData<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  SurveysChoiceDataQuery,
  SurveysChoiceDataQueryVariables,
  SurveysChoiceDataProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, SurveysChoiceDataQuery, SurveysChoiceDataQueryVariables, SurveysChoiceDataProps<TChildProps>>(SurveysChoiceDataDocument, {
      alias: 'surveysChoiceData',
      ...operationOptions
    });
};

/**
 * __useSurveysChoiceDataQuery__
 *
 * To run a query within a React component, call `useSurveysChoiceDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useSurveysChoiceDataQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSurveysChoiceDataQuery({
 *   variables: {
 *   },
 * });
 */
export function useSurveysChoiceDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SurveysChoiceDataQuery, SurveysChoiceDataQueryVariables>) {
        return ApolloReactHooks.useQuery<SurveysChoiceDataQuery, SurveysChoiceDataQueryVariables>(SurveysChoiceDataDocument, baseOptions);
      }
export function useSurveysChoiceDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SurveysChoiceDataQuery, SurveysChoiceDataQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<SurveysChoiceDataQuery, SurveysChoiceDataQueryVariables>(SurveysChoiceDataDocument, baseOptions);
        }
export type SurveysChoiceDataQueryHookResult = ReturnType<typeof useSurveysChoiceDataQuery>;
export type SurveysChoiceDataLazyQueryHookResult = ReturnType<typeof useSurveysChoiceDataLazyQuery>;
export type SurveysChoiceDataQueryResult = ApolloReactCommon.QueryResult<SurveysChoiceDataQuery, SurveysChoiceDataQueryVariables>;
export const AllActiveTargetPopulationsDocument = gql`
    query AllActiveTargetPopulations($after: String, $before: String, $first: Int, $last: Int, $orderBy: String, $name: String, $status: String, $numberOfHouseholdsMin: Int, $numberOfHouseholdsMax: Int, $businessArea: String, $program: ID, $createdAtRange: String) {
  allActiveTargetPopulations(after: $after, before: $before, first: $first, last: $last, orderBy: $orderBy, name: $name, status: $status, totalHouseholdsCountMin: $numberOfHouseholdsMin, totalHouseholdsCountMax: $numberOfHouseholdsMax, businessArea: $businessArea, program: $program, createdAtRange: $createdAtRange) {
    edges {
      node {
        id
        name
        status
        program {
          id
          name
        }
        totalHouseholdsCount
        createdAt
        updatedAt
        createdBy {
          id
          email
          firstName
          lastName
        }
      }
      cursor
    }
    totalCount
    edgeCount
  }
}
    `;
export type AllActiveTargetPopulationsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllActiveTargetPopulationsQuery, AllActiveTargetPopulationsQueryVariables>, 'query'>;

    export const AllActiveTargetPopulationsComponent = (props: AllActiveTargetPopulationsComponentProps) => (
      <ApolloReactComponents.Query<AllActiveTargetPopulationsQuery, AllActiveTargetPopulationsQueryVariables> query={AllActiveTargetPopulationsDocument} {...props} />
    );
    
export type AllActiveTargetPopulationsProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllActiveTargetPopulationsQuery, AllActiveTargetPopulationsQueryVariables> & TChildProps;
export function withAllActiveTargetPopulations<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllActiveTargetPopulationsQuery,
  AllActiveTargetPopulationsQueryVariables,
  AllActiveTargetPopulationsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllActiveTargetPopulationsQuery, AllActiveTargetPopulationsQueryVariables, AllActiveTargetPopulationsProps<TChildProps>>(AllActiveTargetPopulationsDocument, {
      alias: 'allActiveTargetPopulations',
      ...operationOptions
    });
};

/**
 * __useAllActiveTargetPopulationsQuery__
 *
 * To run a query within a React component, call `useAllActiveTargetPopulationsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllActiveTargetPopulationsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllActiveTargetPopulationsQuery({
 *   variables: {
 *      after: // value for 'after'
 *      before: // value for 'before'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      orderBy: // value for 'orderBy'
 *      name: // value for 'name'
 *      status: // value for 'status'
 *      numberOfHouseholdsMin: // value for 'numberOfHouseholdsMin'
 *      numberOfHouseholdsMax: // value for 'numberOfHouseholdsMax'
 *      businessArea: // value for 'businessArea'
 *      program: // value for 'program'
 *      createdAtRange: // value for 'createdAtRange'
 *   },
 * });
 */
export function useAllActiveTargetPopulationsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllActiveTargetPopulationsQuery, AllActiveTargetPopulationsQueryVariables>) {
        return ApolloReactHooks.useQuery<AllActiveTargetPopulationsQuery, AllActiveTargetPopulationsQueryVariables>(AllActiveTargetPopulationsDocument, baseOptions);
      }
export function useAllActiveTargetPopulationsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllActiveTargetPopulationsQuery, AllActiveTargetPopulationsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllActiveTargetPopulationsQuery, AllActiveTargetPopulationsQueryVariables>(AllActiveTargetPopulationsDocument, baseOptions);
        }
export type AllActiveTargetPopulationsQueryHookResult = ReturnType<typeof useAllActiveTargetPopulationsQuery>;
export type AllActiveTargetPopulationsLazyQueryHookResult = ReturnType<typeof useAllActiveTargetPopulationsLazyQuery>;
export type AllActiveTargetPopulationsQueryResult = ApolloReactCommon.QueryResult<AllActiveTargetPopulationsQuery, AllActiveTargetPopulationsQueryVariables>;
export const AllFieldsAttributesDocument = gql`
    query AllFieldsAttributes {
  allFieldsAttributes {
    id
    name
    labelEn
    associatedWith
    isFlexField
  }
}
    `;
export type AllFieldsAttributesComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllFieldsAttributesQuery, AllFieldsAttributesQueryVariables>, 'query'>;

    export const AllFieldsAttributesComponent = (props: AllFieldsAttributesComponentProps) => (
      <ApolloReactComponents.Query<AllFieldsAttributesQuery, AllFieldsAttributesQueryVariables> query={AllFieldsAttributesDocument} {...props} />
    );
    
export type AllFieldsAttributesProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllFieldsAttributesQuery, AllFieldsAttributesQueryVariables> & TChildProps;
export function withAllFieldsAttributes<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllFieldsAttributesQuery,
  AllFieldsAttributesQueryVariables,
  AllFieldsAttributesProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllFieldsAttributesQuery, AllFieldsAttributesQueryVariables, AllFieldsAttributesProps<TChildProps>>(AllFieldsAttributesDocument, {
      alias: 'allFieldsAttributes',
      ...operationOptions
    });
};

/**
 * __useAllFieldsAttributesQuery__
 *
 * To run a query within a React component, call `useAllFieldsAttributesQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllFieldsAttributesQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllFieldsAttributesQuery({
 *   variables: {
 *   },
 * });
 */
export function useAllFieldsAttributesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllFieldsAttributesQuery, AllFieldsAttributesQueryVariables>) {
        return ApolloReactHooks.useQuery<AllFieldsAttributesQuery, AllFieldsAttributesQueryVariables>(AllFieldsAttributesDocument, baseOptions);
      }
export function useAllFieldsAttributesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllFieldsAttributesQuery, AllFieldsAttributesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllFieldsAttributesQuery, AllFieldsAttributesQueryVariables>(AllFieldsAttributesDocument, baseOptions);
        }
export type AllFieldsAttributesQueryHookResult = ReturnType<typeof useAllFieldsAttributesQuery>;
export type AllFieldsAttributesLazyQueryHookResult = ReturnType<typeof useAllFieldsAttributesLazyQuery>;
export type AllFieldsAttributesQueryResult = ApolloReactCommon.QueryResult<AllFieldsAttributesQuery, AllFieldsAttributesQueryVariables>;
export const AllSteficonRulesDocument = gql`
    query AllSteficonRules($enabled: Boolean, $deprecated: Boolean, $type: String!) {
  allSteficonRules(enabled: $enabled, deprecated: $deprecated, type: $type) {
    edges {
      node {
        id
        name
      }
    }
  }
}
    `;
export type AllSteficonRulesComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllSteficonRulesQuery, AllSteficonRulesQueryVariables>, 'query'> & ({ variables: AllSteficonRulesQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const AllSteficonRulesComponent = (props: AllSteficonRulesComponentProps) => (
      <ApolloReactComponents.Query<AllSteficonRulesQuery, AllSteficonRulesQueryVariables> query={AllSteficonRulesDocument} {...props} />
    );
    
export type AllSteficonRulesProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllSteficonRulesQuery, AllSteficonRulesQueryVariables> & TChildProps;
export function withAllSteficonRules<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllSteficonRulesQuery,
  AllSteficonRulesQueryVariables,
  AllSteficonRulesProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllSteficonRulesQuery, AllSteficonRulesQueryVariables, AllSteficonRulesProps<TChildProps>>(AllSteficonRulesDocument, {
      alias: 'allSteficonRules',
      ...operationOptions
    });
};

/**
 * __useAllSteficonRulesQuery__
 *
 * To run a query within a React component, call `useAllSteficonRulesQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllSteficonRulesQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllSteficonRulesQuery({
 *   variables: {
 *      enabled: // value for 'enabled'
 *      deprecated: // value for 'deprecated'
 *      type: // value for 'type'
 *   },
 * });
 */
export function useAllSteficonRulesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllSteficonRulesQuery, AllSteficonRulesQueryVariables>) {
        return ApolloReactHooks.useQuery<AllSteficonRulesQuery, AllSteficonRulesQueryVariables>(AllSteficonRulesDocument, baseOptions);
      }
export function useAllSteficonRulesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllSteficonRulesQuery, AllSteficonRulesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllSteficonRulesQuery, AllSteficonRulesQueryVariables>(AllSteficonRulesDocument, baseOptions);
        }
export type AllSteficonRulesQueryHookResult = ReturnType<typeof useAllSteficonRulesQuery>;
export type AllSteficonRulesLazyQueryHookResult = ReturnType<typeof useAllSteficonRulesLazyQuery>;
export type AllSteficonRulesQueryResult = ApolloReactCommon.QueryResult<AllSteficonRulesQuery, AllSteficonRulesQueryVariables>;
export const AllTargetPopulationForChoicesDocument = gql`
    query AllTargetPopulationForChoices($after: String, $before: String, $first: Int, $last: Int, $orderBy: String, $name: String, $status: String, $numberOfHouseholdsMin: Int, $numberOfHouseholdsMax: Int, $businessArea: String, $program: ID) {
  allTargetPopulation(after: $after, before: $before, first: $first, last: $last, orderBy: $orderBy, name: $name, status: $status, totalHouseholdsCountMin: $numberOfHouseholdsMin, totalHouseholdsCountMax: $numberOfHouseholdsMax, businessArea: $businessArea, program: $program) {
    edges {
      node {
        id
        name
      }
      cursor
    }
    totalCount
    edgeCount
  }
}
    `;
export type AllTargetPopulationForChoicesComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllTargetPopulationForChoicesQuery, AllTargetPopulationForChoicesQueryVariables>, 'query'>;

    export const AllTargetPopulationForChoicesComponent = (props: AllTargetPopulationForChoicesComponentProps) => (
      <ApolloReactComponents.Query<AllTargetPopulationForChoicesQuery, AllTargetPopulationForChoicesQueryVariables> query={AllTargetPopulationForChoicesDocument} {...props} />
    );
    
export type AllTargetPopulationForChoicesProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllTargetPopulationForChoicesQuery, AllTargetPopulationForChoicesQueryVariables> & TChildProps;
export function withAllTargetPopulationForChoices<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllTargetPopulationForChoicesQuery,
  AllTargetPopulationForChoicesQueryVariables,
  AllTargetPopulationForChoicesProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllTargetPopulationForChoicesQuery, AllTargetPopulationForChoicesQueryVariables, AllTargetPopulationForChoicesProps<TChildProps>>(AllTargetPopulationForChoicesDocument, {
      alias: 'allTargetPopulationForChoices',
      ...operationOptions
    });
};

/**
 * __useAllTargetPopulationForChoicesQuery__
 *
 * To run a query within a React component, call `useAllTargetPopulationForChoicesQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllTargetPopulationForChoicesQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllTargetPopulationForChoicesQuery({
 *   variables: {
 *      after: // value for 'after'
 *      before: // value for 'before'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      orderBy: // value for 'orderBy'
 *      name: // value for 'name'
 *      status: // value for 'status'
 *      numberOfHouseholdsMin: // value for 'numberOfHouseholdsMin'
 *      numberOfHouseholdsMax: // value for 'numberOfHouseholdsMax'
 *      businessArea: // value for 'businessArea'
 *      program: // value for 'program'
 *   },
 * });
 */
export function useAllTargetPopulationForChoicesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllTargetPopulationForChoicesQuery, AllTargetPopulationForChoicesQueryVariables>) {
        return ApolloReactHooks.useQuery<AllTargetPopulationForChoicesQuery, AllTargetPopulationForChoicesQueryVariables>(AllTargetPopulationForChoicesDocument, baseOptions);
      }
export function useAllTargetPopulationForChoicesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllTargetPopulationForChoicesQuery, AllTargetPopulationForChoicesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllTargetPopulationForChoicesQuery, AllTargetPopulationForChoicesQueryVariables>(AllTargetPopulationForChoicesDocument, baseOptions);
        }
export type AllTargetPopulationForChoicesQueryHookResult = ReturnType<typeof useAllTargetPopulationForChoicesQuery>;
export type AllTargetPopulationForChoicesLazyQueryHookResult = ReturnType<typeof useAllTargetPopulationForChoicesLazyQuery>;
export type AllTargetPopulationForChoicesQueryResult = ApolloReactCommon.QueryResult<AllTargetPopulationForChoicesQuery, AllTargetPopulationForChoicesQueryVariables>;
export const AllTargetPopulationsDocument = gql`
    query AllTargetPopulations($after: String, $before: String, $first: Int, $last: Int, $orderBy: String, $name: String, $status: String, $numberOfHouseholdsMin: Int, $numberOfHouseholdsMax: Int, $businessArea: String, $program: ID, $createdAtRange: String, $paymentPlanApplicable: Boolean) {
  allTargetPopulation(after: $after, before: $before, first: $first, last: $last, orderBy: $orderBy, name: $name, status: $status, totalHouseholdsCountMin: $numberOfHouseholdsMin, totalHouseholdsCountMax: $numberOfHouseholdsMax, businessArea: $businessArea, program: $program, createdAtRange: $createdAtRange, paymentPlanApplicable: $paymentPlanApplicable) {
    edges {
      node {
        ...targetPopulationMinimal
      }
      cursor
    }
    totalCount
    edgeCount
  }
}
    ${TargetPopulationMinimalFragmentDoc}`;
export type AllTargetPopulationsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllTargetPopulationsQuery, AllTargetPopulationsQueryVariables>, 'query'>;

    export const AllTargetPopulationsComponent = (props: AllTargetPopulationsComponentProps) => (
      <ApolloReactComponents.Query<AllTargetPopulationsQuery, AllTargetPopulationsQueryVariables> query={AllTargetPopulationsDocument} {...props} />
    );
    
export type AllTargetPopulationsProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllTargetPopulationsQuery, AllTargetPopulationsQueryVariables> & TChildProps;
export function withAllTargetPopulations<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AllTargetPopulationsQuery,
  AllTargetPopulationsQueryVariables,
  AllTargetPopulationsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, AllTargetPopulationsQuery, AllTargetPopulationsQueryVariables, AllTargetPopulationsProps<TChildProps>>(AllTargetPopulationsDocument, {
      alias: 'allTargetPopulations',
      ...operationOptions
    });
};

/**
 * __useAllTargetPopulationsQuery__
 *
 * To run a query within a React component, call `useAllTargetPopulationsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllTargetPopulationsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllTargetPopulationsQuery({
 *   variables: {
 *      after: // value for 'after'
 *      before: // value for 'before'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      orderBy: // value for 'orderBy'
 *      name: // value for 'name'
 *      status: // value for 'status'
 *      numberOfHouseholdsMin: // value for 'numberOfHouseholdsMin'
 *      numberOfHouseholdsMax: // value for 'numberOfHouseholdsMax'
 *      businessArea: // value for 'businessArea'
 *      program: // value for 'program'
 *      createdAtRange: // value for 'createdAtRange'
 *      paymentPlanApplicable: // value for 'paymentPlanApplicable'
 *   },
 * });
 */
export function useAllTargetPopulationsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllTargetPopulationsQuery, AllTargetPopulationsQueryVariables>) {
        return ApolloReactHooks.useQuery<AllTargetPopulationsQuery, AllTargetPopulationsQueryVariables>(AllTargetPopulationsDocument, baseOptions);
      }
export function useAllTargetPopulationsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllTargetPopulationsQuery, AllTargetPopulationsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AllTargetPopulationsQuery, AllTargetPopulationsQueryVariables>(AllTargetPopulationsDocument, baseOptions);
        }
export type AllTargetPopulationsQueryHookResult = ReturnType<typeof useAllTargetPopulationsQuery>;
export type AllTargetPopulationsLazyQueryHookResult = ReturnType<typeof useAllTargetPopulationsLazyQuery>;
export type AllTargetPopulationsQueryResult = ApolloReactCommon.QueryResult<AllTargetPopulationsQuery, AllTargetPopulationsQueryVariables>;
export const TargetPopulationDocument = gql`
    query targetPopulation($id: ID!) {
  targetPopulation(id: $id) {
    ...targetPopulationDetailed
  }
}
    ${TargetPopulationDetailedFragmentDoc}`;
export type TargetPopulationComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<TargetPopulationQuery, TargetPopulationQueryVariables>, 'query'> & ({ variables: TargetPopulationQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const TargetPopulationComponent = (props: TargetPopulationComponentProps) => (
      <ApolloReactComponents.Query<TargetPopulationQuery, TargetPopulationQueryVariables> query={TargetPopulationDocument} {...props} />
    );
    
export type TargetPopulationProps<TChildProps = {}> = ApolloReactHoc.DataProps<TargetPopulationQuery, TargetPopulationQueryVariables> & TChildProps;
export function withTargetPopulation<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  TargetPopulationQuery,
  TargetPopulationQueryVariables,
  TargetPopulationProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, TargetPopulationQuery, TargetPopulationQueryVariables, TargetPopulationProps<TChildProps>>(TargetPopulationDocument, {
      alias: 'targetPopulation',
      ...operationOptions
    });
};

/**
 * __useTargetPopulationQuery__
 *
 * To run a query within a React component, call `useTargetPopulationQuery` and pass it any options that fit your needs.
 * When your component renders, `useTargetPopulationQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTargetPopulationQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useTargetPopulationQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<TargetPopulationQuery, TargetPopulationQueryVariables>) {
        return ApolloReactHooks.useQuery<TargetPopulationQuery, TargetPopulationQueryVariables>(TargetPopulationDocument, baseOptions);
      }
export function useTargetPopulationLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<TargetPopulationQuery, TargetPopulationQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<TargetPopulationQuery, TargetPopulationQueryVariables>(TargetPopulationDocument, baseOptions);
        }
export type TargetPopulationQueryHookResult = ReturnType<typeof useTargetPopulationQuery>;
export type TargetPopulationLazyQueryHookResult = ReturnType<typeof useTargetPopulationLazyQuery>;
export type TargetPopulationQueryResult = ApolloReactCommon.QueryResult<TargetPopulationQuery, TargetPopulationQueryVariables>;
export const TargetPopulationHouseholdsDocument = gql`
    query TargetPopulationHouseholds($targetPopulation: ID!, $first: Int, $after: String, $before: String, $last: Int, $orderBy: String, $businessArea: String) {
  targetPopulationHouseholds(targetPopulation: $targetPopulation, after: $after, before: $before, first: $first, last: $last, orderBy: $orderBy, businessArea: $businessArea) {
    edges {
      node {
        id
        unicefId
        headOfHousehold {
          id
          givenName
          familyName
          fullName
        }
        size
        adminArea {
          id
          name
        }
        updatedAt
        address
        selection {
          vulnerabilityScore
        }
      }
      cursor
    }
    totalCount
    edgeCount
  }
}
    `;
export type TargetPopulationHouseholdsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<TargetPopulationHouseholdsQuery, TargetPopulationHouseholdsQueryVariables>, 'query'> & ({ variables: TargetPopulationHouseholdsQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const TargetPopulationHouseholdsComponent = (props: TargetPopulationHouseholdsComponentProps) => (
      <ApolloReactComponents.Query<TargetPopulationHouseholdsQuery, TargetPopulationHouseholdsQueryVariables> query={TargetPopulationHouseholdsDocument} {...props} />
    );
    
export type TargetPopulationHouseholdsProps<TChildProps = {}> = ApolloReactHoc.DataProps<TargetPopulationHouseholdsQuery, TargetPopulationHouseholdsQueryVariables> & TChildProps;
export function withTargetPopulationHouseholds<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  TargetPopulationHouseholdsQuery,
  TargetPopulationHouseholdsQueryVariables,
  TargetPopulationHouseholdsProps<TChildProps>>) {
    return ApolloReactHoc.withQuery<TProps, TargetPopulationHouseholdsQuery, TargetPopulationHouseholdsQueryVariables, TargetPopulationHouseholdsProps<TChildProps>>(TargetPopulationHouseholdsDocument, {
      alias: 'targetPopulationHouseholds',
      ...operationOptions
    });
};

/**
 * __useTargetPopulationHouseholdsQuery__
 *
 * To run a query within a React component, call `useTargetPopulationHouseholdsQuery` and pass it any options that fit your needs.
 * When your component renders, `useTargetPopulationHouseholdsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTargetPopulationHouseholdsQuery({
 *   variables: {
 *      targetPopulation: // value for 'targetPopulation'
 *      first: // value for 'first'
 *      after: // value for 'after'
 *      before: // value for 'before'
 *      last: // value for 'last'
 *      orderBy: // value for 'orderBy'
 *      businessArea: // value for 'businessArea'
 *   },
 * });
 */
export function useTargetPopulationHouseholdsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<TargetPopulationHouseholdsQuery, TargetPopulationHouseholdsQueryVariables>) {
        return ApolloReactHooks.useQuery<TargetPopulationHouseholdsQuery, TargetPopulationHouseholdsQueryVariables>(TargetPopulationHouseholdsDocument, baseOptions);
      }
export function useTargetPopulationHouseholdsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<TargetPopulationHouseholdsQuery, TargetPopulationHouseholdsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<TargetPopulationHouseholdsQuery, TargetPopulationHouseholdsQueryVariables>(TargetPopulationHouseholdsDocument, baseOptions);
        }
export type TargetPopulationHouseholdsQueryHookResult = ReturnType<typeof useTargetPopulationHouseholdsQuery>;
export type TargetPopulationHouseholdsLazyQueryHookResult = ReturnType<typeof useTargetPopulationHouseholdsLazyQuery>;
export type TargetPopulationHouseholdsQueryResult = ApolloReactCommon.QueryResult<TargetPopulationHouseholdsQuery, TargetPopulationHouseholdsQueryVariables>;


export type ResolverTypeWrapper<T> = Promise<T> | T;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;


export type StitchingResolver<TResult, TParent, TContext, TArgs> = {
  fragment: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =
  | ResolverFn<TResult, TParent, TContext, TArgs>
  | StitchingResolver<TResult, TParent, TContext, TArgs>;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
  Query: ResolverTypeWrapper<{}>,
  ID: ResolverTypeWrapper<Scalars['ID']>,
  CommunicationMessageNode: ResolverTypeWrapper<CommunicationMessageNode>,
  Node: ResolverTypeWrapper<Node>,
  DateTime: ResolverTypeWrapper<Scalars['DateTime']>,
  String: ResolverTypeWrapper<Scalars['String']>,
  UserNode: ResolverTypeWrapper<UserNode>,
  Boolean: ResolverTypeWrapper<Scalars['Boolean']>,
  UserStatus: UserStatus,
  PartnerType: ResolverTypeWrapper<PartnerType>,
  Int: ResolverTypeWrapper<Scalars['Int']>,
  UserNodeConnection: ResolverTypeWrapper<UserNodeConnection>,
  PageInfo: ResolverTypeWrapper<PageInfo>,
  UserNodeEdge: ResolverTypeWrapper<UserNodeEdge>,
  IndividualIdentityNodeConnection: ResolverTypeWrapper<IndividualIdentityNodeConnection>,
  IndividualIdentityNodeEdge: ResolverTypeWrapper<IndividualIdentityNodeEdge>,
  IndividualIdentityNode: ResolverTypeWrapper<IndividualIdentityNode>,
  IndividualNode: ResolverTypeWrapper<IndividualNode>,
  BigInt: ResolverTypeWrapper<Scalars['BigInt']>,
  IndividualSex: IndividualSex,
  Date: ResolverTypeWrapper<Scalars['Date']>,
  IndividualMaritalStatus: IndividualMaritalStatus,
  IndividualRelationship: IndividualRelationship,
  HouseholdNode: ResolverTypeWrapper<HouseholdNode>,
  HouseholdResidenceStatus: HouseholdResidenceStatus,
  AreaNode: ResolverTypeWrapper<AreaNode>,
  UUID: ResolverTypeWrapper<Scalars['UUID']>,
  AreaTypeNode: ResolverTypeWrapper<AreaTypeNode>,
  JSONString: ResolverTypeWrapper<Scalars['JSONString']>,
  AreaTypeNodeConnection: ResolverTypeWrapper<AreaTypeNodeConnection>,
  AreaTypeNodeEdge: ResolverTypeWrapper<AreaTypeNodeEdge>,
  AreaNodeConnection: ResolverTypeWrapper<AreaNodeConnection>,
  AreaNodeEdge: ResolverTypeWrapper<AreaNodeEdge>,
  HouseholdNodeConnection: ResolverTypeWrapper<HouseholdNodeConnection>,
  HouseholdNodeEdge: ResolverTypeWrapper<HouseholdNodeEdge>,
  GrievanceTicketNodeConnection: ResolverTypeWrapper<GrievanceTicketNodeConnection>,
  GrievanceTicketNodeEdge: ResolverTypeWrapper<GrievanceTicketNodeEdge>,
  GrievanceTicketNode: ResolverTypeWrapper<GrievanceTicketNode>,
  UserBusinessAreaNode: ResolverTypeWrapper<UserBusinessAreaNode>,
  Float: ResolverTypeWrapper<Scalars['Float']>,
  UserBusinessAreaNodeConnection: ResolverTypeWrapper<UserBusinessAreaNodeConnection>,
  UserBusinessAreaNodeEdge: ResolverTypeWrapper<UserBusinessAreaNodeEdge>,
  UserRoleNode: ResolverTypeWrapper<UserRoleNode>,
  RoleNode: ResolverTypeWrapper<RoleNode>,
  RoleSubsystem: RoleSubsystem,
  IndividualNodeConnection: ResolverTypeWrapper<IndividualNodeConnection>,
  IndividualNodeEdge: ResolverTypeWrapper<IndividualNodeEdge>,
  RegistrationDataImportNodeConnection: ResolverTypeWrapper<RegistrationDataImportNodeConnection>,
  RegistrationDataImportNodeEdge: ResolverTypeWrapper<RegistrationDataImportNodeEdge>,
  RegistrationDataImportNode: ResolverTypeWrapper<RegistrationDataImportNode>,
  RegistrationDataImportStatus: RegistrationDataImportStatus,
  RegistrationDataImportDataSource: RegistrationDataImportDataSource,
  ProgramNode: ResolverTypeWrapper<ProgramNode>,
  ProgramStatus: ProgramStatus,
  Decimal: ResolverTypeWrapper<Scalars['Decimal']>,
  ProgramFrequencyOfPayments: ProgramFrequencyOfPayments,
  ProgramSector: ProgramSector,
  ProgramScope: ProgramScope,
  PaymentPlanNodeConnection: ResolverTypeWrapper<PaymentPlanNodeConnection>,
  PaymentPlanNodeEdge: ResolverTypeWrapper<PaymentPlanNodeEdge>,
  PaymentPlanNode: ResolverTypeWrapper<PaymentPlanNode>,
  PaymentPlanStatus: PaymentPlanStatus,
  PaymentPlanBackgroundActionStatus: PaymentPlanBackgroundActionStatus,
  TargetPopulationNode: ResolverTypeWrapper<TargetPopulationNode>,
  TargetPopulationStatus: TargetPopulationStatus,
  TargetPopulationBuildStatus: TargetPopulationBuildStatus,
  TargetingCriteriaNode: ResolverTypeWrapper<TargetingCriteriaNode>,
  TargetingCriteriaRuleNode: ResolverTypeWrapper<TargetingCriteriaRuleNode>,
  TargetingIndividualRuleFilterBlockNode: ResolverTypeWrapper<TargetingIndividualRuleFilterBlockNode>,
  TargetingIndividualBlockRuleFilterNode: ResolverTypeWrapper<TargetingIndividualBlockRuleFilterNode>,
  TargetingIndividualBlockRuleFilterComparisonMethod: TargetingIndividualBlockRuleFilterComparisonMethod,
  Arg: ResolverTypeWrapper<Scalars['Arg']>,
  FieldAttributeNode: ResolverTypeWrapper<FieldAttributeNode>,
  LabelNode: ResolverTypeWrapper<LabelNode>,
  CoreFieldChoiceObject: ResolverTypeWrapper<CoreFieldChoiceObject>,
  TargetingCriteriaRuleFilterNode: ResolverTypeWrapper<TargetingCriteriaRuleFilterNode>,
  TargetingCriteriaRuleFilterComparisonMethod: TargetingCriteriaRuleFilterComparisonMethod,
  RuleCommitNode: ResolverTypeWrapper<RuleCommitNode>,
  SteficonRuleNode: ResolverTypeWrapper<SteficonRuleNode>,
  RuleLanguage: RuleLanguage,
  RuleSecurity: RuleSecurity,
  RuleType: RuleType,
  RuleCommitNodeConnection: ResolverTypeWrapper<RuleCommitNodeConnection>,
  RuleCommitNodeEdge: ResolverTypeWrapper<RuleCommitNodeEdge>,
  RuleCommitLanguage: RuleCommitLanguage,
  TargetPopulationNodeConnection: ResolverTypeWrapper<TargetPopulationNodeConnection>,
  TargetPopulationNodeEdge: ResolverTypeWrapper<TargetPopulationNodeEdge>,
  PaymentRecordNodeConnection: ResolverTypeWrapper<PaymentRecordNodeConnection>,
  PaymentRecordNodeEdge: ResolverTypeWrapper<PaymentRecordNodeEdge>,
  PaymentRecordNode: ResolverTypeWrapper<PaymentRecordNode>,
  PaymentRecordStatus: PaymentRecordStatus,
  PaymentRecordDeliveryType: PaymentRecordDeliveryType,
  CashPlanNode: ResolverTypeWrapper<CashPlanNode>,
  CashPlanStatus: CashPlanStatus,
  ServiceProviderNode: ResolverTypeWrapper<ServiceProviderNode>,
  CashPlanNodeConnection: ResolverTypeWrapper<CashPlanNodeConnection>,
  CashPlanNodeEdge: ResolverTypeWrapper<CashPlanNodeEdge>,
  PaymentVerificationPlanNodeConnection: ResolverTypeWrapper<PaymentVerificationPlanNodeConnection>,
  PaymentVerificationPlanNodeEdge: ResolverTypeWrapper<PaymentVerificationPlanNodeEdge>,
  PaymentVerificationPlanNode: ResolverTypeWrapper<PaymentVerificationPlanNode>,
  PaymentVerificationPlanStatus: PaymentVerificationPlanStatus,
  ContentTypeObjectType: ResolverTypeWrapper<ContentTypeObjectType>,
  PaymentVerificationNodeConnection: ResolverTypeWrapper<PaymentVerificationNodeConnection>,
  PaymentVerificationNodeEdge: ResolverTypeWrapper<PaymentVerificationNodeEdge>,
  PaymentVerificationNode: ResolverTypeWrapper<PaymentVerificationNode>,
  PaymentVerificationStatus: PaymentVerificationStatus,
  TicketPaymentVerificationDetailsNodeConnection: ResolverTypeWrapper<TicketPaymentVerificationDetailsNodeConnection>,
  TicketPaymentVerificationDetailsNodeEdge: ResolverTypeWrapper<TicketPaymentVerificationDetailsNodeEdge>,
  TicketPaymentVerificationDetailsNode: ResolverTypeWrapper<TicketPaymentVerificationDetailsNode>,
  TicketPaymentVerificationDetailsPaymentVerificationStatus: TicketPaymentVerificationDetailsPaymentVerificationStatus,
  TicketPaymentVerificationDetailsNewStatus: TicketPaymentVerificationDetailsNewStatus,
  GenericPaymentNode: ResolverTypeWrapper<GenericPaymentNode>,
  PaymentVerificationSummaryNodeConnection: ResolverTypeWrapper<PaymentVerificationSummaryNodeConnection>,
  PaymentVerificationSummaryNodeEdge: ResolverTypeWrapper<PaymentVerificationSummaryNodeEdge>,
  PaymentVerificationSummaryNode: ResolverTypeWrapper<PaymentVerificationSummaryNode>,
  PaymentVerificationSummaryStatus: PaymentVerificationSummaryStatus,
  TicketComplaintDetailsNodeConnection: ResolverTypeWrapper<TicketComplaintDetailsNodeConnection>,
  TicketComplaintDetailsNodeEdge: ResolverTypeWrapper<TicketComplaintDetailsNodeEdge>,
  TicketComplaintDetailsNode: ResolverTypeWrapper<TicketComplaintDetailsNode>,
  PaymentRecordAndPaymentNode: ResolverTypeWrapper<PaymentRecordAndPaymentNode>,
  CashPlanAndPaymentPlanNode: ResolverTypeWrapper<CashPlanAndPaymentPlanNode>,
  TicketSensitiveDetailsNodeConnection: ResolverTypeWrapper<TicketSensitiveDetailsNodeConnection>,
  TicketSensitiveDetailsNodeEdge: ResolverTypeWrapper<TicketSensitiveDetailsNodeEdge>,
  TicketSensitiveDetailsNode: ResolverTypeWrapper<TicketSensitiveDetailsNode>,
  PaymentVerificationLogEntryNodeConnection: ResolverTypeWrapper<PaymentVerificationLogEntryNodeConnection>,
  PaymentVerificationLogEntryNodeEdge: ResolverTypeWrapper<PaymentVerificationLogEntryNodeEdge>,
  PaymentVerificationLogEntryNode: ResolverTypeWrapper<PaymentVerificationLogEntryNode>,
  LogEntryAction: LogEntryAction,
  ProgramNodeConnection: ResolverTypeWrapper<ProgramNodeConnection>,
  ProgramNodeEdge: ResolverTypeWrapper<ProgramNodeEdge>,
  PaymentVerificationPlanSampling: PaymentVerificationPlanSampling,
  PaymentVerificationPlanVerificationChannel: PaymentVerificationPlanVerificationChannel,
  AgeFilterObject: ResolverTypeWrapper<AgeFilterObject>,
  PaymentRecordEntitlementCardStatus: PaymentRecordEntitlementCardStatus,
  HouseholdSelectionNode: ResolverTypeWrapper<HouseholdSelectionNode>,
  CommunicationMessageNodeConnection: ResolverTypeWrapper<CommunicationMessageNodeConnection>,
  CommunicationMessageNodeEdge: ResolverTypeWrapper<CommunicationMessageNodeEdge>,
  SurveyNodeConnection: ResolverTypeWrapper<SurveyNodeConnection>,
  SurveyNodeEdge: ResolverTypeWrapper<SurveyNodeEdge>,
  SurveyNode: ResolverTypeWrapper<SurveyNode>,
  SurveyCategory: SurveyCategory,
  SurveySamplingType: SurveySamplingType,
  PaymentPlanCurrency: PaymentPlanCurrency,
  DeliveryMechanismNode: ResolverTypeWrapper<DeliveryMechanismNode>,
  FinancialServiceProviderNode: ResolverTypeWrapper<FinancialServiceProviderNode>,
  FinancialServiceProviderCommunicationChannel: FinancialServiceProviderCommunicationChannel,
  FinancialServiceProviderXlsxTemplateNodeConnection: ResolverTypeWrapper<FinancialServiceProviderXlsxTemplateNodeConnection>,
  FinancialServiceProviderXlsxTemplateNodeEdge: ResolverTypeWrapper<FinancialServiceProviderXlsxTemplateNodeEdge>,
  FinancialServiceProviderXlsxTemplateNode: ResolverTypeWrapper<FinancialServiceProviderXlsxTemplateNode>,
  FinancialServiceProviderNodeConnection: ResolverTypeWrapper<FinancialServiceProviderNodeConnection>,
  FinancialServiceProviderNodeEdge: ResolverTypeWrapper<FinancialServiceProviderNodeEdge>,
  FinancialServiceProviderXlsxReportNodeConnection: ResolverTypeWrapper<FinancialServiceProviderXlsxReportNodeConnection>,
  FinancialServiceProviderXlsxReportNodeEdge: ResolverTypeWrapper<FinancialServiceProviderXlsxReportNodeEdge>,
  FinancialServiceProviderXlsxReportNode: ResolverTypeWrapper<FinancialServiceProviderXlsxReportNode>,
  DeliveryMechanismNodeConnection: ResolverTypeWrapper<DeliveryMechanismNodeConnection>,
  DeliveryMechanismNodeEdge: ResolverTypeWrapper<DeliveryMechanismNodeEdge>,
  PaymentNodeConnection: ResolverTypeWrapper<PaymentNodeConnection>,
  PaymentNodeEdge: ResolverTypeWrapper<PaymentNodeEdge>,
  PaymentNode: ResolverTypeWrapper<PaymentNode>,
  PaymentStatus: PaymentStatus,
  PaymentDeliveryType: PaymentDeliveryType,
  PaymentHouseholdSnapshotNode: ResolverTypeWrapper<PaymentHouseholdSnapshotNode>,
  PaymentConflictDataNode: ResolverTypeWrapper<PaymentConflictDataNode>,
  DeliveryMechanismPerPaymentPlanDeliveryMechanism: DeliveryMechanismPerPaymentPlanDeliveryMechanism,
  ApprovalProcessNodeConnection: ResolverTypeWrapper<ApprovalProcessNodeConnection>,
  ApprovalProcessNodeEdge: ResolverTypeWrapper<ApprovalProcessNodeEdge>,
  ApprovalProcessNode: ResolverTypeWrapper<ApprovalProcessNode>,
  FilteredActionsListNode: ResolverTypeWrapper<FilteredActionsListNode>,
  ApprovalNode: ResolverTypeWrapper<ApprovalNode>,
  VolumeByDeliveryMechanismNode: ResolverTypeWrapper<VolumeByDeliveryMechanismNode>,
  ReconciliationSummaryNode: ResolverTypeWrapper<ReconciliationSummaryNode>,
  ReportNodeConnection: ResolverTypeWrapper<ReportNodeConnection>,
  ReportNodeEdge: ResolverTypeWrapper<ReportNodeEdge>,
  ReportNode: ResolverTypeWrapper<ReportNode>,
  FeedbackNodeConnection: ResolverTypeWrapper<FeedbackNodeConnection>,
  FeedbackNodeEdge: ResolverTypeWrapper<FeedbackNodeEdge>,
  FeedbackNode: ResolverTypeWrapper<FeedbackNode>,
  FeedbackIssueType: FeedbackIssueType,
  FeedbackMessageNodeConnection: ResolverTypeWrapper<FeedbackMessageNodeConnection>,
  FeedbackMessageNodeEdge: ResolverTypeWrapper<FeedbackMessageNodeEdge>,
  FeedbackMessageNode: ResolverTypeWrapper<FeedbackMessageNode>,
  CountAndPercentageNode: ResolverTypeWrapper<CountAndPercentageNode>,
  ServiceProviderNodeConnection: ResolverTypeWrapper<ServiceProviderNodeConnection>,
  ServiceProviderNodeEdge: ResolverTypeWrapper<ServiceProviderNodeEdge>,
  TicketNoteNodeConnection: ResolverTypeWrapper<TicketNoteNodeConnection>,
  TicketNoteNodeEdge: ResolverTypeWrapper<TicketNoteNodeEdge>,
  TicketNoteNode: ResolverTypeWrapper<TicketNoteNode>,
  TicketHouseholdDataUpdateDetailsNode: ResolverTypeWrapper<TicketHouseholdDataUpdateDetailsNode>,
  TicketIndividualDataUpdateDetailsNode: ResolverTypeWrapper<TicketIndividualDataUpdateDetailsNode>,
  TicketAddIndividualDetailsNode: ResolverTypeWrapper<TicketAddIndividualDetailsNode>,
  TicketDeleteIndividualDetailsNode: ResolverTypeWrapper<TicketDeleteIndividualDetailsNode>,
  TicketDeleteHouseholdDetailsNode: ResolverTypeWrapper<TicketDeleteHouseholdDetailsNode>,
  TicketSystemFlaggingDetailsNode: ResolverTypeWrapper<TicketSystemFlaggingDetailsNode>,
  SanctionListIndividualNode: ResolverTypeWrapper<SanctionListIndividualNode>,
  SanctionListIndividualDocumentNodeConnection: ResolverTypeWrapper<SanctionListIndividualDocumentNodeConnection>,
  SanctionListIndividualDocumentNodeEdge: ResolverTypeWrapper<SanctionListIndividualDocumentNodeEdge>,
  SanctionListIndividualDocumentNode: ResolverTypeWrapper<SanctionListIndividualDocumentNode>,
  SanctionListIndividualNationalitiesNodeConnection: ResolverTypeWrapper<SanctionListIndividualNationalitiesNodeConnection>,
  SanctionListIndividualNationalitiesNodeEdge: ResolverTypeWrapper<SanctionListIndividualNationalitiesNodeEdge>,
  SanctionListIndividualNationalitiesNode: ResolverTypeWrapper<SanctionListIndividualNationalitiesNode>,
  SanctionListIndividualCountriesNodeConnection: ResolverTypeWrapper<SanctionListIndividualCountriesNodeConnection>,
  SanctionListIndividualCountriesNodeEdge: ResolverTypeWrapper<SanctionListIndividualCountriesNodeEdge>,
  SanctionListIndividualCountriesNode: ResolverTypeWrapper<SanctionListIndividualCountriesNode>,
  SanctionListIndividualAliasNameNodeConnection: ResolverTypeWrapper<SanctionListIndividualAliasNameNodeConnection>,
  SanctionListIndividualAliasNameNodeEdge: ResolverTypeWrapper<SanctionListIndividualAliasNameNodeEdge>,
  SanctionListIndividualAliasNameNode: ResolverTypeWrapper<SanctionListIndividualAliasNameNode>,
  SanctionListIndividualDateOfBirthNodeConnection: ResolverTypeWrapper<SanctionListIndividualDateOfBirthNodeConnection>,
  SanctionListIndividualDateOfBirthNodeEdge: ResolverTypeWrapper<SanctionListIndividualDateOfBirthNodeEdge>,
  SanctionListIndividualDateOfBirthNode: ResolverTypeWrapper<SanctionListIndividualDateOfBirthNode>,
  TicketNeedsAdjudicationDetailsNode: ResolverTypeWrapper<TicketNeedsAdjudicationDetailsNode>,
  TicketNeedsAdjudicationDetailsExtraDataNode: ResolverTypeWrapper<TicketNeedsAdjudicationDetailsExtraDataNode>,
  DeduplicationResultNode: ResolverTypeWrapper<DeduplicationResultNode>,
  TicketPositiveFeedbackDetailsNode: ResolverTypeWrapper<TicketPositiveFeedbackDetailsNode>,
  TicketNegativeFeedbackDetailsNode: ResolverTypeWrapper<TicketNegativeFeedbackDetailsNode>,
  TicketReferralDetailsNode: ResolverTypeWrapper<TicketReferralDetailsNode>,
  GrievanceDocumentNodeConnection: ResolverTypeWrapper<GrievanceDocumentNodeConnection>,
  GrievanceDocumentNodeEdge: ResolverTypeWrapper<GrievanceDocumentNodeEdge>,
  GrievanceDocumentNode: ResolverTypeWrapper<GrievanceDocumentNode>,
  GeoJSON: ResolverTypeWrapper<Scalars['GeoJSON']>,
  FlexFieldsScalar: ResolverTypeWrapper<Scalars['FlexFieldsScalar']>,
  HouseholdOrgEnumerator: HouseholdOrgEnumerator,
  HouseholdRegistrationMethod: HouseholdRegistrationMethod,
  HouseholdCollectIndividualData: HouseholdCollectIndividualData,
  IndividualRoleInHouseholdNode: ResolverTypeWrapper<IndividualRoleInHouseholdNode>,
  IndividualRoleInHouseholdRole: IndividualRoleInHouseholdRole,
  TicketHouseholdDataUpdateDetailsNodeConnection: ResolverTypeWrapper<TicketHouseholdDataUpdateDetailsNodeConnection>,
  TicketHouseholdDataUpdateDetailsNodeEdge: ResolverTypeWrapper<TicketHouseholdDataUpdateDetailsNodeEdge>,
  TicketAddIndividualDetailsNodeConnection: ResolverTypeWrapper<TicketAddIndividualDetailsNodeConnection>,
  TicketAddIndividualDetailsNodeEdge: ResolverTypeWrapper<TicketAddIndividualDetailsNodeEdge>,
  TicketDeleteHouseholdDetailsNodeConnection: ResolverTypeWrapper<TicketDeleteHouseholdDetailsNodeConnection>,
  TicketDeleteHouseholdDetailsNodeEdge: ResolverTypeWrapper<TicketDeleteHouseholdDetailsNodeEdge>,
  TicketPositiveFeedbackDetailsNodeConnection: ResolverTypeWrapper<TicketPositiveFeedbackDetailsNodeConnection>,
  TicketPositiveFeedbackDetailsNodeEdge: ResolverTypeWrapper<TicketPositiveFeedbackDetailsNodeEdge>,
  TicketNegativeFeedbackDetailsNodeConnection: ResolverTypeWrapper<TicketNegativeFeedbackDetailsNodeConnection>,
  TicketNegativeFeedbackDetailsNodeEdge: ResolverTypeWrapper<TicketNegativeFeedbackDetailsNodeEdge>,
  TicketReferralDetailsNodeConnection: ResolverTypeWrapper<TicketReferralDetailsNodeConnection>,
  TicketReferralDetailsNodeEdge: ResolverTypeWrapper<TicketReferralDetailsNodeEdge>,
  ProgramsWithDeliveredQuantityNode: ResolverTypeWrapper<ProgramsWithDeliveredQuantityNode>,
  DeliveredQuantityNode: ResolverTypeWrapper<DeliveredQuantityNode>,
  IndividualDisability: IndividualDisability,
  IndividualDeduplicationGoldenRecordStatus: IndividualDeduplicationGoldenRecordStatus,
  IndividualDeduplicationBatchStatus: IndividualDeduplicationBatchStatus,
  DocumentNodeConnection: ResolverTypeWrapper<DocumentNodeConnection>,
  DocumentNodeEdge: ResolverTypeWrapper<DocumentNodeEdge>,
  DocumentNode: ResolverTypeWrapper<DocumentNode>,
  DocumentTypeNode: ResolverTypeWrapper<DocumentTypeNode>,
  DocumentStatus: DocumentStatus,
  BankAccountInfoNode: ResolverTypeWrapper<BankAccountInfoNode>,
  TicketIndividualDataUpdateDetailsNodeConnection: ResolverTypeWrapper<TicketIndividualDataUpdateDetailsNodeConnection>,
  TicketIndividualDataUpdateDetailsNodeEdge: ResolverTypeWrapper<TicketIndividualDataUpdateDetailsNodeEdge>,
  TicketDeleteIndividualDetailsNodeConnection: ResolverTypeWrapper<TicketDeleteIndividualDetailsNodeConnection>,
  TicketDeleteIndividualDetailsNodeEdge: ResolverTypeWrapper<TicketDeleteIndividualDetailsNodeEdge>,
  TicketSystemFlaggingDetailsNodeConnection: ResolverTypeWrapper<TicketSystemFlaggingDetailsNodeConnection>,
  TicketSystemFlaggingDetailsNodeEdge: ResolverTypeWrapper<TicketSystemFlaggingDetailsNodeEdge>,
  TicketNeedsAdjudicationDetailsNodeConnection: ResolverTypeWrapper<TicketNeedsAdjudicationDetailsNodeConnection>,
  TicketNeedsAdjudicationDetailsNodeEdge: ResolverTypeWrapper<TicketNeedsAdjudicationDetailsNodeEdge>,
  MessageSamplingType: MessageSamplingType,
  CommunicationMessageRecipientMapNodeConnection: ResolverTypeWrapper<CommunicationMessageRecipientMapNodeConnection>,
  CommunicationMessageRecipientMapNodeEdge: ResolverTypeWrapper<CommunicationMessageRecipientMapNodeEdge>,
  CommunicationMessageRecipientMapNode: ResolverTypeWrapper<CommunicationMessageRecipientMapNode>,
  GetAccountabilityCommunicationMessageSampleSizeInput: GetAccountabilityCommunicationMessageSampleSizeInput,
  SamplingChoices: SamplingChoices,
  AccountabilityFullListArguments: AccountabilityFullListArguments,
  AccountabilityRandomSamplingArguments: AccountabilityRandomSamplingArguments,
  AccountabilityCommunicationMessageAgeInput: AccountabilityCommunicationMessageAgeInput,
  GetCommunicationMessageSampleSizeNode: ResolverTypeWrapper<GetCommunicationMessageSampleSizeNode>,
  ChoiceObject: ResolverTypeWrapper<ChoiceObject>,
  RecipientNodeConnection: ResolverTypeWrapper<RecipientNodeConnection>,
  RecipientNodeEdge: ResolverTypeWrapper<RecipientNodeEdge>,
  RecipientNode: ResolverTypeWrapper<RecipientNode>,
  AccountabilitySampleSizeInput: AccountabilitySampleSizeInput,
  AccountabilitySampleSizeNode: ResolverTypeWrapper<AccountabilitySampleSizeNode>,
  RapidProFlowNode: ResolverTypeWrapper<RapidProFlowNode>,
  LogEntryNodeConnection: ResolverTypeWrapper<LogEntryNodeConnection>,
  LogEntryNodeEdge: ResolverTypeWrapper<LogEntryNodeEdge>,
  LogEntryNode: ResolverTypeWrapper<LogEntryNode>,
  SanctionListIndividualNodeConnection: ResolverTypeWrapper<SanctionListIndividualNodeConnection>,
  SanctionListIndividualNodeEdge: ResolverTypeWrapper<SanctionListIndividualNodeEdge>,
  TicketByType: ResolverTypeWrapper<TicketByType>,
  ChartDatasetNode: ResolverTypeWrapper<ChartDatasetNode>,
  _DatasetsNode: ResolverTypeWrapper<_DatasetsNode>,
  ChartDetailedDatasetsNode: ResolverTypeWrapper<ChartDetailedDatasetsNode>,
  _DetailedDatasetsNode: ResolverTypeWrapper<_DetailedDatasetsNode>,
  ChartGrievanceTicketsNode: ResolverTypeWrapper<ChartGrievanceTicketsNode>,
  IssueTypesObject: ResolverTypeWrapper<IssueTypesObject>,
  ChoiceObjectInt: ResolverTypeWrapper<ChoiceObjectInt>,
  SteficonRuleNodeConnection: ResolverTypeWrapper<SteficonRuleNodeConnection>,
  SteficonRuleNodeEdge: ResolverTypeWrapper<SteficonRuleNodeEdge>,
  PaginatedPaymentRecordsAndPaymentsNode: ResolverTypeWrapper<PaginatedPaymentRecordsAndPaymentsNode>,
  PageInfoNode: ResolverTypeWrapper<PageInfoNode>,
  PaymentRecordsAndPaymentsEdges: ResolverTypeWrapper<PaymentRecordsAndPaymentsEdges>,
  ChartPaymentVerification: ResolverTypeWrapper<ChartPaymentVerification>,
  SectionTotalNode: ResolverTypeWrapper<SectionTotalNode>,
  TableTotalCashTransferred: ResolverTypeWrapper<TableTotalCashTransferred>,
  _TableTotalCashTransferredDataNode: ResolverTypeWrapper<_TableTotalCashTransferredDataNode>,
  RapidProFlow: ResolverTypeWrapper<RapidProFlow>,
  RapidProFlowRun: ResolverTypeWrapper<RapidProFlowRun>,
  RapidProFlowResult: ResolverTypeWrapper<RapidProFlowResult>,
  GetCashplanVerificationSampleSizeInput: GetCashplanVerificationSampleSizeInput,
  FullListArguments: FullListArguments,
  RandomSamplingArguments: RandomSamplingArguments,
  AgeInput: AgeInput,
  RapidProArguments: RapidProArguments,
  GetCashplanVerificationSampleSizeObject: ResolverTypeWrapper<GetCashplanVerificationSampleSizeObject>,
  AvailableFspsForDeliveryMechanismsInput: AvailableFspsForDeliveryMechanismsInput,
  FspChoices: ResolverTypeWrapper<FspChoices>,
  FspChoice: ResolverTypeWrapper<FspChoice>,
  PaginatedCashPlanAndPaymentPlanNode: ResolverTypeWrapper<PaginatedCashPlanAndPaymentPlanNode>,
  CashPlanAndPaymentPlanEdges: ResolverTypeWrapper<CashPlanAndPaymentPlanEdges>,
  BusinessAreaNode: ResolverTypeWrapper<BusinessAreaNode>,
  BusinessAreaNodeConnection: ResolverTypeWrapper<BusinessAreaNodeConnection>,
  BusinessAreaNodeEdge: ResolverTypeWrapper<BusinessAreaNodeEdge>,
  GroupAttributeNode: ResolverTypeWrapper<GroupAttributeNode>,
  KoboAssetObject: ResolverTypeWrapper<KoboAssetObject>,
  KoboAssetObjectConnection: ResolverTypeWrapper<KoboAssetObjectConnection>,
  KoboAssetObjectEdge: ResolverTypeWrapper<KoboAssetObjectEdge>,
  LanguageObjectConnection: ResolverTypeWrapper<LanguageObjectConnection>,
  LanguageObjectEdge: ResolverTypeWrapper<LanguageObjectEdge>,
  LanguageObject: ResolverTypeWrapper<LanguageObject>,
  ImportedHouseholdNode: ResolverTypeWrapper<ImportedHouseholdNode>,
  ImportedHouseholdConsentSharing: ImportedHouseholdConsentSharing,
  ImportedHouseholdResidenceStatus: ImportedHouseholdResidenceStatus,
  ImportedIndividualNode: ResolverTypeWrapper<ImportedIndividualNode>,
  ImportedIndividualSex: ImportedIndividualSex,
  ImportedIndividualMaritalStatus: ImportedIndividualMaritalStatus,
  RegistrationDataImportDatahubNode: ResolverTypeWrapper<RegistrationDataImportDatahubNode>,
  ImportDataNode: ResolverTypeWrapper<ImportDataNode>,
  ImportDataStatus: ImportDataStatus,
  ImportDataDataType: ImportDataDataType,
  KoboImportDataNode: ResolverTypeWrapper<KoboImportDataNode>,
  KoboErrorNode: ResolverTypeWrapper<KoboErrorNode>,
  XlsxRowErrorNode: ResolverTypeWrapper<XlsxRowErrorNode>,
  RegistrationDataImportDatahubImportDone: RegistrationDataImportDatahubImportDone,
  ImportedHouseholdNodeConnection: ResolverTypeWrapper<ImportedHouseholdNodeConnection>,
  ImportedHouseholdNodeEdge: ResolverTypeWrapper<ImportedHouseholdNodeEdge>,
  ImportedIndividualNodeConnection: ResolverTypeWrapper<ImportedIndividualNodeConnection>,
  ImportedIndividualNodeEdge: ResolverTypeWrapper<ImportedIndividualNodeEdge>,
  ImportedIndividualDisability: ImportedIndividualDisability,
  ImportedIndividualDeduplicationBatchStatus: ImportedIndividualDeduplicationBatchStatus,
  ImportedIndividualDeduplicationGoldenRecordStatus: ImportedIndividualDeduplicationGoldenRecordStatus,
  ImportedDocumentNodeConnection: ResolverTypeWrapper<ImportedDocumentNodeConnection>,
  ImportedDocumentNodeEdge: ResolverTypeWrapper<ImportedDocumentNodeEdge>,
  ImportedDocumentNode: ResolverTypeWrapper<ImportedDocumentNode>,
  ImportedDocumentTypeNode: ResolverTypeWrapper<ImportedDocumentTypeNode>,
  ImportedIndividualIdentityNodeConnection: ResolverTypeWrapper<ImportedIndividualIdentityNodeConnection>,
  ImportedIndividualIdentityNodeEdge: ResolverTypeWrapper<ImportedIndividualIdentityNodeEdge>,
  ImportedIndividualIdentityNode: ResolverTypeWrapper<ImportedIndividualIdentityNode>,
  ImportedHouseholdOrgEnumerator: ImportedHouseholdOrgEnumerator,
  ImportedHouseholdRegistrationMethod: ImportedHouseholdRegistrationMethod,
  ImportedHouseholdCollectIndividualData: ImportedHouseholdCollectIndividualData,
  ImportedHouseholdCurrency: ImportedHouseholdCurrency,
  RegistrationDataImportDatahubNodeConnection: ResolverTypeWrapper<RegistrationDataImportDatahubNodeConnection>,
  RegistrationDataImportDatahubNodeEdge: ResolverTypeWrapper<RegistrationDataImportDatahubNodeEdge>,
  DjangoDebug: ResolverTypeWrapper<DjangoDebug>,
  DjangoDebugSQL: ResolverTypeWrapper<DjangoDebugSql>,
  Mutations: ResolverTypeWrapper<{}>,
  CreateAccountabilityCommunicationMessageInput: CreateAccountabilityCommunicationMessageInput,
  CreateCommunicationMessageMutation: ResolverTypeWrapper<CreateCommunicationMessageMutation>,
  CreateFeedbackInput: CreateFeedbackInput,
  CreateFeedbackMutation: ResolverTypeWrapper<CreateFeedbackMutation>,
  UpdateFeedbackInput: UpdateFeedbackInput,
  UpdateFeedbackMutation: ResolverTypeWrapper<UpdateFeedbackMutation>,
  CreateFeedbackMessageInput: CreateFeedbackMessageInput,
  CreateFeedbackMessageMutation: ResolverTypeWrapper<CreateFeedbackMessageMutation>,
  CreateSurveyInput: CreateSurveyInput,
  CreateSurveyMutation: ResolverTypeWrapper<CreateSurveyMutation>,
  ExportSurveySampleMutationMutation: ResolverTypeWrapper<ExportSurveySampleMutationMutation>,
  CreateReportInput: CreateReportInput,
  CreateReport: ResolverTypeWrapper<CreateReport>,
  RestartCreateReportInput: RestartCreateReportInput,
  RestartCreateReport: ResolverTypeWrapper<RestartCreateReport>,
  CreateDashboardReportInput: CreateDashboardReportInput,
  CreateDashboardReport: ResolverTypeWrapper<CreateDashboardReport>,
  CreateGrievanceTicketInput: CreateGrievanceTicketInput,
  CreateGrievanceTicketExtrasInput: CreateGrievanceTicketExtrasInput,
  CategoryExtrasInput: CategoryExtrasInput,
  SensitiveGrievanceTicketExtras: SensitiveGrievanceTicketExtras,
  GrievanceComplaintTicketExtras: GrievanceComplaintTicketExtras,
  PositiveFeedbackTicketExtras: PositiveFeedbackTicketExtras,
  NegativeFeedbackTicketExtras: NegativeFeedbackTicketExtras,
  ReferralTicketExtras: ReferralTicketExtras,
  IssueTypeExtrasInput: IssueTypeExtrasInput,
  HouseholdDataUpdateIssueTypeExtras: HouseholdDataUpdateIssueTypeExtras,
  HouseholdUpdateDataObjectType: HouseholdUpdateDataObjectType,
  IndividualDataUpdateIssueTypeExtras: IndividualDataUpdateIssueTypeExtras,
  IndividualUpdateDataObjectType: IndividualUpdateDataObjectType,
  IndividualDocumentObjectType: IndividualDocumentObjectType,
  EditIndividualDocumentObjectType: EditIndividualDocumentObjectType,
  IndividualIdentityObjectType: IndividualIdentityObjectType,
  EditIndividualIdentityObjectType: EditIndividualIdentityObjectType,
  BankTransferObjectType: BankTransferObjectType,
  EditBankTransferObjectType: EditBankTransferObjectType,
  IndividualDeleteIssueTypeExtras: IndividualDeleteIssueTypeExtras,
  HouseholdDeleteIssueTypeExtras: HouseholdDeleteIssueTypeExtras,
  AddIndividualIssueTypeExtras: AddIndividualIssueTypeExtras,
  AddIndividualDataObjectType: AddIndividualDataObjectType,
  GrievanceDocumentInput: GrievanceDocumentInput,
  Upload: ResolverTypeWrapper<Scalars['Upload']>,
  CreateGrievanceTicketMutation: ResolverTypeWrapper<CreateGrievanceTicketMutation>,
  UpdateGrievanceTicketInput: UpdateGrievanceTicketInput,
  UpdateGrievanceTicketExtrasInput: UpdateGrievanceTicketExtrasInput,
  UpdateHouseholdDataUpdateIssueTypeExtras: UpdateHouseholdDataUpdateIssueTypeExtras,
  UpdateIndividualDataUpdateIssueTypeExtras: UpdateIndividualDataUpdateIssueTypeExtras,
  UpdateAddIndividualIssueTypeExtras: UpdateAddIndividualIssueTypeExtras,
  TicketPaymentVerificationDetailsExtras: TicketPaymentVerificationDetailsExtras,
  GrievanceDocumentUpdateInput: GrievanceDocumentUpdateInput,
  UpdateGrievanceTicketMutation: ResolverTypeWrapper<UpdateGrievanceTicketMutation>,
  GrievanceStatusChangeMutation: ResolverTypeWrapper<GrievanceStatusChangeMutation>,
  BulkUpdateGrievanceTicketsAssigneesMutation: ResolverTypeWrapper<BulkUpdateGrievanceTicketsAssigneesMutation>,
  CreateTicketNoteInput: CreateTicketNoteInput,
  CreateTicketNoteMutation: ResolverTypeWrapper<CreateTicketNoteMutation>,
  IndividualDataChangeApproveMutation: ResolverTypeWrapper<IndividualDataChangeApproveMutation>,
  HouseholdDataChangeApproveMutation: ResolverTypeWrapper<HouseholdDataChangeApproveMutation>,
  SimpleApproveMutation: ResolverTypeWrapper<SimpleApproveMutation>,
  DeleteHouseholdApproveMutation: ResolverTypeWrapper<DeleteHouseholdApproveMutation>,
  NeedsAdjudicationApproveMutation: ResolverTypeWrapper<NeedsAdjudicationApproveMutation>,
  PaymentDetailsApproveMutation: ResolverTypeWrapper<PaymentDetailsApproveMutation>,
  ReassignRoleMutation: ResolverTypeWrapper<ReassignRoleMutation>,
  CreatePaymentVerificationInput: CreatePaymentVerificationInput,
  CreateVerificationPlanMutation: ResolverTypeWrapper<CreateVerificationPlanMutation>,
  GenericPaymentPlanNode: ResolverTypeWrapper<GenericPaymentPlanNode>,
  EditPaymentVerificationInput: EditPaymentVerificationInput,
  EditPaymentVerificationMutation: ResolverTypeWrapper<EditPaymentVerificationMutation>,
  ExportXlsxPaymentVerificationPlanFile: ResolverTypeWrapper<ExportXlsxPaymentVerificationPlanFile>,
  ImportXlsxPaymentVerificationPlanFile: ResolverTypeWrapper<ImportXlsxPaymentVerificationPlanFile>,
  XlsxErrorNode: ResolverTypeWrapper<XlsxErrorNode>,
  ActivatePaymentVerificationPlan: ResolverTypeWrapper<ActivatePaymentVerificationPlan>,
  FinishPaymentVerificationPlan: ResolverTypeWrapper<FinishPaymentVerificationPlan>,
  DiscardPaymentVerificationPlan: ResolverTypeWrapper<DiscardPaymentVerificationPlan>,
  InvalidPaymentVerificationPlan: ResolverTypeWrapper<InvalidPaymentVerificationPlan>,
  DeletePaymentVerificationPlan: ResolverTypeWrapper<DeletePaymentVerificationPlan>,
  PaymentVerificationStatusForUpdate: PaymentVerificationStatusForUpdate,
  UpdatePaymentVerificationStatusAndReceivedAmount: ResolverTypeWrapper<UpdatePaymentVerificationStatusAndReceivedAmount>,
  MarkPaymentRecordAsFailedMutation: ResolverTypeWrapper<MarkPaymentRecordAsFailedMutation>,
  RevertMarkPaymentRecordAsFailedMutation: ResolverTypeWrapper<RevertMarkPaymentRecordAsFailedMutation>,
  MarkPaymentAsFailedMutation: ResolverTypeWrapper<MarkPaymentAsFailedMutation>,
  RevertMarkPaymentAsFailedMutation: ResolverTypeWrapper<RevertMarkPaymentAsFailedMutation>,
  UpdatePaymentVerificationReceivedAndReceivedAmount: ResolverTypeWrapper<UpdatePaymentVerificationReceivedAndReceivedAmount>,
  ActionPaymentPlanInput: ActionPaymentPlanInput,
  Action: Action,
  ActionPaymentPlanMutation: ResolverTypeWrapper<ActionPaymentPlanMutation>,
  CreatePaymentPlanInput: CreatePaymentPlanInput,
  CreatePaymentPlanMutation: ResolverTypeWrapper<CreatePaymentPlanMutation>,
  CreateFollowUpPaymentPlanMutation: ResolverTypeWrapper<CreateFollowUpPaymentPlanMutation>,
  UpdatePaymentPlanInput: UpdatePaymentPlanInput,
  UpdatePaymentPlanMutation: ResolverTypeWrapper<UpdatePaymentPlanMutation>,
  DeletePaymentPlanMutation: ResolverTypeWrapper<DeletePaymentPlanMutation>,
  ChooseDeliveryMechanismsForPaymentPlanInput: ChooseDeliveryMechanismsForPaymentPlanInput,
  ChooseDeliveryMechanismsForPaymentPlanMutation: ResolverTypeWrapper<ChooseDeliveryMechanismsForPaymentPlanMutation>,
  AssignFspToDeliveryMechanismInput: AssignFspToDeliveryMechanismInput,
  FSPToDeliveryMechanismMappingInput: FspToDeliveryMechanismMappingInput,
  AssignFspToDeliveryMechanismMutation: ResolverTypeWrapper<AssignFspToDeliveryMechanismMutation>,
  ExportXLSXPaymentPlanPaymentListMutation: ResolverTypeWrapper<ExportXlsxPaymentPlanPaymentListMutation>,
  ExportXLSXPaymentPlanPaymentListPerFSPMutation: ResolverTypeWrapper<ExportXlsxPaymentPlanPaymentListPerFspMutation>,
  ImportXLSXPaymentPlanPaymentListMutation: ResolverTypeWrapper<ImportXlsxPaymentPlanPaymentListMutation>,
  ImportXLSXPaymentPlanPaymentListPerFSPMutation: ResolverTypeWrapper<ImportXlsxPaymentPlanPaymentListPerFspMutation>,
  SetSteficonRuleOnPaymentPlanPaymentListMutation: ResolverTypeWrapper<SetSteficonRuleOnPaymentPlanPaymentListMutation>,
  ExcludeHouseholdsMutation: ResolverTypeWrapper<ExcludeHouseholdsMutation>,
  ExportPDFPaymentPlanSummaryMutation: ResolverTypeWrapper<ExportPdfPaymentPlanSummaryMutation>,
  CreateTargetPopulationInput: CreateTargetPopulationInput,
  TargetingCriteriaObjectType: TargetingCriteriaObjectType,
  TargetingCriteriaRuleObjectType: TargetingCriteriaRuleObjectType,
  TargetingCriteriaRuleFilterObjectType: TargetingCriteriaRuleFilterObjectType,
  TargetingIndividualRuleFilterBlockObjectType: TargetingIndividualRuleFilterBlockObjectType,
  CreateTargetPopulationMutation: ResolverTypeWrapper<CreateTargetPopulationMutation>,
  UpdateTargetPopulationInput: UpdateTargetPopulationInput,
  UpdateTargetPopulationMutation: ResolverTypeWrapper<UpdateTargetPopulationMutation>,
  CopyTargetPopulationMutationInput: CopyTargetPopulationMutationInput,
  CopyTargetPopulationInput: CopyTargetPopulationInput,
  CopyTargetPopulationMutationPayload: ResolverTypeWrapper<CopyTargetPopulationMutationPayload>,
  DeleteTargetPopulationMutationInput: DeleteTargetPopulationMutationInput,
  DeleteTargetPopulationMutationPayload: ResolverTypeWrapper<DeleteTargetPopulationMutationPayload>,
  LockTargetPopulationMutation: ResolverTypeWrapper<LockTargetPopulationMutation>,
  UnlockTargetPopulationMutation: ResolverTypeWrapper<UnlockTargetPopulationMutation>,
  FinalizeTargetPopulationMutation: ResolverTypeWrapper<FinalizeTargetPopulationMutation>,
  SetSteficonRuleOnTargetPopulationMutationInput: SetSteficonRuleOnTargetPopulationMutationInput,
  SetSteficonRuleOnTargetPopulationMutationPayload: ResolverTypeWrapper<SetSteficonRuleOnTargetPopulationMutationPayload>,
  RebuildTargetPopulationMutation: ResolverTypeWrapper<RebuildTargetPopulationMutation>,
  CreateProgramInput: CreateProgramInput,
  CreateProgram: ResolverTypeWrapper<CreateProgram>,
  UpdateProgramInput: UpdateProgramInput,
  UpdateProgram: ResolverTypeWrapper<UpdateProgram>,
  DeleteProgram: ResolverTypeWrapper<DeleteProgram>,
  CopyProgramInput: CopyProgramInput,
  CopyProgram: ResolverTypeWrapper<CopyProgram>,
  UploadImportDataXLSXFileAsync: ResolverTypeWrapper<UploadImportDataXlsxFileAsync>,
  DeleteRegistrationDataImport: ResolverTypeWrapper<DeleteRegistrationDataImport>,
  RegistrationXlsxImportMutationInput: RegistrationXlsxImportMutationInput,
  RegistrationXlsxImportMutation: ResolverTypeWrapper<RegistrationXlsxImportMutation>,
  RegistrationKoboImportMutationInput: RegistrationKoboImportMutationInput,
  RegistrationKoboImportMutation: ResolverTypeWrapper<RegistrationKoboImportMutation>,
  SaveKoboProjectImportDataAsync: ResolverTypeWrapper<SaveKoboProjectImportDataAsync>,
  MergeRegistrationDataImportMutation: ResolverTypeWrapper<MergeRegistrationDataImportMutation>,
  RefuseRegistrationDataImportMutation: ResolverTypeWrapper<RefuseRegistrationDataImportMutation>,
  RegistrationDeduplicationMutation: ResolverTypeWrapper<RegistrationDeduplicationMutation>,
  EraseRegistrationDataImportMutation: ResolverTypeWrapper<EraseRegistrationDataImportMutation>,
  CheckAgainstSanctionListMutation: ResolverTypeWrapper<CheckAgainstSanctionListMutation>,
};

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
  Query: {},
  ID: Scalars['ID'],
  CommunicationMessageNode: CommunicationMessageNode,
  Node: Node,
  DateTime: Scalars['DateTime'],
  String: Scalars['String'],
  UserNode: UserNode,
  Boolean: Scalars['Boolean'],
  UserStatus: UserStatus,
  PartnerType: PartnerType,
  Int: Scalars['Int'],
  UserNodeConnection: UserNodeConnection,
  PageInfo: PageInfo,
  UserNodeEdge: UserNodeEdge,
  IndividualIdentityNodeConnection: IndividualIdentityNodeConnection,
  IndividualIdentityNodeEdge: IndividualIdentityNodeEdge,
  IndividualIdentityNode: IndividualIdentityNode,
  IndividualNode: IndividualNode,
  BigInt: Scalars['BigInt'],
  IndividualSex: IndividualSex,
  Date: Scalars['Date'],
  IndividualMaritalStatus: IndividualMaritalStatus,
  IndividualRelationship: IndividualRelationship,
  HouseholdNode: HouseholdNode,
  HouseholdResidenceStatus: HouseholdResidenceStatus,
  AreaNode: AreaNode,
  UUID: Scalars['UUID'],
  AreaTypeNode: AreaTypeNode,
  JSONString: Scalars['JSONString'],
  AreaTypeNodeConnection: AreaTypeNodeConnection,
  AreaTypeNodeEdge: AreaTypeNodeEdge,
  AreaNodeConnection: AreaNodeConnection,
  AreaNodeEdge: AreaNodeEdge,
  HouseholdNodeConnection: HouseholdNodeConnection,
  HouseholdNodeEdge: HouseholdNodeEdge,
  GrievanceTicketNodeConnection: GrievanceTicketNodeConnection,
  GrievanceTicketNodeEdge: GrievanceTicketNodeEdge,
  GrievanceTicketNode: GrievanceTicketNode,
  UserBusinessAreaNode: UserBusinessAreaNode,
  Float: Scalars['Float'],
  UserBusinessAreaNodeConnection: UserBusinessAreaNodeConnection,
  UserBusinessAreaNodeEdge: UserBusinessAreaNodeEdge,
  UserRoleNode: UserRoleNode,
  RoleNode: RoleNode,
  RoleSubsystem: RoleSubsystem,
  IndividualNodeConnection: IndividualNodeConnection,
  IndividualNodeEdge: IndividualNodeEdge,
  RegistrationDataImportNodeConnection: RegistrationDataImportNodeConnection,
  RegistrationDataImportNodeEdge: RegistrationDataImportNodeEdge,
  RegistrationDataImportNode: RegistrationDataImportNode,
  RegistrationDataImportStatus: RegistrationDataImportStatus,
  RegistrationDataImportDataSource: RegistrationDataImportDataSource,
  ProgramNode: ProgramNode,
  ProgramStatus: ProgramStatus,
  Decimal: Scalars['Decimal'],
  ProgramFrequencyOfPayments: ProgramFrequencyOfPayments,
  ProgramSector: ProgramSector,
  ProgramScope: ProgramScope,
  PaymentPlanNodeConnection: PaymentPlanNodeConnection,
  PaymentPlanNodeEdge: PaymentPlanNodeEdge,
  PaymentPlanNode: PaymentPlanNode,
  PaymentPlanStatus: PaymentPlanStatus,
  PaymentPlanBackgroundActionStatus: PaymentPlanBackgroundActionStatus,
  TargetPopulationNode: TargetPopulationNode,
  TargetPopulationStatus: TargetPopulationStatus,
  TargetPopulationBuildStatus: TargetPopulationBuildStatus,
  TargetingCriteriaNode: TargetingCriteriaNode,
  TargetingCriteriaRuleNode: TargetingCriteriaRuleNode,
  TargetingIndividualRuleFilterBlockNode: TargetingIndividualRuleFilterBlockNode,
  TargetingIndividualBlockRuleFilterNode: TargetingIndividualBlockRuleFilterNode,
  TargetingIndividualBlockRuleFilterComparisonMethod: TargetingIndividualBlockRuleFilterComparisonMethod,
  Arg: Scalars['Arg'],
  FieldAttributeNode: FieldAttributeNode,
  LabelNode: LabelNode,
  CoreFieldChoiceObject: CoreFieldChoiceObject,
  TargetingCriteriaRuleFilterNode: TargetingCriteriaRuleFilterNode,
  TargetingCriteriaRuleFilterComparisonMethod: TargetingCriteriaRuleFilterComparisonMethod,
  RuleCommitNode: RuleCommitNode,
  SteficonRuleNode: SteficonRuleNode,
  RuleLanguage: RuleLanguage,
  RuleSecurity: RuleSecurity,
  RuleType: RuleType,
  RuleCommitNodeConnection: RuleCommitNodeConnection,
  RuleCommitNodeEdge: RuleCommitNodeEdge,
  RuleCommitLanguage: RuleCommitLanguage,
  TargetPopulationNodeConnection: TargetPopulationNodeConnection,
  TargetPopulationNodeEdge: TargetPopulationNodeEdge,
  PaymentRecordNodeConnection: PaymentRecordNodeConnection,
  PaymentRecordNodeEdge: PaymentRecordNodeEdge,
  PaymentRecordNode: PaymentRecordNode,
  PaymentRecordStatus: PaymentRecordStatus,
  PaymentRecordDeliveryType: PaymentRecordDeliveryType,
  CashPlanNode: CashPlanNode,
  CashPlanStatus: CashPlanStatus,
  ServiceProviderNode: ServiceProviderNode,
  CashPlanNodeConnection: CashPlanNodeConnection,
  CashPlanNodeEdge: CashPlanNodeEdge,
  PaymentVerificationPlanNodeConnection: PaymentVerificationPlanNodeConnection,
  PaymentVerificationPlanNodeEdge: PaymentVerificationPlanNodeEdge,
  PaymentVerificationPlanNode: PaymentVerificationPlanNode,
  PaymentVerificationPlanStatus: PaymentVerificationPlanStatus,
  ContentTypeObjectType: ContentTypeObjectType,
  PaymentVerificationNodeConnection: PaymentVerificationNodeConnection,
  PaymentVerificationNodeEdge: PaymentVerificationNodeEdge,
  PaymentVerificationNode: PaymentVerificationNode,
  PaymentVerificationStatus: PaymentVerificationStatus,
  TicketPaymentVerificationDetailsNodeConnection: TicketPaymentVerificationDetailsNodeConnection,
  TicketPaymentVerificationDetailsNodeEdge: TicketPaymentVerificationDetailsNodeEdge,
  TicketPaymentVerificationDetailsNode: TicketPaymentVerificationDetailsNode,
  TicketPaymentVerificationDetailsPaymentVerificationStatus: TicketPaymentVerificationDetailsPaymentVerificationStatus,
  TicketPaymentVerificationDetailsNewStatus: TicketPaymentVerificationDetailsNewStatus,
  GenericPaymentNode: GenericPaymentNode,
  PaymentVerificationSummaryNodeConnection: PaymentVerificationSummaryNodeConnection,
  PaymentVerificationSummaryNodeEdge: PaymentVerificationSummaryNodeEdge,
  PaymentVerificationSummaryNode: PaymentVerificationSummaryNode,
  PaymentVerificationSummaryStatus: PaymentVerificationSummaryStatus,
  TicketComplaintDetailsNodeConnection: TicketComplaintDetailsNodeConnection,
  TicketComplaintDetailsNodeEdge: TicketComplaintDetailsNodeEdge,
  TicketComplaintDetailsNode: TicketComplaintDetailsNode,
  PaymentRecordAndPaymentNode: PaymentRecordAndPaymentNode,
  CashPlanAndPaymentPlanNode: CashPlanAndPaymentPlanNode,
  TicketSensitiveDetailsNodeConnection: TicketSensitiveDetailsNodeConnection,
  TicketSensitiveDetailsNodeEdge: TicketSensitiveDetailsNodeEdge,
  TicketSensitiveDetailsNode: TicketSensitiveDetailsNode,
  PaymentVerificationLogEntryNodeConnection: PaymentVerificationLogEntryNodeConnection,
  PaymentVerificationLogEntryNodeEdge: PaymentVerificationLogEntryNodeEdge,
  PaymentVerificationLogEntryNode: PaymentVerificationLogEntryNode,
  LogEntryAction: LogEntryAction,
  ProgramNodeConnection: ProgramNodeConnection,
  ProgramNodeEdge: ProgramNodeEdge,
  PaymentVerificationPlanSampling: PaymentVerificationPlanSampling,
  PaymentVerificationPlanVerificationChannel: PaymentVerificationPlanVerificationChannel,
  AgeFilterObject: AgeFilterObject,
  PaymentRecordEntitlementCardStatus: PaymentRecordEntitlementCardStatus,
  HouseholdSelectionNode: HouseholdSelectionNode,
  CommunicationMessageNodeConnection: CommunicationMessageNodeConnection,
  CommunicationMessageNodeEdge: CommunicationMessageNodeEdge,
  SurveyNodeConnection: SurveyNodeConnection,
  SurveyNodeEdge: SurveyNodeEdge,
  SurveyNode: SurveyNode,
  SurveyCategory: SurveyCategory,
  SurveySamplingType: SurveySamplingType,
  PaymentPlanCurrency: PaymentPlanCurrency,
  DeliveryMechanismNode: DeliveryMechanismNode,
  FinancialServiceProviderNode: FinancialServiceProviderNode,
  FinancialServiceProviderCommunicationChannel: FinancialServiceProviderCommunicationChannel,
  FinancialServiceProviderXlsxTemplateNodeConnection: FinancialServiceProviderXlsxTemplateNodeConnection,
  FinancialServiceProviderXlsxTemplateNodeEdge: FinancialServiceProviderXlsxTemplateNodeEdge,
  FinancialServiceProviderXlsxTemplateNode: FinancialServiceProviderXlsxTemplateNode,
  FinancialServiceProviderNodeConnection: FinancialServiceProviderNodeConnection,
  FinancialServiceProviderNodeEdge: FinancialServiceProviderNodeEdge,
  FinancialServiceProviderXlsxReportNodeConnection: FinancialServiceProviderXlsxReportNodeConnection,
  FinancialServiceProviderXlsxReportNodeEdge: FinancialServiceProviderXlsxReportNodeEdge,
  FinancialServiceProviderXlsxReportNode: FinancialServiceProviderXlsxReportNode,
  DeliveryMechanismNodeConnection: DeliveryMechanismNodeConnection,
  DeliveryMechanismNodeEdge: DeliveryMechanismNodeEdge,
  PaymentNodeConnection: PaymentNodeConnection,
  PaymentNodeEdge: PaymentNodeEdge,
  PaymentNode: PaymentNode,
  PaymentStatus: PaymentStatus,
  PaymentDeliveryType: PaymentDeliveryType,
  PaymentHouseholdSnapshotNode: PaymentHouseholdSnapshotNode,
  PaymentConflictDataNode: PaymentConflictDataNode,
  DeliveryMechanismPerPaymentPlanDeliveryMechanism: DeliveryMechanismPerPaymentPlanDeliveryMechanism,
  ApprovalProcessNodeConnection: ApprovalProcessNodeConnection,
  ApprovalProcessNodeEdge: ApprovalProcessNodeEdge,
  ApprovalProcessNode: ApprovalProcessNode,
  FilteredActionsListNode: FilteredActionsListNode,
  ApprovalNode: ApprovalNode,
  VolumeByDeliveryMechanismNode: VolumeByDeliveryMechanismNode,
  ReconciliationSummaryNode: ReconciliationSummaryNode,
  ReportNodeConnection: ReportNodeConnection,
  ReportNodeEdge: ReportNodeEdge,
  ReportNode: ReportNode,
  FeedbackNodeConnection: FeedbackNodeConnection,
  FeedbackNodeEdge: FeedbackNodeEdge,
  FeedbackNode: FeedbackNode,
  FeedbackIssueType: FeedbackIssueType,
  FeedbackMessageNodeConnection: FeedbackMessageNodeConnection,
  FeedbackMessageNodeEdge: FeedbackMessageNodeEdge,
  FeedbackMessageNode: FeedbackMessageNode,
  CountAndPercentageNode: CountAndPercentageNode,
  ServiceProviderNodeConnection: ServiceProviderNodeConnection,
  ServiceProviderNodeEdge: ServiceProviderNodeEdge,
  TicketNoteNodeConnection: TicketNoteNodeConnection,
  TicketNoteNodeEdge: TicketNoteNodeEdge,
  TicketNoteNode: TicketNoteNode,
  TicketHouseholdDataUpdateDetailsNode: TicketHouseholdDataUpdateDetailsNode,
  TicketIndividualDataUpdateDetailsNode: TicketIndividualDataUpdateDetailsNode,
  TicketAddIndividualDetailsNode: TicketAddIndividualDetailsNode,
  TicketDeleteIndividualDetailsNode: TicketDeleteIndividualDetailsNode,
  TicketDeleteHouseholdDetailsNode: TicketDeleteHouseholdDetailsNode,
  TicketSystemFlaggingDetailsNode: TicketSystemFlaggingDetailsNode,
  SanctionListIndividualNode: SanctionListIndividualNode,
  SanctionListIndividualDocumentNodeConnection: SanctionListIndividualDocumentNodeConnection,
  SanctionListIndividualDocumentNodeEdge: SanctionListIndividualDocumentNodeEdge,
  SanctionListIndividualDocumentNode: SanctionListIndividualDocumentNode,
  SanctionListIndividualNationalitiesNodeConnection: SanctionListIndividualNationalitiesNodeConnection,
  SanctionListIndividualNationalitiesNodeEdge: SanctionListIndividualNationalitiesNodeEdge,
  SanctionListIndividualNationalitiesNode: SanctionListIndividualNationalitiesNode,
  SanctionListIndividualCountriesNodeConnection: SanctionListIndividualCountriesNodeConnection,
  SanctionListIndividualCountriesNodeEdge: SanctionListIndividualCountriesNodeEdge,
  SanctionListIndividualCountriesNode: SanctionListIndividualCountriesNode,
  SanctionListIndividualAliasNameNodeConnection: SanctionListIndividualAliasNameNodeConnection,
  SanctionListIndividualAliasNameNodeEdge: SanctionListIndividualAliasNameNodeEdge,
  SanctionListIndividualAliasNameNode: SanctionListIndividualAliasNameNode,
  SanctionListIndividualDateOfBirthNodeConnection: SanctionListIndividualDateOfBirthNodeConnection,
  SanctionListIndividualDateOfBirthNodeEdge: SanctionListIndividualDateOfBirthNodeEdge,
  SanctionListIndividualDateOfBirthNode: SanctionListIndividualDateOfBirthNode,
  TicketNeedsAdjudicationDetailsNode: TicketNeedsAdjudicationDetailsNode,
  TicketNeedsAdjudicationDetailsExtraDataNode: TicketNeedsAdjudicationDetailsExtraDataNode,
  DeduplicationResultNode: DeduplicationResultNode,
  TicketPositiveFeedbackDetailsNode: TicketPositiveFeedbackDetailsNode,
  TicketNegativeFeedbackDetailsNode: TicketNegativeFeedbackDetailsNode,
  TicketReferralDetailsNode: TicketReferralDetailsNode,
  GrievanceDocumentNodeConnection: GrievanceDocumentNodeConnection,
  GrievanceDocumentNodeEdge: GrievanceDocumentNodeEdge,
  GrievanceDocumentNode: GrievanceDocumentNode,
  GeoJSON: Scalars['GeoJSON'],
  FlexFieldsScalar: Scalars['FlexFieldsScalar'],
  HouseholdOrgEnumerator: HouseholdOrgEnumerator,
  HouseholdRegistrationMethod: HouseholdRegistrationMethod,
  HouseholdCollectIndividualData: HouseholdCollectIndividualData,
  IndividualRoleInHouseholdNode: IndividualRoleInHouseholdNode,
  IndividualRoleInHouseholdRole: IndividualRoleInHouseholdRole,
  TicketHouseholdDataUpdateDetailsNodeConnection: TicketHouseholdDataUpdateDetailsNodeConnection,
  TicketHouseholdDataUpdateDetailsNodeEdge: TicketHouseholdDataUpdateDetailsNodeEdge,
  TicketAddIndividualDetailsNodeConnection: TicketAddIndividualDetailsNodeConnection,
  TicketAddIndividualDetailsNodeEdge: TicketAddIndividualDetailsNodeEdge,
  TicketDeleteHouseholdDetailsNodeConnection: TicketDeleteHouseholdDetailsNodeConnection,
  TicketDeleteHouseholdDetailsNodeEdge: TicketDeleteHouseholdDetailsNodeEdge,
  TicketPositiveFeedbackDetailsNodeConnection: TicketPositiveFeedbackDetailsNodeConnection,
  TicketPositiveFeedbackDetailsNodeEdge: TicketPositiveFeedbackDetailsNodeEdge,
  TicketNegativeFeedbackDetailsNodeConnection: TicketNegativeFeedbackDetailsNodeConnection,
  TicketNegativeFeedbackDetailsNodeEdge: TicketNegativeFeedbackDetailsNodeEdge,
  TicketReferralDetailsNodeConnection: TicketReferralDetailsNodeConnection,
  TicketReferralDetailsNodeEdge: TicketReferralDetailsNodeEdge,
  ProgramsWithDeliveredQuantityNode: ProgramsWithDeliveredQuantityNode,
  DeliveredQuantityNode: DeliveredQuantityNode,
  IndividualDisability: IndividualDisability,
  IndividualDeduplicationGoldenRecordStatus: IndividualDeduplicationGoldenRecordStatus,
  IndividualDeduplicationBatchStatus: IndividualDeduplicationBatchStatus,
  DocumentNodeConnection: DocumentNodeConnection,
  DocumentNodeEdge: DocumentNodeEdge,
  DocumentNode: DocumentNode,
  DocumentTypeNode: DocumentTypeNode,
  DocumentStatus: DocumentStatus,
  BankAccountInfoNode: BankAccountInfoNode,
  TicketIndividualDataUpdateDetailsNodeConnection: TicketIndividualDataUpdateDetailsNodeConnection,
  TicketIndividualDataUpdateDetailsNodeEdge: TicketIndividualDataUpdateDetailsNodeEdge,
  TicketDeleteIndividualDetailsNodeConnection: TicketDeleteIndividualDetailsNodeConnection,
  TicketDeleteIndividualDetailsNodeEdge: TicketDeleteIndividualDetailsNodeEdge,
  TicketSystemFlaggingDetailsNodeConnection: TicketSystemFlaggingDetailsNodeConnection,
  TicketSystemFlaggingDetailsNodeEdge: TicketSystemFlaggingDetailsNodeEdge,
  TicketNeedsAdjudicationDetailsNodeConnection: TicketNeedsAdjudicationDetailsNodeConnection,
  TicketNeedsAdjudicationDetailsNodeEdge: TicketNeedsAdjudicationDetailsNodeEdge,
  MessageSamplingType: MessageSamplingType,
  CommunicationMessageRecipientMapNodeConnection: CommunicationMessageRecipientMapNodeConnection,
  CommunicationMessageRecipientMapNodeEdge: CommunicationMessageRecipientMapNodeEdge,
  CommunicationMessageRecipientMapNode: CommunicationMessageRecipientMapNode,
  GetAccountabilityCommunicationMessageSampleSizeInput: GetAccountabilityCommunicationMessageSampleSizeInput,
  SamplingChoices: SamplingChoices,
  AccountabilityFullListArguments: AccountabilityFullListArguments,
  AccountabilityRandomSamplingArguments: AccountabilityRandomSamplingArguments,
  AccountabilityCommunicationMessageAgeInput: AccountabilityCommunicationMessageAgeInput,
  GetCommunicationMessageSampleSizeNode: GetCommunicationMessageSampleSizeNode,
  ChoiceObject: ChoiceObject,
  RecipientNodeConnection: RecipientNodeConnection,
  RecipientNodeEdge: RecipientNodeEdge,
  RecipientNode: RecipientNode,
  AccountabilitySampleSizeInput: AccountabilitySampleSizeInput,
  AccountabilitySampleSizeNode: AccountabilitySampleSizeNode,
  RapidProFlowNode: RapidProFlowNode,
  LogEntryNodeConnection: LogEntryNodeConnection,
  LogEntryNodeEdge: LogEntryNodeEdge,
  LogEntryNode: LogEntryNode,
  SanctionListIndividualNodeConnection: SanctionListIndividualNodeConnection,
  SanctionListIndividualNodeEdge: SanctionListIndividualNodeEdge,
  TicketByType: TicketByType,
  ChartDatasetNode: ChartDatasetNode,
  _DatasetsNode: _DatasetsNode,
  ChartDetailedDatasetsNode: ChartDetailedDatasetsNode,
  _DetailedDatasetsNode: _DetailedDatasetsNode,
  ChartGrievanceTicketsNode: ChartGrievanceTicketsNode,
  IssueTypesObject: IssueTypesObject,
  ChoiceObjectInt: ChoiceObjectInt,
  SteficonRuleNodeConnection: SteficonRuleNodeConnection,
  SteficonRuleNodeEdge: SteficonRuleNodeEdge,
  PaginatedPaymentRecordsAndPaymentsNode: PaginatedPaymentRecordsAndPaymentsNode,
  PageInfoNode: PageInfoNode,
  PaymentRecordsAndPaymentsEdges: PaymentRecordsAndPaymentsEdges,
  ChartPaymentVerification: ChartPaymentVerification,
  SectionTotalNode: SectionTotalNode,
  TableTotalCashTransferred: TableTotalCashTransferred,
  _TableTotalCashTransferredDataNode: _TableTotalCashTransferredDataNode,
  RapidProFlow: RapidProFlow,
  RapidProFlowRun: RapidProFlowRun,
  RapidProFlowResult: RapidProFlowResult,
  GetCashplanVerificationSampleSizeInput: GetCashplanVerificationSampleSizeInput,
  FullListArguments: FullListArguments,
  RandomSamplingArguments: RandomSamplingArguments,
  AgeInput: AgeInput,
  RapidProArguments: RapidProArguments,
  GetCashplanVerificationSampleSizeObject: GetCashplanVerificationSampleSizeObject,
  AvailableFspsForDeliveryMechanismsInput: AvailableFspsForDeliveryMechanismsInput,
  FspChoices: FspChoices,
  FspChoice: FspChoice,
  PaginatedCashPlanAndPaymentPlanNode: PaginatedCashPlanAndPaymentPlanNode,
  CashPlanAndPaymentPlanEdges: CashPlanAndPaymentPlanEdges,
  BusinessAreaNode: BusinessAreaNode,
  BusinessAreaNodeConnection: BusinessAreaNodeConnection,
  BusinessAreaNodeEdge: BusinessAreaNodeEdge,
  GroupAttributeNode: GroupAttributeNode,
  KoboAssetObject: KoboAssetObject,
  KoboAssetObjectConnection: KoboAssetObjectConnection,
  KoboAssetObjectEdge: KoboAssetObjectEdge,
  LanguageObjectConnection: LanguageObjectConnection,
  LanguageObjectEdge: LanguageObjectEdge,
  LanguageObject: LanguageObject,
  ImportedHouseholdNode: ImportedHouseholdNode,
  ImportedHouseholdConsentSharing: ImportedHouseholdConsentSharing,
  ImportedHouseholdResidenceStatus: ImportedHouseholdResidenceStatus,
  ImportedIndividualNode: ImportedIndividualNode,
  ImportedIndividualSex: ImportedIndividualSex,
  ImportedIndividualMaritalStatus: ImportedIndividualMaritalStatus,
  RegistrationDataImportDatahubNode: RegistrationDataImportDatahubNode,
  ImportDataNode: ImportDataNode,
  ImportDataStatus: ImportDataStatus,
  ImportDataDataType: ImportDataDataType,
  KoboImportDataNode: KoboImportDataNode,
  KoboErrorNode: KoboErrorNode,
  XlsxRowErrorNode: XlsxRowErrorNode,
  RegistrationDataImportDatahubImportDone: RegistrationDataImportDatahubImportDone,
  ImportedHouseholdNodeConnection: ImportedHouseholdNodeConnection,
  ImportedHouseholdNodeEdge: ImportedHouseholdNodeEdge,
  ImportedIndividualNodeConnection: ImportedIndividualNodeConnection,
  ImportedIndividualNodeEdge: ImportedIndividualNodeEdge,
  ImportedIndividualDisability: ImportedIndividualDisability,
  ImportedIndividualDeduplicationBatchStatus: ImportedIndividualDeduplicationBatchStatus,
  ImportedIndividualDeduplicationGoldenRecordStatus: ImportedIndividualDeduplicationGoldenRecordStatus,
  ImportedDocumentNodeConnection: ImportedDocumentNodeConnection,
  ImportedDocumentNodeEdge: ImportedDocumentNodeEdge,
  ImportedDocumentNode: ImportedDocumentNode,
  ImportedDocumentTypeNode: ImportedDocumentTypeNode,
  ImportedIndividualIdentityNodeConnection: ImportedIndividualIdentityNodeConnection,
  ImportedIndividualIdentityNodeEdge: ImportedIndividualIdentityNodeEdge,
  ImportedIndividualIdentityNode: ImportedIndividualIdentityNode,
  ImportedHouseholdOrgEnumerator: ImportedHouseholdOrgEnumerator,
  ImportedHouseholdRegistrationMethod: ImportedHouseholdRegistrationMethod,
  ImportedHouseholdCollectIndividualData: ImportedHouseholdCollectIndividualData,
  ImportedHouseholdCurrency: ImportedHouseholdCurrency,
  RegistrationDataImportDatahubNodeConnection: RegistrationDataImportDatahubNodeConnection,
  RegistrationDataImportDatahubNodeEdge: RegistrationDataImportDatahubNodeEdge,
  DjangoDebug: DjangoDebug,
  DjangoDebugSQL: DjangoDebugSql,
  Mutations: {},
  CreateAccountabilityCommunicationMessageInput: CreateAccountabilityCommunicationMessageInput,
  CreateCommunicationMessageMutation: CreateCommunicationMessageMutation,
  CreateFeedbackInput: CreateFeedbackInput,
  CreateFeedbackMutation: CreateFeedbackMutation,
  UpdateFeedbackInput: UpdateFeedbackInput,
  UpdateFeedbackMutation: UpdateFeedbackMutation,
  CreateFeedbackMessageInput: CreateFeedbackMessageInput,
  CreateFeedbackMessageMutation: CreateFeedbackMessageMutation,
  CreateSurveyInput: CreateSurveyInput,
  CreateSurveyMutation: CreateSurveyMutation,
  ExportSurveySampleMutationMutation: ExportSurveySampleMutationMutation,
  CreateReportInput: CreateReportInput,
  CreateReport: CreateReport,
  RestartCreateReportInput: RestartCreateReportInput,
  RestartCreateReport: RestartCreateReport,
  CreateDashboardReportInput: CreateDashboardReportInput,
  CreateDashboardReport: CreateDashboardReport,
  CreateGrievanceTicketInput: CreateGrievanceTicketInput,
  CreateGrievanceTicketExtrasInput: CreateGrievanceTicketExtrasInput,
  CategoryExtrasInput: CategoryExtrasInput,
  SensitiveGrievanceTicketExtras: SensitiveGrievanceTicketExtras,
  GrievanceComplaintTicketExtras: GrievanceComplaintTicketExtras,
  PositiveFeedbackTicketExtras: PositiveFeedbackTicketExtras,
  NegativeFeedbackTicketExtras: NegativeFeedbackTicketExtras,
  ReferralTicketExtras: ReferralTicketExtras,
  IssueTypeExtrasInput: IssueTypeExtrasInput,
  HouseholdDataUpdateIssueTypeExtras: HouseholdDataUpdateIssueTypeExtras,
  HouseholdUpdateDataObjectType: HouseholdUpdateDataObjectType,
  IndividualDataUpdateIssueTypeExtras: IndividualDataUpdateIssueTypeExtras,
  IndividualUpdateDataObjectType: IndividualUpdateDataObjectType,
  IndividualDocumentObjectType: IndividualDocumentObjectType,
  EditIndividualDocumentObjectType: EditIndividualDocumentObjectType,
  IndividualIdentityObjectType: IndividualIdentityObjectType,
  EditIndividualIdentityObjectType: EditIndividualIdentityObjectType,
  BankTransferObjectType: BankTransferObjectType,
  EditBankTransferObjectType: EditBankTransferObjectType,
  IndividualDeleteIssueTypeExtras: IndividualDeleteIssueTypeExtras,
  HouseholdDeleteIssueTypeExtras: HouseholdDeleteIssueTypeExtras,
  AddIndividualIssueTypeExtras: AddIndividualIssueTypeExtras,
  AddIndividualDataObjectType: AddIndividualDataObjectType,
  GrievanceDocumentInput: GrievanceDocumentInput,
  Upload: Scalars['Upload'],
  CreateGrievanceTicketMutation: CreateGrievanceTicketMutation,
  UpdateGrievanceTicketInput: UpdateGrievanceTicketInput,
  UpdateGrievanceTicketExtrasInput: UpdateGrievanceTicketExtrasInput,
  UpdateHouseholdDataUpdateIssueTypeExtras: UpdateHouseholdDataUpdateIssueTypeExtras,
  UpdateIndividualDataUpdateIssueTypeExtras: UpdateIndividualDataUpdateIssueTypeExtras,
  UpdateAddIndividualIssueTypeExtras: UpdateAddIndividualIssueTypeExtras,
  TicketPaymentVerificationDetailsExtras: TicketPaymentVerificationDetailsExtras,
  GrievanceDocumentUpdateInput: GrievanceDocumentUpdateInput,
  UpdateGrievanceTicketMutation: UpdateGrievanceTicketMutation,
  GrievanceStatusChangeMutation: GrievanceStatusChangeMutation,
  BulkUpdateGrievanceTicketsAssigneesMutation: BulkUpdateGrievanceTicketsAssigneesMutation,
  CreateTicketNoteInput: CreateTicketNoteInput,
  CreateTicketNoteMutation: CreateTicketNoteMutation,
  IndividualDataChangeApproveMutation: IndividualDataChangeApproveMutation,
  HouseholdDataChangeApproveMutation: HouseholdDataChangeApproveMutation,
  SimpleApproveMutation: SimpleApproveMutation,
  DeleteHouseholdApproveMutation: DeleteHouseholdApproveMutation,
  NeedsAdjudicationApproveMutation: NeedsAdjudicationApproveMutation,
  PaymentDetailsApproveMutation: PaymentDetailsApproveMutation,
  ReassignRoleMutation: ReassignRoleMutation,
  CreatePaymentVerificationInput: CreatePaymentVerificationInput,
  CreateVerificationPlanMutation: CreateVerificationPlanMutation,
  GenericPaymentPlanNode: GenericPaymentPlanNode,
  EditPaymentVerificationInput: EditPaymentVerificationInput,
  EditPaymentVerificationMutation: EditPaymentVerificationMutation,
  ExportXlsxPaymentVerificationPlanFile: ExportXlsxPaymentVerificationPlanFile,
  ImportXlsxPaymentVerificationPlanFile: ImportXlsxPaymentVerificationPlanFile,
  XlsxErrorNode: XlsxErrorNode,
  ActivatePaymentVerificationPlan: ActivatePaymentVerificationPlan,
  FinishPaymentVerificationPlan: FinishPaymentVerificationPlan,
  DiscardPaymentVerificationPlan: DiscardPaymentVerificationPlan,
  InvalidPaymentVerificationPlan: InvalidPaymentVerificationPlan,
  DeletePaymentVerificationPlan: DeletePaymentVerificationPlan,
  PaymentVerificationStatusForUpdate: PaymentVerificationStatusForUpdate,
  UpdatePaymentVerificationStatusAndReceivedAmount: UpdatePaymentVerificationStatusAndReceivedAmount,
  MarkPaymentRecordAsFailedMutation: MarkPaymentRecordAsFailedMutation,
  RevertMarkPaymentRecordAsFailedMutation: RevertMarkPaymentRecordAsFailedMutation,
  MarkPaymentAsFailedMutation: MarkPaymentAsFailedMutation,
  RevertMarkPaymentAsFailedMutation: RevertMarkPaymentAsFailedMutation,
  UpdatePaymentVerificationReceivedAndReceivedAmount: UpdatePaymentVerificationReceivedAndReceivedAmount,
  ActionPaymentPlanInput: ActionPaymentPlanInput,
  Action: Action,
  ActionPaymentPlanMutation: ActionPaymentPlanMutation,
  CreatePaymentPlanInput: CreatePaymentPlanInput,
  CreatePaymentPlanMutation: CreatePaymentPlanMutation,
  CreateFollowUpPaymentPlanMutation: CreateFollowUpPaymentPlanMutation,
  UpdatePaymentPlanInput: UpdatePaymentPlanInput,
  UpdatePaymentPlanMutation: UpdatePaymentPlanMutation,
  DeletePaymentPlanMutation: DeletePaymentPlanMutation,
  ChooseDeliveryMechanismsForPaymentPlanInput: ChooseDeliveryMechanismsForPaymentPlanInput,
  ChooseDeliveryMechanismsForPaymentPlanMutation: ChooseDeliveryMechanismsForPaymentPlanMutation,
  AssignFspToDeliveryMechanismInput: AssignFspToDeliveryMechanismInput,
  FSPToDeliveryMechanismMappingInput: FspToDeliveryMechanismMappingInput,
  AssignFspToDeliveryMechanismMutation: AssignFspToDeliveryMechanismMutation,
  ExportXLSXPaymentPlanPaymentListMutation: ExportXlsxPaymentPlanPaymentListMutation,
  ExportXLSXPaymentPlanPaymentListPerFSPMutation: ExportXlsxPaymentPlanPaymentListPerFspMutation,
  ImportXLSXPaymentPlanPaymentListMutation: ImportXlsxPaymentPlanPaymentListMutation,
  ImportXLSXPaymentPlanPaymentListPerFSPMutation: ImportXlsxPaymentPlanPaymentListPerFspMutation,
  SetSteficonRuleOnPaymentPlanPaymentListMutation: SetSteficonRuleOnPaymentPlanPaymentListMutation,
  ExcludeHouseholdsMutation: ExcludeHouseholdsMutation,
  ExportPDFPaymentPlanSummaryMutation: ExportPdfPaymentPlanSummaryMutation,
  CreateTargetPopulationInput: CreateTargetPopulationInput,
  TargetingCriteriaObjectType: TargetingCriteriaObjectType,
  TargetingCriteriaRuleObjectType: TargetingCriteriaRuleObjectType,
  TargetingCriteriaRuleFilterObjectType: TargetingCriteriaRuleFilterObjectType,
  TargetingIndividualRuleFilterBlockObjectType: TargetingIndividualRuleFilterBlockObjectType,
  CreateTargetPopulationMutation: CreateTargetPopulationMutation,
  UpdateTargetPopulationInput: UpdateTargetPopulationInput,
  UpdateTargetPopulationMutation: UpdateTargetPopulationMutation,
  CopyTargetPopulationMutationInput: CopyTargetPopulationMutationInput,
  CopyTargetPopulationInput: CopyTargetPopulationInput,
  CopyTargetPopulationMutationPayload: CopyTargetPopulationMutationPayload,
  DeleteTargetPopulationMutationInput: DeleteTargetPopulationMutationInput,
  DeleteTargetPopulationMutationPayload: DeleteTargetPopulationMutationPayload,
  LockTargetPopulationMutation: LockTargetPopulationMutation,
  UnlockTargetPopulationMutation: UnlockTargetPopulationMutation,
  FinalizeTargetPopulationMutation: FinalizeTargetPopulationMutation,
  SetSteficonRuleOnTargetPopulationMutationInput: SetSteficonRuleOnTargetPopulationMutationInput,
  SetSteficonRuleOnTargetPopulationMutationPayload: SetSteficonRuleOnTargetPopulationMutationPayload,
  RebuildTargetPopulationMutation: RebuildTargetPopulationMutation,
  CreateProgramInput: CreateProgramInput,
  CreateProgram: CreateProgram,
  UpdateProgramInput: UpdateProgramInput,
  UpdateProgram: UpdateProgram,
  DeleteProgram: DeleteProgram,
  CopyProgramInput: CopyProgramInput,
  CopyProgram: CopyProgram,
  UploadImportDataXLSXFileAsync: UploadImportDataXlsxFileAsync,
  DeleteRegistrationDataImport: DeleteRegistrationDataImport,
  RegistrationXlsxImportMutationInput: RegistrationXlsxImportMutationInput,
  RegistrationXlsxImportMutation: RegistrationXlsxImportMutation,
  RegistrationKoboImportMutationInput: RegistrationKoboImportMutationInput,
  RegistrationKoboImportMutation: RegistrationKoboImportMutation,
  SaveKoboProjectImportDataAsync: SaveKoboProjectImportDataAsync,
  MergeRegistrationDataImportMutation: MergeRegistrationDataImportMutation,
  RefuseRegistrationDataImportMutation: RefuseRegistrationDataImportMutation,
  RegistrationDeduplicationMutation: RegistrationDeduplicationMutation,
  EraseRegistrationDataImportMutation: EraseRegistrationDataImportMutation,
  CheckAgainstSanctionListMutation: CheckAgainstSanctionListMutation,
};

export type _DatasetsNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['_DatasetsNode'] = ResolversParentTypes['_DatasetsNode']> = {
  data?: Resolver<Maybe<Array<Maybe<ResolversTypes['Float']>>>, ParentType, ContextType>,
};

export type _DetailedDatasetsNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['_DetailedDatasetsNode'] = ResolversParentTypes['_DetailedDatasetsNode']> = {
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  data?: Resolver<Maybe<Array<Maybe<ResolversTypes['Float']>>>, ParentType, ContextType>,
};

export type _TableTotalCashTransferredDataNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['_TableTotalCashTransferredDataNode'] = ResolversParentTypes['_TableTotalCashTransferredDataNode']> = {
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  admin2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  totalCashTransferred?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  totalHouseholds?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type AccountabilitySampleSizeNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['AccountabilitySampleSizeNode'] = ResolversParentTypes['AccountabilitySampleSizeNode']> = {
  numberOfRecipients?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  sampleSize?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type ActionPaymentPlanMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['ActionPaymentPlanMutation'] = ResolversParentTypes['ActionPaymentPlanMutation']> = {
  paymentPlan?: Resolver<Maybe<ResolversTypes['PaymentPlanNode']>, ParentType, ContextType>,
};

export type ActivatePaymentVerificationPlanResolvers<ContextType = any, ParentType extends ResolversParentTypes['ActivatePaymentVerificationPlan'] = ResolversParentTypes['ActivatePaymentVerificationPlan']> = {
  validationErrors?: Resolver<Maybe<ResolversTypes['Arg']>, ParentType, ContextType>,
  paymentPlan?: Resolver<Maybe<ResolversTypes['GenericPaymentPlanNode']>, ParentType, ContextType>,
};

export type AgeFilterObjectResolvers<ContextType = any, ParentType extends ResolversParentTypes['AgeFilterObject'] = ResolversParentTypes['AgeFilterObject']> = {
  min?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  max?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type ApprovalNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApprovalNode'] = ResolversParentTypes['ApprovalNode']> = {
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  comment?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  createdBy?: Resolver<Maybe<ResolversTypes['UserNode']>, ParentType, ContextType>,
  info?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type ApprovalProcessNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApprovalProcessNode'] = ResolversParentTypes['ApprovalProcessNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  sentForApprovalBy?: Resolver<Maybe<ResolversTypes['UserNode']>, ParentType, ContextType>,
  sentForApprovalDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  sentForAuthorizationBy?: Resolver<Maybe<ResolversTypes['UserNode']>, ParentType, ContextType>,
  sentForAuthorizationDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  sentForFinanceReleaseBy?: Resolver<Maybe<ResolversTypes['UserNode']>, ParentType, ContextType>,
  sentForFinanceReleaseDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  paymentPlan?: Resolver<ResolversTypes['PaymentPlanNode'], ParentType, ContextType>,
  approvalNumberRequired?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  authorizationNumberRequired?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  financeReleaseNumberRequired?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  rejectedOn?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  actions?: Resolver<Maybe<ResolversTypes['FilteredActionsListNode']>, ParentType, ContextType>,
};

export type ApprovalProcessNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApprovalProcessNodeConnection'] = ResolversParentTypes['ApprovalProcessNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['ApprovalProcessNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type ApprovalProcessNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApprovalProcessNodeEdge'] = ResolversParentTypes['ApprovalProcessNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['ApprovalProcessNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type AreaNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['AreaNode'] = ResolversParentTypes['AreaNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  originalId?: Resolver<Maybe<ResolversTypes['UUID']>, ParentType, ContextType>,
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  parent?: Resolver<Maybe<ResolversTypes['AreaNode']>, ParentType, ContextType>,
  pCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  areaType?: Resolver<ResolversTypes['AreaTypeNode'], ParentType, ContextType>,
  validFrom?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  validUntil?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  extras?: Resolver<ResolversTypes['JSONString'], ParentType, ContextType>,
  lft?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  rght?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  treeId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  level?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  areaSet?: Resolver<ResolversTypes['AreaNodeConnection'], ParentType, ContextType, AreaNodeAreaSetArgs>,
  householdSet?: Resolver<ResolversTypes['HouseholdNodeConnection'], ParentType, ContextType, AreaNodeHouseholdSetArgs>,
  grievanceticketSet?: Resolver<ResolversTypes['GrievanceTicketNodeConnection'], ParentType, ContextType, AreaNodeGrievanceticketSetArgs>,
  programs?: Resolver<ResolversTypes['ProgramNodeConnection'], ParentType, ContextType, AreaNodeProgramsArgs>,
  reports?: Resolver<ResolversTypes['ReportNodeConnection'], ParentType, ContextType, AreaNodeReportsArgs>,
  feedbackSet?: Resolver<ResolversTypes['FeedbackNodeConnection'], ParentType, ContextType, AreaNodeFeedbackSetArgs>,
};

export type AreaNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['AreaNodeConnection'] = ResolversParentTypes['AreaNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['AreaNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type AreaNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['AreaNodeEdge'] = ResolversParentTypes['AreaNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['AreaNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type AreaTypeNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['AreaTypeNode'] = ResolversParentTypes['AreaTypeNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  originalId?: Resolver<Maybe<ResolversTypes['UUID']>, ParentType, ContextType>,
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  areaLevel?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  parent?: Resolver<Maybe<ResolversTypes['AreaTypeNode']>, ParentType, ContextType>,
  validFrom?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  validUntil?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  extras?: Resolver<ResolversTypes['JSONString'], ParentType, ContextType>,
  lft?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  rght?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  treeId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  level?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  areatypeSet?: Resolver<ResolversTypes['AreaTypeNodeConnection'], ParentType, ContextType, AreaTypeNodeAreatypeSetArgs>,
  areaSet?: Resolver<ResolversTypes['AreaNodeConnection'], ParentType, ContextType, AreaTypeNodeAreaSetArgs>,
};

export type AreaTypeNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['AreaTypeNodeConnection'] = ResolversParentTypes['AreaTypeNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['AreaTypeNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type AreaTypeNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['AreaTypeNodeEdge'] = ResolversParentTypes['AreaTypeNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['AreaTypeNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export interface ArgScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Arg'], any> {
  name: 'Arg'
}

export type AssignFspToDeliveryMechanismMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['AssignFspToDeliveryMechanismMutation'] = ResolversParentTypes['AssignFspToDeliveryMechanismMutation']> = {
  paymentPlan?: Resolver<Maybe<ResolversTypes['PaymentPlanNode']>, ParentType, ContextType>,
};

export type BankAccountInfoNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BankAccountInfoNode'] = ResolversParentTypes['BankAccountInfoNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  isRemoved?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  removedDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  lastSyncAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  individual?: Resolver<ResolversTypes['IndividualNode'], ParentType, ContextType>,
  bankName?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  bankAccountNumber?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export interface BigIntScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['BigInt'], any> {
  name: 'BigInt'
}

export type BulkUpdateGrievanceTicketsAssigneesMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['BulkUpdateGrievanceTicketsAssigneesMutation'] = ResolversParentTypes['BulkUpdateGrievanceTicketsAssigneesMutation']> = {
  grievanceTickets?: Resolver<Maybe<Array<Maybe<ResolversTypes['GrievanceTicketNode']>>>, ParentType, ContextType>,
};

export type BusinessAreaNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BusinessAreaNode'] = ResolversParentTypes['BusinessAreaNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  code?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  longName?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  regionCode?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  regionName?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  koboUsername?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  koboToken?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  koboUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  rapidProHost?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  rapidProPaymentVerificationToken?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  rapidProMessagesToken?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  rapidProSurveyToken?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  customFields?: Resolver<ResolversTypes['JSONString'], ParentType, ContextType>,
  hasDataSharingAgreement?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  parent?: Resolver<Maybe<ResolversTypes['UserBusinessAreaNode']>, ParentType, ContextType>,
  isSplit?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  postponeDeduplication?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  deduplicationDuplicateScore?: Resolver<ResolversTypes['Float'], ParentType, ContextType>,
  deduplicationPossibleDuplicateScore?: Resolver<ResolversTypes['Float'], ParentType, ContextType>,
  deduplicationBatchDuplicatesPercentage?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  deduplicationBatchDuplicatesAllowed?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  deduplicationGoldenRecordDuplicatesPercentage?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  deduplicationGoldenRecordDuplicatesAllowed?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  screenBeneficiary?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  deduplicationIgnoreWithdraw?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  isPaymentPlanApplicable?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  isAccountabilityApplicable?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  active?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  children?: Resolver<ResolversTypes['UserBusinessAreaNodeConnection'], ParentType, ContextType, BusinessAreaNodeChildrenArgs>,
  userRoles?: Resolver<Array<ResolversTypes['UserRoleNode']>, ParentType, ContextType>,
  householdSet?: Resolver<ResolversTypes['HouseholdNodeConnection'], ParentType, ContextType, BusinessAreaNodeHouseholdSetArgs>,
  individualSet?: Resolver<ResolversTypes['IndividualNodeConnection'], ParentType, ContextType, BusinessAreaNodeIndividualSetArgs>,
  registrationdataimportSet?: Resolver<ResolversTypes['RegistrationDataImportNodeConnection'], ParentType, ContextType, BusinessAreaNodeRegistrationdataimportSetArgs>,
  paymentplanSet?: Resolver<ResolversTypes['PaymentPlanNodeConnection'], ParentType, ContextType, BusinessAreaNodePaymentplanSetArgs>,
  cashplanSet?: Resolver<ResolversTypes['CashPlanNodeConnection'], ParentType, ContextType, BusinessAreaNodeCashplanSetArgs>,
  paymentrecordSet?: Resolver<ResolversTypes['PaymentRecordNodeConnection'], ParentType, ContextType, BusinessAreaNodePaymentrecordSetArgs>,
  paymentSet?: Resolver<ResolversTypes['PaymentNodeConnection'], ParentType, ContextType, BusinessAreaNodePaymentSetArgs>,
  serviceproviderSet?: Resolver<ResolversTypes['ServiceProviderNodeConnection'], ParentType, ContextType, BusinessAreaNodeServiceproviderSetArgs>,
  tickets?: Resolver<ResolversTypes['GrievanceTicketNodeConnection'], ParentType, ContextType, BusinessAreaNodeTicketsArgs>,
  programSet?: Resolver<ResolversTypes['ProgramNodeConnection'], ParentType, ContextType, BusinessAreaNodeProgramSetArgs>,
  targetpopulationSet?: Resolver<ResolversTypes['TargetPopulationNodeConnection'], ParentType, ContextType, BusinessAreaNodeTargetpopulationSetArgs>,
  reports?: Resolver<ResolversTypes['ReportNodeConnection'], ParentType, ContextType, BusinessAreaNodeReportsArgs>,
  logentrySet?: Resolver<ResolversTypes['PaymentVerificationLogEntryNodeConnection'], ParentType, ContextType, BusinessAreaNodeLogentrySetArgs>,
  messageSet?: Resolver<ResolversTypes['CommunicationMessageNodeConnection'], ParentType, ContextType, BusinessAreaNodeMessageSetArgs>,
  feedbackSet?: Resolver<ResolversTypes['FeedbackNodeConnection'], ParentType, ContextType, BusinessAreaNodeFeedbackSetArgs>,
  surveySet?: Resolver<ResolversTypes['SurveyNodeConnection'], ParentType, ContextType, BusinessAreaNodeSurveySetArgs>,
};

export type BusinessAreaNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BusinessAreaNodeConnection'] = ResolversParentTypes['BusinessAreaNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['BusinessAreaNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type BusinessAreaNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BusinessAreaNodeEdge'] = ResolversParentTypes['BusinessAreaNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['BusinessAreaNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type CashPlanAndPaymentPlanEdgesResolvers<ContextType = any, ParentType extends ResolversParentTypes['CashPlanAndPaymentPlanEdges'] = ResolversParentTypes['CashPlanAndPaymentPlanEdges']> = {
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  node?: Resolver<Maybe<ResolversTypes['CashPlanAndPaymentPlanNode']>, ParentType, ContextType>,
};

export type CashPlanAndPaymentPlanNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['CashPlanAndPaymentPlanNode'] = ResolversParentTypes['CashPlanAndPaymentPlanNode']> = {
  objType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  unicefId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  verificationStatus?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  currency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  totalDeliveredQuantity?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  startDate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  endDate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  programName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  updatedAt?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  verificationPlans?: Resolver<Maybe<Array<Maybe<ResolversTypes['PaymentVerificationPlanNode']>>>, ParentType, ContextType>,
  totalNumberOfHouseholds?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  totalEntitledQuantity?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  totalUndeliveredQuantity?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  assistanceMeasurement?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  dispersionDate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  serviceProviderFullName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type CashPlanNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['CashPlanNode'] = ResolversParentTypes['CashPlanNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  version?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>,
  businessArea?: Resolver<ResolversTypes['UserBusinessAreaNode'], ParentType, ContextType>,
  statusDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  startDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  endDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  program?: Resolver<ResolversTypes['ProgramNode'], ParentType, ContextType>,
  exchangeRate?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  totalEntitledQuantity?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  totalEntitledQuantityUsd?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  totalEntitledQuantityRevised?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  totalEntitledQuantityRevisedUsd?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  totalDeliveredQuantity?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  totalDeliveredQuantityUsd?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  totalUndeliveredQuantity?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  totalUndeliveredQuantityUsd?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  caId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  caHashId?: Resolver<Maybe<ResolversTypes['UUID']>, ParentType, ContextType>,
  status?: Resolver<ResolversTypes['CashPlanStatus'], ParentType, ContextType>,
  distributionLevel?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  dispersionDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  coverageDuration?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  coverageUnit?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  comments?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  deliveryType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  assistanceMeasurement?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  assistanceThrough?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  serviceProvider?: Resolver<Maybe<ResolversTypes['ServiceProviderNode']>, ParentType, ContextType>,
  visionId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  fundsCommitment?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  downPayment?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  validationAlertsCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  totalPersonsCovered?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  totalPersonsCoveredRevised?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  paymentItems?: Resolver<ResolversTypes['PaymentRecordNodeConnection'], ParentType, ContextType, CashPlanNodePaymentItemsArgs>,
  bankReconciliationSuccess?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  bankReconciliationError?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  totalNumberOfHouseholds?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  currency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  canCreatePaymentVerificationPlan?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  availablePaymentRecordsCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  verificationPlans?: Resolver<Maybe<ResolversTypes['PaymentVerificationPlanNodeConnection']>, ParentType, ContextType, CashPlanNodeVerificationPlansArgs>,
  paymentVerificationSummary?: Resolver<Maybe<ResolversTypes['PaymentVerificationSummaryNode']>, ParentType, ContextType>,
  unicefId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type CashPlanNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CashPlanNodeConnection'] = ResolversParentTypes['CashPlanNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['CashPlanNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type CashPlanNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['CashPlanNodeEdge'] = ResolversParentTypes['CashPlanNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['CashPlanNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type ChartDatasetNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ChartDatasetNode'] = ResolversParentTypes['ChartDatasetNode']> = {
  labels?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>,
  datasets?: Resolver<Maybe<Array<Maybe<ResolversTypes['_DatasetsNode']>>>, ParentType, ContextType>,
};

export type ChartDetailedDatasetsNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ChartDetailedDatasetsNode'] = ResolversParentTypes['ChartDetailedDatasetsNode']> = {
  labels?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>,
  datasets?: Resolver<Maybe<Array<Maybe<ResolversTypes['_DetailedDatasetsNode']>>>, ParentType, ContextType>,
};

export type ChartGrievanceTicketsNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ChartGrievanceTicketsNode'] = ResolversParentTypes['ChartGrievanceTicketsNode']> = {
  labels?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>,
  datasets?: Resolver<Maybe<Array<Maybe<ResolversTypes['_DatasetsNode']>>>, ParentType, ContextType>,
  totalNumberOfGrievances?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  totalNumberOfFeedback?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  totalNumberOfOpenSensitive?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type ChartPaymentVerificationResolvers<ContextType = any, ParentType extends ResolversParentTypes['ChartPaymentVerification'] = ResolversParentTypes['ChartPaymentVerification']> = {
  labels?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>,
  datasets?: Resolver<Maybe<Array<Maybe<ResolversTypes['_DetailedDatasetsNode']>>>, ParentType, ContextType>,
  households?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  averageSampleSize?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
};

export type CheckAgainstSanctionListMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['CheckAgainstSanctionListMutation'] = ResolversParentTypes['CheckAgainstSanctionListMutation']> = {
  ok?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  errors?: Resolver<Maybe<Array<Maybe<ResolversTypes['XlsxRowErrorNode']>>>, ParentType, ContextType>,
};

export type ChoiceObjectResolvers<ContextType = any, ParentType extends ResolversParentTypes['ChoiceObject'] = ResolversParentTypes['ChoiceObject']> = {
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type ChoiceObjectIntResolvers<ContextType = any, ParentType extends ResolversParentTypes['ChoiceObjectInt'] = ResolversParentTypes['ChoiceObjectInt']> = {
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  value?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type ChooseDeliveryMechanismsForPaymentPlanMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['ChooseDeliveryMechanismsForPaymentPlanMutation'] = ResolversParentTypes['ChooseDeliveryMechanismsForPaymentPlanMutation']> = {
  paymentPlan?: Resolver<Maybe<ResolversTypes['PaymentPlanNode']>, ParentType, ContextType>,
};

export type CommunicationMessageNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['CommunicationMessageNode'] = ResolversParentTypes['CommunicationMessageNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  unicefId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  body?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  createdBy?: Resolver<Maybe<ResolversTypes['UserNode']>, ParentType, ContextType>,
  numberOfRecipients?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  businessArea?: Resolver<ResolversTypes['UserBusinessAreaNode'], ParentType, ContextType>,
  households?: Resolver<ResolversTypes['HouseholdNodeConnection'], ParentType, ContextType, CommunicationMessageNodeHouseholdsArgs>,
  targetPopulation?: Resolver<Maybe<ResolversTypes['TargetPopulationNode']>, ParentType, ContextType>,
  registrationDataImport?: Resolver<Maybe<ResolversTypes['RegistrationDataImportNode']>, ParentType, ContextType>,
  samplingType?: Resolver<ResolversTypes['MessageSamplingType'], ParentType, ContextType>,
  fullListArguments?: Resolver<Maybe<ResolversTypes['JSONString']>, ParentType, ContextType>,
  randomSamplingArguments?: Resolver<Maybe<ResolversTypes['JSONString']>, ParentType, ContextType>,
  sampleSize?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  program?: Resolver<Maybe<ResolversTypes['ProgramNode']>, ParentType, ContextType>,
};

export type CommunicationMessageNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CommunicationMessageNodeConnection'] = ResolversParentTypes['CommunicationMessageNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['CommunicationMessageNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type CommunicationMessageNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['CommunicationMessageNodeEdge'] = ResolversParentTypes['CommunicationMessageNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['CommunicationMessageNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type CommunicationMessageRecipientMapNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['CommunicationMessageRecipientMapNode'] = ResolversParentTypes['CommunicationMessageRecipientMapNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  headOfHousehold?: Resolver<ResolversTypes['IndividualNode'], ParentType, ContextType>,
};

export type CommunicationMessageRecipientMapNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CommunicationMessageRecipientMapNodeConnection'] = ResolversParentTypes['CommunicationMessageRecipientMapNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['CommunicationMessageRecipientMapNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type CommunicationMessageRecipientMapNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['CommunicationMessageRecipientMapNodeEdge'] = ResolversParentTypes['CommunicationMessageRecipientMapNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['CommunicationMessageRecipientMapNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type ContentTypeObjectTypeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ContentTypeObjectType'] = ResolversParentTypes['ContentTypeObjectType']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  appLabel?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  model?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  paymentverificationplanSet?: Resolver<ResolversTypes['PaymentVerificationPlanNodeConnection'], ParentType, ContextType, ContentTypeObjectTypePaymentverificationplanSetArgs>,
  paymentverificationSet?: Resolver<ResolversTypes['PaymentVerificationNodeConnection'], ParentType, ContextType, ContentTypeObjectTypePaymentverificationSetArgs>,
  paymentverificationsummarySet?: Resolver<ResolversTypes['PaymentVerificationSummaryNodeConnection'], ParentType, ContextType, ContentTypeObjectTypePaymentverificationsummarySetArgs>,
  ticketcomplaintdetailsSet?: Resolver<ResolversTypes['TicketComplaintDetailsNodeConnection'], ParentType, ContextType, ContentTypeObjectTypeTicketcomplaintdetailsSetArgs>,
  ticketsensitivedetailsSet?: Resolver<ResolversTypes['TicketSensitiveDetailsNodeConnection'], ParentType, ContextType, ContentTypeObjectTypeTicketsensitivedetailsSetArgs>,
  logEntries?: Resolver<ResolversTypes['PaymentVerificationLogEntryNodeConnection'], ParentType, ContextType, ContentTypeObjectTypeLogEntriesArgs>,
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type CopyProgramResolvers<ContextType = any, ParentType extends ResolversParentTypes['CopyProgram'] = ResolversParentTypes['CopyProgram']> = {
  validationErrors?: Resolver<Maybe<ResolversTypes['Arg']>, ParentType, ContextType>,
  program?: Resolver<Maybe<ResolversTypes['ProgramNode']>, ParentType, ContextType>,
};

export type CopyTargetPopulationMutationPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CopyTargetPopulationMutationPayload'] = ResolversParentTypes['CopyTargetPopulationMutationPayload']> = {
  targetPopulation?: Resolver<Maybe<ResolversTypes['TargetPopulationNode']>, ParentType, ContextType>,
  validationErrors?: Resolver<Maybe<ResolversTypes['Arg']>, ParentType, ContextType>,
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type CoreFieldChoiceObjectResolvers<ContextType = any, ParentType extends ResolversParentTypes['CoreFieldChoiceObject'] = ResolversParentTypes['CoreFieldChoiceObject']> = {
  labels?: Resolver<Maybe<Array<Maybe<ResolversTypes['LabelNode']>>>, ParentType, ContextType>,
  labelEn?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  admin?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  listName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type CountAndPercentageNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['CountAndPercentageNode'] = ResolversParentTypes['CountAndPercentageNode']> = {
  count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  percentage?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
};

export type CreateCommunicationMessageMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateCommunicationMessageMutation'] = ResolversParentTypes['CreateCommunicationMessageMutation']> = {
  message?: Resolver<Maybe<ResolversTypes['CommunicationMessageNode']>, ParentType, ContextType>,
};

export type CreateDashboardReportResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateDashboardReport'] = ResolversParentTypes['CreateDashboardReport']> = {
  success?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
};

export type CreateFeedbackMessageMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateFeedbackMessageMutation'] = ResolversParentTypes['CreateFeedbackMessageMutation']> = {
  feedbackMessage?: Resolver<Maybe<ResolversTypes['FeedbackMessageNode']>, ParentType, ContextType>,
};

export type CreateFeedbackMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateFeedbackMutation'] = ResolversParentTypes['CreateFeedbackMutation']> = {
  feedback?: Resolver<Maybe<ResolversTypes['FeedbackNode']>, ParentType, ContextType>,
};

export type CreateFollowUpPaymentPlanMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateFollowUpPaymentPlanMutation'] = ResolversParentTypes['CreateFollowUpPaymentPlanMutation']> = {
  paymentPlan?: Resolver<Maybe<ResolversTypes['PaymentPlanNode']>, ParentType, ContextType>,
};

export type CreateGrievanceTicketMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateGrievanceTicketMutation'] = ResolversParentTypes['CreateGrievanceTicketMutation']> = {
  grievanceTickets?: Resolver<Maybe<Array<Maybe<ResolversTypes['GrievanceTicketNode']>>>, ParentType, ContextType>,
};

export type CreatePaymentPlanMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreatePaymentPlanMutation'] = ResolversParentTypes['CreatePaymentPlanMutation']> = {
  paymentPlan?: Resolver<Maybe<ResolversTypes['PaymentPlanNode']>, ParentType, ContextType>,
};

export type CreateProgramResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateProgram'] = ResolversParentTypes['CreateProgram']> = {
  validationErrors?: Resolver<Maybe<ResolversTypes['Arg']>, ParentType, ContextType>,
  program?: Resolver<Maybe<ResolversTypes['ProgramNode']>, ParentType, ContextType>,
};

export type CreateReportResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateReport'] = ResolversParentTypes['CreateReport']> = {
  report?: Resolver<Maybe<ResolversTypes['ReportNode']>, ParentType, ContextType>,
};

export type CreateSurveyMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateSurveyMutation'] = ResolversParentTypes['CreateSurveyMutation']> = {
  survey?: Resolver<Maybe<ResolversTypes['SurveyNode']>, ParentType, ContextType>,
};

export type CreateTargetPopulationMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateTargetPopulationMutation'] = ResolversParentTypes['CreateTargetPopulationMutation']> = {
  validationErrors?: Resolver<Maybe<ResolversTypes['Arg']>, ParentType, ContextType>,
  targetPopulation?: Resolver<Maybe<ResolversTypes['TargetPopulationNode']>, ParentType, ContextType>,
};

export type CreateTicketNoteMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateTicketNoteMutation'] = ResolversParentTypes['CreateTicketNoteMutation']> = {
  grievanceTicketNote?: Resolver<Maybe<ResolversTypes['TicketNoteNode']>, ParentType, ContextType>,
};

export type CreateVerificationPlanMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateVerificationPlanMutation'] = ResolversParentTypes['CreateVerificationPlanMutation']> = {
  paymentPlan?: Resolver<Maybe<ResolversTypes['GenericPaymentPlanNode']>, ParentType, ContextType>,
};

export interface DateScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Date'], any> {
  name: 'Date'
}

export interface DateTimeScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['DateTime'], any> {
  name: 'DateTime'
}

export interface DecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Decimal'], any> {
  name: 'Decimal'
}

export type DeduplicationResultNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeduplicationResultNode'] = ResolversParentTypes['DeduplicationResultNode']> = {
  hitId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>,
  fullName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  score?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  proximityToScore?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  location?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  age?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type DeleteHouseholdApproveMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteHouseholdApproveMutation'] = ResolversParentTypes['DeleteHouseholdApproveMutation']> = {
  grievanceTicket?: Resolver<Maybe<ResolversTypes['GrievanceTicketNode']>, ParentType, ContextType>,
};

export type DeletePaymentPlanMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeletePaymentPlanMutation'] = ResolversParentTypes['DeletePaymentPlanMutation']> = {
  paymentPlan?: Resolver<Maybe<ResolversTypes['PaymentPlanNode']>, ParentType, ContextType>,
};

export type DeletePaymentVerificationPlanResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeletePaymentVerificationPlan'] = ResolversParentTypes['DeletePaymentVerificationPlan']> = {
  paymentPlan?: Resolver<Maybe<ResolversTypes['GenericPaymentPlanNode']>, ParentType, ContextType>,
};

export type DeleteProgramResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteProgram'] = ResolversParentTypes['DeleteProgram']> = {
  ok?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
};

export type DeleteRegistrationDataImportResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteRegistrationDataImport'] = ResolversParentTypes['DeleteRegistrationDataImport']> = {
  ok?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
};

export type DeleteTargetPopulationMutationPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteTargetPopulationMutationPayload'] = ResolversParentTypes['DeleteTargetPopulationMutationPayload']> = {
  ok?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type DeliveredQuantityNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeliveredQuantityNode'] = ResolversParentTypes['DeliveredQuantityNode']> = {
  totalDeliveredQuantity?: Resolver<Maybe<ResolversTypes['Decimal']>, ParentType, ContextType>,
  currency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type DeliveryMechanismNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeliveryMechanismNode'] = ResolversParentTypes['DeliveryMechanismNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  paymentPlan?: Resolver<ResolversTypes['PaymentPlanNode'], ParentType, ContextType>,
  financialServiceProvider?: Resolver<Maybe<ResolversTypes['FinancialServiceProviderNode']>, ParentType, ContextType>,
  createdBy?: Resolver<ResolversTypes['UserNode'], ParentType, ContextType>,
  sentDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  sentBy?: Resolver<Maybe<ResolversTypes['UserNode']>, ParentType, ContextType>,
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  deliveryMechanism?: Resolver<Maybe<ResolversTypes['DeliveryMechanismPerPaymentPlanDeliveryMechanism']>, ParentType, ContextType>,
  deliveryMechanismOrder?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  fsp?: Resolver<Maybe<ResolversTypes['FinancialServiceProviderNode']>, ParentType, ContextType>,
};

export type DeliveryMechanismNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeliveryMechanismNodeConnection'] = ResolversParentTypes['DeliveryMechanismNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['DeliveryMechanismNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type DeliveryMechanismNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeliveryMechanismNodeEdge'] = ResolversParentTypes['DeliveryMechanismNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['DeliveryMechanismNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type DiscardPaymentVerificationPlanResolvers<ContextType = any, ParentType extends ResolversParentTypes['DiscardPaymentVerificationPlan'] = ResolversParentTypes['DiscardPaymentVerificationPlan']> = {
  paymentPlan?: Resolver<Maybe<ResolversTypes['GenericPaymentPlanNode']>, ParentType, ContextType>,
};

export type DjangoDebugResolvers<ContextType = any, ParentType extends ResolversParentTypes['DjangoDebug'] = ResolversParentTypes['DjangoDebug']> = {
  sql?: Resolver<Maybe<Array<Maybe<ResolversTypes['DjangoDebugSQL']>>>, ParentType, ContextType>,
};

export type DjangoDebugSqlResolvers<ContextType = any, ParentType extends ResolversParentTypes['DjangoDebugSQL'] = ResolversParentTypes['DjangoDebugSQL']> = {
  vendor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  alias?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  sql?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  duration?: Resolver<ResolversTypes['Float'], ParentType, ContextType>,
  rawSql?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  params?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  startTime?: Resolver<ResolversTypes['Float'], ParentType, ContextType>,
  stopTime?: Resolver<ResolversTypes['Float'], ParentType, ContextType>,
  isSlow?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  isSelect?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  transId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  transStatus?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  isoLevel?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  encoding?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type DocumentNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocumentNode'] = ResolversParentTypes['DocumentNode']> = {
  isRemoved?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  lastSyncAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  documentNumber?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  photo?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  individual?: Resolver<ResolversTypes['IndividualNode'], ParentType, ContextType>,
  type?: Resolver<ResolversTypes['DocumentTypeNode'], ParentType, ContextType>,
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  status?: Resolver<ResolversTypes['DocumentStatus'], ParentType, ContextType>,
  cleared?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  clearedDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  clearedBy?: Resolver<Maybe<ResolversTypes['UserNode']>, ParentType, ContextType>,
  issuanceDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  expiryDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  program?: Resolver<Maybe<ResolversTypes['ProgramNode']>, ParentType, ContextType>,
  countryIso3?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type DocumentNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocumentNodeConnection'] = ResolversParentTypes['DocumentNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['DocumentNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type DocumentNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocumentNodeEdge'] = ResolversParentTypes['DocumentNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['DocumentNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type DocumentTypeNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocumentTypeNode'] = ResolversParentTypes['DocumentTypeNode']> = {
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  key?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  isIdentityDocument?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  uniqueForIndividual?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  validForDeduplication?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  documents?: Resolver<ResolversTypes['DocumentNodeConnection'], ParentType, ContextType, DocumentTypeNodeDocumentsArgs>,
};

export type EditPaymentVerificationMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['EditPaymentVerificationMutation'] = ResolversParentTypes['EditPaymentVerificationMutation']> = {
  paymentPlan?: Resolver<Maybe<ResolversTypes['GenericPaymentPlanNode']>, ParentType, ContextType>,
};

export type EraseRegistrationDataImportMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['EraseRegistrationDataImportMutation'] = ResolversParentTypes['EraseRegistrationDataImportMutation']> = {
  registrationDataImport?: Resolver<Maybe<ResolversTypes['RegistrationDataImportNode']>, ParentType, ContextType>,
};

export type ExcludeHouseholdsMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['ExcludeHouseholdsMutation'] = ResolversParentTypes['ExcludeHouseholdsMutation']> = {
  paymentPlan?: Resolver<Maybe<ResolversTypes['PaymentPlanNode']>, ParentType, ContextType>,
};

export type ExportPdfPaymentPlanSummaryMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['ExportPDFPaymentPlanSummaryMutation'] = ResolversParentTypes['ExportPDFPaymentPlanSummaryMutation']> = {
  paymentPlan?: Resolver<Maybe<ResolversTypes['PaymentPlanNode']>, ParentType, ContextType>,
};

export type ExportSurveySampleMutationMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['ExportSurveySampleMutationMutation'] = ResolversParentTypes['ExportSurveySampleMutationMutation']> = {
  survey?: Resolver<Maybe<ResolversTypes['SurveyNode']>, ParentType, ContextType>,
};

export type ExportXlsxPaymentPlanPaymentListMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['ExportXLSXPaymentPlanPaymentListMutation'] = ResolversParentTypes['ExportXLSXPaymentPlanPaymentListMutation']> = {
  paymentPlan?: Resolver<Maybe<ResolversTypes['PaymentPlanNode']>, ParentType, ContextType>,
};

export type ExportXlsxPaymentPlanPaymentListPerFspMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['ExportXLSXPaymentPlanPaymentListPerFSPMutation'] = ResolversParentTypes['ExportXLSXPaymentPlanPaymentListPerFSPMutation']> = {
  paymentPlan?: Resolver<Maybe<ResolversTypes['PaymentPlanNode']>, ParentType, ContextType>,
};

export type ExportXlsxPaymentVerificationPlanFileResolvers<ContextType = any, ParentType extends ResolversParentTypes['ExportXlsxPaymentVerificationPlanFile'] = ResolversParentTypes['ExportXlsxPaymentVerificationPlanFile']> = {
  paymentPlan?: Resolver<Maybe<ResolversTypes['GenericPaymentPlanNode']>, ParentType, ContextType>,
};

export type FeedbackMessageNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['FeedbackMessageNode'] = ResolversParentTypes['FeedbackMessageNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  createdBy?: Resolver<Maybe<ResolversTypes['UserNode']>, ParentType, ContextType>,
};

export type FeedbackMessageNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['FeedbackMessageNodeConnection'] = ResolversParentTypes['FeedbackMessageNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['FeedbackMessageNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type FeedbackMessageNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['FeedbackMessageNodeEdge'] = ResolversParentTypes['FeedbackMessageNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['FeedbackMessageNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type FeedbackNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['FeedbackNode'] = ResolversParentTypes['FeedbackNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  unicefId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  businessArea?: Resolver<ResolversTypes['UserBusinessAreaNode'], ParentType, ContextType>,
  issueType?: Resolver<ResolversTypes['FeedbackIssueType'], ParentType, ContextType>,
  householdLookup?: Resolver<Maybe<ResolversTypes['HouseholdNode']>, ParentType, ContextType>,
  individualLookup?: Resolver<Maybe<ResolversTypes['IndividualNode']>, ParentType, ContextType>,
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  comments?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  admin2?: Resolver<Maybe<ResolversTypes['AreaNode']>, ParentType, ContextType>,
  area?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  language?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  consent?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  program?: Resolver<Maybe<ResolversTypes['ProgramNode']>, ParentType, ContextType>,
  createdBy?: Resolver<Maybe<ResolversTypes['UserNode']>, ParentType, ContextType>,
  linkedGrievance?: Resolver<Maybe<ResolversTypes['GrievanceTicketNode']>, ParentType, ContextType>,
  feedbackMessages?: Resolver<ResolversTypes['FeedbackMessageNodeConnection'], ParentType, ContextType, FeedbackNodeFeedbackMessagesArgs>,
};

export type FeedbackNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['FeedbackNodeConnection'] = ResolversParentTypes['FeedbackNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['FeedbackNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type FeedbackNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['FeedbackNodeEdge'] = ResolversParentTypes['FeedbackNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['FeedbackNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type FieldAttributeNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['FieldAttributeNode'] = ResolversParentTypes['FieldAttributeNode']> = {
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  labels?: Resolver<Maybe<Array<Maybe<ResolversTypes['LabelNode']>>>, ParentType, ContextType>,
  labelEn?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  hint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  choices?: Resolver<Maybe<Array<Maybe<ResolversTypes['CoreFieldChoiceObject']>>>, ParentType, ContextType>,
  associatedWith?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  isFlexField?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
};

export type FilteredActionsListNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['FilteredActionsListNode'] = ResolversParentTypes['FilteredActionsListNode']> = {
  approval?: Resolver<Maybe<Array<Maybe<ResolversTypes['ApprovalNode']>>>, ParentType, ContextType>,
  authorization?: Resolver<Maybe<Array<Maybe<ResolversTypes['ApprovalNode']>>>, ParentType, ContextType>,
  financeRelease?: Resolver<Maybe<Array<Maybe<ResolversTypes['ApprovalNode']>>>, ParentType, ContextType>,
  reject?: Resolver<Maybe<Array<Maybe<ResolversTypes['ApprovalNode']>>>, ParentType, ContextType>,
};

export type FinalizeTargetPopulationMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['FinalizeTargetPopulationMutation'] = ResolversParentTypes['FinalizeTargetPopulationMutation']> = {
  targetPopulation?: Resolver<Maybe<ResolversTypes['TargetPopulationNode']>, ParentType, ContextType>,
};

export type FinancialServiceProviderNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['FinancialServiceProviderNode'] = ResolversParentTypes['FinancialServiceProviderNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  createdBy?: Resolver<Maybe<ResolversTypes['UserNode']>, ParentType, ContextType>,
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  visionVendorNumber?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  deliveryMechanisms?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>,
  distributionLimit?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  communicationChannel?: Resolver<ResolversTypes['FinancialServiceProviderCommunicationChannel'], ParentType, ContextType>,
  dataTransferConfiguration?: Resolver<Maybe<ResolversTypes['JSONString']>, ParentType, ContextType>,
  xlsxTemplates?: Resolver<ResolversTypes['FinancialServiceProviderXlsxTemplateNodeConnection'], ParentType, ContextType, FinancialServiceProviderNodeXlsxTemplatesArgs>,
  financialserviceproviderxlsxreportSet?: Resolver<ResolversTypes['FinancialServiceProviderXlsxReportNodeConnection'], ParentType, ContextType, FinancialServiceProviderNodeFinancialserviceproviderxlsxreportSetArgs>,
  deliveryMechanismsPerPaymentPlan?: Resolver<ResolversTypes['DeliveryMechanismNodeConnection'], ParentType, ContextType, FinancialServiceProviderNodeDeliveryMechanismsPerPaymentPlanArgs>,
  paymentSet?: Resolver<ResolversTypes['PaymentNodeConnection'], ParentType, ContextType, FinancialServiceProviderNodePaymentSetArgs>,
  fullName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type FinancialServiceProviderNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['FinancialServiceProviderNodeConnection'] = ResolversParentTypes['FinancialServiceProviderNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['FinancialServiceProviderNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type FinancialServiceProviderNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['FinancialServiceProviderNodeEdge'] = ResolversParentTypes['FinancialServiceProviderNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['FinancialServiceProviderNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type FinancialServiceProviderXlsxReportNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['FinancialServiceProviderXlsxReportNode'] = ResolversParentTypes['FinancialServiceProviderXlsxReportNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  financialServiceProvider?: Resolver<ResolversTypes['FinancialServiceProviderNode'], ParentType, ContextType>,
  status?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  reportUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type FinancialServiceProviderXlsxReportNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['FinancialServiceProviderXlsxReportNodeConnection'] = ResolversParentTypes['FinancialServiceProviderXlsxReportNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['FinancialServiceProviderXlsxReportNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type FinancialServiceProviderXlsxReportNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['FinancialServiceProviderXlsxReportNodeEdge'] = ResolversParentTypes['FinancialServiceProviderXlsxReportNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['FinancialServiceProviderXlsxReportNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type FinancialServiceProviderXlsxTemplateNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['FinancialServiceProviderXlsxTemplateNode'] = ResolversParentTypes['FinancialServiceProviderXlsxTemplateNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  createdBy?: Resolver<Maybe<ResolversTypes['UserNode']>, ParentType, ContextType>,
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  columns?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>,
  coreFields?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>,
  financialServiceProviders?: Resolver<ResolversTypes['FinancialServiceProviderNodeConnection'], ParentType, ContextType, FinancialServiceProviderXlsxTemplateNodeFinancialServiceProvidersArgs>,
};

export type FinancialServiceProviderXlsxTemplateNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['FinancialServiceProviderXlsxTemplateNodeConnection'] = ResolversParentTypes['FinancialServiceProviderXlsxTemplateNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['FinancialServiceProviderXlsxTemplateNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type FinancialServiceProviderXlsxTemplateNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['FinancialServiceProviderXlsxTemplateNodeEdge'] = ResolversParentTypes['FinancialServiceProviderXlsxTemplateNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['FinancialServiceProviderXlsxTemplateNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type FinishPaymentVerificationPlanResolvers<ContextType = any, ParentType extends ResolversParentTypes['FinishPaymentVerificationPlan'] = ResolversParentTypes['FinishPaymentVerificationPlan']> = {
  paymentPlan?: Resolver<Maybe<ResolversTypes['GenericPaymentPlanNode']>, ParentType, ContextType>,
};

export interface FlexFieldsScalarScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['FlexFieldsScalar'], any> {
  name: 'FlexFieldsScalar'
}

export type FspChoiceResolvers<ContextType = any, ParentType extends ResolversParentTypes['FspChoice'] = ResolversParentTypes['FspChoice']> = {
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type FspChoicesResolvers<ContextType = any, ParentType extends ResolversParentTypes['FspChoices'] = ResolversParentTypes['FspChoices']> = {
  deliveryMechanism?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  fsps?: Resolver<Maybe<Array<Maybe<ResolversTypes['FspChoice']>>>, ParentType, ContextType>,
};

export type GenericPaymentNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['GenericPaymentNode'] = ResolversParentTypes['GenericPaymentNode']> = {
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  objType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  unicefId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  currency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  deliveredQuantity?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  deliveredQuantityUsd?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  household?: Resolver<Maybe<ResolversTypes['HouseholdNode']>, ParentType, ContextType>,
};

export type GenericPaymentPlanNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['GenericPaymentPlanNode'] = ResolversParentTypes['GenericPaymentPlanNode']> = {
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  objType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  paymentVerificationSummary?: Resolver<Maybe<ResolversTypes['PaymentVerificationSummaryNode']>, ParentType, ContextType>,
  availablePaymentRecordsCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  verificationPlans?: Resolver<Maybe<ResolversTypes['PaymentVerificationPlanNodeConnection']>, ParentType, ContextType, GenericPaymentPlanNodeVerificationPlansArgs>,
  statusDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  bankReconciliationSuccess?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  bankReconciliationError?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  deliveryType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  totalNumberOfHouseholds?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  currency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  totalDeliveredQuantity?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  totalEntitledQuantity?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  totalUndeliveredQuantity?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  canCreatePaymentVerificationPlan?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
};

export interface GeoJsonScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['GeoJSON'], any> {
  name: 'GeoJSON'
}

export type GetCashplanVerificationSampleSizeObjectResolvers<ContextType = any, ParentType extends ResolversParentTypes['GetCashplanVerificationSampleSizeObject'] = ResolversParentTypes['GetCashplanVerificationSampleSizeObject']> = {
  paymentRecordCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  sampleSize?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type GetCommunicationMessageSampleSizeNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['GetCommunicationMessageSampleSizeNode'] = ResolversParentTypes['GetCommunicationMessageSampleSizeNode']> = {
  numberOfRecipients?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  sampleSize?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type GrievanceDocumentNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['GrievanceDocumentNode'] = ResolversParentTypes['GrievanceDocumentNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  createdBy?: Resolver<Maybe<ResolversTypes['UserNode']>, ParentType, ContextType>,
  grievanceTicket?: Resolver<Maybe<ResolversTypes['GrievanceTicketNode']>, ParentType, ContextType>,
  fileSize?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  contentType?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  filePath?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  fileName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type GrievanceDocumentNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['GrievanceDocumentNodeConnection'] = ResolversParentTypes['GrievanceDocumentNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['GrievanceDocumentNodeEdge']>>, ParentType, ContextType>,
};

export type GrievanceDocumentNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['GrievanceDocumentNodeEdge'] = ResolversParentTypes['GrievanceDocumentNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['GrievanceDocumentNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type GrievanceStatusChangeMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['GrievanceStatusChangeMutation'] = ResolversParentTypes['GrievanceStatusChangeMutation']> = {
  grievanceTicket?: Resolver<Maybe<ResolversTypes['GrievanceTicketNode']>, ParentType, ContextType>,
};

export type GrievanceTicketNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['GrievanceTicketNode'] = ResolversParentTypes['GrievanceTicketNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  version?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>,
  unicefId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  userModified?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  lastNotificationSent?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  createdBy?: Resolver<Maybe<ResolversTypes['UserNode']>, ParentType, ContextType>,
  assignedTo?: Resolver<Maybe<ResolversTypes['UserNode']>, ParentType, ContextType>,
  status?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  category?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  issueType?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  admin2?: Resolver<Maybe<ResolversTypes['AreaNode']>, ParentType, ContextType>,
  area?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  language?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  consent?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  businessArea?: Resolver<ResolversTypes['UserBusinessAreaNode'], ParentType, ContextType>,
  linkedTickets?: Resolver<Maybe<Array<Maybe<ResolversTypes['GrievanceTicketNode']>>>, ParentType, ContextType>,
  registrationDataImport?: Resolver<Maybe<ResolversTypes['RegistrationDataImportNode']>, ParentType, ContextType>,
  extras?: Resolver<ResolversTypes['JSONString'], ParentType, ContextType>,
  ignored?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  householdUnicefId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  priority?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  urgency?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  partner?: Resolver<Maybe<ResolversTypes['PartnerType']>, ParentType, ContextType>,
  programs?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProgramNode']>>>, ParentType, ContextType>,
  comments?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  ticketNotes?: Resolver<ResolversTypes['TicketNoteNodeConnection'], ParentType, ContextType, GrievanceTicketNodeTicketNotesArgs>,
  complaintTicketDetails?: Resolver<Maybe<ResolversTypes['TicketComplaintDetailsNode']>, ParentType, ContextType>,
  sensitiveTicketDetails?: Resolver<Maybe<ResolversTypes['TicketSensitiveDetailsNode']>, ParentType, ContextType>,
  householdDataUpdateTicketDetails?: Resolver<Maybe<ResolversTypes['TicketHouseholdDataUpdateDetailsNode']>, ParentType, ContextType>,
  individualDataUpdateTicketDetails?: Resolver<Maybe<ResolversTypes['TicketIndividualDataUpdateDetailsNode']>, ParentType, ContextType>,
  addIndividualTicketDetails?: Resolver<Maybe<ResolversTypes['TicketAddIndividualDetailsNode']>, ParentType, ContextType>,
  deleteIndividualTicketDetails?: Resolver<Maybe<ResolversTypes['TicketDeleteIndividualDetailsNode']>, ParentType, ContextType>,
  deleteHouseholdTicketDetails?: Resolver<Maybe<ResolversTypes['TicketDeleteHouseholdDetailsNode']>, ParentType, ContextType>,
  systemFlaggingTicketDetails?: Resolver<Maybe<ResolversTypes['TicketSystemFlaggingDetailsNode']>, ParentType, ContextType>,
  needsAdjudicationTicketDetails?: Resolver<Maybe<ResolversTypes['TicketNeedsAdjudicationDetailsNode']>, ParentType, ContextType>,
  paymentVerificationTicketDetails?: Resolver<Maybe<ResolversTypes['TicketPaymentVerificationDetailsNode']>, ParentType, ContextType>,
  positiveFeedbackTicketDetails?: Resolver<Maybe<ResolversTypes['TicketPositiveFeedbackDetailsNode']>, ParentType, ContextType>,
  negativeFeedbackTicketDetails?: Resolver<Maybe<ResolversTypes['TicketNegativeFeedbackDetailsNode']>, ParentType, ContextType>,
  referralTicketDetails?: Resolver<Maybe<ResolversTypes['TicketReferralDetailsNode']>, ParentType, ContextType>,
  supportDocuments?: Resolver<ResolversTypes['GrievanceDocumentNodeConnection'], ParentType, ContextType, GrievanceTicketNodeSupportDocumentsArgs>,
  feedback?: Resolver<Maybe<ResolversTypes['FeedbackNode']>, ParentType, ContextType>,
  household?: Resolver<Maybe<ResolversTypes['HouseholdNode']>, ParentType, ContextType>,
  individual?: Resolver<Maybe<ResolversTypes['IndividualNode']>, ParentType, ContextType>,
  paymentRecord?: Resolver<Maybe<ResolversTypes['PaymentRecordAndPaymentNode']>, ParentType, ContextType>,
  admin?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  existingTickets?: Resolver<Maybe<Array<Maybe<ResolversTypes['GrievanceTicketNode']>>>, ParentType, ContextType>,
  relatedTickets?: Resolver<Maybe<Array<Maybe<ResolversTypes['GrievanceTicketNode']>>>, ParentType, ContextType>,
  totalDays?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  documentation?: Resolver<Maybe<Array<Maybe<ResolversTypes['GrievanceDocumentNode']>>>, ParentType, ContextType>,
};

export type GrievanceTicketNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['GrievanceTicketNodeConnection'] = ResolversParentTypes['GrievanceTicketNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['GrievanceTicketNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type GrievanceTicketNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['GrievanceTicketNodeEdge'] = ResolversParentTypes['GrievanceTicketNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['GrievanceTicketNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type GroupAttributeNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['GroupAttributeNode'] = ResolversParentTypes['GroupAttributeNode']> = {
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>,
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  label?: Resolver<ResolversTypes['JSONString'], ParentType, ContextType>,
  flexAttributes?: Resolver<Maybe<Array<Maybe<ResolversTypes['FieldAttributeNode']>>>, ParentType, ContextType, GroupAttributeNodeFlexAttributesArgs>,
  labelEn?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type HouseholdDataChangeApproveMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['HouseholdDataChangeApproveMutation'] = ResolversParentTypes['HouseholdDataChangeApproveMutation']> = {
  grievanceTicket?: Resolver<Maybe<ResolversTypes['GrievanceTicketNode']>, ParentType, ContextType>,
};

export type HouseholdNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['HouseholdNode'] = ResolversParentTypes['HouseholdNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  headOfHousehold?: Resolver<ResolversTypes['IndividualNode'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  isRemoved?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  removedDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  lastSyncAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  version?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>,
  unicefId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  withdrawn?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  withdrawnDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  consentSign?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  consent?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  consentSharing?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>,
  residenceStatus?: Resolver<ResolversTypes['HouseholdResidenceStatus'], ParentType, ContextType>,
  countryOrigin?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  address?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  zipCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  adminArea?: Resolver<Maybe<ResolversTypes['AreaNode']>, ParentType, ContextType>,
  admin1?: Resolver<Maybe<ResolversTypes['AreaNode']>, ParentType, ContextType>,
  admin2?: Resolver<Maybe<ResolversTypes['AreaNode']>, ParentType, ContextType>,
  admin3?: Resolver<Maybe<ResolversTypes['AreaNode']>, ParentType, ContextType>,
  admin4?: Resolver<Maybe<ResolversTypes['AreaNode']>, ParentType, ContextType>,
  geopoint?: Resolver<Maybe<ResolversTypes['GeoJSON']>, ParentType, ContextType>,
  representatives?: Resolver<ResolversTypes['IndividualNodeConnection'], ParentType, ContextType, HouseholdNodeRepresentativesArgs>,
  femaleAgeGroup05Count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  femaleAgeGroup611Count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  femaleAgeGroup1217Count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  femaleAgeGroup1859Count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  femaleAgeGroup60Count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  pregnantCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  maleAgeGroup05Count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  maleAgeGroup611Count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  maleAgeGroup1217Count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  maleAgeGroup1859Count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  maleAgeGroup60Count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  femaleAgeGroup05DisabledCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  femaleAgeGroup611DisabledCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  femaleAgeGroup1217DisabledCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  femaleAgeGroup1859DisabledCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  femaleAgeGroup60DisabledCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  maleAgeGroup05DisabledCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  maleAgeGroup611DisabledCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  maleAgeGroup1217DisabledCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  maleAgeGroup1859DisabledCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  maleAgeGroup60DisabledCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  childrenCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  maleChildrenCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  femaleChildrenCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  childrenDisabledCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  maleChildrenDisabledCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  femaleChildrenDisabledCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  registrationDataImport?: Resolver<Maybe<ResolversTypes['RegistrationDataImportNode']>, ParentType, ContextType>,
  programs?: Resolver<ResolversTypes['ProgramNodeConnection'], ParentType, ContextType, HouseholdNodeProgramsArgs>,
  returnee?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  flexFields?: Resolver<Maybe<ResolversTypes['FlexFieldsScalar']>, ParentType, ContextType>,
  firstRegistrationDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  lastRegistrationDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  fchildHoh?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  childHoh?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  businessArea?: Resolver<ResolversTypes['UserBusinessAreaNode'], ParentType, ContextType>,
  start?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  deviceid?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  nameEnumerator?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  orgEnumerator?: Resolver<ResolversTypes['HouseholdOrgEnumerator'], ParentType, ContextType>,
  orgNameEnumerator?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  village?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  registrationMethod?: Resolver<ResolversTypes['HouseholdRegistrationMethod'], ParentType, ContextType>,
  collectIndividualData?: Resolver<ResolversTypes['HouseholdCollectIndividualData'], ParentType, ContextType>,
  currency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  unhcrId?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  userFields?: Resolver<ResolversTypes['JSONString'], ParentType, ContextType>,
  koboAssetId?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  rowId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  registrationId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  totalCashReceivedUsd?: Resolver<Maybe<ResolversTypes['Decimal']>, ParentType, ContextType>,
  totalCashReceived?: Resolver<Maybe<ResolversTypes['Decimal']>, ParentType, ContextType>,
  familyId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  program?: Resolver<Maybe<ResolversTypes['ProgramNode']>, ParentType, ContextType>,
  copiedFrom?: Resolver<Maybe<ResolversTypes['HouseholdNode']>, ParentType, ContextType>,
  originUnicefId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  copiedTo?: Resolver<ResolversTypes['HouseholdNodeConnection'], ParentType, ContextType, HouseholdNodeCopiedToArgs>,
  individualsAndRoles?: Resolver<Array<ResolversTypes['IndividualRoleInHouseholdNode']>, ParentType, ContextType>,
  individuals?: Resolver<Maybe<ResolversTypes['IndividualNodeConnection']>, ParentType, ContextType, HouseholdNodeIndividualsArgs>,
  paymentrecordSet?: Resolver<ResolversTypes['PaymentRecordNodeConnection'], ParentType, ContextType, HouseholdNodePaymentrecordSetArgs>,
  paymentSet?: Resolver<ResolversTypes['PaymentNodeConnection'], ParentType, ContextType, HouseholdNodePaymentSetArgs>,
  complaintTicketDetails?: Resolver<ResolversTypes['TicketComplaintDetailsNodeConnection'], ParentType, ContextType, HouseholdNodeComplaintTicketDetailsArgs>,
  sensitiveTicketDetails?: Resolver<ResolversTypes['TicketSensitiveDetailsNodeConnection'], ParentType, ContextType, HouseholdNodeSensitiveTicketDetailsArgs>,
  householdDataUpdateTicketDetails?: Resolver<ResolversTypes['TicketHouseholdDataUpdateDetailsNodeConnection'], ParentType, ContextType, HouseholdNodeHouseholdDataUpdateTicketDetailsArgs>,
  addIndividualTicketDetails?: Resolver<ResolversTypes['TicketAddIndividualDetailsNodeConnection'], ParentType, ContextType, HouseholdNodeAddIndividualTicketDetailsArgs>,
  deleteHouseholdTicketDetails?: Resolver<ResolversTypes['TicketDeleteHouseholdDetailsNodeConnection'], ParentType, ContextType, HouseholdNodeDeleteHouseholdTicketDetailsArgs>,
  positiveFeedbackTicketDetails?: Resolver<ResolversTypes['TicketPositiveFeedbackDetailsNodeConnection'], ParentType, ContextType, HouseholdNodePositiveFeedbackTicketDetailsArgs>,
  negativeFeedbackTicketDetails?: Resolver<ResolversTypes['TicketNegativeFeedbackDetailsNodeConnection'], ParentType, ContextType, HouseholdNodeNegativeFeedbackTicketDetailsArgs>,
  referralTicketDetails?: Resolver<ResolversTypes['TicketReferralDetailsNodeConnection'], ParentType, ContextType, HouseholdNodeReferralTicketDetailsArgs>,
  targetPopulations?: Resolver<ResolversTypes['TargetPopulationNodeConnection'], ParentType, ContextType, HouseholdNodeTargetPopulationsArgs>,
  selections?: Resolver<Array<ResolversTypes['HouseholdSelectionNode']>, ParentType, ContextType>,
  messages?: Resolver<ResolversTypes['CommunicationMessageNodeConnection'], ParentType, ContextType, HouseholdNodeMessagesArgs>,
  feedbacks?: Resolver<ResolversTypes['FeedbackNodeConnection'], ParentType, ContextType, HouseholdNodeFeedbacksArgs>,
  surveys?: Resolver<ResolversTypes['SurveyNodeConnection'], ParentType, ContextType, HouseholdNodeSurveysArgs>,
  selection?: Resolver<Maybe<ResolversTypes['HouseholdSelectionNode']>, ParentType, ContextType>,
  sanctionListPossibleMatch?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  sanctionListConfirmedMatch?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  hasDuplicates?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  adminAreaTitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  programsWithDeliveredQuantity?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProgramsWithDeliveredQuantityNode']>>>, ParentType, ContextType>,
  activeIndividualsCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type HouseholdNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['HouseholdNodeConnection'] = ResolversParentTypes['HouseholdNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['HouseholdNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  individualsCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type HouseholdNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['HouseholdNodeEdge'] = ResolversParentTypes['HouseholdNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['HouseholdNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type HouseholdSelectionNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['HouseholdSelectionNode'] = ResolversParentTypes['HouseholdSelectionNode']> = {
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  household?: Resolver<ResolversTypes['HouseholdNode'], ParentType, ContextType>,
  targetPopulation?: Resolver<ResolversTypes['TargetPopulationNode'], ParentType, ContextType>,
  vulnerabilityScore?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
};

export type ImportDataNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ImportDataNode'] = ResolversParentTypes['ImportDataNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  status?: Resolver<ResolversTypes['ImportDataStatus'], ParentType, ContextType>,
  businessAreaSlug?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  file?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  dataType?: Resolver<ResolversTypes['ImportDataDataType'], ParentType, ContextType>,
  numberOfHouseholds?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  numberOfIndividuals?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  error?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  validationErrors?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  createdById?: Resolver<Maybe<ResolversTypes['UUID']>, ParentType, ContextType>,
  registrationDataImport?: Resolver<Maybe<ResolversTypes['RegistrationDataImportDatahubNode']>, ParentType, ContextType>,
  koboimportdata?: Resolver<Maybe<ResolversTypes['KoboImportDataNode']>, ParentType, ContextType>,
  xlsxValidationErrors?: Resolver<Maybe<Array<Maybe<ResolversTypes['XlsxRowErrorNode']>>>, ParentType, ContextType>,
};

export type ImportedDocumentNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ImportedDocumentNode'] = ResolversParentTypes['ImportedDocumentNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  documentNumber?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  photo?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  individual?: Resolver<ResolversTypes['ImportedIndividualNode'], ParentType, ContextType>,
  type?: Resolver<ResolversTypes['ImportedDocumentTypeNode'], ParentType, ContextType>,
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  docDate?: Resolver<Maybe<ResolversTypes['Date']>, ParentType, ContextType>,
  issuanceDate?: Resolver<Maybe<ResolversTypes['Date']>, ParentType, ContextType>,
  expiryDate?: Resolver<Maybe<ResolversTypes['Date']>, ParentType, ContextType>,
};

export type ImportedDocumentNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ImportedDocumentNodeConnection'] = ResolversParentTypes['ImportedDocumentNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['ImportedDocumentNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type ImportedDocumentNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ImportedDocumentNodeEdge'] = ResolversParentTypes['ImportedDocumentNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['ImportedDocumentNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type ImportedDocumentTypeNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ImportedDocumentTypeNode'] = ResolversParentTypes['ImportedDocumentTypeNode']> = {
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  key?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  isIdentityDocument?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  documents?: Resolver<ResolversTypes['ImportedDocumentNodeConnection'], ParentType, ContextType, ImportedDocumentTypeNodeDocumentsArgs>,
};

export type ImportedHouseholdNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ImportedHouseholdNode'] = ResolversParentTypes['ImportedHouseholdNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  consentSign?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  consent?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  consentSharing?: Resolver<ResolversTypes['ImportedHouseholdConsentSharing'], ParentType, ContextType>,
  residenceStatus?: Resolver<ResolversTypes['ImportedHouseholdResidenceStatus'], ParentType, ContextType>,
  countryOrigin?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  size?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  address?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  zipCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  adminArea?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  adminAreaTitle?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  admin1?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  admin1Title?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  admin2?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  admin2Title?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  admin3?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  admin3Title?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  admin4?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  admin4Title?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  geopoint?: Resolver<Maybe<ResolversTypes['GeoJSON']>, ParentType, ContextType>,
  femaleAgeGroup05Count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  femaleAgeGroup611Count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  femaleAgeGroup1217Count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  femaleAgeGroup1859Count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  femaleAgeGroup60Count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  pregnantCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  maleAgeGroup05Count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  maleAgeGroup611Count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  maleAgeGroup1217Count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  maleAgeGroup1859Count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  maleAgeGroup60Count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  femaleAgeGroup05DisabledCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  femaleAgeGroup611DisabledCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  femaleAgeGroup1217DisabledCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  femaleAgeGroup1859DisabledCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  femaleAgeGroup60DisabledCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  maleAgeGroup05DisabledCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  maleAgeGroup611DisabledCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  maleAgeGroup1217DisabledCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  maleAgeGroup1859DisabledCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  maleAgeGroup60DisabledCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  headOfHousehold?: Resolver<Maybe<ResolversTypes['ImportedIndividualNode']>, ParentType, ContextType>,
  fchildHoh?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  childHoh?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  registrationDataImport?: Resolver<ResolversTypes['RegistrationDataImportDatahubNode'], ParentType, ContextType>,
  firstRegistrationDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  lastRegistrationDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  returnee?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  flexFields?: Resolver<Maybe<ResolversTypes['Arg']>, ParentType, ContextType>,
  start?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  deviceid?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  nameEnumerator?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  orgEnumerator?: Resolver<Maybe<ResolversTypes['ImportedHouseholdOrgEnumerator']>, ParentType, ContextType>,
  orgNameEnumerator?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  village?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  registrationMethod?: Resolver<ResolversTypes['ImportedHouseholdRegistrationMethod'], ParentType, ContextType>,
  collectIndividualData?: Resolver<ResolversTypes['ImportedHouseholdCollectIndividualData'], ParentType, ContextType>,
  currency?: Resolver<ResolversTypes['ImportedHouseholdCurrency'], ParentType, ContextType>,
  unhcrId?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  koboSubmissionUuid?: Resolver<Maybe<ResolversTypes['UUID']>, ParentType, ContextType>,
  koboAssetId?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  koboSubmissionTime?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  rowId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  diiaRecId?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  enumeratorRecId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  misUnicefId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  programId?: Resolver<Maybe<ResolversTypes['UUID']>, ParentType, ContextType>,
  individuals?: Resolver<ResolversTypes['ImportedIndividualNodeConnection'], ParentType, ContextType, ImportedHouseholdNodeIndividualsArgs>,
  hasDuplicates?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  importId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type ImportedHouseholdNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ImportedHouseholdNodeConnection'] = ResolversParentTypes['ImportedHouseholdNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['ImportedHouseholdNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type ImportedHouseholdNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ImportedHouseholdNodeEdge'] = ResolversParentTypes['ImportedHouseholdNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['ImportedHouseholdNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type ImportedIndividualIdentityNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ImportedIndividualIdentityNode'] = ResolversParentTypes['ImportedIndividualIdentityNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  individual?: Resolver<ResolversTypes['ImportedIndividualNode'], ParentType, ContextType>,
  documentNumber?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  partner?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type ImportedIndividualIdentityNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ImportedIndividualIdentityNodeConnection'] = ResolversParentTypes['ImportedIndividualIdentityNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['ImportedIndividualIdentityNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type ImportedIndividualIdentityNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ImportedIndividualIdentityNodeEdge'] = ResolversParentTypes['ImportedIndividualIdentityNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['ImportedIndividualIdentityNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type ImportedIndividualNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ImportedIndividualNode'] = ResolversParentTypes['ImportedIndividualNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  individualId?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  photo?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  fullName?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  givenName?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  middleName?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  familyName?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  relationship?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  sex?: Resolver<ResolversTypes['ImportedIndividualSex'], ParentType, ContextType>,
  birthDate?: Resolver<ResolversTypes['Date'], ParentType, ContextType>,
  estimatedBirthDate?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  maritalStatus?: Resolver<ResolversTypes['ImportedIndividualMaritalStatus'], ParentType, ContextType>,
  phoneNo?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  phoneNoValid?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  phoneNoAlternative?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  phoneNoAlternativeValid?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  household?: Resolver<Maybe<ResolversTypes['ImportedHouseholdNode']>, ParentType, ContextType>,
  registrationDataImport?: Resolver<ResolversTypes['RegistrationDataImportDatahubNode'], ParentType, ContextType>,
  disability?: Resolver<ResolversTypes['ImportedIndividualDisability'], ParentType, ContextType>,
  workStatus?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  firstRegistrationDate?: Resolver<ResolversTypes['Date'], ParentType, ContextType>,
  lastRegistrationDate?: Resolver<ResolversTypes['Date'], ParentType, ContextType>,
  deduplicationBatchStatus?: Resolver<Maybe<ResolversTypes['ImportedIndividualDeduplicationBatchStatus']>, ParentType, ContextType>,
  deduplicationGoldenRecordStatus?: Resolver<Maybe<ResolversTypes['ImportedIndividualDeduplicationGoldenRecordStatus']>, ParentType, ContextType>,
  deduplicationBatchResults?: Resolver<Maybe<Array<Maybe<ResolversTypes['DeduplicationResultNode']>>>, ParentType, ContextType>,
  deduplicationGoldenRecordResults?: Resolver<Maybe<Array<Maybe<ResolversTypes['DeduplicationResultNode']>>>, ParentType, ContextType>,
  flexFields?: Resolver<Maybe<ResolversTypes['FlexFieldsScalar']>, ParentType, ContextType>,
  pregnant?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  observedDisability?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>,
  seeingDisability?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  hearingDisability?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  physicalDisability?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  memoryDisability?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  selfcareDisability?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  commsDisability?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  whoAnswersPhone?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  whoAnswersAltPhone?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  koboAssetId?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  rowId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  disabilityCertificatePicture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  preferredLanguage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  misUnicefId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  programId?: Resolver<Maybe<ResolversTypes['UUID']>, ParentType, ContextType>,
  ageAtRegistration?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  importedhousehold?: Resolver<Maybe<ResolversTypes['ImportedHouseholdNode']>, ParentType, ContextType>,
  documents?: Resolver<ResolversTypes['ImportedDocumentNodeConnection'], ParentType, ContextType, ImportedIndividualNodeDocumentsArgs>,
  identities?: Resolver<ResolversTypes['ImportedIndividualIdentityNodeConnection'], ParentType, ContextType, ImportedIndividualNodeIdentitiesArgs>,
  role?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  age?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  importId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type ImportedIndividualNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ImportedIndividualNodeConnection'] = ResolversParentTypes['ImportedIndividualNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['ImportedIndividualNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type ImportedIndividualNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ImportedIndividualNodeEdge'] = ResolversParentTypes['ImportedIndividualNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['ImportedIndividualNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type ImportXlsxPaymentPlanPaymentListMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['ImportXLSXPaymentPlanPaymentListMutation'] = ResolversParentTypes['ImportXLSXPaymentPlanPaymentListMutation']> = {
  paymentPlan?: Resolver<Maybe<ResolversTypes['PaymentPlanNode']>, ParentType, ContextType>,
  errors?: Resolver<Maybe<Array<Maybe<ResolversTypes['XlsxErrorNode']>>>, ParentType, ContextType>,
};

export type ImportXlsxPaymentPlanPaymentListPerFspMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['ImportXLSXPaymentPlanPaymentListPerFSPMutation'] = ResolversParentTypes['ImportXLSXPaymentPlanPaymentListPerFSPMutation']> = {
  paymentPlan?: Resolver<Maybe<ResolversTypes['PaymentPlanNode']>, ParentType, ContextType>,
  errors?: Resolver<Maybe<Array<Maybe<ResolversTypes['XlsxErrorNode']>>>, ParentType, ContextType>,
};

export type ImportXlsxPaymentVerificationPlanFileResolvers<ContextType = any, ParentType extends ResolversParentTypes['ImportXlsxPaymentVerificationPlanFile'] = ResolversParentTypes['ImportXlsxPaymentVerificationPlanFile']> = {
  paymentPlan?: Resolver<Maybe<ResolversTypes['GenericPaymentPlanNode']>, ParentType, ContextType>,
  errors?: Resolver<Maybe<Array<Maybe<ResolversTypes['XlsxErrorNode']>>>, ParentType, ContextType>,
};

export type IndividualDataChangeApproveMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['IndividualDataChangeApproveMutation'] = ResolversParentTypes['IndividualDataChangeApproveMutation']> = {
  grievanceTicket?: Resolver<Maybe<ResolversTypes['GrievanceTicketNode']>, ParentType, ContextType>,
};

export type IndividualIdentityNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['IndividualIdentityNode'] = ResolversParentTypes['IndividualIdentityNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  individual?: Resolver<ResolversTypes['IndividualNode'], ParentType, ContextType>,
  number?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  partner?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  countryIso3?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type IndividualIdentityNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['IndividualIdentityNodeConnection'] = ResolversParentTypes['IndividualIdentityNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['IndividualIdentityNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type IndividualIdentityNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['IndividualIdentityNodeEdge'] = ResolversParentTypes['IndividualIdentityNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['IndividualIdentityNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type IndividualNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['IndividualNode'] = ResolversParentTypes['IndividualNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  isRemoved?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  removedDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  lastSyncAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  version?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>,
  unicefId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  duplicate?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  duplicateDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  withdrawn?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  withdrawnDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  individualId?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  photo?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  fullName?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  givenName?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  middleName?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  familyName?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  sex?: Resolver<ResolversTypes['IndividualSex'], ParentType, ContextType>,
  birthDate?: Resolver<ResolversTypes['Date'], ParentType, ContextType>,
  estimatedBirthDate?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  maritalStatus?: Resolver<ResolversTypes['IndividualMaritalStatus'], ParentType, ContextType>,
  phoneNo?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  phoneNoValid?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  phoneNoAlternative?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  phoneNoAlternativeValid?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  relationship?: Resolver<Maybe<ResolversTypes['IndividualRelationship']>, ParentType, ContextType>,
  household?: Resolver<Maybe<ResolversTypes['HouseholdNode']>, ParentType, ContextType>,
  registrationDataImport?: Resolver<Maybe<ResolversTypes['RegistrationDataImportNode']>, ParentType, ContextType>,
  disability?: Resolver<ResolversTypes['IndividualDisability'], ParentType, ContextType>,
  workStatus?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  firstRegistrationDate?: Resolver<ResolversTypes['Date'], ParentType, ContextType>,
  lastRegistrationDate?: Resolver<ResolversTypes['Date'], ParentType, ContextType>,
  flexFields?: Resolver<Maybe<ResolversTypes['FlexFieldsScalar']>, ParentType, ContextType>,
  userFields?: Resolver<ResolversTypes['JSONString'], ParentType, ContextType>,
  enrolledInNutritionProgramme?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  administrationOfRutf?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  deduplicationGoldenRecordStatus?: Resolver<ResolversTypes['IndividualDeduplicationGoldenRecordStatus'], ParentType, ContextType>,
  deduplicationBatchStatus?: Resolver<ResolversTypes['IndividualDeduplicationBatchStatus'], ParentType, ContextType>,
  deduplicationGoldenRecordResults?: Resolver<Maybe<Array<Maybe<ResolversTypes['DeduplicationResultNode']>>>, ParentType, ContextType>,
  deduplicationBatchResults?: Resolver<Maybe<Array<Maybe<ResolversTypes['DeduplicationResultNode']>>>, ParentType, ContextType>,
  importedIndividualId?: Resolver<Maybe<ResolversTypes['UUID']>, ParentType, ContextType>,
  sanctionListPossibleMatch?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  sanctionListConfirmedMatch?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  pregnant?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  observedDisability?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>,
  seeingDisability?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  hearingDisability?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  physicalDisability?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  memoryDisability?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  selfcareDisability?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  commsDisability?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  whoAnswersPhone?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  whoAnswersAltPhone?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  businessArea?: Resolver<ResolversTypes['UserBusinessAreaNode'], ParentType, ContextType>,
  fchildHoh?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  childHoh?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  koboAssetId?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  rowId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  registrationId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  disabilityCertificatePicture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  preferredLanguage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  relationshipConfirmed?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  program?: Resolver<Maybe<ResolversTypes['ProgramNode']>, ParentType, ContextType>,
  copiedFrom?: Resolver<Maybe<ResolversTypes['IndividualNode']>, ParentType, ContextType>,
  originUnicefId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  ageAtRegistration?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  representedHouseholds?: Resolver<ResolversTypes['HouseholdNodeConnection'], ParentType, ContextType, IndividualNodeRepresentedHouseholdsArgs>,
  headingHousehold?: Resolver<Maybe<ResolversTypes['HouseholdNode']>, ParentType, ContextType>,
  documents?: Resolver<ResolversTypes['DocumentNodeConnection'], ParentType, ContextType, IndividualNodeDocumentsArgs>,
  identities?: Resolver<ResolversTypes['IndividualIdentityNodeConnection'], ParentType, ContextType, IndividualNodeIdentitiesArgs>,
  householdsAndRoles?: Resolver<Array<ResolversTypes['IndividualRoleInHouseholdNode']>, ParentType, ContextType>,
  copiedTo?: Resolver<ResolversTypes['IndividualNodeConnection'], ParentType, ContextType, IndividualNodeCopiedToArgs>,
  bankAccountInfo?: Resolver<Maybe<ResolversTypes['BankAccountInfoNode']>, ParentType, ContextType>,
  paymentrecordSet?: Resolver<ResolversTypes['PaymentRecordNodeConnection'], ParentType, ContextType, IndividualNodePaymentrecordSetArgs>,
  collectorPayments?: Resolver<ResolversTypes['PaymentNodeConnection'], ParentType, ContextType, IndividualNodeCollectorPaymentsArgs>,
  paymentSet?: Resolver<ResolversTypes['PaymentNodeConnection'], ParentType, ContextType, IndividualNodePaymentSetArgs>,
  complaintTicketDetails?: Resolver<ResolversTypes['TicketComplaintDetailsNodeConnection'], ParentType, ContextType, IndividualNodeComplaintTicketDetailsArgs>,
  sensitiveTicketDetails?: Resolver<ResolversTypes['TicketSensitiveDetailsNodeConnection'], ParentType, ContextType, IndividualNodeSensitiveTicketDetailsArgs>,
  individualDataUpdateTicketDetails?: Resolver<ResolversTypes['TicketIndividualDataUpdateDetailsNodeConnection'], ParentType, ContextType, IndividualNodeIndividualDataUpdateTicketDetailsArgs>,
  deleteIndividualTicketDetails?: Resolver<ResolversTypes['TicketDeleteIndividualDetailsNodeConnection'], ParentType, ContextType, IndividualNodeDeleteIndividualTicketDetailsArgs>,
  ticketsystemflaggingdetailsSet?: Resolver<ResolversTypes['TicketSystemFlaggingDetailsNodeConnection'], ParentType, ContextType, IndividualNodeTicketsystemflaggingdetailsSetArgs>,
  ticketGoldenRecords?: Resolver<ResolversTypes['TicketNeedsAdjudicationDetailsNodeConnection'], ParentType, ContextType, IndividualNodeTicketGoldenRecordsArgs>,
  ticketDuplicates?: Resolver<ResolversTypes['TicketNeedsAdjudicationDetailsNodeConnection'], ParentType, ContextType, IndividualNodeTicketDuplicatesArgs>,
  ticketSelected?: Resolver<ResolversTypes['TicketNeedsAdjudicationDetailsNodeConnection'], ParentType, ContextType, IndividualNodeTicketSelectedArgs>,
  positiveFeedbackTicketDetails?: Resolver<ResolversTypes['TicketPositiveFeedbackDetailsNodeConnection'], ParentType, ContextType, IndividualNodePositiveFeedbackTicketDetailsArgs>,
  negativeFeedbackTicketDetails?: Resolver<ResolversTypes['TicketNegativeFeedbackDetailsNodeConnection'], ParentType, ContextType, IndividualNodeNegativeFeedbackTicketDetailsArgs>,
  referralTicketDetails?: Resolver<ResolversTypes['TicketReferralDetailsNodeConnection'], ParentType, ContextType, IndividualNodeReferralTicketDetailsArgs>,
  feedbacks?: Resolver<ResolversTypes['FeedbackNodeConnection'], ParentType, ContextType, IndividualNodeFeedbacksArgs>,
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  role?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  age?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  sanctionListLastCheck?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  paymentChannels?: Resolver<Maybe<Array<Maybe<ResolversTypes['BankAccountInfoNode']>>>, ParentType, ContextType>,
};

export type IndividualNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['IndividualNodeConnection'] = ResolversParentTypes['IndividualNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['IndividualNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type IndividualNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['IndividualNodeEdge'] = ResolversParentTypes['IndividualNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['IndividualNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type IndividualRoleInHouseholdNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['IndividualRoleInHouseholdNode'] = ResolversParentTypes['IndividualRoleInHouseholdNode']> = {
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  lastSyncAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  individual?: Resolver<ResolversTypes['IndividualNode'], ParentType, ContextType>,
  household?: Resolver<ResolversTypes['HouseholdNode'], ParentType, ContextType>,
  role?: Resolver<Maybe<ResolversTypes['IndividualRoleInHouseholdRole']>, ParentType, ContextType>,
};

export type InvalidPaymentVerificationPlanResolvers<ContextType = any, ParentType extends ResolversParentTypes['InvalidPaymentVerificationPlan'] = ResolversParentTypes['InvalidPaymentVerificationPlan']> = {
  paymentPlan?: Resolver<Maybe<ResolversTypes['GenericPaymentPlanNode']>, ParentType, ContextType>,
};

export type IssueTypesObjectResolvers<ContextType = any, ParentType extends ResolversParentTypes['IssueTypesObject'] = ResolversParentTypes['IssueTypesObject']> = {
  category?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  subCategories?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
};

export interface JsonStringScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['JSONString'], any> {
  name: 'JSONString'
}

export type KoboAssetObjectResolvers<ContextType = any, ParentType extends ResolversParentTypes['KoboAssetObject'] = ResolversParentTypes['KoboAssetObject']> = {
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  sector?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  assetType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  dateModified?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  deploymentActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  hasDeployment?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  xlsLink?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type KoboAssetObjectConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['KoboAssetObjectConnection'] = ResolversParentTypes['KoboAssetObjectConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['KoboAssetObjectEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type KoboAssetObjectEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['KoboAssetObjectEdge'] = ResolversParentTypes['KoboAssetObjectEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['KoboAssetObject']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type KoboErrorNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['KoboErrorNode'] = ResolversParentTypes['KoboErrorNode']> = {
  header?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type KoboImportDataNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['KoboImportDataNode'] = ResolversParentTypes['KoboImportDataNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  status?: Resolver<ResolversTypes['ImportDataStatus'], ParentType, ContextType>,
  businessAreaSlug?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  file?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  dataType?: Resolver<ResolversTypes['ImportDataDataType'], ParentType, ContextType>,
  numberOfHouseholds?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  numberOfIndividuals?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  error?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  validationErrors?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  createdById?: Resolver<Maybe<ResolversTypes['UUID']>, ParentType, ContextType>,
  importdataPtr?: Resolver<ResolversTypes['ImportDataNode'], ParentType, ContextType>,
  koboAssetId?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  onlyActiveSubmissions?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  koboValidationErrors?: Resolver<Maybe<Array<Maybe<ResolversTypes['KoboErrorNode']>>>, ParentType, ContextType>,
};

export type LabelNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['LabelNode'] = ResolversParentTypes['LabelNode']> = {
  language?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type LanguageObjectResolvers<ContextType = any, ParentType extends ResolversParentTypes['LanguageObject'] = ResolversParentTypes['LanguageObject']> = {
  english?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type LanguageObjectConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['LanguageObjectConnection'] = ResolversParentTypes['LanguageObjectConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['LanguageObjectEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type LanguageObjectEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['LanguageObjectEdge'] = ResolversParentTypes['LanguageObjectEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['LanguageObject']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type LockTargetPopulationMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['LockTargetPopulationMutation'] = ResolversParentTypes['LockTargetPopulationMutation']> = {
  targetPopulation?: Resolver<Maybe<ResolversTypes['TargetPopulationNode']>, ParentType, ContextType>,
};

export type LogEntryNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['LogEntryNode'] = ResolversParentTypes['LogEntryNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  contentType?: Resolver<Maybe<ResolversTypes['ContentTypeObjectType']>, ParentType, ContextType>,
  objectId?: Resolver<Maybe<ResolversTypes['UUID']>, ParentType, ContextType>,
  action?: Resolver<ResolversTypes['LogEntryAction'], ParentType, ContextType>,
  objectRepr?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  changes?: Resolver<Maybe<ResolversTypes['Arg']>, ParentType, ContextType>,
  user?: Resolver<Maybe<ResolversTypes['UserNode']>, ParentType, ContextType>,
  businessArea?: Resolver<Maybe<ResolversTypes['UserBusinessAreaNode']>, ParentType, ContextType>,
  programs?: Resolver<ResolversTypes['ProgramNodeConnection'], ParentType, ContextType, LogEntryNodeProgramsArgs>,
  timestamp?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  isUserGenerated?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
};

export type LogEntryNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['LogEntryNodeConnection'] = ResolversParentTypes['LogEntryNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['LogEntryNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type LogEntryNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['LogEntryNodeEdge'] = ResolversParentTypes['LogEntryNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['LogEntryNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type MarkPaymentAsFailedMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['MarkPaymentAsFailedMutation'] = ResolversParentTypes['MarkPaymentAsFailedMutation']> = {
  payment?: Resolver<Maybe<ResolversTypes['PaymentNode']>, ParentType, ContextType>,
};

export type MarkPaymentRecordAsFailedMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['MarkPaymentRecordAsFailedMutation'] = ResolversParentTypes['MarkPaymentRecordAsFailedMutation']> = {
  paymentRecord?: Resolver<Maybe<ResolversTypes['PaymentRecordNode']>, ParentType, ContextType>,
};

export type MergeRegistrationDataImportMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['MergeRegistrationDataImportMutation'] = ResolversParentTypes['MergeRegistrationDataImportMutation']> = {
  registrationDataImport?: Resolver<Maybe<ResolversTypes['RegistrationDataImportNode']>, ParentType, ContextType>,
};

export type MutationsResolvers<ContextType = any, ParentType extends ResolversParentTypes['Mutations'] = ResolversParentTypes['Mutations']> = {
  createAccountabilityCommunicationMessage?: Resolver<Maybe<ResolversTypes['CreateCommunicationMessageMutation']>, ParentType, ContextType, RequireFields<MutationsCreateAccountabilityCommunicationMessageArgs, 'input'>>,
  createFeedback?: Resolver<Maybe<ResolversTypes['CreateFeedbackMutation']>, ParentType, ContextType, RequireFields<MutationsCreateFeedbackArgs, 'input'>>,
  updateFeedback?: Resolver<Maybe<ResolversTypes['UpdateFeedbackMutation']>, ParentType, ContextType, RequireFields<MutationsUpdateFeedbackArgs, 'input'>>,
  createFeedbackMessage?: Resolver<Maybe<ResolversTypes['CreateFeedbackMessageMutation']>, ParentType, ContextType, RequireFields<MutationsCreateFeedbackMessageArgs, 'input'>>,
  createSurvey?: Resolver<Maybe<ResolversTypes['CreateSurveyMutation']>, ParentType, ContextType, RequireFields<MutationsCreateSurveyArgs, 'input'>>,
  exportSurveySample?: Resolver<Maybe<ResolversTypes['ExportSurveySampleMutationMutation']>, ParentType, ContextType, RequireFields<MutationsExportSurveySampleArgs, 'surveyId'>>,
  createReport?: Resolver<Maybe<ResolversTypes['CreateReport']>, ParentType, ContextType, RequireFields<MutationsCreateReportArgs, 'reportData'>>,
  restartCreateReport?: Resolver<Maybe<ResolversTypes['RestartCreateReport']>, ParentType, ContextType, RequireFields<MutationsRestartCreateReportArgs, 'reportData'>>,
  createDashboardReport?: Resolver<Maybe<ResolversTypes['CreateDashboardReport']>, ParentType, ContextType, RequireFields<MutationsCreateDashboardReportArgs, 'reportData'>>,
  createGrievanceTicket?: Resolver<Maybe<ResolversTypes['CreateGrievanceTicketMutation']>, ParentType, ContextType, RequireFields<MutationsCreateGrievanceTicketArgs, 'input'>>,
  updateGrievanceTicket?: Resolver<Maybe<ResolversTypes['UpdateGrievanceTicketMutation']>, ParentType, ContextType, RequireFields<MutationsUpdateGrievanceTicketArgs, 'input'>>,
  grievanceStatusChange?: Resolver<Maybe<ResolversTypes['GrievanceStatusChangeMutation']>, ParentType, ContextType, MutationsGrievanceStatusChangeArgs>,
  bulkUpdateGrievanceAssignee?: Resolver<Maybe<ResolversTypes['BulkUpdateGrievanceTicketsAssigneesMutation']>, ParentType, ContextType, RequireFields<MutationsBulkUpdateGrievanceAssigneeArgs, 'businessAreaSlug'>>,
  createTicketNote?: Resolver<Maybe<ResolversTypes['CreateTicketNoteMutation']>, ParentType, ContextType, RequireFields<MutationsCreateTicketNoteArgs, 'noteInput'>>,
  approveIndividualDataChange?: Resolver<Maybe<ResolversTypes['IndividualDataChangeApproveMutation']>, ParentType, ContextType, RequireFields<MutationsApproveIndividualDataChangeArgs, 'grievanceTicketId'>>,
  approveHouseholdDataChange?: Resolver<Maybe<ResolversTypes['HouseholdDataChangeApproveMutation']>, ParentType, ContextType, RequireFields<MutationsApproveHouseholdDataChangeArgs, 'grievanceTicketId'>>,
  approveAddIndividual?: Resolver<Maybe<ResolversTypes['SimpleApproveMutation']>, ParentType, ContextType, RequireFields<MutationsApproveAddIndividualArgs, 'approveStatus' | 'grievanceTicketId'>>,
  approveDeleteIndividual?: Resolver<Maybe<ResolversTypes['SimpleApproveMutation']>, ParentType, ContextType, RequireFields<MutationsApproveDeleteIndividualArgs, 'approveStatus' | 'grievanceTicketId'>>,
  approveDeleteHousehold?: Resolver<Maybe<ResolversTypes['DeleteHouseholdApproveMutation']>, ParentType, ContextType, RequireFields<MutationsApproveDeleteHouseholdArgs, 'approveStatus' | 'grievanceTicketId'>>,
  approveSystemFlagging?: Resolver<Maybe<ResolversTypes['SimpleApproveMutation']>, ParentType, ContextType, RequireFields<MutationsApproveSystemFlaggingArgs, 'approveStatus' | 'grievanceTicketId'>>,
  approveNeedsAdjudication?: Resolver<Maybe<ResolversTypes['NeedsAdjudicationApproveMutation']>, ParentType, ContextType, RequireFields<MutationsApproveNeedsAdjudicationArgs, 'grievanceTicketId'>>,
  approvePaymentDetails?: Resolver<Maybe<ResolversTypes['PaymentDetailsApproveMutation']>, ParentType, ContextType, RequireFields<MutationsApprovePaymentDetailsArgs, 'approveStatus' | 'grievanceTicketId'>>,
  reassignRole?: Resolver<Maybe<ResolversTypes['ReassignRoleMutation']>, ParentType, ContextType, RequireFields<MutationsReassignRoleArgs, 'grievanceTicketId' | 'householdId' | 'individualId' | 'role'>>,
  createPaymentVerificationPlan?: Resolver<Maybe<ResolversTypes['CreateVerificationPlanMutation']>, ParentType, ContextType, RequireFields<MutationsCreatePaymentVerificationPlanArgs, 'input'>>,
  editPaymentVerificationPlan?: Resolver<Maybe<ResolversTypes['EditPaymentVerificationMutation']>, ParentType, ContextType, RequireFields<MutationsEditPaymentVerificationPlanArgs, 'input'>>,
  exportXlsxPaymentVerificationPlanFile?: Resolver<Maybe<ResolversTypes['ExportXlsxPaymentVerificationPlanFile']>, ParentType, ContextType, RequireFields<MutationsExportXlsxPaymentVerificationPlanFileArgs, 'paymentVerificationPlanId'>>,
  importXlsxPaymentVerificationPlanFile?: Resolver<Maybe<ResolversTypes['ImportXlsxPaymentVerificationPlanFile']>, ParentType, ContextType, RequireFields<MutationsImportXlsxPaymentVerificationPlanFileArgs, 'file' | 'paymentVerificationPlanId'>>,
  activatePaymentVerificationPlan?: Resolver<Maybe<ResolversTypes['ActivatePaymentVerificationPlan']>, ParentType, ContextType, RequireFields<MutationsActivatePaymentVerificationPlanArgs, 'paymentVerificationPlanId'>>,
  finishPaymentVerificationPlan?: Resolver<Maybe<ResolversTypes['FinishPaymentVerificationPlan']>, ParentType, ContextType, RequireFields<MutationsFinishPaymentVerificationPlanArgs, 'paymentVerificationPlanId'>>,
  discardPaymentVerificationPlan?: Resolver<Maybe<ResolversTypes['DiscardPaymentVerificationPlan']>, ParentType, ContextType, RequireFields<MutationsDiscardPaymentVerificationPlanArgs, 'paymentVerificationPlanId'>>,
  invalidPaymentVerificationPlan?: Resolver<Maybe<ResolversTypes['InvalidPaymentVerificationPlan']>, ParentType, ContextType, RequireFields<MutationsInvalidPaymentVerificationPlanArgs, 'paymentVerificationPlanId'>>,
  deletePaymentVerificationPlan?: Resolver<Maybe<ResolversTypes['DeletePaymentVerificationPlan']>, ParentType, ContextType, RequireFields<MutationsDeletePaymentVerificationPlanArgs, 'paymentVerificationPlanId'>>,
  updatePaymentVerificationStatusAndReceivedAmount?: Resolver<Maybe<ResolversTypes['UpdatePaymentVerificationStatusAndReceivedAmount']>, ParentType, ContextType, RequireFields<MutationsUpdatePaymentVerificationStatusAndReceivedAmountArgs, 'paymentVerificationId' | 'receivedAmount'>>,
  markPaymentRecordAsFailed?: Resolver<Maybe<ResolversTypes['MarkPaymentRecordAsFailedMutation']>, ParentType, ContextType, RequireFields<MutationsMarkPaymentRecordAsFailedArgs, 'paymentRecordId'>>,
  revertMarkPaymentRecordAsFailed?: Resolver<Maybe<ResolversTypes['RevertMarkPaymentRecordAsFailedMutation']>, ParentType, ContextType, RequireFields<MutationsRevertMarkPaymentRecordAsFailedArgs, 'deliveredQuantity' | 'deliveryDate' | 'paymentRecordId'>>,
  markPaymentAsFailed?: Resolver<Maybe<ResolversTypes['MarkPaymentAsFailedMutation']>, ParentType, ContextType, RequireFields<MutationsMarkPaymentAsFailedArgs, 'paymentId'>>,
  revertMarkPaymentAsFailed?: Resolver<Maybe<ResolversTypes['RevertMarkPaymentAsFailedMutation']>, ParentType, ContextType, RequireFields<MutationsRevertMarkPaymentAsFailedArgs, 'deliveredQuantity' | 'deliveryDate' | 'paymentId'>>,
  updatePaymentVerificationReceivedAndReceivedAmount?: Resolver<Maybe<ResolversTypes['UpdatePaymentVerificationReceivedAndReceivedAmount']>, ParentType, ContextType, RequireFields<MutationsUpdatePaymentVerificationReceivedAndReceivedAmountArgs, 'paymentVerificationId' | 'received' | 'receivedAmount'>>,
  actionPaymentPlanMutation?: Resolver<Maybe<ResolversTypes['ActionPaymentPlanMutation']>, ParentType, ContextType, RequireFields<MutationsActionPaymentPlanMutationArgs, 'input'>>,
  createPaymentPlan?: Resolver<Maybe<ResolversTypes['CreatePaymentPlanMutation']>, ParentType, ContextType, RequireFields<MutationsCreatePaymentPlanArgs, 'input'>>,
  createFollowUpPaymentPlan?: Resolver<Maybe<ResolversTypes['CreateFollowUpPaymentPlanMutation']>, ParentType, ContextType, RequireFields<MutationsCreateFollowUpPaymentPlanArgs, 'dispersionEndDate' | 'dispersionStartDate' | 'paymentPlanId'>>,
  updatePaymentPlan?: Resolver<Maybe<ResolversTypes['UpdatePaymentPlanMutation']>, ParentType, ContextType, RequireFields<MutationsUpdatePaymentPlanArgs, 'input'>>,
  deletePaymentPlan?: Resolver<Maybe<ResolversTypes['DeletePaymentPlanMutation']>, ParentType, ContextType, RequireFields<MutationsDeletePaymentPlanArgs, 'paymentPlanId'>>,
  chooseDeliveryMechanismsForPaymentPlan?: Resolver<Maybe<ResolversTypes['ChooseDeliveryMechanismsForPaymentPlanMutation']>, ParentType, ContextType, RequireFields<MutationsChooseDeliveryMechanismsForPaymentPlanArgs, 'input'>>,
  assignFspToDeliveryMechanism?: Resolver<Maybe<ResolversTypes['AssignFspToDeliveryMechanismMutation']>, ParentType, ContextType, RequireFields<MutationsAssignFspToDeliveryMechanismArgs, 'input'>>,
  exportXlsxPaymentPlanPaymentList?: Resolver<Maybe<ResolversTypes['ExportXLSXPaymentPlanPaymentListMutation']>, ParentType, ContextType, RequireFields<MutationsExportXlsxPaymentPlanPaymentListArgs, 'paymentPlanId'>>,
  exportXlsxPaymentPlanPaymentListPerFsp?: Resolver<Maybe<ResolversTypes['ExportXLSXPaymentPlanPaymentListPerFSPMutation']>, ParentType, ContextType, RequireFields<MutationsExportXlsxPaymentPlanPaymentListPerFspArgs, 'paymentPlanId'>>,
  importXlsxPaymentPlanPaymentList?: Resolver<Maybe<ResolversTypes['ImportXLSXPaymentPlanPaymentListMutation']>, ParentType, ContextType, RequireFields<MutationsImportXlsxPaymentPlanPaymentListArgs, 'file' | 'paymentPlanId'>>,
  importXlsxPaymentPlanPaymentListPerFsp?: Resolver<Maybe<ResolversTypes['ImportXLSXPaymentPlanPaymentListPerFSPMutation']>, ParentType, ContextType, RequireFields<MutationsImportXlsxPaymentPlanPaymentListPerFspArgs, 'file' | 'paymentPlanId'>>,
  setSteficonRuleOnPaymentPlanPaymentList?: Resolver<Maybe<ResolversTypes['SetSteficonRuleOnPaymentPlanPaymentListMutation']>, ParentType, ContextType, RequireFields<MutationsSetSteficonRuleOnPaymentPlanPaymentListArgs, 'paymentPlanId' | 'steficonRuleId'>>,
  excludeHouseholds?: Resolver<Maybe<ResolversTypes['ExcludeHouseholdsMutation']>, ParentType, ContextType, RequireFields<MutationsExcludeHouseholdsArgs, 'excludedHouseholdsIds' | 'paymentPlanId'>>,
  exportPdfPaymentPlanSummary?: Resolver<Maybe<ResolversTypes['ExportPDFPaymentPlanSummaryMutation']>, ParentType, ContextType, RequireFields<MutationsExportPdfPaymentPlanSummaryArgs, 'paymentPlanId'>>,
  createTargetPopulation?: Resolver<Maybe<ResolversTypes['CreateTargetPopulationMutation']>, ParentType, ContextType, RequireFields<MutationsCreateTargetPopulationArgs, 'input'>>,
  updateTargetPopulation?: Resolver<Maybe<ResolversTypes['UpdateTargetPopulationMutation']>, ParentType, ContextType, RequireFields<MutationsUpdateTargetPopulationArgs, 'input'>>,
  copyTargetPopulation?: Resolver<Maybe<ResolversTypes['CopyTargetPopulationMutationPayload']>, ParentType, ContextType, RequireFields<MutationsCopyTargetPopulationArgs, 'input'>>,
  deleteTargetPopulation?: Resolver<Maybe<ResolversTypes['DeleteTargetPopulationMutationPayload']>, ParentType, ContextType, RequireFields<MutationsDeleteTargetPopulationArgs, 'input'>>,
  lockTargetPopulation?: Resolver<Maybe<ResolversTypes['LockTargetPopulationMutation']>, ParentType, ContextType, RequireFields<MutationsLockTargetPopulationArgs, 'id'>>,
  unlockTargetPopulation?: Resolver<Maybe<ResolversTypes['UnlockTargetPopulationMutation']>, ParentType, ContextType, RequireFields<MutationsUnlockTargetPopulationArgs, 'id'>>,
  finalizeTargetPopulation?: Resolver<Maybe<ResolversTypes['FinalizeTargetPopulationMutation']>, ParentType, ContextType, RequireFields<MutationsFinalizeTargetPopulationArgs, 'id'>>,
  setSteficonRuleOnTargetPopulation?: Resolver<Maybe<ResolversTypes['SetSteficonRuleOnTargetPopulationMutationPayload']>, ParentType, ContextType, RequireFields<MutationsSetSteficonRuleOnTargetPopulationArgs, 'input'>>,
  targetPopulationRebuild?: Resolver<Maybe<ResolversTypes['RebuildTargetPopulationMutation']>, ParentType, ContextType, RequireFields<MutationsTargetPopulationRebuildArgs, 'id'>>,
  createProgram?: Resolver<Maybe<ResolversTypes['CreateProgram']>, ParentType, ContextType, RequireFields<MutationsCreateProgramArgs, 'programData'>>,
  updateProgram?: Resolver<Maybe<ResolversTypes['UpdateProgram']>, ParentType, ContextType, MutationsUpdateProgramArgs>,
  deleteProgram?: Resolver<Maybe<ResolversTypes['DeleteProgram']>, ParentType, ContextType, RequireFields<MutationsDeleteProgramArgs, 'programId'>>,
  copyProgram?: Resolver<Maybe<ResolversTypes['CopyProgram']>, ParentType, ContextType, RequireFields<MutationsCopyProgramArgs, 'programData'>>,
  uploadImportDataXlsxFileAsync?: Resolver<Maybe<ResolversTypes['UploadImportDataXLSXFileAsync']>, ParentType, ContextType, RequireFields<MutationsUploadImportDataXlsxFileAsyncArgs, 'businessAreaSlug' | 'file'>>,
  deleteRegistrationDataImport?: Resolver<Maybe<ResolversTypes['DeleteRegistrationDataImport']>, ParentType, ContextType, RequireFields<MutationsDeleteRegistrationDataImportArgs, 'registrationDataImportId'>>,
  registrationXlsxImport?: Resolver<Maybe<ResolversTypes['RegistrationXlsxImportMutation']>, ParentType, ContextType, RequireFields<MutationsRegistrationXlsxImportArgs, 'registrationDataImportData'>>,
  registrationKoboImport?: Resolver<Maybe<ResolversTypes['RegistrationKoboImportMutation']>, ParentType, ContextType, RequireFields<MutationsRegistrationKoboImportArgs, 'registrationDataImportData'>>,
  saveKoboImportDataAsync?: Resolver<Maybe<ResolversTypes['SaveKoboProjectImportDataAsync']>, ParentType, ContextType, RequireFields<MutationsSaveKoboImportDataAsyncArgs, 'businessAreaSlug' | 'onlyActiveSubmissions' | 'uid'>>,
  mergeRegistrationDataImport?: Resolver<Maybe<ResolversTypes['MergeRegistrationDataImportMutation']>, ParentType, ContextType, RequireFields<MutationsMergeRegistrationDataImportArgs, 'id'>>,
  refuseRegistrationDataImport?: Resolver<Maybe<ResolversTypes['RefuseRegistrationDataImportMutation']>, ParentType, ContextType, RequireFields<MutationsRefuseRegistrationDataImportArgs, 'id'>>,
  rerunDedupe?: Resolver<Maybe<ResolversTypes['RegistrationDeduplicationMutation']>, ParentType, ContextType, RequireFields<MutationsRerunDedupeArgs, 'registrationDataImportDatahubId'>>,
  eraseRegistrationDataImport?: Resolver<Maybe<ResolversTypes['EraseRegistrationDataImportMutation']>, ParentType, ContextType, RequireFields<MutationsEraseRegistrationDataImportArgs, 'id'>>,
  checkAgainstSanctionList?: Resolver<Maybe<ResolversTypes['CheckAgainstSanctionListMutation']>, ParentType, ContextType, RequireFields<MutationsCheckAgainstSanctionListArgs, 'file'>>,
};

export type NeedsAdjudicationApproveMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['NeedsAdjudicationApproveMutation'] = ResolversParentTypes['NeedsAdjudicationApproveMutation']> = {
  grievanceTicket?: Resolver<Maybe<ResolversTypes['GrievanceTicketNode']>, ParentType, ContextType>,
};

export type NodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['Node'] = ResolversParentTypes['Node']> = {
  __resolveType: TypeResolveFn<'CommunicationMessageNode' | 'UserNode' | 'IndividualIdentityNode' | 'IndividualNode' | 'HouseholdNode' | 'AreaNode' | 'AreaTypeNode' | 'GrievanceTicketNode' | 'UserBusinessAreaNode' | 'RegistrationDataImportNode' | 'ProgramNode' | 'PaymentPlanNode' | 'TargetPopulationNode' | 'RuleCommitNode' | 'SteficonRuleNode' | 'PaymentRecordNode' | 'CashPlanNode' | 'ServiceProviderNode' | 'PaymentVerificationPlanNode' | 'PaymentVerificationNode' | 'TicketPaymentVerificationDetailsNode' | 'PaymentVerificationSummaryNode' | 'TicketComplaintDetailsNode' | 'TicketSensitiveDetailsNode' | 'PaymentVerificationLogEntryNode' | 'SurveyNode' | 'DeliveryMechanismNode' | 'FinancialServiceProviderNode' | 'FinancialServiceProviderXlsxTemplateNode' | 'FinancialServiceProviderXlsxReportNode' | 'PaymentNode' | 'PaymentHouseholdSnapshotNode' | 'ApprovalProcessNode' | 'VolumeByDeliveryMechanismNode' | 'ReportNode' | 'FeedbackNode' | 'FeedbackMessageNode' | 'TicketNoteNode' | 'TicketHouseholdDataUpdateDetailsNode' | 'TicketIndividualDataUpdateDetailsNode' | 'TicketAddIndividualDetailsNode' | 'TicketDeleteIndividualDetailsNode' | 'TicketDeleteHouseholdDetailsNode' | 'TicketSystemFlaggingDetailsNode' | 'SanctionListIndividualNode' | 'SanctionListIndividualDocumentNode' | 'SanctionListIndividualNationalitiesNode' | 'SanctionListIndividualCountriesNode' | 'SanctionListIndividualAliasNameNode' | 'SanctionListIndividualDateOfBirthNode' | 'TicketNeedsAdjudicationDetailsNode' | 'TicketPositiveFeedbackDetailsNode' | 'TicketNegativeFeedbackDetailsNode' | 'TicketReferralDetailsNode' | 'GrievanceDocumentNode' | 'DocumentNode' | 'BankAccountInfoNode' | 'CommunicationMessageRecipientMapNode' | 'RecipientNode' | 'LogEntryNode' | 'BusinessAreaNode' | 'ImportedHouseholdNode' | 'ImportedIndividualNode' | 'RegistrationDataImportDatahubNode' | 'ImportDataNode' | 'KoboImportDataNode' | 'ImportedDocumentNode' | 'ImportedIndividualIdentityNode', ParentType, ContextType>,
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
};

export type PageInfoResolvers<ContextType = any, ParentType extends ResolversParentTypes['PageInfo'] = ResolversParentTypes['PageInfo']> = {
  hasNextPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  hasPreviousPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  startCursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  endCursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type PageInfoNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PageInfoNode'] = ResolversParentTypes['PageInfoNode']> = {
  startCursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  endCursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  hasNextPage?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  hasPreviousPage?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
};

export type PaginatedCashPlanAndPaymentPlanNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaginatedCashPlanAndPaymentPlanNode'] = ResolversParentTypes['PaginatedCashPlanAndPaymentPlanNode']> = {
  pageInfo?: Resolver<Maybe<ResolversTypes['PageInfoNode']>, ParentType, ContextType>,
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['CashPlanAndPaymentPlanEdges']>>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type PaginatedPaymentRecordsAndPaymentsNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaginatedPaymentRecordsAndPaymentsNode'] = ResolversParentTypes['PaginatedPaymentRecordsAndPaymentsNode']> = {
  pageInfo?: Resolver<Maybe<ResolversTypes['PageInfoNode']>, ParentType, ContextType>,
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['PaymentRecordsAndPaymentsEdges']>>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type PartnerTypeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PartnerType'] = ResolversParentTypes['PartnerType']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  isUn?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  userSet?: Resolver<ResolversTypes['UserNodeConnection'], ParentType, ContextType, PartnerTypeUserSetArgs>,
  individualIdentities?: Resolver<ResolversTypes['IndividualIdentityNodeConnection'], ParentType, ContextType, PartnerTypeIndividualIdentitiesArgs>,
  grievanceticketSet?: Resolver<ResolversTypes['GrievanceTicketNodeConnection'], ParentType, ContextType, PartnerTypeGrievanceticketSetArgs>,
};

export type PaymentConflictDataNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentConflictDataNode'] = ResolversParentTypes['PaymentConflictDataNode']> = {
  paymentPlanId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  paymentPlanUnicefId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  paymentPlanStartDate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  paymentPlanEndDate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  paymentPlanStatus?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  paymentId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  paymentUnicefId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type PaymentDetailsApproveMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentDetailsApproveMutation'] = ResolversParentTypes['PaymentDetailsApproveMutation']> = {
  grievanceTicket?: Resolver<Maybe<ResolversTypes['GrievanceTicketNode']>, ParentType, ContextType>,
};

export type PaymentHouseholdSnapshotNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentHouseholdSnapshotNode'] = ResolversParentTypes['PaymentHouseholdSnapshotNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  snapshotData?: Resolver<ResolversTypes['JSONString'], ParentType, ContextType>,
  householdId?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>,
  payment?: Resolver<ResolversTypes['PaymentNode'], ParentType, ContextType>,
};

export type PaymentNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentNode'] = ResolversParentTypes['PaymentNode']> = {
  isRemoved?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  unicefId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  businessArea?: Resolver<ResolversTypes['UserBusinessAreaNode'], ParentType, ContextType>,
  status?: Resolver<ResolversTypes['PaymentStatus'], ParentType, ContextType>,
  statusDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  household?: Resolver<ResolversTypes['HouseholdNode'], ParentType, ContextType>,
  headOfHousehold?: Resolver<Maybe<ResolversTypes['IndividualNode']>, ParentType, ContextType>,
  deliveryType?: Resolver<Maybe<ResolversTypes['PaymentDeliveryType']>, ParentType, ContextType>,
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  entitlementQuantity?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  entitlementQuantityUsd?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  deliveredQuantity?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  deliveredQuantityUsd?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  deliveryDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  transactionReferenceId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  parent?: Resolver<ResolversTypes['PaymentPlanNode'], ParentType, ContextType>,
  conflicted?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  excluded?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  entitlementDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  financialServiceProvider?: Resolver<Maybe<ResolversTypes['FinancialServiceProviderNode']>, ParentType, ContextType>,
  collector?: Resolver<ResolversTypes['IndividualNode'], ParentType, ContextType>,
  sourcePayment?: Resolver<Maybe<ResolversTypes['PaymentNode']>, ParentType, ContextType>,
  isFollowUp?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  reasonForUnsuccessfulPayment?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  program?: Resolver<Maybe<ResolversTypes['ProgramNode']>, ParentType, ContextType>,
  orderNumber?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  tokenNumber?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  followUps?: Resolver<ResolversTypes['PaymentNodeConnection'], ParentType, ContextType, PaymentNodeFollowUpsArgs>,
  householdSnapshot?: Resolver<Maybe<ResolversTypes['PaymentHouseholdSnapshotNode']>, ParentType, ContextType>,
  paymentPlanHardConflicted?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  paymentPlanHardConflictedData?: Resolver<Maybe<Array<Maybe<ResolversTypes['PaymentConflictDataNode']>>>, ParentType, ContextType>,
  paymentPlanSoftConflicted?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  paymentPlanSoftConflictedData?: Resolver<Maybe<Array<Maybe<ResolversTypes['PaymentConflictDataNode']>>>, ParentType, ContextType>,
  fullName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  targetPopulation?: Resolver<Maybe<ResolversTypes['TargetPopulationNode']>, ParentType, ContextType>,
  verification?: Resolver<Maybe<ResolversTypes['PaymentVerificationNode']>, ParentType, ContextType>,
  distributionModality?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  totalPersonsCovered?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  serviceProvider?: Resolver<Maybe<ResolversTypes['FinancialServiceProviderNode']>, ParentType, ContextType>,
};

export type PaymentNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentNodeConnection'] = ResolversParentTypes['PaymentNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['PaymentNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type PaymentNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentNodeEdge'] = ResolversParentTypes['PaymentNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['PaymentNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type PaymentPlanNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentPlanNode'] = ResolversParentTypes['PaymentPlanNode']> = {
  isRemoved?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  version?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>,
  unicefId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  businessArea?: Resolver<ResolversTypes['UserBusinessAreaNode'], ParentType, ContextType>,
  statusDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  startDate?: Resolver<Maybe<ResolversTypes['Date']>, ParentType, ContextType>,
  endDate?: Resolver<Maybe<ResolversTypes['Date']>, ParentType, ContextType>,
  program?: Resolver<ResolversTypes['ProgramNode'], ParentType, ContextType>,
  exchangeRate?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  totalEntitledQuantity?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  totalEntitledQuantityUsd?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  totalEntitledQuantityRevised?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  totalEntitledQuantityRevisedUsd?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  totalDeliveredQuantity?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  totalDeliveredQuantityUsd?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  totalUndeliveredQuantity?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  totalUndeliveredQuantityUsd?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  createdBy?: Resolver<ResolversTypes['UserNode'], ParentType, ContextType>,
  status?: Resolver<ResolversTypes['PaymentPlanStatus'], ParentType, ContextType>,
  backgroundActionStatus?: Resolver<Maybe<ResolversTypes['PaymentPlanBackgroundActionStatus']>, ParentType, ContextType>,
  targetPopulation?: Resolver<ResolversTypes['TargetPopulationNode'], ParentType, ContextType>,
  currency?: Resolver<ResolversTypes['PaymentPlanCurrency'], ParentType, ContextType>,
  dispersionStartDate?: Resolver<Maybe<ResolversTypes['Date']>, ParentType, ContextType>,
  dispersionEndDate?: Resolver<Maybe<ResolversTypes['Date']>, ParentType, ContextType>,
  femaleChildrenCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  maleChildrenCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  femaleAdultsCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  maleAdultsCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  totalHouseholdsCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  totalIndividualsCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  importedFileDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  steficonRule?: Resolver<Maybe<ResolversTypes['RuleCommitNode']>, ParentType, ContextType>,
  steficonAppliedDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  sourcePaymentPlan?: Resolver<Maybe<ResolversTypes['PaymentPlanNode']>, ParentType, ContextType>,
  isFollowUp?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  exclusionReason?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  excludeHouseholdError?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  followUps?: Resolver<ResolversTypes['PaymentPlanNodeConnection'], ParentType, ContextType, PaymentPlanNodeFollowUpsArgs>,
  deliveryMechanisms?: Resolver<Maybe<Array<Maybe<ResolversTypes['DeliveryMechanismNode']>>>, ParentType, ContextType>,
  paymentItems?: Resolver<ResolversTypes['PaymentNodeConnection'], ParentType, ContextType, PaymentPlanNodePaymentItemsArgs>,
  approvalProcess?: Resolver<ResolversTypes['ApprovalProcessNodeConnection'], ParentType, ContextType, PaymentPlanNodeApprovalProcessArgs>,
  currencyName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  hasPaymentListExportFile?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  hasFspDeliveryMechanismXlsxTemplate?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  importedFileName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  paymentsConflictsCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  volumeByDeliveryMechanism?: Resolver<Maybe<Array<Maybe<ResolversTypes['VolumeByDeliveryMechanismNode']>>>, ParentType, ContextType>,
  verificationPlans?: Resolver<Maybe<ResolversTypes['PaymentVerificationPlanNodeConnection']>, ParentType, ContextType, PaymentPlanNodeVerificationPlansArgs>,
  paymentVerificationSummary?: Resolver<Maybe<ResolversTypes['PaymentVerificationSummaryNode']>, ParentType, ContextType>,
  bankReconciliationSuccess?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  bankReconciliationError?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  canCreatePaymentVerificationPlan?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  availablePaymentRecordsCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  reconciliationSummary?: Resolver<Maybe<ResolversTypes['ReconciliationSummaryNode']>, ParentType, ContextType>,
  excludedHouseholds?: Resolver<Maybe<Array<Maybe<ResolversTypes['HouseholdNode']>>>, ParentType, ContextType>,
  canCreateFollowUp?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  totalWithdrawnHouseholdsCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  unsuccessfulPaymentsCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type PaymentPlanNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentPlanNodeConnection'] = ResolversParentTypes['PaymentPlanNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['PaymentPlanNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type PaymentPlanNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentPlanNodeEdge'] = ResolversParentTypes['PaymentPlanNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['PaymentPlanNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type PaymentRecordAndPaymentNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentRecordAndPaymentNode'] = ResolversParentTypes['PaymentRecordAndPaymentNode']> = {
  objType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  caId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  fullName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  parent?: Resolver<Maybe<ResolversTypes['CashPlanAndPaymentPlanNode']>, ParentType, ContextType>,
  entitlementQuantity?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  deliveredQuantity?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  deliveredQuantityUsd?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  currency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  deliveryDate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  verification?: Resolver<Maybe<ResolversTypes['PaymentVerificationNode']>, ParentType, ContextType>,
};

export type PaymentRecordNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentRecordNode'] = ResolversParentTypes['PaymentRecordNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  version?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>,
  businessArea?: Resolver<ResolversTypes['UserBusinessAreaNode'], ParentType, ContextType>,
  status?: Resolver<ResolversTypes['PaymentRecordStatus'], ParentType, ContextType>,
  statusDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  household?: Resolver<ResolversTypes['HouseholdNode'], ParentType, ContextType>,
  headOfHousehold?: Resolver<Maybe<ResolversTypes['IndividualNode']>, ParentType, ContextType>,
  deliveryType?: Resolver<Maybe<ResolversTypes['PaymentRecordDeliveryType']>, ParentType, ContextType>,
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  entitlementQuantity?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  entitlementQuantityUsd?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  deliveredQuantity?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  deliveredQuantityUsd?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  deliveryDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  transactionReferenceId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  caId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  caHashId?: Resolver<Maybe<ResolversTypes['UUID']>, ParentType, ContextType>,
  parent?: Resolver<Maybe<ResolversTypes['CashPlanNode']>, ParentType, ContextType>,
  fullName?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  totalPersonsCovered?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  distributionModality?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  targetPopulation?: Resolver<ResolversTypes['TargetPopulationNode'], ParentType, ContextType>,
  targetPopulationCashAssistId?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  entitlementCardNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  entitlementCardStatus?: Resolver<Maybe<ResolversTypes['PaymentRecordEntitlementCardStatus']>, ParentType, ContextType>,
  entitlementCardIssueDate?: Resolver<Maybe<ResolversTypes['Date']>, ParentType, ContextType>,
  visionId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  registrationCaId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  serviceProvider?: Resolver<ResolversTypes['ServiceProviderNode'], ParentType, ContextType>,
  verification?: Resolver<Maybe<ResolversTypes['PaymentVerificationNode']>, ParentType, ContextType>,
  unicefId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type PaymentRecordNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentRecordNodeConnection'] = ResolversParentTypes['PaymentRecordNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['PaymentRecordNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type PaymentRecordNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentRecordNodeEdge'] = ResolversParentTypes['PaymentRecordNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['PaymentRecordNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type PaymentRecordsAndPaymentsEdgesResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentRecordsAndPaymentsEdges'] = ResolversParentTypes['PaymentRecordsAndPaymentsEdges']> = {
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  node?: Resolver<Maybe<ResolversTypes['PaymentRecordAndPaymentNode']>, ParentType, ContextType>,
};

export type PaymentVerificationLogEntryNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentVerificationLogEntryNode'] = ResolversParentTypes['PaymentVerificationLogEntryNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  contentType?: Resolver<Maybe<ResolversTypes['ContentTypeObjectType']>, ParentType, ContextType>,
  objectId?: Resolver<Maybe<ResolversTypes['UUID']>, ParentType, ContextType>,
  action?: Resolver<ResolversTypes['LogEntryAction'], ParentType, ContextType>,
  objectRepr?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  changes?: Resolver<Maybe<ResolversTypes['Arg']>, ParentType, ContextType>,
  user?: Resolver<Maybe<ResolversTypes['UserNode']>, ParentType, ContextType>,
  businessArea?: Resolver<Maybe<ResolversTypes['UserBusinessAreaNode']>, ParentType, ContextType>,
  programs?: Resolver<ResolversTypes['ProgramNodeConnection'], ParentType, ContextType, PaymentVerificationLogEntryNodeProgramsArgs>,
  timestamp?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  isUserGenerated?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  contentObject?: Resolver<Maybe<ResolversTypes['PaymentVerificationPlanNode']>, ParentType, ContextType>,
};

export type PaymentVerificationLogEntryNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentVerificationLogEntryNodeConnection'] = ResolversParentTypes['PaymentVerificationLogEntryNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['PaymentVerificationLogEntryNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type PaymentVerificationLogEntryNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentVerificationLogEntryNodeEdge'] = ResolversParentTypes['PaymentVerificationLogEntryNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['PaymentVerificationLogEntryNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type PaymentVerificationNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentVerificationNode'] = ResolversParentTypes['PaymentVerificationNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  version?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>,
  paymentVerificationPlan?: Resolver<ResolversTypes['PaymentVerificationPlanNode'], ParentType, ContextType>,
  paymentContentType?: Resolver<ResolversTypes['ContentTypeObjectType'], ParentType, ContextType>,
  paymentObjectId?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>,
  status?: Resolver<ResolversTypes['PaymentVerificationStatus'], ParentType, ContextType>,
  statusDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  receivedAmount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  sentToRapidPro?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  ticketDetails?: Resolver<ResolversTypes['TicketPaymentVerificationDetailsNodeConnection'], ParentType, ContextType, PaymentVerificationNodeTicketDetailsArgs>,
  ticketDetail?: Resolver<ResolversTypes['TicketPaymentVerificationDetailsNodeConnection'], ParentType, ContextType, PaymentVerificationNodeTicketDetailArgs>,
  isManuallyEditable?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  payment?: Resolver<Maybe<ResolversTypes['GenericPaymentNode']>, ParentType, ContextType>,
};

export type PaymentVerificationNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentVerificationNodeConnection'] = ResolversParentTypes['PaymentVerificationNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['PaymentVerificationNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type PaymentVerificationNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentVerificationNodeEdge'] = ResolversParentTypes['PaymentVerificationNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['PaymentVerificationNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type PaymentVerificationPlanNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentVerificationPlanNode'] = ResolversParentTypes['PaymentVerificationPlanNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  version?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>,
  unicefId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  status?: Resolver<ResolversTypes['PaymentVerificationPlanStatus'], ParentType, ContextType>,
  paymentPlanContentType?: Resolver<ResolversTypes['ContentTypeObjectType'], ParentType, ContextType>,
  paymentPlanObjectId?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>,
  sampling?: Resolver<ResolversTypes['PaymentVerificationPlanSampling'], ParentType, ContextType>,
  verificationChannel?: Resolver<ResolversTypes['PaymentVerificationPlanVerificationChannel'], ParentType, ContextType>,
  sampleSize?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  respondedCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  receivedCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  notReceivedCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  receivedWithProblemsCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  confidenceInterval?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  marginOfError?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  rapidProFlowId?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  rapidProFlowStartUuids?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>,
  ageFilter?: Resolver<Maybe<ResolversTypes['AgeFilterObject']>, ParentType, ContextType>,
  excludedAdminAreasFilter?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>,
  sexFilter?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  activationDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  completionDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  xlsxFileExporting?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  xlsxFileImported?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  error?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  paymentRecordVerifications?: Resolver<ResolversTypes['PaymentVerificationNodeConnection'], ParentType, ContextType, PaymentVerificationPlanNodePaymentRecordVerificationsArgs>,
  xlsxFileWasDownloaded?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  hasXlsxFile?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  paymentPlan?: Resolver<Maybe<ResolversTypes['PaymentPlanNode']>, ParentType, ContextType>,
};

export type PaymentVerificationPlanNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentVerificationPlanNodeConnection'] = ResolversParentTypes['PaymentVerificationPlanNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['PaymentVerificationPlanNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type PaymentVerificationPlanNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentVerificationPlanNodeEdge'] = ResolversParentTypes['PaymentVerificationPlanNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['PaymentVerificationPlanNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type PaymentVerificationSummaryNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentVerificationSummaryNode'] = ResolversParentTypes['PaymentVerificationSummaryNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  status?: Resolver<ResolversTypes['PaymentVerificationSummaryStatus'], ParentType, ContextType>,
  activationDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  completionDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  paymentPlanContentType?: Resolver<ResolversTypes['ContentTypeObjectType'], ParentType, ContextType>,
  paymentPlanObjectId?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>,
};

export type PaymentVerificationSummaryNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentVerificationSummaryNodeConnection'] = ResolversParentTypes['PaymentVerificationSummaryNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['PaymentVerificationSummaryNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type PaymentVerificationSummaryNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentVerificationSummaryNodeEdge'] = ResolversParentTypes['PaymentVerificationSummaryNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['PaymentVerificationSummaryNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type ProgramNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProgramNode'] = ResolversParentTypes['ProgramNode']> = {
  isRemoved?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  lastSyncAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  version?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>,
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  status?: Resolver<ResolversTypes['ProgramStatus'], ParentType, ContextType>,
  startDate?: Resolver<ResolversTypes['Date'], ParentType, ContextType>,
  endDate?: Resolver<ResolversTypes['Date'], ParentType, ContextType>,
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  caId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  caHashId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  adminAreas?: Resolver<ResolversTypes['AreaNodeConnection'], ParentType, ContextType, ProgramNodeAdminAreasArgs>,
  businessArea?: Resolver<ResolversTypes['UserBusinessAreaNode'], ParentType, ContextType>,
  budget?: Resolver<Maybe<ResolversTypes['Decimal']>, ParentType, ContextType>,
  frequencyOfPayments?: Resolver<ResolversTypes['ProgramFrequencyOfPayments'], ParentType, ContextType>,
  sector?: Resolver<ResolversTypes['ProgramSector'], ParentType, ContextType>,
  scope?: Resolver<ResolversTypes['ProgramScope'], ParentType, ContextType>,
  cashPlus?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  populationGoal?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  administrativeAreasOfImplementation?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  individualDataNeeded?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  households?: Resolver<ResolversTypes['HouseholdNodeConnection'], ParentType, ContextType, ProgramNodeHouseholdsArgs>,
  householdSet?: Resolver<ResolversTypes['HouseholdNodeConnection'], ParentType, ContextType, ProgramNodeHouseholdSetArgs>,
  individuals?: Resolver<ResolversTypes['IndividualNodeConnection'], ParentType, ContextType, ProgramNodeIndividualsArgs>,
  registrationImports?: Resolver<ResolversTypes['RegistrationDataImportNodeConnection'], ParentType, ContextType, ProgramNodeRegistrationImportsArgs>,
  registrationDataImports?: Resolver<ResolversTypes['RegistrationDataImportNodeConnection'], ParentType, ContextType, ProgramNodeRegistrationDataImportsArgs>,
  paymentplanSet?: Resolver<ResolversTypes['PaymentPlanNodeConnection'], ParentType, ContextType, ProgramNodePaymentplanSetArgs>,
  cashplanSet?: Resolver<ResolversTypes['CashPlanNodeConnection'], ParentType, ContextType, ProgramNodeCashplanSetArgs>,
  paymentSet?: Resolver<ResolversTypes['PaymentNodeConnection'], ParentType, ContextType, ProgramNodePaymentSetArgs>,
  grievanceTickets?: Resolver<ResolversTypes['GrievanceTicketNodeConnection'], ParentType, ContextType, ProgramNodeGrievanceTicketsArgs>,
  targetpopulationSet?: Resolver<ResolversTypes['TargetPopulationNodeConnection'], ParentType, ContextType, ProgramNodeTargetpopulationSetArgs>,
  reports?: Resolver<ResolversTypes['ReportNodeConnection'], ParentType, ContextType, ProgramNodeReportsArgs>,
  activityLogs?: Resolver<ResolversTypes['PaymentVerificationLogEntryNodeConnection'], ParentType, ContextType, ProgramNodeActivityLogsArgs>,
  messages?: Resolver<ResolversTypes['CommunicationMessageNodeConnection'], ParentType, ContextType, ProgramNodeMessagesArgs>,
  feedbackSet?: Resolver<ResolversTypes['FeedbackNodeConnection'], ParentType, ContextType, ProgramNodeFeedbackSetArgs>,
  surveys?: Resolver<ResolversTypes['SurveyNodeConnection'], ParentType, ContextType, ProgramNodeSurveysArgs>,
  totalEntitledQuantity?: Resolver<Maybe<ResolversTypes['Decimal']>, ParentType, ContextType>,
  totalDeliveredQuantity?: Resolver<Maybe<ResolversTypes['Decimal']>, ParentType, ContextType>,
  totalUndeliveredQuantity?: Resolver<Maybe<ResolversTypes['Decimal']>, ParentType, ContextType>,
  totalNumberOfHouseholds?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type ProgramNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProgramNodeConnection'] = ResolversParentTypes['ProgramNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['ProgramNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type ProgramNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProgramNodeEdge'] = ResolversParentTypes['ProgramNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['ProgramNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type ProgramsWithDeliveredQuantityNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProgramsWithDeliveredQuantityNode'] = ResolversParentTypes['ProgramsWithDeliveredQuantityNode']> = {
  id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>,
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  quantity?: Resolver<Maybe<Array<Maybe<ResolversTypes['DeliveredQuantityNode']>>>, ParentType, ContextType>,
};

export type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
  accountabilityCommunicationMessage?: Resolver<Maybe<ResolversTypes['CommunicationMessageNode']>, ParentType, ContextType, RequireFields<QueryAccountabilityCommunicationMessageArgs, 'id'>>,
  allAccountabilityCommunicationMessages?: Resolver<Maybe<ResolversTypes['CommunicationMessageNodeConnection']>, ParentType, ContextType, QueryAllAccountabilityCommunicationMessagesArgs>,
  allAccountabilityCommunicationMessageRecipients?: Resolver<Maybe<ResolversTypes['CommunicationMessageRecipientMapNodeConnection']>, ParentType, ContextType, RequireFields<QueryAllAccountabilityCommunicationMessageRecipientsArgs, 'messageId'>>,
  accountabilityCommunicationMessageSampleSize?: Resolver<Maybe<ResolversTypes['GetCommunicationMessageSampleSizeNode']>, ParentType, ContextType, QueryAccountabilityCommunicationMessageSampleSizeArgs>,
  feedback?: Resolver<Maybe<ResolversTypes['FeedbackNode']>, ParentType, ContextType, RequireFields<QueryFeedbackArgs, 'id'>>,
  allFeedbacks?: Resolver<Maybe<ResolversTypes['FeedbackNodeConnection']>, ParentType, ContextType, QueryAllFeedbacksArgs>,
  feedbackIssueTypeChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  survey?: Resolver<Maybe<ResolversTypes['SurveyNode']>, ParentType, ContextType, RequireFields<QuerySurveyArgs, 'id'>>,
  allSurveys?: Resolver<Maybe<ResolversTypes['SurveyNodeConnection']>, ParentType, ContextType, QueryAllSurveysArgs>,
  recipients?: Resolver<Maybe<ResolversTypes['RecipientNodeConnection']>, ParentType, ContextType, RequireFields<QueryRecipientsArgs, 'survey'>>,
  accountabilitySampleSize?: Resolver<Maybe<ResolversTypes['AccountabilitySampleSizeNode']>, ParentType, ContextType, QueryAccountabilitySampleSizeArgs>,
  surveyCategoryChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  surveyAvailableFlows?: Resolver<Maybe<Array<Maybe<ResolversTypes['RapidProFlowNode']>>>, ParentType, ContextType>,
  adminArea?: Resolver<Maybe<ResolversTypes['AreaNode']>, ParentType, ContextType, RequireFields<QueryAdminAreaArgs, 'id'>>,
  allAdminAreas?: Resolver<Maybe<ResolversTypes['AreaNodeConnection']>, ParentType, ContextType, QueryAllAdminAreasArgs>,
  allLogEntries?: Resolver<Maybe<ResolversTypes['LogEntryNodeConnection']>, ParentType, ContextType, RequireFields<QueryAllLogEntriesArgs, 'businessArea'>>,
  logEntryActionChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  report?: Resolver<Maybe<ResolversTypes['ReportNode']>, ParentType, ContextType, RequireFields<QueryReportArgs, 'id'>>,
  allReports?: Resolver<Maybe<ResolversTypes['ReportNodeConnection']>, ParentType, ContextType, RequireFields<QueryAllReportsArgs, 'businessArea'>>,
  reportTypesChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  reportStatusChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  dashboardReportTypesChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType, RequireFields<QueryDashboardReportTypesChoicesArgs, 'businessAreaSlug'>>,
  dashboardYearsChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType, RequireFields<QueryDashboardYearsChoicesArgs, 'businessAreaSlug'>>,
  sanctionListIndividual?: Resolver<Maybe<ResolversTypes['SanctionListIndividualNode']>, ParentType, ContextType, RequireFields<QuerySanctionListIndividualArgs, 'id'>>,
  allSanctionListIndividuals?: Resolver<Maybe<ResolversTypes['SanctionListIndividualNodeConnection']>, ParentType, ContextType, QueryAllSanctionListIndividualsArgs>,
  ticketsByType?: Resolver<Maybe<ResolversTypes['TicketByType']>, ParentType, ContextType, RequireFields<QueryTicketsByTypeArgs, 'businessAreaSlug'>>,
  ticketsByCategory?: Resolver<Maybe<ResolversTypes['ChartDatasetNode']>, ParentType, ContextType, RequireFields<QueryTicketsByCategoryArgs, 'businessAreaSlug'>>,
  ticketsByStatus?: Resolver<Maybe<ResolversTypes['ChartDatasetNode']>, ParentType, ContextType, RequireFields<QueryTicketsByStatusArgs, 'businessAreaSlug'>>,
  ticketsByLocationAndCategory?: Resolver<Maybe<ResolversTypes['ChartDetailedDatasetsNode']>, ParentType, ContextType, RequireFields<QueryTicketsByLocationAndCategoryArgs, 'businessAreaSlug'>>,
  grievanceTicket?: Resolver<Maybe<ResolversTypes['GrievanceTicketNode']>, ParentType, ContextType, RequireFields<QueryGrievanceTicketArgs, 'id'>>,
  allGrievanceTicket?: Resolver<Maybe<ResolversTypes['GrievanceTicketNodeConnection']>, ParentType, ContextType, RequireFields<QueryAllGrievanceTicketArgs, 'businessArea'>>,
  existingGrievanceTickets?: Resolver<Maybe<ResolversTypes['GrievanceTicketNodeConnection']>, ParentType, ContextType, RequireFields<QueryExistingGrievanceTicketsArgs, 'businessArea'>>,
  allTicketNotes?: Resolver<Maybe<ResolversTypes['TicketNoteNodeConnection']>, ParentType, ContextType, RequireFields<QueryAllTicketNotesArgs, 'ticket'>>,
  chartGrievances?: Resolver<Maybe<ResolversTypes['ChartGrievanceTicketsNode']>, ParentType, ContextType, RequireFields<QueryChartGrievancesArgs, 'businessAreaSlug' | 'year'>>,
  allAddIndividualsFieldsAttributes?: Resolver<Maybe<Array<Maybe<ResolversTypes['FieldAttributeNode']>>>, ParentType, ContextType>,
  allEditHouseholdFieldsAttributes?: Resolver<Maybe<Array<Maybe<ResolversTypes['FieldAttributeNode']>>>, ParentType, ContextType>,
  grievanceTicketStatusChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  grievanceTicketCategoryChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  grievanceTicketManualCategoryChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  grievanceTicketSystemCategoryChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  grievanceTicketIssueTypeChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['IssueTypesObject']>>>, ParentType, ContextType>,
  grievanceTicketPriorityChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObjectInt']>>>, ParentType, ContextType>,
  grievanceTicketUrgencyChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObjectInt']>>>, ParentType, ContextType>,
  grievanceTicketSearchTypesChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  allSteficonRules?: Resolver<Maybe<ResolversTypes['SteficonRuleNodeConnection']>, ParentType, ContextType, RequireFields<QueryAllSteficonRulesArgs, 'type'>>,
  payment?: Resolver<Maybe<ResolversTypes['PaymentNode']>, ParentType, ContextType, RequireFields<QueryPaymentArgs, 'id'>>,
  allPayments?: Resolver<Maybe<ResolversTypes['PaymentNodeConnection']>, ParentType, ContextType, RequireFields<QueryAllPaymentsArgs, 'businessArea' | 'paymentPlanId'>>,
  paymentRecord?: Resolver<Maybe<ResolversTypes['PaymentRecordNode']>, ParentType, ContextType, RequireFields<QueryPaymentRecordArgs, 'id'>>,
  allPaymentRecords?: Resolver<Maybe<ResolversTypes['PaymentRecordNodeConnection']>, ParentType, ContextType, QueryAllPaymentRecordsArgs>,
  allPaymentRecordsAndPayments?: Resolver<Maybe<ResolversTypes['PaginatedPaymentRecordsAndPaymentsNode']>, ParentType, ContextType, RequireFields<QueryAllPaymentRecordsAndPaymentsArgs, 'businessArea'>>,
  financialServiceProviderXlsxTemplate?: Resolver<Maybe<ResolversTypes['FinancialServiceProviderXlsxTemplateNode']>, ParentType, ContextType, RequireFields<QueryFinancialServiceProviderXlsxTemplateArgs, 'id'>>,
  allFinancialServiceProviderXlsxTemplates?: Resolver<Maybe<ResolversTypes['FinancialServiceProviderXlsxTemplateNodeConnection']>, ParentType, ContextType, QueryAllFinancialServiceProviderXlsxTemplatesArgs>,
  financialServiceProviderXlsxReport?: Resolver<Maybe<ResolversTypes['FinancialServiceProviderXlsxReportNode']>, ParentType, ContextType, RequireFields<QueryFinancialServiceProviderXlsxReportArgs, 'id'>>,
  allFinancialServiceProviderXlsxReports?: Resolver<Maybe<ResolversTypes['FinancialServiceProviderXlsxReportNodeConnection']>, ParentType, ContextType, QueryAllFinancialServiceProviderXlsxReportsArgs>,
  financialServiceProvider?: Resolver<Maybe<ResolversTypes['FinancialServiceProviderNode']>, ParentType, ContextType, RequireFields<QueryFinancialServiceProviderArgs, 'id'>>,
  allFinancialServiceProviders?: Resolver<Maybe<ResolversTypes['FinancialServiceProviderNodeConnection']>, ParentType, ContextType, QueryAllFinancialServiceProvidersArgs>,
  paymentRecordVerification?: Resolver<Maybe<ResolversTypes['PaymentVerificationNode']>, ParentType, ContextType, RequireFields<QueryPaymentRecordVerificationArgs, 'id'>>,
  allPaymentVerifications?: Resolver<Maybe<ResolversTypes['PaymentVerificationNodeConnection']>, ParentType, ContextType, RequireFields<QueryAllPaymentVerificationsArgs, 'businessArea'>>,
  paymentVerificationPlan?: Resolver<Maybe<ResolversTypes['PaymentVerificationPlanNode']>, ParentType, ContextType, RequireFields<QueryPaymentVerificationPlanArgs, 'id'>>,
  allPaymentVerificationPlan?: Resolver<Maybe<ResolversTypes['PaymentVerificationPlanNodeConnection']>, ParentType, ContextType, QueryAllPaymentVerificationPlanArgs>,
  chartPaymentVerification?: Resolver<Maybe<ResolversTypes['ChartPaymentVerification']>, ParentType, ContextType, RequireFields<QueryChartPaymentVerificationArgs, 'businessAreaSlug' | 'year'>>,
  chartVolumeByDeliveryMechanism?: Resolver<Maybe<ResolversTypes['ChartDatasetNode']>, ParentType, ContextType, RequireFields<QueryChartVolumeByDeliveryMechanismArgs, 'businessAreaSlug' | 'year'>>,
  chartPayment?: Resolver<Maybe<ResolversTypes['ChartDatasetNode']>, ParentType, ContextType, RequireFields<QueryChartPaymentArgs, 'businessAreaSlug' | 'year'>>,
  sectionTotalTransferred?: Resolver<Maybe<ResolversTypes['SectionTotalNode']>, ParentType, ContextType, RequireFields<QuerySectionTotalTransferredArgs, 'businessAreaSlug' | 'year'>>,
  tableTotalCashTransferredByAdministrativeArea?: Resolver<Maybe<ResolversTypes['TableTotalCashTransferred']>, ParentType, ContextType, RequireFields<QueryTableTotalCashTransferredByAdministrativeAreaArgs, 'businessAreaSlug' | 'year'>>,
  chartTotalTransferredCashByCountry?: Resolver<Maybe<ResolversTypes['ChartDetailedDatasetsNode']>, ParentType, ContextType, RequireFields<QueryChartTotalTransferredCashByCountryArgs, 'year'>>,
  paymentRecordStatusChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  paymentRecordEntitlementCardStatusChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  paymentRecordDeliveryTypeChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  cashPlanVerificationStatusChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  cashPlanVerificationSamplingChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  cashPlanVerificationVerificationChannelChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  paymentVerificationStatusChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  allRapidProFlows?: Resolver<Maybe<Array<Maybe<ResolversTypes['RapidProFlow']>>>, ParentType, ContextType, RequireFields<QueryAllRapidProFlowsArgs, 'businessAreaSlug'>>,
  sampleSize?: Resolver<Maybe<ResolversTypes['GetCashplanVerificationSampleSizeObject']>, ParentType, ContextType, QuerySampleSizeArgs>,
  allPaymentVerificationLogEntries?: Resolver<Maybe<ResolversTypes['PaymentVerificationLogEntryNodeConnection']>, ParentType, ContextType, RequireFields<QueryAllPaymentVerificationLogEntriesArgs, 'businessArea'>>,
  paymentPlan?: Resolver<Maybe<ResolversTypes['PaymentPlanNode']>, ParentType, ContextType, RequireFields<QueryPaymentPlanArgs, 'id'>>,
  allPaymentPlans?: Resolver<Maybe<ResolversTypes['PaymentPlanNodeConnection']>, ParentType, ContextType, RequireFields<QueryAllPaymentPlansArgs, 'businessArea'>>,
  paymentPlanStatusChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  currencyChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  allDeliveryMechanisms?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  paymentPlanBackgroundActionStatusChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  availableFspsForDeliveryMechanisms?: Resolver<Maybe<Array<Maybe<ResolversTypes['FspChoices']>>>, ParentType, ContextType, QueryAvailableFspsForDeliveryMechanismsArgs>,
  allCashPlansAndPaymentPlans?: Resolver<Maybe<ResolversTypes['PaginatedCashPlanAndPaymentPlanNode']>, ParentType, ContextType, RequireFields<QueryAllCashPlansAndPaymentPlansArgs, 'businessArea'>>,
  businessArea?: Resolver<Maybe<ResolversTypes['BusinessAreaNode']>, ParentType, ContextType, RequireFields<QueryBusinessAreaArgs, 'businessAreaSlug'>>,
  allBusinessAreas?: Resolver<Maybe<ResolversTypes['BusinessAreaNodeConnection']>, ParentType, ContextType, QueryAllBusinessAreasArgs>,
  allFieldsAttributes?: Resolver<Maybe<Array<Maybe<ResolversTypes['FieldAttributeNode']>>>, ParentType, ContextType, QueryAllFieldsAttributesArgs>,
  allGroupsWithFields?: Resolver<Maybe<Array<Maybe<ResolversTypes['GroupAttributeNode']>>>, ParentType, ContextType>,
  koboProject?: Resolver<Maybe<ResolversTypes['KoboAssetObject']>, ParentType, ContextType, RequireFields<QueryKoboProjectArgs, 'uid' | 'businessAreaSlug'>>,
  allKoboProjects?: Resolver<Maybe<ResolversTypes['KoboAssetObjectConnection']>, ParentType, ContextType, RequireFields<QueryAllKoboProjectsArgs, 'businessAreaSlug'>>,
  cashAssistUrlPrefix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  allLanguages?: Resolver<Maybe<ResolversTypes['LanguageObjectConnection']>, ParentType, ContextType, QueryAllLanguagesArgs>,
  program?: Resolver<Maybe<ResolversTypes['ProgramNode']>, ParentType, ContextType, RequireFields<QueryProgramArgs, 'id'>>,
  allPrograms?: Resolver<Maybe<ResolversTypes['ProgramNodeConnection']>, ParentType, ContextType, RequireFields<QueryAllProgramsArgs, 'businessArea'>>,
  chartProgrammesBySector?: Resolver<Maybe<ResolversTypes['ChartDetailedDatasetsNode']>, ParentType, ContextType, RequireFields<QueryChartProgrammesBySectorArgs, 'businessAreaSlug' | 'year'>>,
  chartTotalTransferredByMonth?: Resolver<Maybe<ResolversTypes['ChartDetailedDatasetsNode']>, ParentType, ContextType, RequireFields<QueryChartTotalTransferredByMonthArgs, 'businessAreaSlug' | 'year'>>,
  cashPlan?: Resolver<Maybe<ResolversTypes['CashPlanNode']>, ParentType, ContextType, RequireFields<QueryCashPlanArgs, 'id'>>,
  allCashPlans?: Resolver<Maybe<ResolversTypes['CashPlanNodeConnection']>, ParentType, ContextType, QueryAllCashPlansArgs>,
  programStatusChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  programFrequencyOfPaymentsChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  programSectorChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  programScopeChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  cashPlanStatusChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  allActivePrograms?: Resolver<Maybe<ResolversTypes['ProgramNodeConnection']>, ParentType, ContextType, RequireFields<QueryAllActiveProgramsArgs, 'businessArea'>>,
  targetPopulation?: Resolver<Maybe<ResolversTypes['TargetPopulationNode']>, ParentType, ContextType, RequireFields<QueryTargetPopulationArgs, 'id'>>,
  allTargetPopulation?: Resolver<Maybe<ResolversTypes['TargetPopulationNodeConnection']>, ParentType, ContextType, QueryAllTargetPopulationArgs>,
  targetPopulationHouseholds?: Resolver<Maybe<ResolversTypes['HouseholdNodeConnection']>, ParentType, ContextType, RequireFields<QueryTargetPopulationHouseholdsArgs, 'targetPopulation'>>,
  targetPopulationStatusChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  allActiveTargetPopulations?: Resolver<Maybe<ResolversTypes['TargetPopulationNodeConnection']>, ParentType, ContextType, QueryAllActiveTargetPopulationsArgs>,
  household?: Resolver<Maybe<ResolversTypes['HouseholdNode']>, ParentType, ContextType, RequireFields<QueryHouseholdArgs, 'id'>>,
  allHouseholds?: Resolver<Maybe<ResolversTypes['HouseholdNodeConnection']>, ParentType, ContextType, QueryAllHouseholdsArgs>,
  individual?: Resolver<Maybe<ResolversTypes['IndividualNode']>, ParentType, ContextType, RequireFields<QueryIndividualArgs, 'id'>>,
  allIndividuals?: Resolver<Maybe<ResolversTypes['IndividualNodeConnection']>, ParentType, ContextType, QueryAllIndividualsArgs>,
  allMergedHouseholds?: Resolver<Maybe<ResolversTypes['HouseholdNodeConnection']>, ParentType, ContextType, QueryAllMergedHouseholdsArgs>,
  allMergedIndividuals?: Resolver<Maybe<ResolversTypes['IndividualNodeConnection']>, ParentType, ContextType, QueryAllMergedIndividualsArgs>,
  sectionHouseholdsReached?: Resolver<Maybe<ResolversTypes['SectionTotalNode']>, ParentType, ContextType, RequireFields<QuerySectionHouseholdsReachedArgs, 'businessAreaSlug' | 'year'>>,
  sectionIndividualsReached?: Resolver<Maybe<ResolversTypes['SectionTotalNode']>, ParentType, ContextType, RequireFields<QuerySectionIndividualsReachedArgs, 'businessAreaSlug' | 'year'>>,
  sectionChildReached?: Resolver<Maybe<ResolversTypes['SectionTotalNode']>, ParentType, ContextType, RequireFields<QuerySectionChildReachedArgs, 'businessAreaSlug' | 'year'>>,
  chartIndividualsReachedByAgeAndGender?: Resolver<Maybe<ResolversTypes['ChartDatasetNode']>, ParentType, ContextType, RequireFields<QueryChartIndividualsReachedByAgeAndGenderArgs, 'businessAreaSlug' | 'year'>>,
  chartIndividualsWithDisabilityReachedByAge?: Resolver<Maybe<ResolversTypes['ChartDetailedDatasetsNode']>, ParentType, ContextType, RequireFields<QueryChartIndividualsWithDisabilityReachedByAgeArgs, 'businessAreaSlug' | 'year'>>,
  residenceStatusChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  sexChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  maritalStatusChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  workStatusChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  relationshipChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  roleChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  documentTypeChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  identityTypeChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  countriesChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  observedDisabilityChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  severityOfDisabilityChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  flagChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  allHouseholdsFlexFieldsAttributes?: Resolver<Maybe<Array<Maybe<ResolversTypes['FieldAttributeNode']>>>, ParentType, ContextType>,
  allIndividualsFlexFieldsAttributes?: Resolver<Maybe<Array<Maybe<ResolversTypes['FieldAttributeNode']>>>, ParentType, ContextType>,
  me?: Resolver<Maybe<ResolversTypes['UserNode']>, ParentType, ContextType>,
  allUsers?: Resolver<Maybe<ResolversTypes['UserNodeConnection']>, ParentType, ContextType, RequireFields<QueryAllUsersArgs, 'businessArea'>>,
  userRolesChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  userStatusChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  userPartnerChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  hasAvailableUsersToExport?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, RequireFields<QueryHasAvailableUsersToExportArgs, 'businessAreaSlug'>>,
  importedHousehold?: Resolver<Maybe<ResolversTypes['ImportedHouseholdNode']>, ParentType, ContextType, RequireFields<QueryImportedHouseholdArgs, 'id'>>,
  allImportedHouseholds?: Resolver<Maybe<ResolversTypes['ImportedHouseholdNodeConnection']>, ParentType, ContextType, QueryAllImportedHouseholdsArgs>,
  registrationDataImportDatahub?: Resolver<Maybe<ResolversTypes['RegistrationDataImportDatahubNode']>, ParentType, ContextType, RequireFields<QueryRegistrationDataImportDatahubArgs, 'id'>>,
  allRegistrationDataImportsDatahub?: Resolver<Maybe<ResolversTypes['RegistrationDataImportDatahubNodeConnection']>, ParentType, ContextType, QueryAllRegistrationDataImportsDatahubArgs>,
  importedIndividual?: Resolver<Maybe<ResolversTypes['ImportedIndividualNode']>, ParentType, ContextType, RequireFields<QueryImportedIndividualArgs, 'id'>>,
  allImportedIndividuals?: Resolver<Maybe<ResolversTypes['ImportedIndividualNodeConnection']>, ParentType, ContextType, QueryAllImportedIndividualsArgs>,
  importData?: Resolver<Maybe<ResolversTypes['ImportDataNode']>, ParentType, ContextType, RequireFields<QueryImportDataArgs, 'id'>>,
  koboImportData?: Resolver<Maybe<ResolversTypes['KoboImportDataNode']>, ParentType, ContextType, RequireFields<QueryKoboImportDataArgs, 'id'>>,
  deduplicationBatchStatusChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  deduplicationGoldenRecordStatusChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  registrationDataImport?: Resolver<Maybe<ResolversTypes['RegistrationDataImportNode']>, ParentType, ContextType, RequireFields<QueryRegistrationDataImportArgs, 'id'>>,
  allRegistrationDataImports?: Resolver<Maybe<ResolversTypes['RegistrationDataImportNodeConnection']>, ParentType, ContextType, QueryAllRegistrationDataImportsArgs>,
  registrationDataStatusChoices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ChoiceObject']>>>, ParentType, ContextType>,
  _debug?: Resolver<Maybe<ResolversTypes['DjangoDebug']>, ParentType, ContextType>,
};

export type RapidProFlowResolvers<ContextType = any, ParentType extends ResolversParentTypes['RapidProFlow'] = ResolversParentTypes['RapidProFlow']> = {
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  archived?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  labels?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>,
  expires?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  runs?: Resolver<Maybe<Array<Maybe<ResolversTypes['RapidProFlowRun']>>>, ParentType, ContextType>,
  results?: Resolver<Maybe<Array<Maybe<ResolversTypes['RapidProFlowResult']>>>, ParentType, ContextType>,
  createdOn?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  modifiedOn?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
};

export type RapidProFlowNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['RapidProFlowNode'] = ResolversParentTypes['RapidProFlowNode']> = {
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type RapidProFlowResultResolvers<ContextType = any, ParentType extends ResolversParentTypes['RapidProFlowResult'] = ResolversParentTypes['RapidProFlowResult']> = {
  key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  categories?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>,
  nodeUuids?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>,
};

export type RapidProFlowRunResolvers<ContextType = any, ParentType extends ResolversParentTypes['RapidProFlowRun'] = ResolversParentTypes['RapidProFlowRun']> = {
  active?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  completed?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  interrupted?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  expired?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type ReassignRoleMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReassignRoleMutation'] = ResolversParentTypes['ReassignRoleMutation']> = {
  household?: Resolver<Maybe<ResolversTypes['HouseholdNode']>, ParentType, ContextType>,
  individual?: Resolver<Maybe<ResolversTypes['IndividualNode']>, ParentType, ContextType>,
};

export type RebuildTargetPopulationMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['RebuildTargetPopulationMutation'] = ResolversParentTypes['RebuildTargetPopulationMutation']> = {
  targetPopulation?: Resolver<Maybe<ResolversTypes['TargetPopulationNode']>, ParentType, ContextType>,
};

export type RecipientNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['RecipientNode'] = ResolversParentTypes['RecipientNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  headOfHousehold?: Resolver<ResolversTypes['IndividualNode'], ParentType, ContextType>,
};

export type RecipientNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['RecipientNodeConnection'] = ResolversParentTypes['RecipientNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['RecipientNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type RecipientNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['RecipientNodeEdge'] = ResolversParentTypes['RecipientNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['RecipientNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type ReconciliationSummaryNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReconciliationSummaryNode'] = ResolversParentTypes['ReconciliationSummaryNode']> = {
  deliveredFully?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  deliveredPartially?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  notDelivered?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  unsuccessful?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  pending?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  forceFailed?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  numberOfPayments?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  reconciled?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type RefuseRegistrationDataImportMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['RefuseRegistrationDataImportMutation'] = ResolversParentTypes['RefuseRegistrationDataImportMutation']> = {
  registrationDataImport?: Resolver<Maybe<ResolversTypes['RegistrationDataImportNode']>, ParentType, ContextType>,
};

export type RegistrationDataImportDatahubNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['RegistrationDataImportDatahubNode'] = ResolversParentTypes['RegistrationDataImportDatahubNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  importDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  hctId?: Resolver<Maybe<ResolversTypes['UUID']>, ParentType, ContextType>,
  importData?: Resolver<Maybe<ResolversTypes['ImportDataNode']>, ParentType, ContextType>,
  importDone?: Resolver<ResolversTypes['RegistrationDataImportDatahubImportDone'], ParentType, ContextType>,
  businessAreaSlug?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  households?: Resolver<ResolversTypes['ImportedHouseholdNodeConnection'], ParentType, ContextType, RegistrationDataImportDatahubNodeHouseholdsArgs>,
  individuals?: Resolver<ResolversTypes['ImportedIndividualNodeConnection'], ParentType, ContextType, RegistrationDataImportDatahubNodeIndividualsArgs>,
};

export type RegistrationDataImportDatahubNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['RegistrationDataImportDatahubNodeConnection'] = ResolversParentTypes['RegistrationDataImportDatahubNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['RegistrationDataImportDatahubNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type RegistrationDataImportDatahubNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['RegistrationDataImportDatahubNodeEdge'] = ResolversParentTypes['RegistrationDataImportDatahubNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['RegistrationDataImportDatahubNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type RegistrationDataImportNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['RegistrationDataImportNode'] = ResolversParentTypes['RegistrationDataImportNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  version?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>,
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  status?: Resolver<ResolversTypes['RegistrationDataImportStatus'], ParentType, ContextType>,
  importDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  importedBy?: Resolver<Maybe<ResolversTypes['UserNode']>, ParentType, ContextType>,
  dataSource?: Resolver<ResolversTypes['RegistrationDataImportDataSource'], ParentType, ContextType>,
  numberOfIndividuals?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  numberOfHouseholds?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  datahubId?: Resolver<Maybe<ResolversTypes['UUID']>, ParentType, ContextType>,
  errorMessage?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  sentryId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  pullPictures?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  businessArea?: Resolver<Maybe<ResolversTypes['UserBusinessAreaNode']>, ParentType, ContextType>,
  screenBeneficiary?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  excluded?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  program?: Resolver<Maybe<ResolversTypes['ProgramNode']>, ParentType, ContextType>,
  programs?: Resolver<ResolversTypes['ProgramNodeConnection'], ParentType, ContextType, RegistrationDataImportNodeProgramsArgs>,
  erased?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  refuseReason?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  households?: Resolver<ResolversTypes['HouseholdNodeConnection'], ParentType, ContextType, RegistrationDataImportNodeHouseholdsArgs>,
  individuals?: Resolver<ResolversTypes['IndividualNodeConnection'], ParentType, ContextType, RegistrationDataImportNodeIndividualsArgs>,
  grievanceticketSet?: Resolver<ResolversTypes['GrievanceTicketNodeConnection'], ParentType, ContextType, RegistrationDataImportNodeGrievanceticketSetArgs>,
  messages?: Resolver<ResolversTypes['CommunicationMessageNodeConnection'], ParentType, ContextType, RegistrationDataImportNodeMessagesArgs>,
  batchDuplicatesCountAndPercentage?: Resolver<Maybe<ResolversTypes['CountAndPercentageNode']>, ParentType, ContextType>,
  goldenRecordDuplicatesCountAndPercentage?: Resolver<Maybe<ResolversTypes['CountAndPercentageNode']>, ParentType, ContextType>,
  batchPossibleDuplicatesCountAndPercentage?: Resolver<Maybe<ResolversTypes['CountAndPercentageNode']>, ParentType, ContextType>,
  goldenRecordPossibleDuplicatesCountAndPercentage?: Resolver<Maybe<ResolversTypes['CountAndPercentageNode']>, ParentType, ContextType>,
  batchUniqueCountAndPercentage?: Resolver<Maybe<ResolversTypes['CountAndPercentageNode']>, ParentType, ContextType>,
  goldenRecordUniqueCountAndPercentage?: Resolver<Maybe<ResolversTypes['CountAndPercentageNode']>, ParentType, ContextType>,
};

export type RegistrationDataImportNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['RegistrationDataImportNodeConnection'] = ResolversParentTypes['RegistrationDataImportNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['RegistrationDataImportNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type RegistrationDataImportNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['RegistrationDataImportNodeEdge'] = ResolversParentTypes['RegistrationDataImportNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['RegistrationDataImportNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type RegistrationDeduplicationMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['RegistrationDeduplicationMutation'] = ResolversParentTypes['RegistrationDeduplicationMutation']> = {
  ok?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
};

export type RegistrationKoboImportMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['RegistrationKoboImportMutation'] = ResolversParentTypes['RegistrationKoboImportMutation']> = {
  validationErrors?: Resolver<Maybe<ResolversTypes['Arg']>, ParentType, ContextType>,
  registrationDataImport?: Resolver<Maybe<ResolversTypes['RegistrationDataImportNode']>, ParentType, ContextType>,
};

export type RegistrationXlsxImportMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['RegistrationXlsxImportMutation'] = ResolversParentTypes['RegistrationXlsxImportMutation']> = {
  validationErrors?: Resolver<Maybe<ResolversTypes['Arg']>, ParentType, ContextType>,
  registrationDataImport?: Resolver<Maybe<ResolversTypes['RegistrationDataImportNode']>, ParentType, ContextType>,
};

export type ReportNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReportNode'] = ResolversParentTypes['ReportNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  businessArea?: Resolver<ResolversTypes['UserBusinessAreaNode'], ParentType, ContextType>,
  file?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  createdBy?: Resolver<ResolversTypes['UserNode'], ParentType, ContextType>,
  status?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  reportType?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  dateFrom?: Resolver<ResolversTypes['Date'], ParentType, ContextType>,
  dateTo?: Resolver<ResolversTypes['Date'], ParentType, ContextType>,
  numberOfRecords?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  program?: Resolver<Maybe<ResolversTypes['ProgramNode']>, ParentType, ContextType>,
  adminArea?: Resolver<ResolversTypes['AreaNodeConnection'], ParentType, ContextType, ReportNodeAdminAreaArgs>,
  fileUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  adminArea1?: Resolver<Maybe<ResolversTypes['AreaNodeConnection']>, ParentType, ContextType, ReportNodeAdminArea1Args>,
  adminArea2?: Resolver<Maybe<ResolversTypes['AreaNodeConnection']>, ParentType, ContextType, ReportNodeAdminArea2Args>,
};

export type ReportNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReportNodeConnection'] = ResolversParentTypes['ReportNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['ReportNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type ReportNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReportNodeEdge'] = ResolversParentTypes['ReportNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['ReportNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type RestartCreateReportResolvers<ContextType = any, ParentType extends ResolversParentTypes['RestartCreateReport'] = ResolversParentTypes['RestartCreateReport']> = {
  report?: Resolver<Maybe<ResolversTypes['ReportNode']>, ParentType, ContextType>,
};

export type RevertMarkPaymentAsFailedMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['RevertMarkPaymentAsFailedMutation'] = ResolversParentTypes['RevertMarkPaymentAsFailedMutation']> = {
  payment?: Resolver<Maybe<ResolversTypes['PaymentNode']>, ParentType, ContextType>,
};

export type RevertMarkPaymentRecordAsFailedMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['RevertMarkPaymentRecordAsFailedMutation'] = ResolversParentTypes['RevertMarkPaymentRecordAsFailedMutation']> = {
  paymentRecord?: Resolver<Maybe<ResolversTypes['PaymentRecordNode']>, ParentType, ContextType>,
};

export type RoleNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['RoleNode'] = ResolversParentTypes['RoleNode']> = {
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  subsystem?: Resolver<ResolversTypes['RoleSubsystem'], ParentType, ContextType>,
  permissions?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>,
  userRoles?: Resolver<Array<ResolversTypes['UserRoleNode']>, ParentType, ContextType>,
};

export type RuleCommitNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['RuleCommitNode'] = ResolversParentTypes['RuleCommitNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  timestamp?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  rule?: Resolver<Maybe<ResolversTypes['SteficonRuleNode']>, ParentType, ContextType>,
  updatedBy?: Resolver<Maybe<ResolversTypes['UserNode']>, ParentType, ContextType>,
  definition?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  isRelease?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  enabled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  deprecated?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  language?: Resolver<ResolversTypes['RuleCommitLanguage'], ParentType, ContextType>,
  affectedFields?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>,
  before?: Resolver<ResolversTypes['JSONString'], ParentType, ContextType>,
  after?: Resolver<ResolversTypes['JSONString'], ParentType, ContextType>,
  paymentPlans?: Resolver<ResolversTypes['PaymentPlanNodeConnection'], ParentType, ContextType, RuleCommitNodePaymentPlansArgs>,
  targetPopulations?: Resolver<ResolversTypes['TargetPopulationNodeConnection'], ParentType, ContextType, RuleCommitNodeTargetPopulationsArgs>,
};

export type RuleCommitNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['RuleCommitNodeConnection'] = ResolversParentTypes['RuleCommitNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['RuleCommitNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type RuleCommitNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['RuleCommitNodeEdge'] = ResolversParentTypes['RuleCommitNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['RuleCommitNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type SanctionListIndividualAliasNameNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['SanctionListIndividualAliasNameNode'] = ResolversParentTypes['SanctionListIndividualAliasNameNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type SanctionListIndividualAliasNameNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['SanctionListIndividualAliasNameNodeConnection'] = ResolversParentTypes['SanctionListIndividualAliasNameNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['SanctionListIndividualAliasNameNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type SanctionListIndividualAliasNameNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['SanctionListIndividualAliasNameNodeEdge'] = ResolversParentTypes['SanctionListIndividualAliasNameNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['SanctionListIndividualAliasNameNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type SanctionListIndividualCountriesNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['SanctionListIndividualCountriesNode'] = ResolversParentTypes['SanctionListIndividualCountriesNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type SanctionListIndividualCountriesNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['SanctionListIndividualCountriesNodeConnection'] = ResolversParentTypes['SanctionListIndividualCountriesNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['SanctionListIndividualCountriesNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type SanctionListIndividualCountriesNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['SanctionListIndividualCountriesNodeEdge'] = ResolversParentTypes['SanctionListIndividualCountriesNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['SanctionListIndividualCountriesNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type SanctionListIndividualDateOfBirthNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['SanctionListIndividualDateOfBirthNode'] = ResolversParentTypes['SanctionListIndividualDateOfBirthNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  date?: Resolver<ResolversTypes['Date'], ParentType, ContextType>,
};

export type SanctionListIndividualDateOfBirthNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['SanctionListIndividualDateOfBirthNodeConnection'] = ResolversParentTypes['SanctionListIndividualDateOfBirthNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['SanctionListIndividualDateOfBirthNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type SanctionListIndividualDateOfBirthNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['SanctionListIndividualDateOfBirthNodeEdge'] = ResolversParentTypes['SanctionListIndividualDateOfBirthNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['SanctionListIndividualDateOfBirthNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type SanctionListIndividualDocumentNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['SanctionListIndividualDocumentNode'] = ResolversParentTypes['SanctionListIndividualDocumentNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  documentNumber?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  typeOfDocument?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  dateOfIssue?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  issuingCountry?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  note?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type SanctionListIndividualDocumentNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['SanctionListIndividualDocumentNodeConnection'] = ResolversParentTypes['SanctionListIndividualDocumentNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['SanctionListIndividualDocumentNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type SanctionListIndividualDocumentNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['SanctionListIndividualDocumentNodeEdge'] = ResolversParentTypes['SanctionListIndividualDocumentNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['SanctionListIndividualDocumentNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type SanctionListIndividualNationalitiesNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['SanctionListIndividualNationalitiesNode'] = ResolversParentTypes['SanctionListIndividualNationalitiesNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  nationality?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type SanctionListIndividualNationalitiesNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['SanctionListIndividualNationalitiesNodeConnection'] = ResolversParentTypes['SanctionListIndividualNationalitiesNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['SanctionListIndividualNationalitiesNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type SanctionListIndividualNationalitiesNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['SanctionListIndividualNationalitiesNodeEdge'] = ResolversParentTypes['SanctionListIndividualNationalitiesNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['SanctionListIndividualNationalitiesNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type SanctionListIndividualNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['SanctionListIndividualNode'] = ResolversParentTypes['SanctionListIndividualNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  dataId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  versionNum?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  firstName?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  secondName?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  thirdName?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  fourthName?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  fullName?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  nameOriginalScript?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  unListType?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  referenceNumber?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  listedOn?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  comments?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  designation?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  listType?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  street?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  city?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  stateProvince?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  addressNote?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  countryOfBirth?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  active?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  documents?: Resolver<ResolversTypes['SanctionListIndividualDocumentNodeConnection'], ParentType, ContextType, SanctionListIndividualNodeDocumentsArgs>,
  nationalities?: Resolver<ResolversTypes['SanctionListIndividualNationalitiesNodeConnection'], ParentType, ContextType, SanctionListIndividualNodeNationalitiesArgs>,
  countries?: Resolver<ResolversTypes['SanctionListIndividualCountriesNodeConnection'], ParentType, ContextType, SanctionListIndividualNodeCountriesArgs>,
  aliasNames?: Resolver<ResolversTypes['SanctionListIndividualAliasNameNodeConnection'], ParentType, ContextType, SanctionListIndividualNodeAliasNamesArgs>,
  datesOfBirth?: Resolver<ResolversTypes['SanctionListIndividualDateOfBirthNodeConnection'], ParentType, ContextType, SanctionListIndividualNodeDatesOfBirthArgs>,
};

export type SanctionListIndividualNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['SanctionListIndividualNodeConnection'] = ResolversParentTypes['SanctionListIndividualNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['SanctionListIndividualNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type SanctionListIndividualNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['SanctionListIndividualNodeEdge'] = ResolversParentTypes['SanctionListIndividualNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['SanctionListIndividualNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type SaveKoboProjectImportDataAsyncResolvers<ContextType = any, ParentType extends ResolversParentTypes['SaveKoboProjectImportDataAsync'] = ResolversParentTypes['SaveKoboProjectImportDataAsync']> = {
  importData?: Resolver<Maybe<ResolversTypes['KoboImportDataNode']>, ParentType, ContextType>,
};

export type SectionTotalNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['SectionTotalNode'] = ResolversParentTypes['SectionTotalNode']> = {
  total?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
};

export type ServiceProviderNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ServiceProviderNode'] = ResolversParentTypes['ServiceProviderNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  businessArea?: Resolver<ResolversTypes['UserBusinessAreaNode'], ParentType, ContextType>,
  caId?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  fullName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  shortName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  country?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  visionId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  cashPlans?: Resolver<ResolversTypes['CashPlanNodeConnection'], ParentType, ContextType, ServiceProviderNodeCashPlansArgs>,
  paymentrecordSet?: Resolver<ResolversTypes['PaymentRecordNodeConnection'], ParentType, ContextType, ServiceProviderNodePaymentrecordSetArgs>,
};

export type ServiceProviderNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ServiceProviderNodeConnection'] = ResolversParentTypes['ServiceProviderNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['ServiceProviderNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type ServiceProviderNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ServiceProviderNodeEdge'] = ResolversParentTypes['ServiceProviderNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['ServiceProviderNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type SetSteficonRuleOnPaymentPlanPaymentListMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['SetSteficonRuleOnPaymentPlanPaymentListMutation'] = ResolversParentTypes['SetSteficonRuleOnPaymentPlanPaymentListMutation']> = {
  paymentPlan?: Resolver<Maybe<ResolversTypes['PaymentPlanNode']>, ParentType, ContextType>,
};

export type SetSteficonRuleOnTargetPopulationMutationPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['SetSteficonRuleOnTargetPopulationMutationPayload'] = ResolversParentTypes['SetSteficonRuleOnTargetPopulationMutationPayload']> = {
  targetPopulation?: Resolver<Maybe<ResolversTypes['TargetPopulationNode']>, ParentType, ContextType>,
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type SimpleApproveMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['SimpleApproveMutation'] = ResolversParentTypes['SimpleApproveMutation']> = {
  grievanceTicket?: Resolver<Maybe<ResolversTypes['GrievanceTicketNode']>, ParentType, ContextType>,
};

export type SteficonRuleNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['SteficonRuleNode'] = ResolversParentTypes['SteficonRuleNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  definition?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  enabled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  deprecated?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  language?: Resolver<ResolversTypes['RuleLanguage'], ParentType, ContextType>,
  security?: Resolver<ResolversTypes['RuleSecurity'], ParentType, ContextType>,
  createdBy?: Resolver<Maybe<ResolversTypes['UserNode']>, ParentType, ContextType>,
  updatedBy?: Resolver<Maybe<ResolversTypes['UserNode']>, ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  type?: Resolver<ResolversTypes['RuleType'], ParentType, ContextType>,
  flags?: Resolver<ResolversTypes['JSONString'], ParentType, ContextType>,
  history?: Resolver<ResolversTypes['RuleCommitNodeConnection'], ParentType, ContextType, SteficonRuleNodeHistoryArgs>,
};

export type SteficonRuleNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['SteficonRuleNodeConnection'] = ResolversParentTypes['SteficonRuleNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['SteficonRuleNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type SteficonRuleNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['SteficonRuleNodeEdge'] = ResolversParentTypes['SteficonRuleNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['SteficonRuleNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type SurveyNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['SurveyNode'] = ResolversParentTypes['SurveyNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  unicefId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  body?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  category?: Resolver<ResolversTypes['SurveyCategory'], ParentType, ContextType>,
  numberOfRecipients?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  createdBy?: Resolver<Maybe<ResolversTypes['UserNode']>, ParentType, ContextType>,
  recipients?: Resolver<ResolversTypes['HouseholdNodeConnection'], ParentType, ContextType, SurveyNodeRecipientsArgs>,
  targetPopulation?: Resolver<Maybe<ResolversTypes['TargetPopulationNode']>, ParentType, ContextType>,
  program?: Resolver<Maybe<ResolversTypes['ProgramNode']>, ParentType, ContextType>,
  businessArea?: Resolver<ResolversTypes['UserBusinessAreaNode'], ParentType, ContextType>,
  sampleFile?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  sampleFileGeneratedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  samplingType?: Resolver<ResolversTypes['SurveySamplingType'], ParentType, ContextType>,
  fullListArguments?: Resolver<ResolversTypes['JSONString'], ParentType, ContextType>,
  randomSamplingArguments?: Resolver<ResolversTypes['JSONString'], ParentType, ContextType>,
  sampleSize?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  flowId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  successfulRapidProCalls?: Resolver<Array<ResolversTypes['JSONString']>, ParentType, ContextType>,
  sampleFilePath?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  hasValidSampleFile?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  rapidProUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type SurveyNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['SurveyNodeConnection'] = ResolversParentTypes['SurveyNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['SurveyNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type SurveyNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['SurveyNodeEdge'] = ResolversParentTypes['SurveyNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['SurveyNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type TableTotalCashTransferredResolvers<ContextType = any, ParentType extends ResolversParentTypes['TableTotalCashTransferred'] = ResolversParentTypes['TableTotalCashTransferred']> = {
  data?: Resolver<Maybe<Array<Maybe<ResolversTypes['_TableTotalCashTransferredDataNode']>>>, ParentType, ContextType>,
};

export type TargetingCriteriaNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TargetingCriteriaNode'] = ResolversParentTypes['TargetingCriteriaNode']> = {
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  flagExcludeIfActiveAdjudicationTicket?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  flagExcludeIfOnSanctionList?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  targetPopulation?: Resolver<Maybe<ResolversTypes['TargetPopulationNode']>, ParentType, ContextType>,
  rules?: Resolver<Maybe<Array<Maybe<ResolversTypes['TargetingCriteriaRuleNode']>>>, ParentType, ContextType>,
};

export type TargetingCriteriaRuleFilterNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TargetingCriteriaRuleFilterNode'] = ResolversParentTypes['TargetingCriteriaRuleFilterNode']> = {
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  comparisonMethod?: Resolver<ResolversTypes['TargetingCriteriaRuleFilterComparisonMethod'], ParentType, ContextType>,
  targetingCriteriaRule?: Resolver<ResolversTypes['TargetingCriteriaRuleNode'], ParentType, ContextType>,
  isFlexField?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  fieldName?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  arguments?: Resolver<Maybe<Array<Maybe<ResolversTypes['Arg']>>>, ParentType, ContextType>,
  fieldAttribute?: Resolver<Maybe<ResolversTypes['FieldAttributeNode']>, ParentType, ContextType>,
};

export type TargetingCriteriaRuleNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TargetingCriteriaRuleNode'] = ResolversParentTypes['TargetingCriteriaRuleNode']> = {
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  targetingCriteria?: Resolver<ResolversTypes['TargetingCriteriaNode'], ParentType, ContextType>,
  individualsFiltersBlocks?: Resolver<Maybe<Array<Maybe<ResolversTypes['TargetingIndividualRuleFilterBlockNode']>>>, ParentType, ContextType>,
  filters?: Resolver<Maybe<Array<Maybe<ResolversTypes['TargetingCriteriaRuleFilterNode']>>>, ParentType, ContextType>,
};

export type TargetingIndividualBlockRuleFilterNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TargetingIndividualBlockRuleFilterNode'] = ResolversParentTypes['TargetingIndividualBlockRuleFilterNode']> = {
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  comparisonMethod?: Resolver<ResolversTypes['TargetingIndividualBlockRuleFilterComparisonMethod'], ParentType, ContextType>,
  individualsFiltersBlock?: Resolver<ResolversTypes['TargetingIndividualRuleFilterBlockNode'], ParentType, ContextType>,
  isFlexField?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  fieldName?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  arguments?: Resolver<Maybe<Array<Maybe<ResolversTypes['Arg']>>>, ParentType, ContextType>,
  fieldAttribute?: Resolver<Maybe<ResolversTypes['FieldAttributeNode']>, ParentType, ContextType>,
};

export type TargetingIndividualRuleFilterBlockNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TargetingIndividualRuleFilterBlockNode'] = ResolversParentTypes['TargetingIndividualRuleFilterBlockNode']> = {
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  targetingCriteriaRule?: Resolver<ResolversTypes['TargetingCriteriaRuleNode'], ParentType, ContextType>,
  targetOnlyHoh?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  individualBlockFilters?: Resolver<Maybe<Array<Maybe<ResolversTypes['TargetingIndividualBlockRuleFilterNode']>>>, ParentType, ContextType>,
};

export type TargetPopulationNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TargetPopulationNode'] = ResolversParentTypes['TargetPopulationNode']> = {
  isRemoved?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  version?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>,
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  caId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  caHashId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  createdBy?: Resolver<Maybe<ResolversTypes['UserNode']>, ParentType, ContextType>,
  changeDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  changedBy?: Resolver<Maybe<ResolversTypes['UserNode']>, ParentType, ContextType>,
  finalizedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  finalizedBy?: Resolver<Maybe<ResolversTypes['UserNode']>, ParentType, ContextType>,
  businessArea?: Resolver<Maybe<ResolversTypes['UserBusinessAreaNode']>, ParentType, ContextType>,
  status?: Resolver<ResolversTypes['TargetPopulationStatus'], ParentType, ContextType>,
  buildStatus?: Resolver<ResolversTypes['TargetPopulationBuildStatus'], ParentType, ContextType>,
  builtAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  households?: Resolver<Maybe<ResolversTypes['HouseholdNodeConnection']>, ParentType, ContextType, TargetPopulationNodeHouseholdsArgs>,
  program?: Resolver<Maybe<ResolversTypes['ProgramNode']>, ParentType, ContextType>,
  targetingCriteria?: Resolver<Maybe<ResolversTypes['TargetingCriteriaNode']>, ParentType, ContextType>,
  sentToDatahub?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  steficonRule?: Resolver<Maybe<ResolversTypes['RuleCommitNode']>, ParentType, ContextType>,
  steficonAppliedDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  vulnerabilityScoreMin?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  vulnerabilityScoreMax?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  excludedIds?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  exclusionReason?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  totalHouseholdsCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  totalIndividualsCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  childMaleCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  childFemaleCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  adultMaleCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  adultFemaleCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  paymentPlans?: Resolver<ResolversTypes['PaymentPlanNodeConnection'], ParentType, ContextType, TargetPopulationNodePaymentPlansArgs>,
  paymentRecords?: Resolver<ResolversTypes['PaymentRecordNodeConnection'], ParentType, ContextType, TargetPopulationNodePaymentRecordsArgs>,
  selections?: Resolver<Array<ResolversTypes['HouseholdSelectionNode']>, ParentType, ContextType>,
  messages?: Resolver<ResolversTypes['CommunicationMessageNodeConnection'], ParentType, ContextType, TargetPopulationNodeMessagesArgs>,
  surveys?: Resolver<ResolversTypes['SurveyNodeConnection'], ParentType, ContextType, TargetPopulationNodeSurveysArgs>,
  totalFamilySize?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  householdList?: Resolver<Maybe<ResolversTypes['HouseholdNodeConnection']>, ParentType, ContextType, TargetPopulationNodeHouseholdListArgs>,
};

export type TargetPopulationNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TargetPopulationNodeConnection'] = ResolversParentTypes['TargetPopulationNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['TargetPopulationNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type TargetPopulationNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TargetPopulationNodeEdge'] = ResolversParentTypes['TargetPopulationNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['TargetPopulationNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type TicketAddIndividualDetailsNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketAddIndividualDetailsNode'] = ResolversParentTypes['TicketAddIndividualDetailsNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  household?: Resolver<Maybe<ResolversTypes['HouseholdNode']>, ParentType, ContextType>,
  individualData?: Resolver<Maybe<ResolversTypes['Arg']>, ParentType, ContextType>,
  approveStatus?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
};

export type TicketAddIndividualDetailsNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketAddIndividualDetailsNodeConnection'] = ResolversParentTypes['TicketAddIndividualDetailsNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['TicketAddIndividualDetailsNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type TicketAddIndividualDetailsNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketAddIndividualDetailsNodeEdge'] = ResolversParentTypes['TicketAddIndividualDetailsNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['TicketAddIndividualDetailsNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type TicketByTypeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketByType'] = ResolversParentTypes['TicketByType']> = {
  userGeneratedCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  systemGeneratedCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  closedUserGeneratedCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  closedSystemGeneratedCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  userGeneratedAvgResolution?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  systemGeneratedAvgResolution?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
};

export type TicketComplaintDetailsNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketComplaintDetailsNode'] = ResolversParentTypes['TicketComplaintDetailsNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  paymentContentType?: Resolver<Maybe<ResolversTypes['ContentTypeObjectType']>, ParentType, ContextType>,
  paymentObjectId?: Resolver<Maybe<ResolversTypes['UUID']>, ParentType, ContextType>,
  household?: Resolver<Maybe<ResolversTypes['HouseholdNode']>, ParentType, ContextType>,
  individual?: Resolver<Maybe<ResolversTypes['IndividualNode']>, ParentType, ContextType>,
  paymentRecord?: Resolver<Maybe<ResolversTypes['PaymentRecordAndPaymentNode']>, ParentType, ContextType>,
};

export type TicketComplaintDetailsNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketComplaintDetailsNodeConnection'] = ResolversParentTypes['TicketComplaintDetailsNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['TicketComplaintDetailsNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type TicketComplaintDetailsNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketComplaintDetailsNodeEdge'] = ResolversParentTypes['TicketComplaintDetailsNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['TicketComplaintDetailsNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type TicketDeleteHouseholdDetailsNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketDeleteHouseholdDetailsNode'] = ResolversParentTypes['TicketDeleteHouseholdDetailsNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  household?: Resolver<Maybe<ResolversTypes['HouseholdNode']>, ParentType, ContextType>,
  roleReassignData?: Resolver<ResolversTypes['JSONString'], ParentType, ContextType>,
  approveStatus?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  reasonHousehold?: Resolver<Maybe<ResolversTypes['HouseholdNode']>, ParentType, ContextType>,
  householdData?: Resolver<Maybe<ResolversTypes['Arg']>, ParentType, ContextType>,
};

export type TicketDeleteHouseholdDetailsNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketDeleteHouseholdDetailsNodeConnection'] = ResolversParentTypes['TicketDeleteHouseholdDetailsNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['TicketDeleteHouseholdDetailsNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type TicketDeleteHouseholdDetailsNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketDeleteHouseholdDetailsNodeEdge'] = ResolversParentTypes['TicketDeleteHouseholdDetailsNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['TicketDeleteHouseholdDetailsNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type TicketDeleteIndividualDetailsNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketDeleteIndividualDetailsNode'] = ResolversParentTypes['TicketDeleteIndividualDetailsNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  individual?: Resolver<Maybe<ResolversTypes['IndividualNode']>, ParentType, ContextType>,
  roleReassignData?: Resolver<ResolversTypes['JSONString'], ParentType, ContextType>,
  approveStatus?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  individualData?: Resolver<Maybe<ResolversTypes['Arg']>, ParentType, ContextType>,
};

export type TicketDeleteIndividualDetailsNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketDeleteIndividualDetailsNodeConnection'] = ResolversParentTypes['TicketDeleteIndividualDetailsNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['TicketDeleteIndividualDetailsNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type TicketDeleteIndividualDetailsNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketDeleteIndividualDetailsNodeEdge'] = ResolversParentTypes['TicketDeleteIndividualDetailsNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['TicketDeleteIndividualDetailsNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type TicketHouseholdDataUpdateDetailsNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketHouseholdDataUpdateDetailsNode'] = ResolversParentTypes['TicketHouseholdDataUpdateDetailsNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  household?: Resolver<Maybe<ResolversTypes['HouseholdNode']>, ParentType, ContextType>,
  householdData?: Resolver<Maybe<ResolversTypes['Arg']>, ParentType, ContextType>,
};

export type TicketHouseholdDataUpdateDetailsNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketHouseholdDataUpdateDetailsNodeConnection'] = ResolversParentTypes['TicketHouseholdDataUpdateDetailsNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['TicketHouseholdDataUpdateDetailsNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type TicketHouseholdDataUpdateDetailsNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketHouseholdDataUpdateDetailsNodeEdge'] = ResolversParentTypes['TicketHouseholdDataUpdateDetailsNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['TicketHouseholdDataUpdateDetailsNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type TicketIndividualDataUpdateDetailsNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketIndividualDataUpdateDetailsNode'] = ResolversParentTypes['TicketIndividualDataUpdateDetailsNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  individual?: Resolver<Maybe<ResolversTypes['IndividualNode']>, ParentType, ContextType>,
  individualData?: Resolver<Maybe<ResolversTypes['Arg']>, ParentType, ContextType>,
  roleReassignData?: Resolver<ResolversTypes['JSONString'], ParentType, ContextType>,
};

export type TicketIndividualDataUpdateDetailsNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketIndividualDataUpdateDetailsNodeConnection'] = ResolversParentTypes['TicketIndividualDataUpdateDetailsNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['TicketIndividualDataUpdateDetailsNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type TicketIndividualDataUpdateDetailsNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketIndividualDataUpdateDetailsNodeEdge'] = ResolversParentTypes['TicketIndividualDataUpdateDetailsNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['TicketIndividualDataUpdateDetailsNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type TicketNeedsAdjudicationDetailsExtraDataNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketNeedsAdjudicationDetailsExtraDataNode'] = ResolversParentTypes['TicketNeedsAdjudicationDetailsExtraDataNode']> = {
  goldenRecords?: Resolver<Maybe<Array<Maybe<ResolversTypes['DeduplicationResultNode']>>>, ParentType, ContextType>,
  possibleDuplicate?: Resolver<Maybe<Array<Maybe<ResolversTypes['DeduplicationResultNode']>>>, ParentType, ContextType>,
};

export type TicketNeedsAdjudicationDetailsNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketNeedsAdjudicationDetailsNode'] = ResolversParentTypes['TicketNeedsAdjudicationDetailsNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  goldenRecordsIndividual?: Resolver<ResolversTypes['IndividualNode'], ParentType, ContextType>,
  isMultipleDuplicatesVersion?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  possibleDuplicate?: Resolver<Maybe<ResolversTypes['IndividualNode']>, ParentType, ContextType>,
  possibleDuplicates?: Resolver<Maybe<Array<Maybe<ResolversTypes['IndividualNode']>>>, ParentType, ContextType>,
  selectedIndividual?: Resolver<Maybe<ResolversTypes['IndividualNode']>, ParentType, ContextType>,
  selectedIndividuals?: Resolver<Maybe<Array<Maybe<ResolversTypes['IndividualNode']>>>, ParentType, ContextType>,
  roleReassignData?: Resolver<ResolversTypes['JSONString'], ParentType, ContextType>,
  extraData?: Resolver<Maybe<ResolversTypes['TicketNeedsAdjudicationDetailsExtraDataNode']>, ParentType, ContextType>,
  scoreMin?: Resolver<ResolversTypes['Float'], ParentType, ContextType>,
  scoreMax?: Resolver<ResolversTypes['Float'], ParentType, ContextType>,
  hasDuplicatedDocument?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
};

export type TicketNeedsAdjudicationDetailsNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketNeedsAdjudicationDetailsNodeConnection'] = ResolversParentTypes['TicketNeedsAdjudicationDetailsNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['TicketNeedsAdjudicationDetailsNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type TicketNeedsAdjudicationDetailsNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketNeedsAdjudicationDetailsNodeEdge'] = ResolversParentTypes['TicketNeedsAdjudicationDetailsNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['TicketNeedsAdjudicationDetailsNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type TicketNegativeFeedbackDetailsNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketNegativeFeedbackDetailsNode'] = ResolversParentTypes['TicketNegativeFeedbackDetailsNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  household?: Resolver<Maybe<ResolversTypes['HouseholdNode']>, ParentType, ContextType>,
  individual?: Resolver<Maybe<ResolversTypes['IndividualNode']>, ParentType, ContextType>,
};

export type TicketNegativeFeedbackDetailsNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketNegativeFeedbackDetailsNodeConnection'] = ResolversParentTypes['TicketNegativeFeedbackDetailsNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['TicketNegativeFeedbackDetailsNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type TicketNegativeFeedbackDetailsNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketNegativeFeedbackDetailsNodeEdge'] = ResolversParentTypes['TicketNegativeFeedbackDetailsNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['TicketNegativeFeedbackDetailsNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type TicketNoteNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketNoteNode'] = ResolversParentTypes['TicketNoteNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  createdBy?: Resolver<Maybe<ResolversTypes['UserNode']>, ParentType, ContextType>,
};

export type TicketNoteNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketNoteNodeConnection'] = ResolversParentTypes['TicketNoteNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['TicketNoteNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type TicketNoteNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketNoteNodeEdge'] = ResolversParentTypes['TicketNoteNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['TicketNoteNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type TicketPaymentVerificationDetailsNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketPaymentVerificationDetailsNode'] = ResolversParentTypes['TicketPaymentVerificationDetailsNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  paymentVerifications?: Resolver<ResolversTypes['PaymentVerificationNodeConnection'], ParentType, ContextType, TicketPaymentVerificationDetailsNodePaymentVerificationsArgs>,
  paymentVerificationStatus?: Resolver<ResolversTypes['TicketPaymentVerificationDetailsPaymentVerificationStatus'], ParentType, ContextType>,
  paymentVerification?: Resolver<Maybe<ResolversTypes['PaymentVerificationNode']>, ParentType, ContextType>,
  newStatus?: Resolver<Maybe<ResolversTypes['TicketPaymentVerificationDetailsNewStatus']>, ParentType, ContextType>,
  oldReceivedAmount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  newReceivedAmount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  approveStatus?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  hasMultiplePaymentVerifications?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
};

export type TicketPaymentVerificationDetailsNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketPaymentVerificationDetailsNodeConnection'] = ResolversParentTypes['TicketPaymentVerificationDetailsNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['TicketPaymentVerificationDetailsNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type TicketPaymentVerificationDetailsNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketPaymentVerificationDetailsNodeEdge'] = ResolversParentTypes['TicketPaymentVerificationDetailsNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['TicketPaymentVerificationDetailsNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type TicketPositiveFeedbackDetailsNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketPositiveFeedbackDetailsNode'] = ResolversParentTypes['TicketPositiveFeedbackDetailsNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  household?: Resolver<Maybe<ResolversTypes['HouseholdNode']>, ParentType, ContextType>,
  individual?: Resolver<Maybe<ResolversTypes['IndividualNode']>, ParentType, ContextType>,
};

export type TicketPositiveFeedbackDetailsNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketPositiveFeedbackDetailsNodeConnection'] = ResolversParentTypes['TicketPositiveFeedbackDetailsNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['TicketPositiveFeedbackDetailsNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type TicketPositiveFeedbackDetailsNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketPositiveFeedbackDetailsNodeEdge'] = ResolversParentTypes['TicketPositiveFeedbackDetailsNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['TicketPositiveFeedbackDetailsNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type TicketReferralDetailsNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketReferralDetailsNode'] = ResolversParentTypes['TicketReferralDetailsNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  household?: Resolver<Maybe<ResolversTypes['HouseholdNode']>, ParentType, ContextType>,
  individual?: Resolver<Maybe<ResolversTypes['IndividualNode']>, ParentType, ContextType>,
};

export type TicketReferralDetailsNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketReferralDetailsNodeConnection'] = ResolversParentTypes['TicketReferralDetailsNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['TicketReferralDetailsNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type TicketReferralDetailsNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketReferralDetailsNodeEdge'] = ResolversParentTypes['TicketReferralDetailsNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['TicketReferralDetailsNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type TicketSensitiveDetailsNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketSensitiveDetailsNode'] = ResolversParentTypes['TicketSensitiveDetailsNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  paymentContentType?: Resolver<Maybe<ResolversTypes['ContentTypeObjectType']>, ParentType, ContextType>,
  paymentObjectId?: Resolver<Maybe<ResolversTypes['UUID']>, ParentType, ContextType>,
  household?: Resolver<Maybe<ResolversTypes['HouseholdNode']>, ParentType, ContextType>,
  individual?: Resolver<Maybe<ResolversTypes['IndividualNode']>, ParentType, ContextType>,
  paymentRecord?: Resolver<Maybe<ResolversTypes['PaymentRecordAndPaymentNode']>, ParentType, ContextType>,
};

export type TicketSensitiveDetailsNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketSensitiveDetailsNodeConnection'] = ResolversParentTypes['TicketSensitiveDetailsNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['TicketSensitiveDetailsNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type TicketSensitiveDetailsNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketSensitiveDetailsNodeEdge'] = ResolversParentTypes['TicketSensitiveDetailsNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['TicketSensitiveDetailsNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type TicketSystemFlaggingDetailsNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketSystemFlaggingDetailsNode'] = ResolversParentTypes['TicketSystemFlaggingDetailsNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  goldenRecordsIndividual?: Resolver<ResolversTypes['IndividualNode'], ParentType, ContextType>,
  sanctionListIndividual?: Resolver<ResolversTypes['SanctionListIndividualNode'], ParentType, ContextType>,
  approveStatus?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  roleReassignData?: Resolver<ResolversTypes['JSONString'], ParentType, ContextType>,
};

export type TicketSystemFlaggingDetailsNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketSystemFlaggingDetailsNodeConnection'] = ResolversParentTypes['TicketSystemFlaggingDetailsNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['TicketSystemFlaggingDetailsNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type TicketSystemFlaggingDetailsNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TicketSystemFlaggingDetailsNodeEdge'] = ResolversParentTypes['TicketSystemFlaggingDetailsNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['TicketSystemFlaggingDetailsNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type UnlockTargetPopulationMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['UnlockTargetPopulationMutation'] = ResolversParentTypes['UnlockTargetPopulationMutation']> = {
  targetPopulation?: Resolver<Maybe<ResolversTypes['TargetPopulationNode']>, ParentType, ContextType>,
};

export type UpdateFeedbackMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateFeedbackMutation'] = ResolversParentTypes['UpdateFeedbackMutation']> = {
  feedback?: Resolver<Maybe<ResolversTypes['FeedbackNode']>, ParentType, ContextType>,
};

export type UpdateGrievanceTicketMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateGrievanceTicketMutation'] = ResolversParentTypes['UpdateGrievanceTicketMutation']> = {
  grievanceTicket?: Resolver<Maybe<ResolversTypes['GrievanceTicketNode']>, ParentType, ContextType>,
};

export type UpdatePaymentPlanMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdatePaymentPlanMutation'] = ResolversParentTypes['UpdatePaymentPlanMutation']> = {
  paymentPlan?: Resolver<Maybe<ResolversTypes['PaymentPlanNode']>, ParentType, ContextType>,
};

export type UpdatePaymentVerificationReceivedAndReceivedAmountResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdatePaymentVerificationReceivedAndReceivedAmount'] = ResolversParentTypes['UpdatePaymentVerificationReceivedAndReceivedAmount']> = {
  paymentVerification?: Resolver<Maybe<ResolversTypes['PaymentVerificationNode']>, ParentType, ContextType>,
};

export type UpdatePaymentVerificationStatusAndReceivedAmountResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdatePaymentVerificationStatusAndReceivedAmount'] = ResolversParentTypes['UpdatePaymentVerificationStatusAndReceivedAmount']> = {
  paymentVerification?: Resolver<Maybe<ResolversTypes['PaymentVerificationNode']>, ParentType, ContextType>,
};

export type UpdateProgramResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateProgram'] = ResolversParentTypes['UpdateProgram']> = {
  validationErrors?: Resolver<Maybe<ResolversTypes['Arg']>, ParentType, ContextType>,
  program?: Resolver<Maybe<ResolversTypes['ProgramNode']>, ParentType, ContextType>,
};

export type UpdateTargetPopulationMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateTargetPopulationMutation'] = ResolversParentTypes['UpdateTargetPopulationMutation']> = {
  validationErrors?: Resolver<Maybe<ResolversTypes['Arg']>, ParentType, ContextType>,
  targetPopulation?: Resolver<Maybe<ResolversTypes['TargetPopulationNode']>, ParentType, ContextType>,
};

export interface UploadScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Upload'], any> {
  name: 'Upload'
}

export type UploadImportDataXlsxFileAsyncResolvers<ContextType = any, ParentType extends ResolversParentTypes['UploadImportDataXLSXFileAsync'] = ResolversParentTypes['UploadImportDataXLSXFileAsync']> = {
  importData?: Resolver<Maybe<ResolversTypes['ImportDataNode']>, ParentType, ContextType>,
  errors?: Resolver<Maybe<Array<Maybe<ResolversTypes['XlsxRowErrorNode']>>>, ParentType, ContextType>,
};

export type UserBusinessAreaNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserBusinessAreaNode'] = ResolversParentTypes['UserBusinessAreaNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  code?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  longName?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  regionCode?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  regionName?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  koboUsername?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  koboToken?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  koboUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  rapidProHost?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  rapidProPaymentVerificationToken?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  rapidProMessagesToken?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  rapidProSurveyToken?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  customFields?: Resolver<ResolversTypes['JSONString'], ParentType, ContextType>,
  hasDataSharingAgreement?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  parent?: Resolver<Maybe<ResolversTypes['UserBusinessAreaNode']>, ParentType, ContextType>,
  isSplit?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  postponeDeduplication?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  deduplicationDuplicateScore?: Resolver<ResolversTypes['Float'], ParentType, ContextType>,
  deduplicationPossibleDuplicateScore?: Resolver<ResolversTypes['Float'], ParentType, ContextType>,
  deduplicationBatchDuplicatesPercentage?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  deduplicationBatchDuplicatesAllowed?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  deduplicationGoldenRecordDuplicatesPercentage?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  deduplicationGoldenRecordDuplicatesAllowed?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  screenBeneficiary?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  deduplicationIgnoreWithdraw?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  isPaymentPlanApplicable?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  isAccountabilityApplicable?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>,
  active?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  children?: Resolver<ResolversTypes['UserBusinessAreaNodeConnection'], ParentType, ContextType, UserBusinessAreaNodeChildrenArgs>,
  userRoles?: Resolver<Array<ResolversTypes['UserRoleNode']>, ParentType, ContextType>,
  householdSet?: Resolver<ResolversTypes['HouseholdNodeConnection'], ParentType, ContextType, UserBusinessAreaNodeHouseholdSetArgs>,
  individualSet?: Resolver<ResolversTypes['IndividualNodeConnection'], ParentType, ContextType, UserBusinessAreaNodeIndividualSetArgs>,
  registrationdataimportSet?: Resolver<ResolversTypes['RegistrationDataImportNodeConnection'], ParentType, ContextType, UserBusinessAreaNodeRegistrationdataimportSetArgs>,
  paymentplanSet?: Resolver<ResolversTypes['PaymentPlanNodeConnection'], ParentType, ContextType, UserBusinessAreaNodePaymentplanSetArgs>,
  cashplanSet?: Resolver<ResolversTypes['CashPlanNodeConnection'], ParentType, ContextType, UserBusinessAreaNodeCashplanSetArgs>,
  paymentrecordSet?: Resolver<ResolversTypes['PaymentRecordNodeConnection'], ParentType, ContextType, UserBusinessAreaNodePaymentrecordSetArgs>,
  paymentSet?: Resolver<ResolversTypes['PaymentNodeConnection'], ParentType, ContextType, UserBusinessAreaNodePaymentSetArgs>,
  serviceproviderSet?: Resolver<ResolversTypes['ServiceProviderNodeConnection'], ParentType, ContextType, UserBusinessAreaNodeServiceproviderSetArgs>,
  tickets?: Resolver<ResolversTypes['GrievanceTicketNodeConnection'], ParentType, ContextType, UserBusinessAreaNodeTicketsArgs>,
  programSet?: Resolver<ResolversTypes['ProgramNodeConnection'], ParentType, ContextType, UserBusinessAreaNodeProgramSetArgs>,
  targetpopulationSet?: Resolver<ResolversTypes['TargetPopulationNodeConnection'], ParentType, ContextType, UserBusinessAreaNodeTargetpopulationSetArgs>,
  reports?: Resolver<ResolversTypes['ReportNodeConnection'], ParentType, ContextType, UserBusinessAreaNodeReportsArgs>,
  logentrySet?: Resolver<ResolversTypes['PaymentVerificationLogEntryNodeConnection'], ParentType, ContextType, UserBusinessAreaNodeLogentrySetArgs>,
  messageSet?: Resolver<ResolversTypes['CommunicationMessageNodeConnection'], ParentType, ContextType, UserBusinessAreaNodeMessageSetArgs>,
  feedbackSet?: Resolver<ResolversTypes['FeedbackNodeConnection'], ParentType, ContextType, UserBusinessAreaNodeFeedbackSetArgs>,
  surveySet?: Resolver<ResolversTypes['SurveyNodeConnection'], ParentType, ContextType, UserBusinessAreaNodeSurveySetArgs>,
  permissions?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>,
};

export type UserBusinessAreaNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserBusinessAreaNodeConnection'] = ResolversParentTypes['UserBusinessAreaNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['UserBusinessAreaNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type UserBusinessAreaNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserBusinessAreaNodeEdge'] = ResolversParentTypes['UserBusinessAreaNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['UserBusinessAreaNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type UserNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserNode'] = ResolversParentTypes['UserNode']> = {
  lastLogin?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  isSuperuser?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  username?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  firstName?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  lastName?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  isStaff?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  dateJoined?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  status?: Resolver<ResolversTypes['UserStatus'], ParentType, ContextType>,
  partner?: Resolver<Maybe<ResolversTypes['PartnerType']>, ParentType, ContextType>,
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  availableForExport?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>,
  customFields?: Resolver<ResolversTypes['JSONString'], ParentType, ContextType>,
  jobTitle?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  adUuid?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  lastModifyDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  lastDoapSync?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>,
  doapHash?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  userRoles?: Resolver<Array<ResolversTypes['UserRoleNode']>, ParentType, ContextType>,
  documentSet?: Resolver<ResolversTypes['DocumentNodeConnection'], ParentType, ContextType, UserNodeDocumentSetArgs>,
  registrationDataImports?: Resolver<ResolversTypes['RegistrationDataImportNodeConnection'], ParentType, ContextType, UserNodeRegistrationDataImportsArgs>,
  createdPaymentPlans?: Resolver<ResolversTypes['PaymentPlanNodeConnection'], ParentType, ContextType, UserNodeCreatedPaymentPlansArgs>,
  createdFinancialServiceProviderXlsxTemplates?: Resolver<ResolversTypes['FinancialServiceProviderXlsxTemplateNodeConnection'], ParentType, ContextType, UserNodeCreatedFinancialServiceProviderXlsxTemplatesArgs>,
  createdFinancialServiceProviders?: Resolver<ResolversTypes['FinancialServiceProviderNodeConnection'], ParentType, ContextType, UserNodeCreatedFinancialServiceProvidersArgs>,
  createdDeliveryMechanisms?: Resolver<ResolversTypes['DeliveryMechanismNodeConnection'], ParentType, ContextType, UserNodeCreatedDeliveryMechanismsArgs>,
  sentDeliveryMechanisms?: Resolver<ResolversTypes['DeliveryMechanismNodeConnection'], ParentType, ContextType, UserNodeSentDeliveryMechanismsArgs>,
  approvalSet?: Resolver<Array<ResolversTypes['ApprovalNode']>, ParentType, ContextType>,
  createdTickets?: Resolver<ResolversTypes['GrievanceTicketNodeConnection'], ParentType, ContextType, UserNodeCreatedTicketsArgs>,
  assignedTickets?: Resolver<ResolversTypes['GrievanceTicketNodeConnection'], ParentType, ContextType, UserNodeAssignedTicketsArgs>,
  ticketNotes?: Resolver<ResolversTypes['TicketNoteNodeConnection'], ParentType, ContextType, UserNodeTicketNotesArgs>,
  targetPopulations?: Resolver<ResolversTypes['TargetPopulationNodeConnection'], ParentType, ContextType, UserNodeTargetPopulationsArgs>,
  changedTargetPopulations?: Resolver<ResolversTypes['TargetPopulationNodeConnection'], ParentType, ContextType, UserNodeChangedTargetPopulationsArgs>,
  finalizedTargetPopulations?: Resolver<ResolversTypes['TargetPopulationNodeConnection'], ParentType, ContextType, UserNodeFinalizedTargetPopulationsArgs>,
  reports?: Resolver<ResolversTypes['ReportNodeConnection'], ParentType, ContextType, UserNodeReportsArgs>,
  logs?: Resolver<ResolversTypes['PaymentVerificationLogEntryNodeConnection'], ParentType, ContextType, UserNodeLogsArgs>,
  messages?: Resolver<ResolversTypes['CommunicationMessageNodeConnection'], ParentType, ContextType, UserNodeMessagesArgs>,
  feedbacks?: Resolver<ResolversTypes['FeedbackNodeConnection'], ParentType, ContextType, UserNodeFeedbacksArgs>,
  feedbackMessages?: Resolver<ResolversTypes['FeedbackMessageNodeConnection'], ParentType, ContextType, UserNodeFeedbackMessagesArgs>,
  surveys?: Resolver<ResolversTypes['SurveyNodeConnection'], ParentType, ContextType, UserNodeSurveysArgs>,
  businessAreas?: Resolver<Maybe<ResolversTypes['UserBusinessAreaNodeConnection']>, ParentType, ContextType, UserNodeBusinessAreasArgs>,
};

export type UserNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserNodeConnection'] = ResolversParentTypes['UserNodeConnection']> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>,
  edges?: Resolver<Array<Maybe<ResolversTypes['UserNodeEdge']>>, ParentType, ContextType>,
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  edgeCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
};

export type UserNodeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserNodeEdge'] = ResolversParentTypes['UserNodeEdge']> = {
  node?: Resolver<Maybe<ResolversTypes['UserNode']>, ParentType, ContextType>,
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
};

export type UserRoleNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserRoleNode'] = ResolversParentTypes['UserRoleNode']> = {
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>,
  businessArea?: Resolver<ResolversTypes['UserBusinessAreaNode'], ParentType, ContextType>,
  role?: Resolver<ResolversTypes['RoleNode'], ParentType, ContextType>,
};

export interface UuidScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['UUID'], any> {
  name: 'UUID'
}

export type VolumeByDeliveryMechanismNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['VolumeByDeliveryMechanismNode'] = ResolversParentTypes['VolumeByDeliveryMechanismNode']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>,
  deliveryMechanism?: Resolver<Maybe<ResolversTypes['DeliveryMechanismNode']>, ParentType, ContextType>,
  volume?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
  volumeUsd?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>,
};

export type XlsxErrorNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['XlsxErrorNode'] = ResolversParentTypes['XlsxErrorNode']> = {
  sheet?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  coordinates?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type XlsxRowErrorNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['XlsxRowErrorNode'] = ResolversParentTypes['XlsxRowErrorNode']> = {
  rowNumber?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>,
  header?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
};

export type Resolvers<ContextType = any> = {
  _DatasetsNode?: _DatasetsNodeResolvers<ContextType>,
  _DetailedDatasetsNode?: _DetailedDatasetsNodeResolvers<ContextType>,
  _TableTotalCashTransferredDataNode?: _TableTotalCashTransferredDataNodeResolvers<ContextType>,
  AccountabilitySampleSizeNode?: AccountabilitySampleSizeNodeResolvers<ContextType>,
  ActionPaymentPlanMutation?: ActionPaymentPlanMutationResolvers<ContextType>,
  ActivatePaymentVerificationPlan?: ActivatePaymentVerificationPlanResolvers<ContextType>,
  AgeFilterObject?: AgeFilterObjectResolvers<ContextType>,
  ApprovalNode?: ApprovalNodeResolvers<ContextType>,
  ApprovalProcessNode?: ApprovalProcessNodeResolvers<ContextType>,
  ApprovalProcessNodeConnection?: ApprovalProcessNodeConnectionResolvers<ContextType>,
  ApprovalProcessNodeEdge?: ApprovalProcessNodeEdgeResolvers<ContextType>,
  AreaNode?: AreaNodeResolvers<ContextType>,
  AreaNodeConnection?: AreaNodeConnectionResolvers<ContextType>,
  AreaNodeEdge?: AreaNodeEdgeResolvers<ContextType>,
  AreaTypeNode?: AreaTypeNodeResolvers<ContextType>,
  AreaTypeNodeConnection?: AreaTypeNodeConnectionResolvers<ContextType>,
  AreaTypeNodeEdge?: AreaTypeNodeEdgeResolvers<ContextType>,
  Arg?: GraphQLScalarType,
  AssignFspToDeliveryMechanismMutation?: AssignFspToDeliveryMechanismMutationResolvers<ContextType>,
  BankAccountInfoNode?: BankAccountInfoNodeResolvers<ContextType>,
  BigInt?: GraphQLScalarType,
  BulkUpdateGrievanceTicketsAssigneesMutation?: BulkUpdateGrievanceTicketsAssigneesMutationResolvers<ContextType>,
  BusinessAreaNode?: BusinessAreaNodeResolvers<ContextType>,
  BusinessAreaNodeConnection?: BusinessAreaNodeConnectionResolvers<ContextType>,
  BusinessAreaNodeEdge?: BusinessAreaNodeEdgeResolvers<ContextType>,
  CashPlanAndPaymentPlanEdges?: CashPlanAndPaymentPlanEdgesResolvers<ContextType>,
  CashPlanAndPaymentPlanNode?: CashPlanAndPaymentPlanNodeResolvers<ContextType>,
  CashPlanNode?: CashPlanNodeResolvers<ContextType>,
  CashPlanNodeConnection?: CashPlanNodeConnectionResolvers<ContextType>,
  CashPlanNodeEdge?: CashPlanNodeEdgeResolvers<ContextType>,
  ChartDatasetNode?: ChartDatasetNodeResolvers<ContextType>,
  ChartDetailedDatasetsNode?: ChartDetailedDatasetsNodeResolvers<ContextType>,
  ChartGrievanceTicketsNode?: ChartGrievanceTicketsNodeResolvers<ContextType>,
  ChartPaymentVerification?: ChartPaymentVerificationResolvers<ContextType>,
  CheckAgainstSanctionListMutation?: CheckAgainstSanctionListMutationResolvers<ContextType>,
  ChoiceObject?: ChoiceObjectResolvers<ContextType>,
  ChoiceObjectInt?: ChoiceObjectIntResolvers<ContextType>,
  ChooseDeliveryMechanismsForPaymentPlanMutation?: ChooseDeliveryMechanismsForPaymentPlanMutationResolvers<ContextType>,
  CommunicationMessageNode?: CommunicationMessageNodeResolvers<ContextType>,
  CommunicationMessageNodeConnection?: CommunicationMessageNodeConnectionResolvers<ContextType>,
  CommunicationMessageNodeEdge?: CommunicationMessageNodeEdgeResolvers<ContextType>,
  CommunicationMessageRecipientMapNode?: CommunicationMessageRecipientMapNodeResolvers<ContextType>,
  CommunicationMessageRecipientMapNodeConnection?: CommunicationMessageRecipientMapNodeConnectionResolvers<ContextType>,
  CommunicationMessageRecipientMapNodeEdge?: CommunicationMessageRecipientMapNodeEdgeResolvers<ContextType>,
  ContentTypeObjectType?: ContentTypeObjectTypeResolvers<ContextType>,
  CopyProgram?: CopyProgramResolvers<ContextType>,
  CopyTargetPopulationMutationPayload?: CopyTargetPopulationMutationPayloadResolvers<ContextType>,
  CoreFieldChoiceObject?: CoreFieldChoiceObjectResolvers<ContextType>,
  CountAndPercentageNode?: CountAndPercentageNodeResolvers<ContextType>,
  CreateCommunicationMessageMutation?: CreateCommunicationMessageMutationResolvers<ContextType>,
  CreateDashboardReport?: CreateDashboardReportResolvers<ContextType>,
  CreateFeedbackMessageMutation?: CreateFeedbackMessageMutationResolvers<ContextType>,
  CreateFeedbackMutation?: CreateFeedbackMutationResolvers<ContextType>,
  CreateFollowUpPaymentPlanMutation?: CreateFollowUpPaymentPlanMutationResolvers<ContextType>,
  CreateGrievanceTicketMutation?: CreateGrievanceTicketMutationResolvers<ContextType>,
  CreatePaymentPlanMutation?: CreatePaymentPlanMutationResolvers<ContextType>,
  CreateProgram?: CreateProgramResolvers<ContextType>,
  CreateReport?: CreateReportResolvers<ContextType>,
  CreateSurveyMutation?: CreateSurveyMutationResolvers<ContextType>,
  CreateTargetPopulationMutation?: CreateTargetPopulationMutationResolvers<ContextType>,
  CreateTicketNoteMutation?: CreateTicketNoteMutationResolvers<ContextType>,
  CreateVerificationPlanMutation?: CreateVerificationPlanMutationResolvers<ContextType>,
  Date?: GraphQLScalarType,
  DateTime?: GraphQLScalarType,
  Decimal?: GraphQLScalarType,
  DeduplicationResultNode?: DeduplicationResultNodeResolvers<ContextType>,
  DeleteHouseholdApproveMutation?: DeleteHouseholdApproveMutationResolvers<ContextType>,
  DeletePaymentPlanMutation?: DeletePaymentPlanMutationResolvers<ContextType>,
  DeletePaymentVerificationPlan?: DeletePaymentVerificationPlanResolvers<ContextType>,
  DeleteProgram?: DeleteProgramResolvers<ContextType>,
  DeleteRegistrationDataImport?: DeleteRegistrationDataImportResolvers<ContextType>,
  DeleteTargetPopulationMutationPayload?: DeleteTargetPopulationMutationPayloadResolvers<ContextType>,
  DeliveredQuantityNode?: DeliveredQuantityNodeResolvers<ContextType>,
  DeliveryMechanismNode?: DeliveryMechanismNodeResolvers<ContextType>,
  DeliveryMechanismNodeConnection?: DeliveryMechanismNodeConnectionResolvers<ContextType>,
  DeliveryMechanismNodeEdge?: DeliveryMechanismNodeEdgeResolvers<ContextType>,
  DiscardPaymentVerificationPlan?: DiscardPaymentVerificationPlanResolvers<ContextType>,
  DjangoDebug?: DjangoDebugResolvers<ContextType>,
  DjangoDebugSQL?: DjangoDebugSqlResolvers<ContextType>,
  DocumentNode?: DocumentNodeResolvers<ContextType>,
  DocumentNodeConnection?: DocumentNodeConnectionResolvers<ContextType>,
  DocumentNodeEdge?: DocumentNodeEdgeResolvers<ContextType>,
  DocumentTypeNode?: DocumentTypeNodeResolvers<ContextType>,
  EditPaymentVerificationMutation?: EditPaymentVerificationMutationResolvers<ContextType>,
  EraseRegistrationDataImportMutation?: EraseRegistrationDataImportMutationResolvers<ContextType>,
  ExcludeHouseholdsMutation?: ExcludeHouseholdsMutationResolvers<ContextType>,
  ExportPDFPaymentPlanSummaryMutation?: ExportPdfPaymentPlanSummaryMutationResolvers<ContextType>,
  ExportSurveySampleMutationMutation?: ExportSurveySampleMutationMutationResolvers<ContextType>,
  ExportXLSXPaymentPlanPaymentListMutation?: ExportXlsxPaymentPlanPaymentListMutationResolvers<ContextType>,
  ExportXLSXPaymentPlanPaymentListPerFSPMutation?: ExportXlsxPaymentPlanPaymentListPerFspMutationResolvers<ContextType>,
  ExportXlsxPaymentVerificationPlanFile?: ExportXlsxPaymentVerificationPlanFileResolvers<ContextType>,
  FeedbackMessageNode?: FeedbackMessageNodeResolvers<ContextType>,
  FeedbackMessageNodeConnection?: FeedbackMessageNodeConnectionResolvers<ContextType>,
  FeedbackMessageNodeEdge?: FeedbackMessageNodeEdgeResolvers<ContextType>,
  FeedbackNode?: FeedbackNodeResolvers<ContextType>,
  FeedbackNodeConnection?: FeedbackNodeConnectionResolvers<ContextType>,
  FeedbackNodeEdge?: FeedbackNodeEdgeResolvers<ContextType>,
  FieldAttributeNode?: FieldAttributeNodeResolvers<ContextType>,
  FilteredActionsListNode?: FilteredActionsListNodeResolvers<ContextType>,
  FinalizeTargetPopulationMutation?: FinalizeTargetPopulationMutationResolvers<ContextType>,
  FinancialServiceProviderNode?: FinancialServiceProviderNodeResolvers<ContextType>,
  FinancialServiceProviderNodeConnection?: FinancialServiceProviderNodeConnectionResolvers<ContextType>,
  FinancialServiceProviderNodeEdge?: FinancialServiceProviderNodeEdgeResolvers<ContextType>,
  FinancialServiceProviderXlsxReportNode?: FinancialServiceProviderXlsxReportNodeResolvers<ContextType>,
  FinancialServiceProviderXlsxReportNodeConnection?: FinancialServiceProviderXlsxReportNodeConnectionResolvers<ContextType>,
  FinancialServiceProviderXlsxReportNodeEdge?: FinancialServiceProviderXlsxReportNodeEdgeResolvers<ContextType>,
  FinancialServiceProviderXlsxTemplateNode?: FinancialServiceProviderXlsxTemplateNodeResolvers<ContextType>,
  FinancialServiceProviderXlsxTemplateNodeConnection?: FinancialServiceProviderXlsxTemplateNodeConnectionResolvers<ContextType>,
  FinancialServiceProviderXlsxTemplateNodeEdge?: FinancialServiceProviderXlsxTemplateNodeEdgeResolvers<ContextType>,
  FinishPaymentVerificationPlan?: FinishPaymentVerificationPlanResolvers<ContextType>,
  FlexFieldsScalar?: GraphQLScalarType,
  FspChoice?: FspChoiceResolvers<ContextType>,
  FspChoices?: FspChoicesResolvers<ContextType>,
  GenericPaymentNode?: GenericPaymentNodeResolvers<ContextType>,
  GenericPaymentPlanNode?: GenericPaymentPlanNodeResolvers<ContextType>,
  GeoJSON?: GraphQLScalarType,
  GetCashplanVerificationSampleSizeObject?: GetCashplanVerificationSampleSizeObjectResolvers<ContextType>,
  GetCommunicationMessageSampleSizeNode?: GetCommunicationMessageSampleSizeNodeResolvers<ContextType>,
  GrievanceDocumentNode?: GrievanceDocumentNodeResolvers<ContextType>,
  GrievanceDocumentNodeConnection?: GrievanceDocumentNodeConnectionResolvers<ContextType>,
  GrievanceDocumentNodeEdge?: GrievanceDocumentNodeEdgeResolvers<ContextType>,
  GrievanceStatusChangeMutation?: GrievanceStatusChangeMutationResolvers<ContextType>,
  GrievanceTicketNode?: GrievanceTicketNodeResolvers<ContextType>,
  GrievanceTicketNodeConnection?: GrievanceTicketNodeConnectionResolvers<ContextType>,
  GrievanceTicketNodeEdge?: GrievanceTicketNodeEdgeResolvers<ContextType>,
  GroupAttributeNode?: GroupAttributeNodeResolvers<ContextType>,
  HouseholdDataChangeApproveMutation?: HouseholdDataChangeApproveMutationResolvers<ContextType>,
  HouseholdNode?: HouseholdNodeResolvers<ContextType>,
  HouseholdNodeConnection?: HouseholdNodeConnectionResolvers<ContextType>,
  HouseholdNodeEdge?: HouseholdNodeEdgeResolvers<ContextType>,
  HouseholdSelectionNode?: HouseholdSelectionNodeResolvers<ContextType>,
  ImportDataNode?: ImportDataNodeResolvers<ContextType>,
  ImportedDocumentNode?: ImportedDocumentNodeResolvers<ContextType>,
  ImportedDocumentNodeConnection?: ImportedDocumentNodeConnectionResolvers<ContextType>,
  ImportedDocumentNodeEdge?: ImportedDocumentNodeEdgeResolvers<ContextType>,
  ImportedDocumentTypeNode?: ImportedDocumentTypeNodeResolvers<ContextType>,
  ImportedHouseholdNode?: ImportedHouseholdNodeResolvers<ContextType>,
  ImportedHouseholdNodeConnection?: ImportedHouseholdNodeConnectionResolvers<ContextType>,
  ImportedHouseholdNodeEdge?: ImportedHouseholdNodeEdgeResolvers<ContextType>,
  ImportedIndividualIdentityNode?: ImportedIndividualIdentityNodeResolvers<ContextType>,
  ImportedIndividualIdentityNodeConnection?: ImportedIndividualIdentityNodeConnectionResolvers<ContextType>,
  ImportedIndividualIdentityNodeEdge?: ImportedIndividualIdentityNodeEdgeResolvers<ContextType>,
  ImportedIndividualNode?: ImportedIndividualNodeResolvers<ContextType>,
  ImportedIndividualNodeConnection?: ImportedIndividualNodeConnectionResolvers<ContextType>,
  ImportedIndividualNodeEdge?: ImportedIndividualNodeEdgeResolvers<ContextType>,
  ImportXLSXPaymentPlanPaymentListMutation?: ImportXlsxPaymentPlanPaymentListMutationResolvers<ContextType>,
  ImportXLSXPaymentPlanPaymentListPerFSPMutation?: ImportXlsxPaymentPlanPaymentListPerFspMutationResolvers<ContextType>,
  ImportXlsxPaymentVerificationPlanFile?: ImportXlsxPaymentVerificationPlanFileResolvers<ContextType>,
  IndividualDataChangeApproveMutation?: IndividualDataChangeApproveMutationResolvers<ContextType>,
  IndividualIdentityNode?: IndividualIdentityNodeResolvers<ContextType>,
  IndividualIdentityNodeConnection?: IndividualIdentityNodeConnectionResolvers<ContextType>,
  IndividualIdentityNodeEdge?: IndividualIdentityNodeEdgeResolvers<ContextType>,
  IndividualNode?: IndividualNodeResolvers<ContextType>,
  IndividualNodeConnection?: IndividualNodeConnectionResolvers<ContextType>,
  IndividualNodeEdge?: IndividualNodeEdgeResolvers<ContextType>,
  IndividualRoleInHouseholdNode?: IndividualRoleInHouseholdNodeResolvers<ContextType>,
  InvalidPaymentVerificationPlan?: InvalidPaymentVerificationPlanResolvers<ContextType>,
  IssueTypesObject?: IssueTypesObjectResolvers<ContextType>,
  JSONString?: GraphQLScalarType,
  KoboAssetObject?: KoboAssetObjectResolvers<ContextType>,
  KoboAssetObjectConnection?: KoboAssetObjectConnectionResolvers<ContextType>,
  KoboAssetObjectEdge?: KoboAssetObjectEdgeResolvers<ContextType>,
  KoboErrorNode?: KoboErrorNodeResolvers<ContextType>,
  KoboImportDataNode?: KoboImportDataNodeResolvers<ContextType>,
  LabelNode?: LabelNodeResolvers<ContextType>,
  LanguageObject?: LanguageObjectResolvers<ContextType>,
  LanguageObjectConnection?: LanguageObjectConnectionResolvers<ContextType>,
  LanguageObjectEdge?: LanguageObjectEdgeResolvers<ContextType>,
  LockTargetPopulationMutation?: LockTargetPopulationMutationResolvers<ContextType>,
  LogEntryNode?: LogEntryNodeResolvers<ContextType>,
  LogEntryNodeConnection?: LogEntryNodeConnectionResolvers<ContextType>,
  LogEntryNodeEdge?: LogEntryNodeEdgeResolvers<ContextType>,
  MarkPaymentAsFailedMutation?: MarkPaymentAsFailedMutationResolvers<ContextType>,
  MarkPaymentRecordAsFailedMutation?: MarkPaymentRecordAsFailedMutationResolvers<ContextType>,
  MergeRegistrationDataImportMutation?: MergeRegistrationDataImportMutationResolvers<ContextType>,
  Mutations?: MutationsResolvers<ContextType>,
  NeedsAdjudicationApproveMutation?: NeedsAdjudicationApproveMutationResolvers<ContextType>,
  Node?: NodeResolvers,
  PageInfo?: PageInfoResolvers<ContextType>,
  PageInfoNode?: PageInfoNodeResolvers<ContextType>,
  PaginatedCashPlanAndPaymentPlanNode?: PaginatedCashPlanAndPaymentPlanNodeResolvers<ContextType>,
  PaginatedPaymentRecordsAndPaymentsNode?: PaginatedPaymentRecordsAndPaymentsNodeResolvers<ContextType>,
  PartnerType?: PartnerTypeResolvers<ContextType>,
  PaymentConflictDataNode?: PaymentConflictDataNodeResolvers<ContextType>,
  PaymentDetailsApproveMutation?: PaymentDetailsApproveMutationResolvers<ContextType>,
  PaymentHouseholdSnapshotNode?: PaymentHouseholdSnapshotNodeResolvers<ContextType>,
  PaymentNode?: PaymentNodeResolvers<ContextType>,
  PaymentNodeConnection?: PaymentNodeConnectionResolvers<ContextType>,
  PaymentNodeEdge?: PaymentNodeEdgeResolvers<ContextType>,
  PaymentPlanNode?: PaymentPlanNodeResolvers<ContextType>,
  PaymentPlanNodeConnection?: PaymentPlanNodeConnectionResolvers<ContextType>,
  PaymentPlanNodeEdge?: PaymentPlanNodeEdgeResolvers<ContextType>,
  PaymentRecordAndPaymentNode?: PaymentRecordAndPaymentNodeResolvers<ContextType>,
  PaymentRecordNode?: PaymentRecordNodeResolvers<ContextType>,
  PaymentRecordNodeConnection?: PaymentRecordNodeConnectionResolvers<ContextType>,
  PaymentRecordNodeEdge?: PaymentRecordNodeEdgeResolvers<ContextType>,
  PaymentRecordsAndPaymentsEdges?: PaymentRecordsAndPaymentsEdgesResolvers<ContextType>,
  PaymentVerificationLogEntryNode?: PaymentVerificationLogEntryNodeResolvers<ContextType>,
  PaymentVerificationLogEntryNodeConnection?: PaymentVerificationLogEntryNodeConnectionResolvers<ContextType>,
  PaymentVerificationLogEntryNodeEdge?: PaymentVerificationLogEntryNodeEdgeResolvers<ContextType>,
  PaymentVerificationNode?: PaymentVerificationNodeResolvers<ContextType>,
  PaymentVerificationNodeConnection?: PaymentVerificationNodeConnectionResolvers<ContextType>,
  PaymentVerificationNodeEdge?: PaymentVerificationNodeEdgeResolvers<ContextType>,
  PaymentVerificationPlanNode?: PaymentVerificationPlanNodeResolvers<ContextType>,
  PaymentVerificationPlanNodeConnection?: PaymentVerificationPlanNodeConnectionResolvers<ContextType>,
  PaymentVerificationPlanNodeEdge?: PaymentVerificationPlanNodeEdgeResolvers<ContextType>,
  PaymentVerificationSummaryNode?: PaymentVerificationSummaryNodeResolvers<ContextType>,
  PaymentVerificationSummaryNodeConnection?: PaymentVerificationSummaryNodeConnectionResolvers<ContextType>,
  PaymentVerificationSummaryNodeEdge?: PaymentVerificationSummaryNodeEdgeResolvers<ContextType>,
  ProgramNode?: ProgramNodeResolvers<ContextType>,
  ProgramNodeConnection?: ProgramNodeConnectionResolvers<ContextType>,
  ProgramNodeEdge?: ProgramNodeEdgeResolvers<ContextType>,
  ProgramsWithDeliveredQuantityNode?: ProgramsWithDeliveredQuantityNodeResolvers<ContextType>,
  Query?: QueryResolvers<ContextType>,
  RapidProFlow?: RapidProFlowResolvers<ContextType>,
  RapidProFlowNode?: RapidProFlowNodeResolvers<ContextType>,
  RapidProFlowResult?: RapidProFlowResultResolvers<ContextType>,
  RapidProFlowRun?: RapidProFlowRunResolvers<ContextType>,
  ReassignRoleMutation?: ReassignRoleMutationResolvers<ContextType>,
  RebuildTargetPopulationMutation?: RebuildTargetPopulationMutationResolvers<ContextType>,
  RecipientNode?: RecipientNodeResolvers<ContextType>,
  RecipientNodeConnection?: RecipientNodeConnectionResolvers<ContextType>,
  RecipientNodeEdge?: RecipientNodeEdgeResolvers<ContextType>,
  ReconciliationSummaryNode?: ReconciliationSummaryNodeResolvers<ContextType>,
  RefuseRegistrationDataImportMutation?: RefuseRegistrationDataImportMutationResolvers<ContextType>,
  RegistrationDataImportDatahubNode?: RegistrationDataImportDatahubNodeResolvers<ContextType>,
  RegistrationDataImportDatahubNodeConnection?: RegistrationDataImportDatahubNodeConnectionResolvers<ContextType>,
  RegistrationDataImportDatahubNodeEdge?: RegistrationDataImportDatahubNodeEdgeResolvers<ContextType>,
  RegistrationDataImportNode?: RegistrationDataImportNodeResolvers<ContextType>,
  RegistrationDataImportNodeConnection?: RegistrationDataImportNodeConnectionResolvers<ContextType>,
  RegistrationDataImportNodeEdge?: RegistrationDataImportNodeEdgeResolvers<ContextType>,
  RegistrationDeduplicationMutation?: RegistrationDeduplicationMutationResolvers<ContextType>,
  RegistrationKoboImportMutation?: RegistrationKoboImportMutationResolvers<ContextType>,
  RegistrationXlsxImportMutation?: RegistrationXlsxImportMutationResolvers<ContextType>,
  ReportNode?: ReportNodeResolvers<ContextType>,
  ReportNodeConnection?: ReportNodeConnectionResolvers<ContextType>,
  ReportNodeEdge?: ReportNodeEdgeResolvers<ContextType>,
  RestartCreateReport?: RestartCreateReportResolvers<ContextType>,
  RevertMarkPaymentAsFailedMutation?: RevertMarkPaymentAsFailedMutationResolvers<ContextType>,
  RevertMarkPaymentRecordAsFailedMutation?: RevertMarkPaymentRecordAsFailedMutationResolvers<ContextType>,
  RoleNode?: RoleNodeResolvers<ContextType>,
  RuleCommitNode?: RuleCommitNodeResolvers<ContextType>,
  RuleCommitNodeConnection?: RuleCommitNodeConnectionResolvers<ContextType>,
  RuleCommitNodeEdge?: RuleCommitNodeEdgeResolvers<ContextType>,
  SanctionListIndividualAliasNameNode?: SanctionListIndividualAliasNameNodeResolvers<ContextType>,
  SanctionListIndividualAliasNameNodeConnection?: SanctionListIndividualAliasNameNodeConnectionResolvers<ContextType>,
  SanctionListIndividualAliasNameNodeEdge?: SanctionListIndividualAliasNameNodeEdgeResolvers<ContextType>,
  SanctionListIndividualCountriesNode?: SanctionListIndividualCountriesNodeResolvers<ContextType>,
  SanctionListIndividualCountriesNodeConnection?: SanctionListIndividualCountriesNodeConnectionResolvers<ContextType>,
  SanctionListIndividualCountriesNodeEdge?: SanctionListIndividualCountriesNodeEdgeResolvers<ContextType>,
  SanctionListIndividualDateOfBirthNode?: SanctionListIndividualDateOfBirthNodeResolvers<ContextType>,
  SanctionListIndividualDateOfBirthNodeConnection?: SanctionListIndividualDateOfBirthNodeConnectionResolvers<ContextType>,
  SanctionListIndividualDateOfBirthNodeEdge?: SanctionListIndividualDateOfBirthNodeEdgeResolvers<ContextType>,
  SanctionListIndividualDocumentNode?: SanctionListIndividualDocumentNodeResolvers<ContextType>,
  SanctionListIndividualDocumentNodeConnection?: SanctionListIndividualDocumentNodeConnectionResolvers<ContextType>,
  SanctionListIndividualDocumentNodeEdge?: SanctionListIndividualDocumentNodeEdgeResolvers<ContextType>,
  SanctionListIndividualNationalitiesNode?: SanctionListIndividualNationalitiesNodeResolvers<ContextType>,
  SanctionListIndividualNationalitiesNodeConnection?: SanctionListIndividualNationalitiesNodeConnectionResolvers<ContextType>,
  SanctionListIndividualNationalitiesNodeEdge?: SanctionListIndividualNationalitiesNodeEdgeResolvers<ContextType>,
  SanctionListIndividualNode?: SanctionListIndividualNodeResolvers<ContextType>,
  SanctionListIndividualNodeConnection?: SanctionListIndividualNodeConnectionResolvers<ContextType>,
  SanctionListIndividualNodeEdge?: SanctionListIndividualNodeEdgeResolvers<ContextType>,
  SaveKoboProjectImportDataAsync?: SaveKoboProjectImportDataAsyncResolvers<ContextType>,
  SectionTotalNode?: SectionTotalNodeResolvers<ContextType>,
  ServiceProviderNode?: ServiceProviderNodeResolvers<ContextType>,
  ServiceProviderNodeConnection?: ServiceProviderNodeConnectionResolvers<ContextType>,
  ServiceProviderNodeEdge?: ServiceProviderNodeEdgeResolvers<ContextType>,
  SetSteficonRuleOnPaymentPlanPaymentListMutation?: SetSteficonRuleOnPaymentPlanPaymentListMutationResolvers<ContextType>,
  SetSteficonRuleOnTargetPopulationMutationPayload?: SetSteficonRuleOnTargetPopulationMutationPayloadResolvers<ContextType>,
  SimpleApproveMutation?: SimpleApproveMutationResolvers<ContextType>,
  SteficonRuleNode?: SteficonRuleNodeResolvers<ContextType>,
  SteficonRuleNodeConnection?: SteficonRuleNodeConnectionResolvers<ContextType>,
  SteficonRuleNodeEdge?: SteficonRuleNodeEdgeResolvers<ContextType>,
  SurveyNode?: SurveyNodeResolvers<ContextType>,
  SurveyNodeConnection?: SurveyNodeConnectionResolvers<ContextType>,
  SurveyNodeEdge?: SurveyNodeEdgeResolvers<ContextType>,
  TableTotalCashTransferred?: TableTotalCashTransferredResolvers<ContextType>,
  TargetingCriteriaNode?: TargetingCriteriaNodeResolvers<ContextType>,
  TargetingCriteriaRuleFilterNode?: TargetingCriteriaRuleFilterNodeResolvers<ContextType>,
  TargetingCriteriaRuleNode?: TargetingCriteriaRuleNodeResolvers<ContextType>,
  TargetingIndividualBlockRuleFilterNode?: TargetingIndividualBlockRuleFilterNodeResolvers<ContextType>,
  TargetingIndividualRuleFilterBlockNode?: TargetingIndividualRuleFilterBlockNodeResolvers<ContextType>,
  TargetPopulationNode?: TargetPopulationNodeResolvers<ContextType>,
  TargetPopulationNodeConnection?: TargetPopulationNodeConnectionResolvers<ContextType>,
  TargetPopulationNodeEdge?: TargetPopulationNodeEdgeResolvers<ContextType>,
  TicketAddIndividualDetailsNode?: TicketAddIndividualDetailsNodeResolvers<ContextType>,
  TicketAddIndividualDetailsNodeConnection?: TicketAddIndividualDetailsNodeConnectionResolvers<ContextType>,
  TicketAddIndividualDetailsNodeEdge?: TicketAddIndividualDetailsNodeEdgeResolvers<ContextType>,
  TicketByType?: TicketByTypeResolvers<ContextType>,
  TicketComplaintDetailsNode?: TicketComplaintDetailsNodeResolvers<ContextType>,
  TicketComplaintDetailsNodeConnection?: TicketComplaintDetailsNodeConnectionResolvers<ContextType>,
  TicketComplaintDetailsNodeEdge?: TicketComplaintDetailsNodeEdgeResolvers<ContextType>,
  TicketDeleteHouseholdDetailsNode?: TicketDeleteHouseholdDetailsNodeResolvers<ContextType>,
  TicketDeleteHouseholdDetailsNodeConnection?: TicketDeleteHouseholdDetailsNodeConnectionResolvers<ContextType>,
  TicketDeleteHouseholdDetailsNodeEdge?: TicketDeleteHouseholdDetailsNodeEdgeResolvers<ContextType>,
  TicketDeleteIndividualDetailsNode?: TicketDeleteIndividualDetailsNodeResolvers<ContextType>,
  TicketDeleteIndividualDetailsNodeConnection?: TicketDeleteIndividualDetailsNodeConnectionResolvers<ContextType>,
  TicketDeleteIndividualDetailsNodeEdge?: TicketDeleteIndividualDetailsNodeEdgeResolvers<ContextType>,
  TicketHouseholdDataUpdateDetailsNode?: TicketHouseholdDataUpdateDetailsNodeResolvers<ContextType>,
  TicketHouseholdDataUpdateDetailsNodeConnection?: TicketHouseholdDataUpdateDetailsNodeConnectionResolvers<ContextType>,
  TicketHouseholdDataUpdateDetailsNodeEdge?: TicketHouseholdDataUpdateDetailsNodeEdgeResolvers<ContextType>,
  TicketIndividualDataUpdateDetailsNode?: TicketIndividualDataUpdateDetailsNodeResolvers<ContextType>,
  TicketIndividualDataUpdateDetailsNodeConnection?: TicketIndividualDataUpdateDetailsNodeConnectionResolvers<ContextType>,
  TicketIndividualDataUpdateDetailsNodeEdge?: TicketIndividualDataUpdateDetailsNodeEdgeResolvers<ContextType>,
  TicketNeedsAdjudicationDetailsExtraDataNode?: TicketNeedsAdjudicationDetailsExtraDataNodeResolvers<ContextType>,
  TicketNeedsAdjudicationDetailsNode?: TicketNeedsAdjudicationDetailsNodeResolvers<ContextType>,
  TicketNeedsAdjudicationDetailsNodeConnection?: TicketNeedsAdjudicationDetailsNodeConnectionResolvers<ContextType>,
  TicketNeedsAdjudicationDetailsNodeEdge?: TicketNeedsAdjudicationDetailsNodeEdgeResolvers<ContextType>,
  TicketNegativeFeedbackDetailsNode?: TicketNegativeFeedbackDetailsNodeResolvers<ContextType>,
  TicketNegativeFeedbackDetailsNodeConnection?: TicketNegativeFeedbackDetailsNodeConnectionResolvers<ContextType>,
  TicketNegativeFeedbackDetailsNodeEdge?: TicketNegativeFeedbackDetailsNodeEdgeResolvers<ContextType>,
  TicketNoteNode?: TicketNoteNodeResolvers<ContextType>,
  TicketNoteNodeConnection?: TicketNoteNodeConnectionResolvers<ContextType>,
  TicketNoteNodeEdge?: TicketNoteNodeEdgeResolvers<ContextType>,
  TicketPaymentVerificationDetailsNode?: TicketPaymentVerificationDetailsNodeResolvers<ContextType>,
  TicketPaymentVerificationDetailsNodeConnection?: TicketPaymentVerificationDetailsNodeConnectionResolvers<ContextType>,
  TicketPaymentVerificationDetailsNodeEdge?: TicketPaymentVerificationDetailsNodeEdgeResolvers<ContextType>,
  TicketPositiveFeedbackDetailsNode?: TicketPositiveFeedbackDetailsNodeResolvers<ContextType>,
  TicketPositiveFeedbackDetailsNodeConnection?: TicketPositiveFeedbackDetailsNodeConnectionResolvers<ContextType>,
  TicketPositiveFeedbackDetailsNodeEdge?: TicketPositiveFeedbackDetailsNodeEdgeResolvers<ContextType>,
  TicketReferralDetailsNode?: TicketReferralDetailsNodeResolvers<ContextType>,
  TicketReferralDetailsNodeConnection?: TicketReferralDetailsNodeConnectionResolvers<ContextType>,
  TicketReferralDetailsNodeEdge?: TicketReferralDetailsNodeEdgeResolvers<ContextType>,
  TicketSensitiveDetailsNode?: TicketSensitiveDetailsNodeResolvers<ContextType>,
  TicketSensitiveDetailsNodeConnection?: TicketSensitiveDetailsNodeConnectionResolvers<ContextType>,
  TicketSensitiveDetailsNodeEdge?: TicketSensitiveDetailsNodeEdgeResolvers<ContextType>,
  TicketSystemFlaggingDetailsNode?: TicketSystemFlaggingDetailsNodeResolvers<ContextType>,
  TicketSystemFlaggingDetailsNodeConnection?: TicketSystemFlaggingDetailsNodeConnectionResolvers<ContextType>,
  TicketSystemFlaggingDetailsNodeEdge?: TicketSystemFlaggingDetailsNodeEdgeResolvers<ContextType>,
  UnlockTargetPopulationMutation?: UnlockTargetPopulationMutationResolvers<ContextType>,
  UpdateFeedbackMutation?: UpdateFeedbackMutationResolvers<ContextType>,
  UpdateGrievanceTicketMutation?: UpdateGrievanceTicketMutationResolvers<ContextType>,
  UpdatePaymentPlanMutation?: UpdatePaymentPlanMutationResolvers<ContextType>,
  UpdatePaymentVerificationReceivedAndReceivedAmount?: UpdatePaymentVerificationReceivedAndReceivedAmountResolvers<ContextType>,
  UpdatePaymentVerificationStatusAndReceivedAmount?: UpdatePaymentVerificationStatusAndReceivedAmountResolvers<ContextType>,
  UpdateProgram?: UpdateProgramResolvers<ContextType>,
  UpdateTargetPopulationMutation?: UpdateTargetPopulationMutationResolvers<ContextType>,
  Upload?: GraphQLScalarType,
  UploadImportDataXLSXFileAsync?: UploadImportDataXlsxFileAsyncResolvers<ContextType>,
  UserBusinessAreaNode?: UserBusinessAreaNodeResolvers<ContextType>,
  UserBusinessAreaNodeConnection?: UserBusinessAreaNodeConnectionResolvers<ContextType>,
  UserBusinessAreaNodeEdge?: UserBusinessAreaNodeEdgeResolvers<ContextType>,
  UserNode?: UserNodeResolvers<ContextType>,
  UserNodeConnection?: UserNodeConnectionResolvers<ContextType>,
  UserNodeEdge?: UserNodeEdgeResolvers<ContextType>,
  UserRoleNode?: UserRoleNodeResolvers<ContextType>,
  UUID?: GraphQLScalarType,
  VolumeByDeliveryMechanismNode?: VolumeByDeliveryMechanismNodeResolvers<ContextType>,
  XlsxErrorNode?: XlsxErrorNodeResolvers<ContextType>,
  XlsxRowErrorNode?: XlsxRowErrorNodeResolvers<ContextType>,
};


/**
 * @deprecated
 * Use "Resolvers" root object instead. If you wish to get "IResolvers", add "typesPrefix: I" to your config.
*/
export type IResolvers<ContextType = any> = Resolvers<ContextType>;
