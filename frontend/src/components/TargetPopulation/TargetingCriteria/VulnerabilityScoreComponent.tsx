import {
  Box,
  Button,
  FormControl,
  InputLabel,
  MenuItem,
  Select,
  TextField,
} from '@material-ui/core';
import styled from 'styled-components';
import React, { useState } from 'react';
import {
  TargetPopulationQuery,
  useAllSteficonRulesQuery,
  useSetSteficonRuleOnTargetPopulationMutation,
  useUpdateTpMutation,
} from '../../../__generated__/graphql';
import { TARGET_POPULATION_QUERY } from '../../../apollo/queries/TargetPopulation';
import { CandidateHouseholdsListByTargetingCriteria } from '../../../apollo/targetPopulation/CandidateHouseholdListByTargetingCriteria';
import { AlertDialog } from '../../AlertDialog';

export const ContentWrapper = styled.div`
  display: flex;
  flex-wrap: wrap;
  padding: ${({ theme }) => theme.spacing(4)}px
    ${({ theme }) => theme.spacing(4)}px;
`;
const VulnerabilityScoreDivider = styled.div`
  width: 100%;
  height: 1px;
  background-color: #e0e0e0;
`;
const SelectRow = styled.div`
  display: flex;
  flex-direction: row;
  width: 100%;
  align-items: center;
`;
const CriteriaElement = styled.div`
  width: auto;
  max-width: 380px;
  position: relative;
  border: ${(props) => (props.alternative ? '0' : '2px solid #033f91')};
  border-radius: 3px;
  font-size: 16px;
  background-color: ${(props) =>
    props.alternative ? 'transparent' : '#f7faff'};
  padding: ${({ theme }) => theme.spacing(1)}px
    ${({ theme, alternative }) =>
      alternative ? theme.spacing(1) : theme.spacing(17)}px
    ${({ theme }) => theme.spacing(1)}px ${({ theme }) => theme.spacing(4)}px;
  margin: ${({ theme }) => theme.spacing(2)}px 0;
  p {
    margin: ${({ theme }) => theme.spacing(2)}px 0;
    span {
      color: ${(props) => (props.alternative ? '#000' : '#003c8f')};
      font-weight: bold;
    }
  }
`;
const ButtonMargin = styled(Button)`
  && {
    margin-top: 4px;
    margin-left: ${({ theme }) => theme.spacing(4)}px;
    height: 40px;
  }
`;
const StyledTextField = styled(TextField)`
  input[type='number']::-webkit-inner-spin-button,
  input[type='number']::-webkit-outer-spin-button {
    -webkit-appearance: none;
  }
  input[type='number'] {
    -moz-appearance: textfield;
  }
  && {
    margin: 0 ${({ theme }) => theme.spacing(2)}px;
  }
`;
const ApplyScoreRange = styled.div`
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  margin: ${({ theme }) => theme.spacing(2)}px;
`;

export function VulnerabilityScoreComponent({
  targetPopulation,
}: {
  targetPopulation: TargetPopulationQuery['targetPopulation'];
}): React.ReactElement {
  const options = {
    refetchQueries: () => [
      {
        query: TARGET_POPULATION_QUERY,
        variables: {
          id: targetPopulation?.id,
        },
      },
      {
        query: CandidateHouseholdsListByTargetingCriteria,
        variables: {
          targetPopulation: targetPopulation?.id,
          first: 10,
          orderBy: null,
        },
      },
    ],
  };
  const [
    setSteficonRule,
    { error },
  ] = useSetSteficonRuleOnTargetPopulationMutation(options);
  const [updateTargetPopulation] = useUpdateTpMutation(options);
  const [vulnerabilityScoreMinValue, setVulnerabilityScoreMinValue] = useState(
    targetPopulation?.vulnerabilityScoreMin,
  );
  const [vulnerabilityScoreMaxValue, setVulnerabilityScoreMaxValue] = useState(
    targetPopulation?.vulnerabilityScoreMax,
  );
  const [steficonRuleValue, setSteficonRuleValue] = useState(
    targetPopulation?.steficonRule?.id,
  );
  const { data, loading } = useAllSteficonRulesQuery({
    variables: { enabled: true, deprecated: false },
  });
  if (targetPopulation?.status !== 'APPROVED') {
    return null;
  }
  let menuItems = [];
  if (!loading) {
    menuItems = data.allSteficonRules.edges.map((item) => {
      return (
        <MenuItem key={item.node.id} value={item.node.id}>
          {item.node.name}
        </MenuItem>
      );
    });
    menuItems.splice(
      0,
      0,
      <MenuItem key='-1' value={null}>
        None
      </MenuItem>,
    );
  }
  let criteriaBox = null;
  if (targetPopulation?.steficonRule?.id) {
    criteriaBox = (
      <CriteriaElement>
        <p>Vulnerability score:</p>
        <Box
          display='flex'
          flexDirection='row'
          alignItems='center'
          justifyContent='center'
        >
          From{' '}
          <StyledTextField
            variant='outlined'
            type='number'
            value={vulnerabilityScoreMinValue}
            margin='dense'
            label='From'
            onChange={(event) =>
              setVulnerabilityScoreMinValue(event.target.value)
            }
          />{' '}
          To{' '}
          <StyledTextField
            variant='outlined'
            type='number'
            value={vulnerabilityScoreMaxValue}
            margin='dense'
            label='To'
            onChange={(event) =>
              setVulnerabilityScoreMaxValue(event.target.value)
            }
          />
        </Box>
        <ApplyScoreRange>
          <Button
            variant='contained'
            color='primary'
            disabled={
              vulnerabilityScoreMinValue ===
                targetPopulation?.vulnerabilityScoreMin &&
              vulnerabilityScoreMaxValue ===
                targetPopulation?.vulnerabilityScoreMax
            }
            onClick={() =>
              updateTargetPopulation({
                variables: {
                  input: {
                    id: targetPopulation.id,
                    vulnerabilityScoreMin: vulnerabilityScoreMinValue,
                    vulnerabilityScoreMax: vulnerabilityScoreMaxValue,
                  },
                },
              })
            }
          >
            Apply
          </Button>
        </ApplyScoreRange>
      </CriteriaElement>
    );
  }
  return (
    <>
      <VulnerabilityScoreDivider />
      <ContentWrapper>
        <SelectRow>
          <FormControl variant='outlined' margin='dense' fullWidth>
            <InputLabel>Apply Additional Formula</InputLabel>
            <Select
              value={steficonRuleValue}
              labelWidth={180}
              onChange={(event) =>
                setSteficonRuleValue(event.target.value as string)
              }
            >
              {menuItems}
            </Select>
          </FormControl>
          <ButtonMargin
            variant='contained'
            color='primary'
            onClick={async () => {
              try {
                await setSteficonRule({
                  variables: {
                    input: {
                      targetId: targetPopulation.id,
                      steficonRuleId: steficonRuleValue,
                    },
                  },
                });
                // eslint-disable-next-line no-empty
              } catch (e) {}
            }}
          >
            Apply
          </ButtonMargin>
        </SelectRow>
        {criteriaBox}
      </ContentWrapper>
      <AlertDialog message={error?.message} show={!!error} />
    </>
  );
}
