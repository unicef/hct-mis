schema {
  query: Query
  mutation: Mutations
}

type BusinessAreaNode implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  code: String!
  name: String!
  longName: String!
  regionCode: String!
  regionName: String!
  koboToken: String
  slug: String!
  userSet(before: String, after: String, first: Int, last: Int): UserNodeConnection!
  locations(before: String, after: String, first: Int, last: Int, title: String): LocationNodeConnection!
  programSet(before: String, after: String, first: Int, last: Int, name: String): ProgramNodeConnection!
}

type BusinessAreaNodeConnection {
  pageInfo: PageInfo!
  edges: [BusinessAreaNodeEdge]!
  totalCount: Int
  edgeCount: Int
}

type BusinessAreaNodeEdge {
  node: BusinessAreaNode
  cursor: String!
}

type CashPlanNode implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  program: ProgramNode!
  name: String!
  startDate: DateTime!
  endDate: DateTime!
  disbursementDate: DateTime!
  numberOfHouseholds: Int!
  createdDate: DateTime!
  createdBy: UserNode
  coverageDuration: Int!
  coverageUnits: String!
  targetPopulation: TargetPopulationNode!
  cashAssistId: String!
  distributionModality: String!
  fsp: String!
  status: CashPlanStatus!
  currency: String!
  totalEntitledQuantity: Float!
  totalDeliveredQuantity: Float!
  totalUndeliveredQuantity: Float!
  dispersionDate: Date!
  deliveryType: String!
  assistanceThrough: String!
  fcId: String!
  dpId: String!
  paymentRecords(before: String, after: String, first: Int, last: Int, cashPlan: ID, household: ID): PaymentRecordNodeConnection!
}

type CashPlanNodeConnection {
  pageInfo: PageInfo!
  edges: [CashPlanNodeEdge]!
  totalCount: Int
  edgeCount: Int
}

type CashPlanNodeEdge {
  node: CashPlanNode
  cursor: String!
}

enum CashPlanStatus {
  NOT_STARTED
  STARTED
  COMPLETE
}

type ChoiceObject {
  name: String
  value: String
}

type CreateCashPlan {
  cashPlan: CashPlanNode
}

input CreateCashPlanInput {
  programId: String
  name: String
  startDate: DateTime
  endDate: DateTime
  disbursementDate: DateTime
  numberOfHouseholds: Int
  coverageDuration: Int
  coverageUnits: String
  targetPopulationId: String
  cashAssistId: String
  distributionModality: String
  fsp: String
  status: String
  currency: String
  totalEntitledQuantity: Decimal
  totalDeliveredQuantity: Decimal
  totalUndeliveredQuantity: Decimal
  dispersionDate: Date
}

type CreateHousehold {
  household: HouseholdNode
}

input CreateHouseholdInput {
  householdCaId: String!
  residenceStatus: String!
  nationality: String!
  familySize: Int
  address: String
  locationId: String!
  registrationDataImportId: String!
}

type CreateLocation {
  location: LocationNode
}

input CreateLocationInput {
  name: String
  country: String
}

type CreateProgram {
  program: ProgramNode
}

input CreateProgramInput {
  name: String
  startDate: Date
  endDate: Date
  description: String
  programCaId: String
  budget: Decimal
  frequencyOfPayments: String
  sector: String
  scope: String
  cashPlus: Boolean
  populationGoal: Int
  administrativeAreasOfImplementation: String
  businessAreaSlug: String
}

scalar Date

scalar DateTime

scalar Decimal

type DeleteCashPlan {
  ok: Boolean
}

type DeleteHousehold {
  ok: Boolean
}

type DeleteLocation {
  ok: Boolean
}

type DeleteProgram {
  ok: Boolean
}

type DjangoDebug {
  sql: [DjangoDebugSQL]
}

type DjangoDebugSQL {
  vendor: String!
  alias: String!
  sql: String
  duration: Float!
  rawSql: String!
  params: String!
  startTime: Float!
  stopTime: Float!
  isSlow: Boolean!
  isSelect: Boolean!
  transId: String
  transStatus: String
  isoLevel: String
  encoding: String
}

enum HouseholdNationality {
  AF
  AL
  DZ
  AD
  AO
  AR
  AM
  A
  AT
  AZ
  BS
  BH
  BD
  BB
  BY
  BE
  BZ
  BJ
  BT
  BO
  BA
  BW
  BR
  GB
  BN
  BG
  BF
  MM
  BF_28
  BI
  CM
  CA
  CV
  TD
  CL
  CN
  CO
  CG
  CR
  HR
  C
  CY
  CZ
  DK
  DJ
  DM
  DO
  EC
  EG
  SV
  GB_50
  ER
  EE
  ET
  FJ
  FI
  FR
  GA
  GM
  GE
  DE
  GH
  GR
  GD
  GT
  GQ
  GY
  HT
  NL
  HN
  H
  IS
  IO
  ID
  IR
  IQ
  IE
  IL
  IT
  JM
  JP
  JO
  KZ
  KE
  KW
  LA
  LV
  LB
  LR
  LY
  LT
  MK
  MG
  MW
  MY
  MV
  ML
  MT
  MR
  M
  MX
  MD
  MC
  MN
  ME
  MA
  MZ
  NA
  NP
  NI
  NE
  NG
  KP
  NO
  OM
  PK
  PA
  PG
  PY
  PE
  PH
  PL
  PT
  QA
  RO
  R
  RW
  SA
  AE
  SN
  RS
  SC
  SL
  SG
  SK
  SI
  SO
  ZA
  KR
  ES
  LK
  SD
  SR
  SZ
  SE
  CH
  SY
  TW
  TJ
  TZ
  TH
  TG
  TT
  TN
  TR
  TM
  TV
  UG
  UA
  UY
  UZ
  V
  VE
  VN
  GB_164
  YE
  ZM
  ZW
}

type HouseholdNode implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  householdCaId: String!
  consent: String!
  residenceStatus: HouseholdResidenceStatus!
  nationality: HouseholdNationality!
  familySize: Int!
  address: String
  location: LocationNode!
  representative: IndividualNode
  registrationDataImportId: RegistrationDataImportNode!
  headOfHousehold: IndividualNode
  programs(before: String, after: String, first: Int, last: Int, name: String): ProgramNodeConnection!
  registrationDate: Date
  individuals(before: String, after: String, first: Int, last: Int): IndividualNodeConnection!
  paymentRecords(before: String, after: String, first: Int, last: Int, cashPlan: ID, household: ID): PaymentRecordNodeConnection!
  targetPopulations(before: String, after: String, first: Int, last: Int): TargetPopulationNodeConnection!
  totalCashReceived: Decimal
}

type HouseholdNodeConnection {
  pageInfo: PageInfo!
  edges: [HouseholdNodeEdge]!
  totalCount: Int
  edgeCount: Int
}

type HouseholdNodeEdge {
  node: HouseholdNode
  cursor: String!
}

enum HouseholdResidenceStatus {
  REFUGEE
  MIGRANT
  CITIZEN
  IDP
  OTHER
}

enum ImportedHouseholdNationality {
  AF
  AL
  DZ
  AD
  AO
  AR
  AM
  A
  AT
  AZ
  BS
  BH
  BD
  BB
  BY
  BE
  BZ
  BJ
  BT
  BO
  BA
  BW
  BR
  GB
  BN
  BG
  BF
  MM
  BF_28
  BI
  CM
  CA
  CV
  TD
  CL
  CN
  CO
  CG
  CR
  HR
  C
  CY
  CZ
  DK
  DJ
  DM
  DO
  EC
  EG
  SV
  GB_50
  ER
  EE
  ET
  FJ
  FI
  FR
  GA
  GM
  GE
  DE
  GH
  GR
  GD
  GT
  GQ
  GY
  HT
  NL
  HN
  H
  IS
  IO
  ID
  IR
  IQ
  IE
  IL
  IT
  JM
  JP
  JO
  KZ
  KE
  KW
  LA
  LV
  LB
  LR
  LY
  LT
  MK
  MG
  MW
  MY
  MV
  ML
  MT
  MR
  M
  MX
  MD
  MC
  MN
  ME
  MA
  MZ
  NA
  NP
  NI
  NE
  NG
  KP
  NO
  OM
  PK
  PA
  PG
  PY
  PE
  PH
  PL
  PT
  QA
  RO
  R
  RW
  SA
  AE
  SN
  RS
  SC
  SL
  SG
  SK
  SI
  SO
  ZA
  KR
  ES
  LK
  SD
  SR
  SZ
  SE
  CH
  SY
  TW
  TJ
  TZ
  TH
  TG
  TT
  TN
  TR
  TM
  TV
  UG
  UA
  UY
  UZ
  V
  VE
  VN
  GB_164
  YE
  ZM
  ZW
}

type ImportedHouseholdNode implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  householdCaId: String!
  consent: String!
  residenceStatus: ImportedHouseholdResidenceStatus!
  nationality: ImportedHouseholdNationality!
  familySize: Int!
  address: String!
  location: String!
  representative: ImportedIndividualNode
  registrationDataImportId: RegistrationDataImportDatahubNode!
  headOfHousehold: ImportedIndividualNode
  individuals(before: String, after: String, first: Int, last: Int): ImportedIndividualNodeConnection!
}

type ImportedHouseholdNodeConnection {
  pageInfo: PageInfo!
  edges: [ImportedHouseholdNodeEdge]!
  totalCount: Int
  edgeCount: Int
}

type ImportedHouseholdNodeEdge {
  node: ImportedHouseholdNode
  cursor: String!
}

enum ImportedHouseholdResidenceStatus {
  REFUGEE
  MIGRANT
  CITIZEN
  IDP
  OTHER
}

enum ImportedIndividualDisability {
  NO
  SEEING
  HEARING
  WALKING
  MEMORY
  SELF_CARE
  COMMUNICATING
}

enum ImportedIndividualEstimatedDob {
  YES
  NO
}

enum ImportedIndividualIdentificationType {
  NA
  BIRTH_CERTIFICATE
  DRIVING_LICENSE
  UNHCR_ID_CARD
  NATIONAL_ID
  NATIONAL_PASSPORT
}

enum ImportedIndividualMartialStatus {
  SINGLE
  MARRIED
  WIDOW
  DIVORCED
  SEPARATED
}

enum ImportedIndividualNationality {
  AF
  AL
  DZ
  AD
  AO
  AR
  AM
  A
  AT
  AZ
  BS
  BH
  BD
  BB
  BY
  BE
  BZ
  BJ
  BT
  BO
  BA
  BW
  BR
  GB
  BN
  BG
  BF
  MM
  BF_28
  BI
  CM
  CA
  CV
  TD
  CL
  CN
  CO
  CG
  CR
  HR
  C
  CY
  CZ
  DK
  DJ
  DM
  DO
  EC
  EG
  SV
  GB_50
  ER
  EE
  ET
  FJ
  FI
  FR
  GA
  GM
  GE
  DE
  GH
  GR
  GD
  GT
  GQ
  GY
  HT
  NL
  HN
  H
  IS
  IO
  ID
  IR
  IQ
  IE
  IL
  IT
  JM
  JP
  JO
  KZ
  KE
  KW
  LA
  LV
  LB
  LR
  LY
  LT
  MK
  MG
  MW
  MY
  MV
  ML
  MT
  MR
  M
  MX
  MD
  MC
  MN
  ME
  MA
  MZ
  NA
  NP
  NI
  NE
  NG
  KP
  NO
  OM
  PK
  PA
  PG
  PY
  PE
  PH
  PL
  PT
  QA
  RO
  R
  RW
  SA
  AE
  SN
  RS
  SC
  SL
  SG
  SK
  SI
  SO
  ZA
  KR
  ES
  LK
  SD
  SR
  SZ
  SE
  CH
  SY
  TW
  TJ
  TZ
  TH
  TG
  TT
  TN
  TR
  TM
  TV
  UG
  UA
  UY
  UZ
  V
  VE
  VN
  GB_164
  YE
  ZM
  ZW
}

type ImportedIndividualNode implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  individualCaId: String!
  fullName: String!
  firstName: String!
  middleName: String!
  lastName: String!
  sex: ImportedIndividualSex!
  dob: Date!
  estimatedDob: ImportedIndividualEstimatedDob!
  nationality: ImportedIndividualNationality!
  martialStatus: ImportedIndividualMartialStatus!
  phoneNumber: String!
  phoneNumberAlternative: String!
  identificationType: ImportedIndividualIdentificationType!
  identificationNumber: String!
  household: ImportedHouseholdNode!
  registrationDataImportId: RegistrationDataImportDatahubNode!
  workStatus: ImportedIndividualWorkStatus!
  disability: ImportedIndividualDisability!
  representedHouseholds(before: String, after: String, first: Int, last: Int): ImportedHouseholdNodeConnection!
  headingHousehold: ImportedHouseholdNode
}

type ImportedIndividualNodeConnection {
  pageInfo: PageInfo!
  edges: [ImportedIndividualNodeEdge]!
  totalCount: Int
  edgeCount: Int
}

type ImportedIndividualNodeEdge {
  node: ImportedIndividualNode
  cursor: String!
}

enum ImportedIndividualSex {
  MALE
  FEMALE
  OTHER
}

enum ImportedIndividualWorkStatus {
  YES
  NO
}

enum IndividualAdministrationOfRutf {
  YES
  NO
}

enum IndividualDisability {
  NO
  SEEING
  HEARING
  WALKING
  MEMORY
  SELF_CARE
  COMMUNICATING
}

enum IndividualEnrolledInNutritionProgramme {
  YES
  NO
}

enum IndividualEnrolledInSchool {
  YES
  NO
}

enum IndividualIdentificationType {
  NA
  BIRTH_CERTIFICATE
  DRIVING_LICENSE
  UNHCR_ID_CARD
  NATIONAL_ID
  NATIONAL_PASSPORT
}

enum IndividualMartialStatus {
  SINGLE
  MARRIED
  WIDOW
  DIVORCED
  SEPARATED
}

enum IndividualNationality {
  AF
  AL
  DZ
  AD
  AO
  AR
  AM
  A
  AT
  AZ
  BS
  BH
  BD
  BB
  BY
  BE
  BZ
  BJ
  BT
  BO
  BA
  BW
  BR
  GB
  BN
  BG
  BF
  MM
  BF_28
  BI
  CM
  CA
  CV
  TD
  CL
  CN
  CO
  CG
  CR
  HR
  C
  CY
  CZ
  DK
  DJ
  DM
  DO
  EC
  EG
  SV
  GB_50
  ER
  EE
  ET
  FJ
  FI
  FR
  GA
  GM
  GE
  DE
  GH
  GR
  GD
  GT
  GQ
  GY
  HT
  NL
  HN
  H
  IS
  IO
  ID
  IR
  IQ
  IE
  IL
  IT
  JM
  JP
  JO
  KZ
  KE
  KW
  LA
  LV
  LB
  LR
  LY
  LT
  MK
  MG
  MW
  MY
  MV
  ML
  MT
  MR
  M
  MX
  MD
  MC
  MN
  ME
  MA
  MZ
  NA
  NP
  NI
  NE
  NG
  KP
  NO
  OM
  PK
  PA
  PG
  PY
  PE
  PH
  PL
  PT
  QA
  RO
  R
  RW
  SA
  AE
  SN
  RS
  SC
  SL
  SG
  SK
  SI
  SO
  ZA
  KR
  ES
  LK
  SD
  SR
  SZ
  SE
  CH
  SY
  TW
  TJ
  TZ
  TH
  TG
  TT
  TN
  TR
  TM
  TV
  UG
  UA
  UY
  UZ
  V
  VE
  VN
  GB_164
  YE
  ZM
  ZW
}

type IndividualNode implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  individualCaId: String!
  fullName: String!
  firstName: String!
  middleName: String!
  lastName: String!
  sex: IndividualSex!
  dob: Date
  estimatedDob: Date
  nationality: IndividualNationality!
  martialStatus: IndividualMartialStatus!
  phoneNumber: String!
  phoneNumberAlternative: String!
  identificationType: IndividualIdentificationType!
  identificationNumber: String!
  household: HouseholdNode!
  registrationDataImportId: RegistrationDataImportNode!
  workStatus: IndividualWorkStatus!
  disability: IndividualDisability!
  seriousIllness: IndividualSeriousIllness!
  ageFirstMarried: Int
  enrolledInSchool: IndividualEnrolledInSchool!
  schoolAttendance: String!
  schoolType: String!
  yearsInSchool: Int
  minutesToSchool: Int
  enrolledInNutritionProgramme: IndividualEnrolledInNutritionProgramme
  administrationOfRutf: IndividualAdministrationOfRutf
  representedHouseholds(before: String, after: String, first: Int, last: Int): HouseholdNodeConnection!
  headingHousehold: HouseholdNode
}

type IndividualNodeConnection {
  pageInfo: PageInfo!
  edges: [IndividualNodeEdge]!
  totalCount: Int
  edgeCount: Int
}

type IndividualNodeEdge {
  node: IndividualNode
  cursor: String!
}

enum IndividualSeriousIllness {
  YES
  NO
}

enum IndividualSex {
  MALE
  FEMALE
  OTHER
}

enum IndividualWorkStatus {
  YES
  NO
}

scalar JSONLazyString

scalar JSONString

type LocationNode implements Node {
  id: ID!
  title: String!
  businessArea: BusinessAreaNode
  latitude: Float
  longitude: Float
  pCode: String
  parent: LocationNode
  lft: Int!
  rght: Int!
  treeId: Int!
  level: Int!
  children(before: String, after: String, first: Int, last: Int, title: String): LocationNodeConnection!
  households(before: String, after: String, first: Int, last: Int): HouseholdNodeConnection!
  programs(before: String, after: String, first: Int, last: Int, name: String): ProgramNodeConnection!
}

type LocationNodeConnection {
  pageInfo: PageInfo!
  edges: [LocationNodeEdge]!
  totalCount: Int
  edgeCount: Int
}

type LocationNodeEdge {
  node: LocationNode
  cursor: String!
}

enum LogEntryAction {
  A_0
  A_1
  A_2
}

type LogEntryObject {
  id: ID!
  objectPk: String!
  objectId: Int
  objectRepr: String!
  action: LogEntryAction!
  changes: String!
  actor: UserNode
  remoteAddr: String
  timestamp: DateTime
  changesDisplayDict: JSONLazyString
}

type LogEntryObjectConnection {
  pageInfo: PageInfo!
  edges: [LogEntryObjectEdge]!
  totalCount: Int
}

type LogEntryObjectEdge {
  node: LogEntryObject
  cursor: String!
}

type Mutations {
  createProgram(programData: CreateProgramInput!): CreateProgram
  updateProgram(programData: UpdateProgramInput): UpdateProgram
  deleteProgram(programId: String!): DeleteProgram
  createCashPlan(cashPlanData: CreateCashPlanInput!): CreateCashPlan
  updateCashPlan(cashPlanData: UpdateCashPlanInput): UpdateCashPlan
  deleteCashPlan(cashPlanId: String!): DeleteCashPlan
  createHousehold(householdData: CreateHouseholdInput): CreateHousehold
  updateHousehold(householdData: UpdateHouseholdInput): UpdateHousehold
  deleteHousehold(householdId: String!): DeleteHousehold
  createLocation(locationData: CreateLocationInput!): CreateLocation
  updateLocation(locationData: UpdateLocationInput): UpdateLocation
  deleteLocation(locationId: String!): DeleteLocation
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum PaymentEntitlementDeliveryType {
  CASH
  DEPOSIT_TO_CARD
  TRANSFER
}

type PaymentEntitlementNode {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deliveryType: PaymentEntitlementDeliveryType!
  entitlementQuantity: Decimal
  deliveredQuantity: Decimal
  entitlementCardIssueDate: Date
  entitlementCardNumber: String!
  currency: String!
  deliveryDate: DateTime
  transactionReferenceId: String!
  fsp: String!
  paymentRecord: PaymentRecordNode
}

type PaymentRecordNode implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: PaymentRecordStatus!
  name: String!
  statusDate: DateTime!
  cashAssistId: String!
  cashPlan: CashPlanNode!
  household: HouseholdNode!
  headOfHousehold: String!
  totalPersonCovered: Int!
  distributionModality: String!
  targetPopulation: TargetPopulationNode!
  entitlement: PaymentEntitlementNode
}

type PaymentRecordNodeConnection {
  pageInfo: PageInfo!
  edges: [PaymentRecordNodeEdge]!
  totalCount: Int
  edgeCount: Int
}

type PaymentRecordNodeEdge {
  node: PaymentRecordNode
  cursor: String!
}

enum PaymentRecordStatus {
  SUCCESS
  PENDING
  ERROR
}

enum ProgramFrequencyOfPayments {
  REGULAR
  ONE_OFF
}

type ProgramNode implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  status: ProgramStatus!
  startDate: Date!
  endDate: Date!
  description: String!
  programCaId: String!
  locations(before: String, after: String, first: Int, last: Int, title: String): LocationNodeConnection!
  businessArea: BusinessAreaNode!
  budget: Decimal
  frequencyOfPayments: ProgramFrequencyOfPayments!
  sector: ProgramSector!
  scope: ProgramScope!
  cashPlus: Boolean!
  populationGoal: Int!
  administrativeAreasOfImplementation: String!
  households(before: String, after: String, first: Int, last: Int): HouseholdNodeConnection!
  cashPlans(before: String, after: String, first: Int, last: Int): CashPlanNodeConnection!
  totalEntitledQuantity: Decimal
  totalDeliveredQuantity: Decimal
  totalUndeliveredQuantity: Decimal
  totalNumberOfHouseholds: Int
  history(before: String, after: String, first: Int, last: Int): LogEntryObjectConnection
}

type ProgramNodeConnection {
  pageInfo: PageInfo!
  edges: [ProgramNodeEdge]!
  totalCount: Int
  edgeCount: Int
}

type ProgramNodeEdge {
  node: ProgramNode
  cursor: String!
}

enum ProgramScope {
  FULL
  PARTIAL
  NO_INTEGRATION
}

enum ProgramSector {
  CHILD_PROTECTION
  EDUCATION
  GENDER
  HEALTH
  HIV_AIDS
  MULTI_PURPOSE
  NUTRITION
  SOCIAL_POLICY
  WASH
}

enum ProgramStatus {
  DRAFT
  ACTIVE
  FINISHED
}

type Query {
  paymentRecord(id: ID!): PaymentRecordNode
  allPaymentRecords(before: String, after: String, first: Int, last: Int, cashPlan: ID, household: ID, orderBy: String): PaymentRecordNodeConnection
  paymentRecordStatusChoices: [ChoiceObject]
  allPaymentEntitlements: [PaymentEntitlementNode]
  location(id: ID!): LocationNode
  allLocations(before: String, after: String, first: Int, last: Int, title: String): LocationNodeConnection
  allBusinessAreas(before: String, after: String, first: Int, last: Int, id: UUID): BusinessAreaNodeConnection
  allLogEntries(objectId: String!, before: String, after: String, first: Int, last: Int): LogEntryObjectConnection
  program(id: ID!): ProgramNode
  allPrograms(before: String, after: String, first: Int, last: Int, id: UUID, status: String, businessArea: String): ProgramNodeConnection
  cashPlan(id: ID!): CashPlanNode
  allCashPlans(before: String, after: String, first: Int, last: Int, program: ID, orderBy: String): CashPlanNodeConnection
  programStatusChoices: [ChoiceObject]
  programFrequencyOfPaymentsChoices: [ChoiceObject]
  programSectorChoices: [ChoiceObject]
  programScopeChoices: [ChoiceObject]
  cashPlanStatusChoices: [ChoiceObject]
  targetPopulation(id: ID!): TargetPopulationNode
  allTargetPopulation(before: String, after: String, first: Int, last: Int): TargetPopulationNodeConnection
  household(id: ID!): HouseholdNode
  allHouseholds(before: String, after: String, first: Int, last: Int, businessArea: String, nationality: String, nationality_Icontains: String, address: String, address_Icontains: String, representative_FullName: String, representative_FullName_Icontains: String, headOfHousehold_FullName: String, headOfHousehold_FullName_Icontains: String, householdCaId: String, familySize_Range: Int, familySize_Lte: Int, familySize_Gte: Int, targetPopulations: [ID], programs: [ID], familySize: String, orderBy: String): HouseholdNodeConnection
  individual(id: ID!): IndividualNode
  allIndividuals(before: String, after: String, first: Int, last: Int, programme: String, businessArea: String, fullName: String, fullName_Icontains: String, sex: [ID], age: String, orderBy: String): IndividualNodeConnection
  me: UserObjectType
  allUsers(before: String, after: String, first: Int, last: Int, fullName: String, orderBy: String): UserNodeConnection
  importedHousehold(id: ID!): ImportedHouseholdNode
  allImportedHouseholds(before: String, after: String, first: Int, last: Int, nationality: String, nationality_Icontains: String, address: String, address_Icontains: String, representative_FullName: String, representative_FullName_Icontains: String, headOfHousehold_FullName: String, headOfHousehold_FullName_Icontains: String, householdCaId: String, familySize_Range: Int, familySize_Lte: Int, familySize_Gte: Int, familySize: String, orderBy: String): ImportedHouseholdNodeConnection
  registrationDataImportDatahub(id: ID!): RegistrationDataImportDatahubNode
  allRegistrationDataImportsDatahub(before: String, after: String, first: Int, last: Int): RegistrationDataImportDatahubNodeConnection
  importedIndividual(id: ID!): ImportedIndividualNode
  allImportedIndividuals(before: String, after: String, first: Int, last: Int, fullName: String, fullName_Icontains: String, sex: [ID], age: String, orderBy: String): ImportedIndividualNodeConnection
  registrationDataImport(id: ID!): RegistrationDataImportNode
  allRegistrationDataImports(before: String, after: String, first: Int, last: Int, importedBy_Id: UUID, importDate: Date, status: String, name: String, name_Icontains: String, orderBy: String): RegistrationDataImportNodeConnection
  registrationDataStatusChoices: [ChoiceObject]
  _debug: DjangoDebug
}

enum RegistrationDataImportDataSource {
  XLS
  A_3RD_PARTY
  XML
  OTHER
}

type RegistrationDataImportDatahubNode implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  importDate: DateTime!
  hctId: UUID
  households(before: String, after: String, first: Int, last: Int): ImportedHouseholdNodeConnection!
  individuals(before: String, after: String, first: Int, last: Int): ImportedIndividualNodeConnection!
}

type RegistrationDataImportDatahubNodeConnection {
  pageInfo: PageInfo!
  edges: [RegistrationDataImportDatahubNodeEdge]!
  totalCount: Int
  edgeCount: Int
}

type RegistrationDataImportDatahubNodeEdge {
  node: RegistrationDataImportDatahubNode
  cursor: String!
}

type RegistrationDataImportNode implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  status: RegistrationDataImportStatus!
  importDate: DateTime!
  importedBy: UserNode!
  dataSource: RegistrationDataImportDataSource!
  numberOfIndividuals: Int!
  numberOfHouseholds: Int!
  datahubId: UUID
  households(before: String, after: String, first: Int, last: Int): HouseholdNodeConnection!
  individuals(before: String, after: String, first: Int, last: Int): IndividualNodeConnection!
}

type RegistrationDataImportNodeConnection {
  pageInfo: PageInfo!
  edges: [RegistrationDataImportNodeEdge]!
  totalCount: Int
  edgeCount: Int
}

type RegistrationDataImportNodeEdge {
  node: RegistrationDataImportNode
  cursor: String!
}

enum RegistrationDataImportStatus {
  IN_REVIEW
  APPROVED
  MERGED
  MERGING
}

type TargetPopulationNode implements Node {
  id: ID!
  name: String!
  createdAt: DateTime!
  createdBy: UserNode
  rules: JSONString!
  households(before: String, after: String, first: Int, last: Int): HouseholdNodeConnection!
  paymentRecords(before: String, after: String, first: Int, last: Int, cashPlan: ID, household: ID): PaymentRecordNodeConnection!
  cashPlans(before: String, after: String, first: Int, last: Int): CashPlanNodeConnection!
}

type TargetPopulationNodeConnection {
  pageInfo: PageInfo!
  edges: [TargetPopulationNodeEdge]!
  totalCount: Int
  edgeCount: Int
}

type TargetPopulationNodeEdge {
  node: TargetPopulationNode
  cursor: String!
}

scalar UUID

type UpdateCashPlan {
  cashPlan: CashPlanNode
}

input UpdateCashPlanInput {
  id: String!
  programId: String
  name: String
  startDate: DateTime
  endDate: DateTime
  disbursementDate: DateTime
  numberOfHouseholds: Int
  coverageDuration: Int
  coverageUnits: String
  targetPopulationId: String
  cashAssistId: String
  distributionModality: String
  fsp: String
  status: String
  currency: String
  totalEntitledQuantity: Decimal
  totalDeliveredQuantity: Decimal
  totalUndeliveredQuantity: Decimal
  dispersionDate: Date
}

type UpdateHousehold {
  household: HouseholdNode
}

input UpdateHouseholdInput {
  id: String!
  householdCaId: String
  consent: String
  residenceStatus: String
  nationality: String
  familySize: Int
  address: String
  locationId: String
  registrationDataImportId: String
}

type UpdateLocation {
  location: LocationNode
}

input UpdateLocationInput {
  id: String!
  name: String
  country: String
}

type UpdateProgram {
  program: ProgramNode
}

input UpdateProgramInput {
  id: String!
  name: String
  status: String
  startDate: Date
  endDate: Date
  description: String
  programCaId: String
  budget: Decimal
  frequencyOfPayments: String
  sector: String
  scope: String
  cashPlus: Boolean
  populationGoal: Int
  administrativeAreasOfImplementation: String
  businessAreaSlug: String
}

type UserNode implements Node {
  lastLogin: DateTime
  isSuperuser: Boolean!
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  isStaff: Boolean!
  isActive: Boolean!
  dateJoined: DateTime!
  id: ID!
  businessAreas(before: String, after: String, first: Int, last: Int, id: UUID): BusinessAreaNodeConnection!
  cashPlans(before: String, after: String, first: Int, last: Int): CashPlanNodeConnection!
  targetPopulations(before: String, after: String, first: Int, last: Int): TargetPopulationNodeConnection!
  registrationDataImports(before: String, after: String, first: Int, last: Int): RegistrationDataImportNodeConnection!
}

type UserNodeConnection {
  pageInfo: PageInfo!
  edges: [UserNodeEdge]!
  totalCount: Int
  edgeCount: Int
}

type UserNodeEdge {
  node: UserNode
  cursor: String!
}

type UserObjectType {
  lastLogin: DateTime
  isSuperuser: Boolean!
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  isStaff: Boolean!
  isActive: Boolean!
  dateJoined: DateTime!
  id: UUID!
  businessAreas(before: String, after: String, first: Int, last: Int, id: UUID): BusinessAreaNodeConnection!
  cashPlans(before: String, after: String, first: Int, last: Int): CashPlanNodeConnection!
  targetPopulations(before: String, after: String, first: Int, last: Int): TargetPopulationNodeConnection!
  registrationDataImports(before: String, after: String, first: Int, last: Int): RegistrationDataImportNodeConnection!
}
