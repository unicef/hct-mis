schema {
  query: Query
  mutation: Mutations
}

type CashPlanNode implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  program: ProgramNode!
  name: String!
  startDate: DateTime!
  endDate: DateTime!
  disbursementDate: DateTime!
  numberOfHouseholds: Int!
  createdDate: DateTime!
  createdBy: UserObjectType
  coverageDuration: Int!
  coverageUnits: String!
  targetPopulation: TargetPopulationNode!
  cashAssistId: String!
  distributionModality: String!
  fsp: String!
  status: CashPlanStatus!
  currency: String!
  totalEntitledQuantity: Float!
  totalDeliveredQuantity: Float!
  totalUndeliveredQuantity: Float!
  dispersionDate: Date!
  paymentRecords(before: String, after: String, first: Int, last: Int, cashPlan: ID, household: ID): PaymentRecordNodeConnection!
}

type CashPlanNodeConnection {
  pageInfo: PageInfo!
  edges: [CashPlanNodeEdge]!
  totalCount: Int
  edgeCount: Int
}

type CashPlanNodeEdge {
  node: CashPlanNode
  cursor: String!
}

enum CashPlanStatus {
  NOT_STARTED
  STARTED
  COMPLETE
}

type ChoiceObject {
  name: String
  value: String
}

type CreateCashPlan {
  cashPlan: CashPlanNode
}

input CreateCashPlanInput {
  programId: String
  name: String
  startDate: DateTime
  endDate: DateTime
  disbursementDate: DateTime
  numberOfHouseholds: Int
  coverageDuration: Int
  coverageUnits: String
  targetPopulationId: String
  cashAssistId: String
  distributionModality: String
  fsp: String
  status: String
  currency: String
  totalEntitledQuantity: Decimal
  totalDeliveredQuantity: Decimal
  totalUndeliveredQuantity: Decimal
  dispersionDate: Date
}

type CreateHousehold {
  household: HouseholdNode
}

input CreateHouseholdInput {
  householdCaId: String!
  residenceStatus: String!
  nationality: String!
  familySize: Int
  address: String
  locationId: String!
  registrationDataImportId: String!
}

type CreateLocation {
  location: LocationNode
}

input CreateLocationInput {
  name: String
  country: String
}

type CreateProgram {
  program: ProgramNode
}

input CreateProgramInput {
  name: String
  startDate: DateTime
  endDate: DateTime
  description: String
  programCaId: String
  locationId: String
  budget: Float
  frequencyOfPayments: String
  sector: String
  scope: String
  cashPlus: Boolean
  populationGoal: Int
}

type CreateRegistrationDataImport {
  registrationDataImport: RegistrationDataImportNode
}

input CreateRegistrationDataImportInput {
  name: String
  status: String
  importDate: DateTime
  importedById: String
  dataSource: String
  numberOfIndividuals: Int
  numberOfHouseholds: Int
}

scalar Date

scalar DateTime

scalar Decimal

type DeleteCashPlan {
  ok: Boolean
}

type DeleteHousehold {
  ok: Boolean
}

type DeleteLocation {
  ok: Boolean
}

type DeleteProgram {
  ok: Boolean
}

type DeleteRegistrationDataImport {
  ok: Boolean
}

type DjangoDebug {
  sql: [DjangoDebugSQL]
}

type DjangoDebugSQL {
  vendor: String!
  alias: String!
  sql: String
  duration: Float!
  rawSql: String!
  params: String!
  startTime: Float!
  stopTime: Float!
  isSlow: Boolean!
  isSelect: Boolean!
  transId: String
  transStatus: String
  isoLevel: String
  encoding: String
}

enum HouseholdNationality {
  AF
  AL
  DZ
  AD
  AO
  AR
  AM
  A
  AT
  AZ
  BS
  BH
  BD
  BB
  BY
  BE
  BZ
  BJ
  BT
  BO
  BA
  BW
  BR
  GB
  BN
  BG
  BF
  MM
  BF_28
  BI
  CM
  CA
  CV
  TD
  CL
  CN
  CO
  CG
  CR
  HR
  C
  CY
  CZ
  DK
  DJ
  DM
  DO
  EC
  EG
  SV
  GB_50
  ER
  EE
  ET
  FJ
  FI
  FR
  GA
  GM
  GE
  DE
  GH
  GR
  GD
  GT
  GQ
  GY
  HT
  NL
  HN
  H
  IS
  IO
  ID
  IR
  IQ
  IE
  IL
  IT
  JM
  JP
  JO
  KZ
  KE
  KW
  LA
  LV
  LB
  LR
  LY
  LT
  MK
  MG
  MW
  MY
  MV
  ML
  MT
  MR
  M
  MX
  MD
  MC
  MN
  ME
  MA
  MZ
  NA
  NP
  NI
  NE
  NG
  KP
  NO
  OM
  PK
  PA
  PG
  PY
  PE
  PH
  PL
  PT
  QA
  RO
  R
  RW
  SA
  AE
  SN
  RS
  SC
  SL
  SG
  SK
  SI
  SO
  ZA
  KR
  ES
  LK
  SD
  SR
  SZ
  SE
  CH
  SY
  TW
  TJ
  TZ
  TH
  TG
  TT
  TN
  TR
  TM
  TV
  UG
  UA
  UY
  UZ
  V
  VE
  VN
  GB_164
  YE
  ZM
  ZW
}

type HouseholdNode implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  householdCaId: String!
  consent: String!
  residenceStatus: HouseholdResidenceStatus!
  nationality: HouseholdNationality!
  familySize: Int
  address: String
  location: LocationNode!
  registrationDataImportId: RegistrationDataImportNode!
  paymentRecords(before: String, after: String, first: Int, last: Int, cashPlan: ID, household: ID): PaymentRecordNodeConnection!
  targetPopulations(before: String, after: String, first: Int, last: Int): TargetPopulationNodeConnection!
}

type HouseholdNodeConnection {
  pageInfo: PageInfo!
  edges: [HouseholdNodeEdge]!
  totalCount: Int
  edgeCount: Int
}

type HouseholdNodeEdge {
  node: HouseholdNode
  cursor: String!
}

enum HouseholdResidenceStatus {
  REFUGEE
  MIGRANT
  CITIZEN
  IDP
  OTHER
}

scalar JSONString

enum LocationCountry {
  AF
  AX
  AL
  DZ
  AS
  AD
  AO
  AI
  AQ
  AG
  AR
  AM
  AW
  AU
  AT
  AZ
  BS
  BH
  BD
  BB
  BY
  BE
  BZ
  BJ
  BM
  BT
  BO
  BQ
  BA
  BW
  BV
  BR
  IO
  BN
  BG
  BF
  BI
  CV
  KH
  CM
  CA
  KY
  CF
  TD
  CL
  CN
  CX
  CC
  CO
  KM
  CG
  CD
  CK
  CR
  CI
  HR
  CU
  CW
  CY
  CZ
  DK
  DJ
  DM
  DO
  EC
  EG
  SV
  GQ
  ER
  EE
  SZ
  ET
  FK
  FO
  FJ
  FI
  FR
  GF
  PF
  TF
  GA
  GM
  GE
  DE
  GH
  GI
  GR
  GL
  GD
  GP
  GU
  GT
  GG
  GN
  GW
  GY
  HT
  HM
  VA
  HN
  HK
  HU
  IS
  IN
  ID
  IR
  IQ
  IE
  IM
  IL
  IT
  JM
  JP
  JE
  JO
  KZ
  KE
  KI
  KW
  KG
  LA
  LV
  LB
  LS
  LR
  LY
  LI
  LT
  LU
  MO
  MG
  MW
  MY
  MV
  ML
  MT
  MH
  MQ
  MR
  MU
  YT
  MX
  FM
  MD
  MC
  MN
  ME
  MS
  MA
  MZ
  MM
  NA
  NR
  NP
  NL
  NC
  NZ
  NI
  NE
  NG
  NU
  NF
  KP
  MK
  MP
  NO
  OM
  PK
  PW
  PS
  PA
  PG
  PY
  PE
  PH
  PN
  PL
  PT
  PR
  QA
  RE
  RO
  RU
  RW
  BL
  SH
  KN
  LC
  MF
  PM
  VC
  WS
  SM
  ST
  SA
  SN
  RS
  SC
  SL
  SG
  SX
  SK
  SI
  SB
  SO
  ZA
  GS
  KR
  SS
  ES
  LK
  SD
  SR
  SJ
  SE
  CH
  SY
  TW
  TJ
  TZ
  TH
  TL
  TG
  TK
  TO
  TT
  TN
  TR
  TM
  TC
  TV
  UG
  UA
  AE
  GB
  UM
  US
  UY
  UZ
  VU
  VE
  VN
  VG
  VI
  WF
  EH
  YE
  ZM
  ZW
}

type LocationNode implements Node {
  id: ID!
  name: String!
  country: LocationCountry!
  households(before: String, after: String, first: Int, last: Int): HouseholdNodeConnection!
  programs(before: String, after: String, first: Int, last: Int): ProgramNodeConnection!
}

type LocationNodeConnection {
  pageInfo: PageInfo!
  edges: [LocationNodeEdge]!
  totalCount: Int
  edgeCount: Int
}

type LocationNodeEdge {
  node: LocationNode
  cursor: String!
}

type Mutations {
  createProgram(programData: CreateProgramInput!): CreateProgram
  updateProgram(programData: UpdateProgramInput): UpdateProgram
  deleteProgram(programId: String!): DeleteProgram
  createCashPlan(cashPlanData: CreateCashPlanInput!): CreateCashPlan
  updateCashPlan(cashPlanData: UpdateCashPlanInput): UpdateCashPlan
  deleteCashPlan(cashPlanId: String!): DeleteCashPlan
  createHousehold(householdData: CreateHouseholdInput): CreateHousehold
  updateHousehold(householdData: UpdateHouseholdInput): UpdateHousehold
  deleteHousehold(householdId: String!): DeleteHousehold
  createRegistrationDataImport(registrationDataImportData: CreateRegistrationDataImportInput!): CreateRegistrationDataImport
  updateRegistrationDataImport(registrationDataImportData: UpdateRegistrationDataImportInput): UpdateRegistrationDataImport
  deleteRegistrationDataImport(registrationDataImportId: String!): DeleteRegistrationDataImport
  createLocation(locationData: CreateLocationInput!): CreateLocation
  updateLocation(locationData: UpdateLocationInput): UpdateLocation
  deleteLocation(locationId: String!): DeleteLocation
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum PaymentRecordDeliveryType {
  DELIVERED
  IN_PROGRESS
}

type PaymentRecordNode implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  startDate: DateTime!
  endDate: DateTime!
  cashAssistId: String!
  deliveryType: PaymentRecordDeliveryType!
  cashPlan: CashPlanNode!
  household: HouseholdNode!
}

type PaymentRecordNodeConnection {
  pageInfo: PageInfo!
  edges: [PaymentRecordNodeEdge]!
  totalCount: Int
  edgeCount: Int
}

type PaymentRecordNodeEdge {
  node: PaymentRecordNode
  cursor: String!
}

enum ProgramFrequencyOfPayments {
  REGULAR
  ONE_OFF
}

type ProgramNode implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  status: ProgramStatus!
  startDate: DateTime!
  endDate: DateTime!
  description: String!
  programCaId: String!
  location: LocationNode!
  budget: Float!
  frequencyOfPayments: ProgramFrequencyOfPayments!
  sector: ProgramSector!
  scope: ProgramScope!
  cashPlus: Boolean!
  populationGoal: Int!
  cashPlans(before: String, after: String, first: Int, last: Int, program: ID): CashPlanNodeConnection!
  totalNumberOfHouseholds: Int
}

type ProgramNodeConnection {
  pageInfo: PageInfo!
  edges: [ProgramNodeEdge]!
  totalCount: Int
  edgeCount: Int
}

type ProgramNodeEdge {
  node: ProgramNode
  cursor: String!
}

enum ProgramScope {
  FULL
  PARTIAL
  NO_INTEGRATION
}

enum ProgramSector {
  CHILD
  PROTECTION
  EDUCATION
  GENDER
  HEALTH
  HIV_AIDS
  MULTI_PURPOSE
  NUTRITION
  SOCIAL_POLICY
  WASH
}

enum ProgramStatus {
  DRAFT
  ACTIVE
  FINISHED
}

type Query {
  paymentRecord(id: ID!): PaymentRecordNode
  allPaymentRecords(before: String, after: String, first: Int, last: Int, cashPlan: ID, household: ID): PaymentRecordNodeConnection
  paymentDeliveryTypeChoices: [ChoiceObject]
  location(id: ID!): LocationNode
  allLocations(before: String, after: String, first: Int, last: Int, country: String): LocationNodeConnection
  program(id: ID!): ProgramNode
  allPrograms(before: String, after: String, first: Int, last: Int): ProgramNodeConnection
  cashPlan(id: ID!): CashPlanNode
  allCashPlans(before: String, after: String, first: Int, last: Int, program: ID): CashPlanNodeConnection
  programStatusChoices: [ChoiceObject]
  programFrequencyOfPaymentsChoices: [ChoiceObject]
  programSectorChoices: [ChoiceObject]
  programScopeChoices: [ChoiceObject]
  cashPlanStatusChoices: [ChoiceObject]
  targetPopulation(id: ID!): TargetPopulationNode
  allTargetPopulation(before: String, after: String, first: Int, last: Int): TargetPopulationNodeConnection
  household(id: ID!): HouseholdNode
  allHouseholds(before: String, after: String, first: Int, last: Int): HouseholdNodeConnection
  registrationDataImport(id: ID!): RegistrationDataImportNode
  allRegistrationDataImports(before: String, after: String, first: Int, last: Int): RegistrationDataImportNodeConnection
  me: UserObjectType
  _debug: DjangoDebug
}

enum RegistrationDataImportDataSource {
  XLS
  A_3RD_PARTY
  XML
  OTHER
}

type RegistrationDataImportNode implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  status: RegistrationDataImportStatus!
  importDate: DateTime!
  importedBy: UserObjectType!
  dataSource: RegistrationDataImportDataSource!
  numberOfIndividuals: Int!
  numberOfHouseholds: Int!
  households(before: String, after: String, first: Int, last: Int): HouseholdNodeConnection!
}

type RegistrationDataImportNodeConnection {
  pageInfo: PageInfo!
  edges: [RegistrationDataImportNodeEdge]!
  totalCount: Int
  edgeCount: Int
}

type RegistrationDataImportNodeEdge {
  node: RegistrationDataImportNode
  cursor: String!
}

enum RegistrationDataImportStatus {
  IN_PROGRESS
  DONE
}

type TargetPopulationNode implements Node {
  id: ID!
  name: String!
  createdAt: DateTime!
  createdBy: UserObjectType
  rules: JSONString!
  households(before: String, after: String, first: Int, last: Int): HouseholdNodeConnection!
  cashPlans(before: String, after: String, first: Int, last: Int, program: ID): CashPlanNodeConnection!
}

type TargetPopulationNodeConnection {
  pageInfo: PageInfo!
  edges: [TargetPopulationNodeEdge]!
  totalCount: Int
  edgeCount: Int
}

type TargetPopulationNodeEdge {
  node: TargetPopulationNode
  cursor: String!
}

scalar UUID

type UpdateCashPlan {
  cashPlan: CashPlanNode
}

input UpdateCashPlanInput {
  id: String!
  programId: String
  name: String
  startDate: DateTime
  endDate: DateTime
  disbursementDate: DateTime
  numberOfHouseholds: Int
  coverageDuration: Int
  coverageUnits: String
  targetPopulationId: String
  cashAssistId: String
  distributionModality: String
  fsp: String
  status: String
  currency: String
  totalEntitledQuantity: Decimal
  totalDeliveredQuantity: Decimal
  totalUndeliveredQuantity: Decimal
  dispersionDate: Date
}

type UpdateHousehold {
  household: HouseholdNode
}

input UpdateHouseholdInput {
  id: String!
  householdCaId: String
  consent: String
  residenceStatus: String
  nationality: String
  familySize: Int
  address: String
  locationId: String
  registrationDataImportId: String
}

type UpdateLocation {
  location: LocationNode
}

input UpdateLocationInput {
  id: String!
  name: String
  country: String
}

type UpdateProgram {
  program: ProgramNode
}

input UpdateProgramInput {
  id: String!
  name: String
  status: String
  startDate: DateTime
  endDate: DateTime
  description: String
  programCaId: String
  locationId: String
  budget: Float
  frequencyOfPayments: String
  sector: String
  scope: String
  cashPlus: Boolean
  populationGoal: Int
}

type UpdateRegistrationDataImport {
  registrationDataImport: RegistrationDataImportNode
}

input UpdateRegistrationDataImportInput {
  id: String!
  name: String
  status: String
  importDate: DateTime
  importedById: String
  dataSource: String
  numberOfIndividuals: Int
  numberOfHouseholds: Int
}

type UserObjectType {
  lastLogin: DateTime
  isSuperuser: Boolean!
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  isStaff: Boolean!
  isActive: Boolean!
  dateJoined: DateTime!
  id: UUID!
  registrationDataImports(before: String, after: String, first: Int, last: Int): RegistrationDataImportNodeConnection!
  cashPlans(before: String, after: String, first: Int, last: Int, program: ID): CashPlanNodeConnection!
  targetPopulations(before: String, after: String, first: Int, last: Int): TargetPopulationNodeConnection!
}
