name: CI

on:
  push:
    branches:
    - gha

jobs:
  build_and_push_dev:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Checkout code
        uses: actions/checkout@v2
      - name: DockerHub login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push dev
        run: |
          docker buildx create --use
          docker buildx build \
            --cache-from ${{ vars.DOCKERHUB_ORGANIZATION }}/hope:cache-core-${{ github.sha }}-dev \
            --cache-from ${{ vars.DOCKERHUB_ORGANIZATION }}/hope:cache-core-latest-dev \
            --cache-to ${{ vars.DOCKERHUB_ORGANIZATION }}/hope:cache-core-${{ github.sha }}-dev \
            --cache-to ${{ vars.DOCKERHUB_ORGANIZATION }}/hope:cache-core-latest-dev \
            -t ${{ vars.DOCKERHUB_ORGANIZATION }}/hope:core-${{ github.sha }}-dev \
            -t ${{ vars.DOCKERHUB_ORGANIZATION }}/hope:core-latest-dev \
            -f ./docker/Dockerfile \
            --target dev \
            --push \
            ./

  isort:
    runs-on: ubuntu-latest
    needs: [build_and_push_dev]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: DockerHub login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Check
        run: |
          docker pull ${{ vars.DOCKERHUB_ORGANIZATION }}/hope:core-${{ github.sha }}-dev
          docker run --rm -i \
            ${{ vars.DOCKERHUB_ORGANIZATION }}/hope:core-${{ github.sha }}-dev \
            isort . --check-only

  black:
    runs-on: ubuntu-latest
    needs: [build_and_push_dev]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: DockerHub login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Check
        run: |
          docker run --rm -i \
            ${{ vars.DOCKERHUB_ORGANIZATION }}/hope:core-${{ github.sha }}-dev \
            black . --check

  flake8:
    runs-on: ubuntu-latest
    needs: [build_and_push_dev]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: DockerHub login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Check
        run: |
          docker run --rm -i \
            ${{ vars.DOCKERHUB_ORGANIZATION }}/hope:core-${{ github.sha }}-dev \
            flake8 .

  mypy:
    runs-on: ubuntu-latest
    needs: [build_and_push_dev]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: DockerHub login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Check
        run: |
          docker run --rm -i \
            ${{ vars.DOCKERHUB_ORGANIZATION }}/hope:core-${{ github.sha }}-dev \
            mypy .

  build_and_push_dist:
    needs: [isort, black, flake8, mypy]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Checkout code
        uses: actions/checkout@v2
      - name: DockerHub login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push dist
        run: |
          docker buildx create --use
          docker buildx build \
            --cache-from ${{ vars.DOCKERHUB_ORGANIZATION }}/hope:cache-core-${{ github.sha }}-dev \
            --cache-from ${{ vars.DOCKERHUB_ORGANIZATION }}/hope:cache-core-latest-dev \
            --cache-from ${{ vars.DOCKERHUB_ORGANIZATION }}/hope:cache-core-${{ github.sha }}-dist \
            --cache-from ${{ vars.DOCKERHUB_ORGANIZATION }}/hope:cache-core-latest-dist \
            --cache-to ${{ vars.DOCKERHUB_ORGANIZATION }}/hope:cache-core-${{ github.sha }}-dist \
            --cache-to ${{ vars.DOCKERHUB_ORGANIZATION }}/hope:cache-core-latest-dist \
            -t ${{ vars.DOCKERHUB_ORGANIZATION }}/hope:core-${{ github.sha }}-dist \
            -t ${{ vars.DOCKERHUB_ORGANIZATION }}/hope:core-latest-dist \
            -f ./docker/Dockerfile \
            --target dist \
            --push \
            ./

  unit_tests:
    runs-on: ubuntu-latest
    needs: [build_and_push_dev]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: DockerHub login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Unit tests
        run: |
          backend_image=${{ vars.DOCKERHUB_ORGANIZATION }}/hope:core-${{ github.sha }}-dev docker compose \
            -f ./deployment/docker-compose.tst.yml \
            run backend ./dev.sh test

  e2e_tests:
    runs-on: ubuntu-latest
    needs: [build_and_push_dist, build_and_push_dev]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: DockerHub login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: E2E tests
        run: |
          dist_backend_image=${{ vars.DOCKERHUB_ORGANIZATION }}/hope:core-${{ github.sha }}-dist dev_backend_image=${{ vars.DOCKERHUB_ORGANIZATION }}/hope:core-${{ github.sha }}-dev docker compose \
            -f ./deployment/docker-compose.selenium.yml \
            run selenium

  trivy:
    runs-on: ubuntu-latest
    needs: [build_and_push_dist]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: DockerHub login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Trivy
        continue-on-error: true
        run: |
          docker run -v /var/run/docker.sock:/var/run/docker.sock -e TRIVY_EXIT_CODE=2 -e TRIVY_SEVERITY=HIGH,CRITICAL aquasec/trivy:latest image ${{ vars.DOCKERHUB_ORGANIZATION }}/hope:core-${{ github.sha }}-dist