# Generated by Django 3.2.15 on 2023-01-18 09:58

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_fsm
import hct_mis_api.apps.payment_module.models
import model_utils.fields
import multiselectfield.db.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0059_migration'),
        ('program', '0036_migration'),
        ('targeting', '0036_migration'),
        ('household', '0135_migration'),
        ('steficon', '0016_migration'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FinancialServiceProvider',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('vision_vendor_number', models.CharField(max_length=100, unique=True)),
                ('distribution_limit', models.DecimalField(blank=True, db_index=True, decimal_places=2, help_text='The maximum amount of money in USD that can be distributed or unlimited if null', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('communication_channel', models.CharField(choices=[('API', 'API'), ('SFTP', 'SFTP'), ('XLSX', 'XLSX')], db_index=True, max_length=6)),
                ('data_transfer_configuration', models.JSONField(blank=True, default=dict, help_text='JSON configuration for the data transfer mechanism', null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_financial_service_providers', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PaymentInstruction',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('delivery_mechanism', models.CharField(choices=[('Cardless cash withdrawal', 'Cardless cash withdrawal'), ('Cash', 'Cash'), ('Cash by FSP', 'Cash by FSP'), ('Cheque', 'Cheque'), ('Deposit to Card', 'Deposit to Card'), ('In Kind', 'In Kind'), ('Mobile Money', 'Mobile Money'), ('Other', 'Other'), ('Pre-paid card', 'Pre-paid card'), ('Referral', 'Referral'), ('Transfer', 'Transfer'), ('Transfer to Account', 'Transfer to Account'), ('Voucher', 'Voucher')], db_index=True, max_length=255, null=True)),
                ('status', django_fsm.FSMField(db_index=True, default='PENDING', max_length=50)),
                ('fsp', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_instructions', to='payment_module.financialserviceprovider')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PaymentInstructionTargetingCriteria',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('targeting.targetingcriteria',),
        ),
        migrations.CreateModel(
            name='PaymentPlanTargetingCriteria',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('targeting.targetingcriteria',),
        ),
        migrations.CreateModel(
            name='PaymentPlan',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('status', django_fsm.FSMField(choices=[('OPEN', 'Open'), ('LOCKED', 'Locked'), ('IN_APPROVAL', 'In Approval'), ('APPROVED', 'Approved'), ('ONGOING', 'Ongoing'), ('RECONCILED', 'Reconciled')], db_index=True, default='OPEN', max_length=50)),
                ('background_action_status', django_fsm.FSMField(blank=True, choices=[('TARGETING_BUILDING', 'Targeting building'), ('STEFICON_RUN', 'Rule Engine Running'), ('STEFICON_ERROR', 'Rule Engine Errored'), ('XLSX_EXPORTING', 'Exporting XLSX file'), ('XLSX_EXPORT_ERROR', 'Export XLSX file Error'), ('XLSX_IMPORT_ERROR', 'Import XLSX file Error'), ('XLSX_IMPORTING_ENTITLEMENTS', 'Importing Entitlements XLSX file'), ('XLSX_IMPORTING_RECONCILIATION', 'Importing Reconciliation XLSX file')], db_index=True, default=None, max_length=50, null=True)),
                ('currency', models.CharField(choices=[('', 'None'), ('AED', 'United Arab Emirates dirham'), ('AFN', 'Afghan afghani'), ('ALL', 'Albanian lek'), ('AMD', 'Armenian dram'), ('ANG', 'Netherlands Antillean guilder'), ('AOA', 'Angolan kwanza'), ('ARS', 'Argentine peso'), ('AUD', 'Australian dollar'), ('AWG', 'Aruban florin'), ('AZN', 'Azerbaijani manat'), ('BAM', 'Bosnia and Herzegovina convertible mark'), ('BBD', 'Barbados dollar'), ('BDT', 'Bangladeshi taka'), ('BGN', 'Bulgarian lev'), ('BHD', 'Bahraini dinar'), ('BIF', 'Burundian franc'), ('BMD', 'Bermudian dollar'), ('BND', 'Brunei dollar'), ('BOB', 'Boliviano'), ('BOV', 'Bolivian Mvdol (funds code)'), ('BRL', 'Brazilian real'), ('BSD', 'Bahamian dollar'), ('BTN', 'Bhutanese ngultrum'), ('BWP', 'Botswana pula'), ('BYN', 'Belarusian ruble'), ('BZD', 'Belize dollar'), ('CAD', 'Canadian dollar'), ('CDF', 'Congolese franc'), ('CHF', 'Swiss franc'), ('CLP', 'Chilean peso'), ('CNY', 'Chinese yuan'), ('COP', 'Colombian peso'), ('CRC', 'Costa Rican colon'), ('CUC', 'Cuban convertible peso'), ('CUP', 'Cuban peso'), ('CVE', 'Cape Verdean escudo'), ('CZK', 'Czech koruna'), ('DJF', 'Djiboutian franc'), ('DKK', 'Danish krone'), ('DOP', 'Dominican peso'), ('DZD', 'Algerian dinar'), ('EGP', 'Egyptian pound'), ('ERN', 'Eritrean nakfa'), ('ETB', 'Ethiopian birr'), ('EUR', 'Euro'), ('FJD', 'Fiji dollar'), ('FKP', 'Falkland Islands pound'), ('GBP', 'Pound sterling'), ('GEL', 'Georgian lari'), ('GHS', 'Ghanaian cedi'), ('GIP', 'Gibraltar pound'), ('GMD', 'Gambian dalasi'), ('GNF', 'Guinean franc'), ('GTQ', 'Guatemalan quetzal'), ('GYD', 'Guyanese dollar'), ('HKD', 'Hong Kong dollar'), ('HNL', 'Honduran lempira'), ('HRK', 'Croatian kuna'), ('HTG', 'Haitian gourde'), ('HUF', 'Hungarian forint'), ('IDR', 'Indonesian rupiah'), ('ILS', 'Israeli new shekel'), ('INR', 'Indian rupee'), ('IQD', 'Iraqi dinar'), ('IRR', 'Iranian rial'), ('ISK', 'Icelandic króna'), ('JMD', 'Jamaican dollar'), ('JOD', 'Jordanian dinar'), ('JPY', 'Japanese yen'), ('KES', 'Kenyan shilling'), ('KGS', 'Kyrgyzstani som'), ('KHR', 'Cambodian riel'), ('KMF', 'Comoro franc'), ('KPW', 'North Korean won'), ('KRW', 'South Korean won'), ('KWD', 'Kuwaiti dinar'), ('KYD', 'Cayman Islands dollar'), ('KZT', 'Kazakhstani tenge'), ('LAK', 'Lao kip'), ('LBP', 'Lebanese pound'), ('LKR', 'Sri Lankan rupee'), ('LRD', 'Liberian dollar'), ('LSL', 'Lesotho loti'), ('LYD', 'Libyan dinar'), ('MAD', 'Moroccan dirham'), ('MDL', 'Moldovan leu'), ('MGA', 'Malagasy ariary'), ('MKD', 'Macedonian denar'), ('MMK', 'Myanmar kyat'), ('MNT', 'Mongolian tögrög'), ('MOP', 'Macanese pataca'), ('MRU', 'Mauritanian ouguiya'), ('MUR', 'Mauritian rupee'), ('MVR', 'Maldivian rufiyaa'), ('MWK', 'Malawian kwacha'), ('MXN', 'Mexican peso'), ('MYR', 'Malaysian ringgit'), ('MZN', 'Mozambican metical'), ('NAD', 'Namibian dollar'), ('NGN', 'Nigerian naira'), ('NIO', 'Nicaraguan córdoba'), ('NOK', 'Norwegian krone'), ('NPR', 'Nepalese rupee'), ('NZD', 'New Zealand dollar'), ('OMR', 'Omani rial'), ('PAB', 'Panamanian balboa'), ('PEN', 'Peruvian sol'), ('PGK', 'Papua New Guinean kina'), ('PHP', 'Philippine peso'), ('PKR', 'Pakistani rupee'), ('PLN', 'Polish złoty'), ('PYG', 'Paraguayan guaraní'), ('QAR', 'Qatari riyal'), ('RON', 'Romanian leu'), ('RSD', 'Serbian dinar'), ('RUB', 'Russian ruble'), ('RWF', 'Rwandan franc'), ('SAR', 'Saudi riyal'), ('SBD', 'Solomon Islands dollar'), ('SCR', 'Seychelles rupee'), ('SDG', 'Sudanese pound'), ('SEK', 'Swedish krona/kronor'), ('SGD', 'Singapore dollar'), ('SHP', 'Saint Helena pound'), ('SLL', 'Sierra Leonean leone'), ('SOS', 'Somali shilling'), ('SRD', 'Surinamese dollar'), ('SSP', 'South Sudanese pound'), ('STN', 'São Tomé and Príncipe dobra'), ('SVC', 'Salvadoran colón'), ('SYP', 'Syrian pound'), ('SZL', 'Swazi lilangeni'), ('THB', 'Thai baht'), ('TJS', 'Tajikistani somoni'), ('TMT', 'Turkmenistan manat'), ('TND', 'Tunisian dinar'), ('TOP', 'Tongan paʻanga'), ('TRY', 'Turkish lira'), ('TTD', 'Trinidad and Tobago dollar'), ('TWD', 'New Taiwan dollar'), ('TZS', 'Tanzanian shilling'), ('UAH', 'Ukrainian hryvnia'), ('UGX', 'Ugandan shilling'), ('USD', 'United States dollar'), ('UYU', 'Uruguayan peso'), ('UYW', 'Unidad previsional[14]'), ('UZS', 'Uzbekistan som'), ('VES', 'Venezuelan bolívar soberano'), ('VND', 'Vietnamese đồng'), ('VUV', 'Vanuatu vatu'), ('WST', 'Samoan tala'), ('XAF', 'CFA franc BEAC'), ('XAG', 'Silver (one troy ounce)'), ('XAU', 'Gold (one troy ounce)'), ('XCD', 'East Caribbean dollar'), ('XOF', 'CFA franc BCEAO'), ('XPF', 'CFP franc (franc Pacifique)'), ('YER', 'Yemeni rial'), ('ZAR', 'South African rand'), ('ZMW', 'Zambian kwacha'), ('ZWL', 'Zimbabwean dollar')], max_length=4)),
                ('dispersion_start_date', models.DateField()),
                ('dispersion_end_date', models.DateField()),
                ('female_children_count', models.PositiveSmallIntegerField(default=0)),
                ('male_children_count', models.PositiveSmallIntegerField(default=0)),
                ('female_adults_count', models.PositiveSmallIntegerField(default=0)),
                ('male_adults_count', models.PositiveSmallIntegerField(default=0)),
                ('total_households_count', models.PositiveSmallIntegerField(default=0)),
                ('total_individuals_count', models.PositiveSmallIntegerField(default=0)),
                ('maximum_entitlement_quantity', models.DecimalField(decimal_places=2, default='0.00', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('minimum_entitlement_quantity', models.DecimalField(decimal_places=2, default='0.00', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('avg_entitlement_quantity', models.DecimalField(decimal_places=2, default='0.00', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('median_entitlement_quantity', models.DecimalField(decimal_places=2, default='0.00', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('maximum_entitlement_quantity_usd', models.DecimalField(decimal_places=2, default='0.00', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('minimum_entitlement_quantity_usd', models.DecimalField(decimal_places=2, default='0.00', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('avg_entitlement_quantity_usd', models.DecimalField(decimal_places=2, default='0.00', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('median_entitlement_quantity_usd', models.DecimalField(decimal_places=2, default='0.00', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('total_entitled_quantity', models.DecimalField(decimal_places=2, default='0.00', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('total_delivered_quantity', models.DecimalField(decimal_places=2, default='0.00', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('total_entitled_quantity_usd', models.DecimalField(decimal_places=2, default='0.00', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('total_delivered_quantity_usd', models.DecimalField(decimal_places=2, default='0.00', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('imported_file_date', models.DateTimeField(blank=True, null=True)),
                ('steficon_applied_date', models.DateTimeField(blank=True, null=True)),
                ('excluded_ids', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_payment_plans', to=settings.AUTH_USER_MODEL)),
                ('export_file', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.filetemp')),
                ('imported_file', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.filetemp')),
                ('steficon_rule_commit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='payment_plans', to='steficon.rulecommit')),
                ('target_population', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_plans', to='targeting.targetpopulation')),
                ('targeting_criteria', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payment_plan', to='payment_module.paymentplantargetingcriteria')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PaymentList',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('count', models.PositiveIntegerField(default=0)),
                ('payment_instruction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_lists', to='payment_module.paymentinstruction')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='paymentinstruction',
            name='payment_plan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_instructions', to='payment_module.paymentplan'),
        ),
        migrations.AddField(
            model_name='paymentinstruction',
            name='targeting_criteria',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payment_instruction', to='payment_module.paymentinstructiontargetingcriteria'),
        ),
        migrations.CreateModel(
            name='PaymentCycle',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('female_children_count', models.PositiveSmallIntegerField(default=0)),
                ('male_children_count', models.PositiveSmallIntegerField(default=0)),
                ('female_adults_count', models.PositiveSmallIntegerField(default=0)),
                ('male_adults_count', models.PositiveSmallIntegerField(default=0)),
                ('total_households_count', models.PositiveSmallIntegerField(default=0)),
                ('total_individuals_count', models.PositiveSmallIntegerField(default=0)),
                ('status', django_fsm.FSMField(choices=[('NEW', 'New')], db_index=True, default='NEW', max_length=50)),
                ('total_entitled_quantity', models.DecimalField(decimal_places=2, default='0.00', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('total_entitled_quantity_usd', models.DecimalField(decimal_places=2, default='0.00', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('total_delivered_quantity', models.DecimalField(decimal_places=2, default='0.00', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('total_delivered_quantity_usd', models.DecimalField(decimal_places=2, default='0.00', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('program', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payment_cycles', to='program.program')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('unicef_id', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('entitlement_type', models.CharField(choices=[('RULE_ENGINE', 'Rule Engine'), ('XLSX', 'XLSX')], db_index=True, max_length=50)),
                ('entitlement_quantity', models.DecimalField(decimal_places=2, default='0.00', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('entitlement_quantity_usd', models.DecimalField(decimal_places=2, default='0.00', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('delivered_quantity', models.DecimalField(decimal_places=2, default='0.00', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('delivered_quantity_usd', models.DecimalField(decimal_places=2, default='0.00', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('household', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='household.household')),
                ('payment_instruction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='payment_module.paymentinstruction')),
                ('payment_list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='payment_module.paymentlist')),
                ('payment_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='payment_module.paymentplan')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FinancialServiceProviderXlsxTemplate',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('name', models.CharField(max_length=120, verbose_name='Name')),
                ('columns', multiselectfield.db.fields.MultiSelectField(choices=[('payment_id', 'Payment ID'), ('household_id', 'Household ID'), ('admin_leve_2', 'Admin Level 2'), ('collector_name', 'Collector Name'), ('payment_channel', 'Payment Channel (Delivery mechanism)'), ('fsp_name', 'FSP Name'), ('entitlement_quantity', 'Entitlement Quantity'), ('delivered_quantity', 'Delivered Quantity'), ('tbd', 'TBD')], default=['payment_id', 'household_id', 'admin_leve_2', 'collector_name', 'payment_channel', 'fsp_name', 'entitlement_quantity', 'delivered_quantity'], help_text='Select the columns to include in the report', max_length=120, verbose_name='Columns')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_financial_service_provider_xlsx_templates', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FinancialServiceProviderXlsxReport',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('file', models.FileField(blank=True, editable=False, null=True, upload_to='')),
                ('status', models.IntegerField(blank=True, choices=[(1, 'Processing'), (2, 'Generated'), (3, 'Failed')], db_index=True, editable=False, null=True)),
                ('financial_service_provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='payment_module.financialserviceprovider', verbose_name='Financial Service Provider')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='financialserviceprovider',
            name='fsp_xlsx_template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='payment_module.financialserviceproviderxlsxtemplate', verbose_name='XLSX Template'),
        ),
        migrations.CreateModel(
            name='AuthorizationProcess',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('payment_instruction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authorization_processes', to='payment_module.paymentinstruction')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Authorization',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('type', models.CharField(choices=[('AUTHORIZATION', 'Authorization'), ('REJECT', 'Reject')], default='REJECT', max_length=50, verbose_name='Approval type')),
                ('comment', models.CharField(blank=True, max_length=500, null=True)),
                ('authorization_process', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authorizations', to='payment_module.authorizationprocess')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FspDeliveryMechanism',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('delivery_mechanism', models.CharField(choices=[('Cardless cash withdrawal', 'Cardless cash withdrawal'), ('Cash', 'Cash'), ('Cash by FSP', 'Cash by FSP'), ('Cheque', 'Cheque'), ('Deposit to Card', 'Deposit to Card'), ('In Kind', 'In Kind'), ('Mobile Money', 'Mobile Money'), ('Other', 'Other'), ('Pre-paid card', 'Pre-paid card'), ('Referral', 'Referral'), ('Transfer', 'Transfer'), ('Transfer to Account', 'Transfer to Account'), ('Voucher', 'Voucher')], db_index=True, max_length=255, null=True)),
                ('global_core_fields', hct_mis_api.apps.payment_module.models.ChoiceArrayFieldDM(base_field=models.CharField(blank=True, choices=[('age', 'Age (calculated)'), ('residence_status', 'Residence status'), ('consent', 'Do you consent?'), ('consent_sign', 'Do you consent?'), ('country_origin', 'Country of Origin'), ('country', 'Country of registration'), ('address', 'Address'), ('admin1', 'Household resides in which ${admin1_h_c}?'), ('admin2', 'Household resides in which ${admin2_h_c}?'), ('geopoint', 'Geolocation'), ('unhcr_id', 'UNHCR Case ID'), ('returnee', 'Is this a returnee household?'), ('size', 'What is the household size?'), ('fchild_hoh', 'Child is female and head of household'), ('child_hoh', 'Child is head of household'), ('relationship', 'Relationship to head of household'), ('full_name', 'Full name'), ('given_name', 'Given name'), ('middle_name', 'Middle name(s)'), ('family_name', 'Family name'), ('sex', 'Gender'), ('birth_date', 'Birth date'), ('estimated_birth_date', 'Estimated birth date?'), ('photo', "Individual's photo"), ('marital_status', 'Marital status'), ('phone_no', 'Phone number'), ('who_answers_phone', 'Who answers this phone?'), ('phone_no_alternative', 'Alternative phone number'), ('who_answers_alt_phone', 'Who answers this (alt) phone?'), ('registration_method', 'Method of collection (e.g. HH survey, Community, etc.)'), ('collect_individual_data', "Will you be collecting all member Individuals' data?"), ('currency', 'Which currency will be used for financial questions?'), ('birth_certificate_no', 'Birth certificate number'), ('birth_certificate_issuer', 'Issuing country of birth certificate'), ('birth_certificate_photo', 'Birth certificate photo'), ('drivers_license_no', "Driver's license number"), ('drivers_license_issuer', "Issuing country of driver's license"), ('drivers_license_photo', "Driver's license photo"), ('electoral_card_no', 'Electoral card number'), ('electoral_card_issuer', 'Issuing country of electoral card'), ('electoral_card_photo', 'Electoral card photo'), ('unhcr_id_no', 'UNHCR ID number'), ('unhcr_id_issuer', 'Issuing entity of UNHCR ID'), ('unhcr_id_photo', 'UNHCR ID photo'), ('national_passport', 'National passport number'), ('national_passport_issuer', 'Issuing country of national passport'), ('national_passport_photo', 'National passport photo'), ('national_id_no', 'National ID number'), ('national_id_issuer', 'Issuing country of national ID'), ('national_id_photo', 'National ID photo'), ('scope_id_no', 'WFP Scope ID number'), ('scope_id_issuer', 'Issuing entity of SCOPE ID'), ('scope_id_photo', 'WFP Scope ID photo'), ('other_id_type', 'If other type of ID, specify the type'), ('other_id_no', 'Other ID number'), ('other_id_issuer', 'Issuing country of other ID'), ('other_id_photo', 'ID photo'), ('female_age_group_0_5_count', 'Females Age 0 - 5'), ('female_age_group_6_11_count', 'Females Age 6 - 11'), ('female_age_group_12_17_count', 'Females Age 12 - 17'), ('female_age_group_18_59_count', 'Females Age 18 - 59'), ('female_age_group_60_count', 'Females Age 60 +'), ('pregnant_count', 'Pregnant count'), ('male_age_group_0_5_count', 'Males Age 0 - 5'), ('male_age_group_6_11_count', 'Males Age 6 - 11'), ('male_age_group_12_17_count', 'Males Age 12 - 17'), ('male_age_group_18_59_count', 'Males Age 18 - 59'), ('male_age_group_60_count', 'Males Age 60 +'), ('female_age_group_0_5_disabled_count', 'Females age 0 - 5 with disability'), ('female_age_group_6_11_disabled_count', 'Females age 6 - 11 with disability'), ('female_age_group_12_17_disabled_count', 'Females age 12 - 17 with disability'), ('female_age_group_18_59_disabled_count', 'Females Age 18 - 59 with disability'), ('female_age_group_60_disabled_count', 'Female members with Disability age 60 +'), ('male_age_group_0_5_disabled_count', 'Males age 0 - 5 with disability'), ('male_age_group_6_11_disabled_count', 'Males age 6 - 11 with disability'), ('male_age_group_12_17_disabled_count', 'Males age 12 - 17 with disability'), ('male_age_group_18_59_disabled_count', 'Males Age 18 - 59 with disability'), ('male_age_group_60_disabled_count', 'Male members with Disability age 60 +'), ('pregnant', 'Is the individual pregnant?'), ('work_status', 'Does the individual have paid employment in the current month?'), ('observed_disability', 'Does the individual have disability?'), ('seeing_disability', 'If the individual has difficulty seeing, what is the severity?'), ('hearing_disability', 'If the individual has difficulty hearing, what is the severity?'), ('physical_disability', 'If the individual has difficulty walking or climbing steps, what is the severity?'), ('memory_disability', 'If the individual has difficulty remembering or concentrating, what is the severity?'), ('selfcare_disability', 'Do you have difficulty (with self-care such as) washing all over or dressing'), ('comms_disability', 'If the individual has difficulty communicating, what is the severity?'), ('fchild_hoh', 'Female child headed household'), ('child_hoh', 'Child headed household'), ('village', 'Village'), ('deviceid', 'Device ID'), ('name_enumerator', 'Name of the enumerator'), ('org_enumerator', 'Organization of the enumerator'), ('consent_sharing', 'Which organizations may we share your information with?'), ('org_name_enumerator', 'Name of partner organization'), ('disability', 'Individual is disabled?')], max_length=255), default=list, size=None)),
                ('financial_service_provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fsp_delivery_mechanisms', to='payment_module.financialserviceprovider')),
            ],
            options={
                'unique_together': {('financial_service_provider', 'delivery_mechanism')},
            },
        ),
    ]
