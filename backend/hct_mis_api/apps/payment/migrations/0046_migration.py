# Generated by Django 3.2.13 on 2022-07-11 09:00

from decimal import Decimal
import django.core.validators
from django.db import migrations, models
from django.conf import settings
import django.db.models.deletion
import model_utils.fields
import uuid

import django_fsm


def populate_existing_payment_record_usd_amount(apps, schema_editor):
    PaymentRecord = apps.get_model("payment", "PaymentRecord")
    all_payment_records = PaymentRecord.objects.all()

    for payment_record in all_payment_records:
        exchange_rate = payment_record.cash_plan.exchange_rate if payment_record.cash_plan else None
        if exchange_rate:
            payment_record.entitlement_quantity_usd = Decimal(
                payment_record.entitlement_quantity * exchange_rate
            ).quantize(Decimal(".01"))

    PaymentRecord.objects.bulk_update(all_payment_records, ["entitlement_quantity_usd"])


def populate_existing_cash_plan_usd_amount(apps, schema_editor):
    CashPlan = apps.get_model("payment", "CashPlan")
    all_cash_plans = CashPlan.objects.all()

    for cash_plan in all_cash_plans:
        if cash_plan.exchange_rate:
            cash_plan.total_delivered_quantity_usd = Decimal(
                cash_plan.total_delivered_quantity * cash_plan.exchange_rate
            ).quantize(Decimal(".01"))
            cash_plan.total_undelivered_quantity_usd = Decimal(
                cash_plan.total_undelivered_quantity * cash_plan.exchange_rate
            ).quantize(Decimal(".01"))
            cash_plan.total_entitled_quantity_usd = Decimal(
                cash_plan.total_entitled_quantity * cash_plan.exchange_rate
            ).quantize(Decimal(".01"))
            cash_plan.total_entitled_quantity_revised_usd = Decimal(
                cash_plan.total_entitled_quantity_revised * cash_plan.exchange_rate
            ).quantize(Decimal(".01"))

    CashPlan.objects.bulk_update(
        all_cash_plans,
        [
            "total_delivered_quantity_usd",
            "total_undelivered_quantity_usd",
            "total_entitled_quantity_usd",
            "total_entitled_quantity_revised_usd",
        ],
    )


class Migration(migrations.Migration):

    dependencies = [
        ("program", "0033_migration"),
        ("core", "0048_migration"),
        ("household", "0109_migration"),
        ("payment", "0045_migration"),
    ]

    operations = [
        migrations.AddField(
            model_name="paymentrecord",
            name="entitlement_quantity_usd",
            field=models.DecimalField(
                decimal_places=2,
                max_digits=12,
                null=True,
                validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
            ),
        ),
        migrations.AlterField(
            model_name="paymentrecord",
            name="head_of_household",
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="household.individual"),
        ),
        migrations.AlterField(
            model_name="paymentrecord",
            name="household",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="household.household"),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.CreateModel(
                    name="CashPlan",
                    fields=[
                        (
                            "id",
                            model_utils.fields.UUIDField(
                                default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                            ),
                        ),
                        ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                        ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                        ("ca_id", models.CharField(db_index=True, max_length=255, null=True)),
                        ("ca_hash_id", models.UUIDField(null=True, unique=True)),
                        (
                            "status",
                            models.CharField(
                                choices=[
                                    ("Distribution Completed", "Distribution Completed"),
                                    ("Distribution Completed with Errors", "Distribution Completed with Errors"),
                                    ("Transaction Completed", "Transaction Completed"),
                                    ("Transaction Completed with Errors", "Transaction Completed with Errors"),
                                ],
                                db_index=True,
                                max_length=255,
                            ),
                        ),
                        ("status_date", models.DateTimeField()),
                        ("name", models.CharField(db_index=True, max_length=255)),
                        ("distribution_level", models.CharField(max_length=255)),
                        ("start_date", models.DateTimeField(db_index=True)),
                        ("end_date", models.DateTimeField(db_index=True)),
                        ("dispersion_date", models.DateTimeField()),
                        ("coverage_duration", models.PositiveIntegerField()),
                        ("coverage_unit", models.CharField(max_length=255)),
                        ("comments", models.CharField(max_length=255, null=True)),
                        (
                            "delivery_type",
                            models.CharField(
                                choices=[
                                    ("Cardless cash withdrawal", "Cardless cash withdrawal"),
                                    ("Cash", "Cash"),
                                    ("Cash by FSP", "Cash by FSP"),
                                    ("Cheque", "Cheque"),
                                    ("Deposit to Card", "Deposit to Card"),
                                    ("In Kind", "In Kind"),
                                    ("Mobile Money", "Mobile Money"),
                                    ("Other", "Other"),
                                    ("Pre-paid card", "Pre-paid card"),
                                    ("Referral", "Referral"),
                                    ("Transfer", "Transfer"),
                                    ("Transfer to Account", "Transfer to Account"),
                                    ("Voucher", "Voucher"),
                                ],
                                db_index=True,
                                max_length=24,
                                null=True,
                            ),
                        ),
                        ("assistance_measurement", models.CharField(db_index=True, max_length=255)),
                        ("assistance_through", models.CharField(db_index=True, max_length=255)),
                        ("vision_id", models.CharField(max_length=255, null=True)),
                        ("funds_commitment", models.CharField(max_length=255, null=True)),
                        ("exchange_rate", models.DecimalField(blank=True, decimal_places=8, max_digits=12, null=True)),
                        ("down_payment", models.CharField(max_length=255, null=True)),
                        ("validation_alerts_count", models.IntegerField()),
                        ("total_persons_covered", models.IntegerField(db_index=True)),
                        ("total_persons_covered_revised", models.IntegerField(db_index=True)),
                        (
                            "total_entitled_quantity",
                            models.DecimalField(
                                db_index=True,
                                decimal_places=2,
                                max_digits=12,
                                null=True,
                                validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                            ),
                        ),
                        (
                            "total_entitled_quantity_revised",
                            models.DecimalField(
                                db_index=True,
                                decimal_places=2,
                                max_digits=12,
                                null=True,
                                validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                            ),
                        ),
                        (
                            "total_delivered_quantity",
                            models.DecimalField(
                                db_index=True,
                                decimal_places=2,
                                max_digits=12,
                                null=True,
                                validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                            ),
                        ),
                        (
                            "total_undelivered_quantity",
                            models.DecimalField(
                                db_index=True,
                                decimal_places=2,
                                max_digits=12,
                                null=True,
                                validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                            ),
                        ),
                        (
                            "business_area",
                            models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.businessarea"),
                        ),
                        (
                            "program",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="cash_plans",
                                to="program.program",
                            ),
                        ),
                        (
                            "service_provider",
                            models.ForeignKey(
                                null=True,
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="cash_plans",
                                to="payment.serviceprovider",
                            ),
                        ),
                    ],
                    options={
                        "verbose_name": "Cash Plan",
                        "ordering": ["created_at"],
                    },
                ),
                migrations.AlterField(
                    model_name="cashplanpaymentverification",
                    name="cash_plan",
                    field=models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="verifications", to="payment.cashplan"
                    ),
                ),
                migrations.AlterField(
                    model_name="cashplanpaymentverificationsummary",
                    name="cash_plan",
                    field=models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cash_plan_payment_verification_summary",
                        to="payment.cashplan",
                    ),
                ),
                migrations.AlterField(
                    model_name="paymentrecord",
                    name="cash_plan",
                    field=models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment_records",
                        to="payment.cashplan",
                    ),
                ),
            ],
            database_operations=[],
        ),
        migrations.CreateModel(
            name="PaymentPlan",
            fields=[
                ("is_removed", models.BooleanField(default=False)),
                (
                    "id",
                    model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("status_date", models.DateTimeField()),
                ("name", models.CharField(db_index=True, max_length=255)),
                ("start_date", models.DateTimeField(db_index=True)),
                ("end_date", models.DateTimeField(db_index=True)),
                ("exchange_rate", models.DecimalField(blank=True, decimal_places=8, max_digits=12, null=True)),
                (
                    "total_entitled_quantity",
                    models.DecimalField(
                        db_index=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "total_entitled_quantity_usd",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "total_entitled_quantity_revised",
                    models.DecimalField(
                        db_index=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "total_entitled_quantity_revised_usd",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "total_delivered_quantity",
                    models.DecimalField(
                        db_index=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "total_delivered_quantity_usd",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "total_undelivered_quantity",
                    models.DecimalField(
                        db_index=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "total_undelivered_quantity_usd",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                ("status", django_fsm.FSMField(db_index=True, default="OPEN", max_length=50)),
                (
                    "unicef_id",
                    django.contrib.postgres.fields.citext.CICharField(blank=True, db_index=True, max_length=250),
                ),
                ("currency", models.CharField(max_length=4)),
                ("dispersion_start_date", models.DateTimeField()),
                ("dispersion_end_date", models.DateTimeField()),
                ("female_children_count", models.PositiveSmallIntegerField(default=0)),
                ("male_children_count", models.PositiveSmallIntegerField(default=0)),
                ("female_adults_count", models.PositiveSmallIntegerField(default=0)),
                ("male_adult_count", models.PositiveSmallIntegerField(default=0)),
                ("total_households_count", models.PositiveSmallIntegerField(default=0)),
                ("total_individuals_count", models.PositiveSmallIntegerField(default=0)),
                (
                    "business_area",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.businessarea"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_payment_plans",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("program", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="program.program")),
                (
                    "target_population",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment_plans",
                        to="targeting.targetpopulation",
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment Plan",
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="Payment",
            fields=[
                ("is_removed", models.BooleanField(default=False)),
                (
                    "id",
                    model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("status_date", models.DateTimeField()),
                ("name", models.CharField(db_index=True, max_length=255)),
                ("start_date", models.DateTimeField(db_index=True)),
                ("end_date", models.DateTimeField(db_index=True)),
                ("exchange_rate", models.DecimalField(blank=True, decimal_places=8, max_digits=12, null=True)),
                (
                    "total_entitled_quantity",
                    models.DecimalField(
                        db_index=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "total_entitled_quantity_usd",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "total_entitled_quantity_revised",
                    models.DecimalField(
                        db_index=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "total_entitled_quantity_revised_usd",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "total_delivered_quantity",
                    models.DecimalField(
                        db_index=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "total_delivered_quantity_usd",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "total_undelivered_quantity",
                    models.DecimalField(
                        db_index=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "total_undelivered_quantity_usd",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                ("excluded", models.BooleanField(default=False)),
                ("entitlement_date", models.DateTimeField(blank=True, null=True)),
                (
                    "business_area",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.businessarea"),
                ),
                (
                    "payment_plan",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payments",
                        to="payment.paymentplan",
                    ),
                ),
                ("program", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="program.program")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="cashplan",
            name="total_delivered_quantity_usd",
            field=models.DecimalField(
                decimal_places=2,
                max_digits=12,
                null=True,
                validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
            ),
        ),
        migrations.AddField(
            model_name="cashplan",
            name="total_entitled_quantity_revised_usd",
            field=models.DecimalField(
                decimal_places=2,
                max_digits=12,
                null=True,
                validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
            ),
        ),
        migrations.AddField(
            model_name="cashplan",
            name="total_entitled_quantity_usd",
            field=models.DecimalField(
                decimal_places=2,
                max_digits=12,
                null=True,
                validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
            ),
        ),
        migrations.AddField(
            model_name="cashplan",
            name="total_undelivered_quantity_usd",
            field=models.DecimalField(
                decimal_places=2,
                max_digits=12,
                null=True,
                validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
            ),
        ),
        migrations.AlterField(
            model_name="cashplan",
            name="program",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="program.program"),
        ),
        migrations.RunPython(populate_existing_payment_record_usd_amount, migrations.RunPython.noop),
        migrations.RunPython(populate_existing_cash_plan_usd_amount, migrations.RunPython.noop),
    ]
