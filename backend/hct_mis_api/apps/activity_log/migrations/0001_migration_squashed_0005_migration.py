# Generated by Django 3.2.19 on 2023-06-19 10:40

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import abc
from typing import Any, Optional
from django.core.paginator import Paginator
from django.db import transaction

from uuid import UUID

class GetProgramId(abc.ABC):
    obj: Any
    class_name: str
    nested_field: str

    def __init__(self, obj: Any) -> None:
        self.class_name: str = obj.__class__.__name__

        if self.class_name == "GrievanceTicket":
            # TODO: 'programme' removed in next migrations (m2m 'programs')
            self.obj = obj
            self.nested_field = "programme_id"

        elif self.class_name == "PaymentPlan":
            self.obj = obj.get_program
            self.nested_field = "pk"

        elif self.class_name == "CashPlan":
            self.obj = obj
            self.nested_field = "program_id"

        elif self.class_name == "PaymentVerificationPlan":
            self.obj = obj.get_program
            self.nested_field = "pk"

        elif self.class_name == "PaymentVerification":
            self.obj = obj.payment_verification_plan.get_program
            self.nested_field = "pk"

        elif self.class_name == "Program":
            self.obj = obj
            self.nested_field = "pk"

        elif self.class_name == "TargetPopulation":
            self.obj = obj.program
            self.nested_field = "pk"

        elif self.class_name == "RegistrationDataImport":
            self.obj = obj
            self.nested_field = "program_id"

        # TODO: update after changes for Ind and HH collections/representations
        # elif class_name == "Household":
        #     self.obj = obj
        #     self.nested_field = "program_id"
        #
        # elif class_name == "Individual":
        #     self.obj = obj
        #     self.nested_field = "program_id"
        else:
            raise ValueError(f"Can not found 'class_name' and 'nested_field' for class {self.class_name}")

    @property
    def get_id(self) -> Optional["UUID"]:
        return getattr(self.obj, self.nested_field, None)


@transaction.atomic
def activity_log_assign_program(apps, schema_editor) -> None:
    LogEntry = apps.get_model("activity_log", "LogEntry")

    log_qs = LogEntry.objects.all().exclude(programs__isnull=False)

    print(f"Found {log_qs.count()} Logs for assign to program")

    paginator = Paginator(log_qs, 1000)
    number_of_pages = paginator.num_pages

    for page in paginator.page_range:
        print(f"Loading page {page} of {number_of_pages}")

        for log in paginator.page(page).object_list:
            program_id = GetProgramId(log.content_object).get_id
            if program_id:
                log.programs.add(program_id)


class Migration(migrations.Migration):

    replaces = [('activity_log', '0001_migration'), ('activity_log', '0002_migration'), ('activity_log', '0003_migration'), ('activity_log', '0004_migration'), ('activity_log', '0005_migration')]

    dependencies = [
        ('core', '0006_migration'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
        ('program', '0038_migration'),
    ]

    operations = [
        migrations.CreateModel(
            name='LogEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.UUIDField(db_index=True, null=True)),
                ('action', models.CharField(choices=[('CREATE', 'Create'), ('UPDATE', 'Update'), ('DELETE', 'Delete'), ('SOFT_DELETE', 'Soft Delete')], db_index=True, max_length=100, verbose_name='action')),
                ('changes', models.JSONField(null=True, verbose_name='change message')),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='timestamp')),
                ('business_area', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.businessarea')),
                ('content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='log_entries', to='contenttypes.contenttype')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='logs', to=settings.AUTH_USER_MODEL, verbose_name='actor')),
                ('object_repr', models.TextField(blank=True)),
                ('programs', models.ManyToManyField(blank=True, related_name='activity_logs', to='program.Program'),
                ),
            ],
            options={
                'verbose_name': 'log entry',
                'verbose_name_plural': 'log entries',
                'ordering': ['-timestamp'],
                'get_latest_by': 'timestamp',
            },
        ),
        migrations.RunPython(activity_log_assign_program, migrations.RunPython.noop),
    ]
