version: '3.7'

volumes:
  backend-data:
  node_modules:
  db:
  db_ca:
  db_reg:
  db_airflow:
  airflow:

services:
  proxy:
    image: unicef/hct-mis-proxy
    environment:
      - DJANGO_APPLICATION_SERVICE_HOST=backend
      - FRONTEND_SERVICE_HOST=frontend
    build:
      context: ./proxy
      dockerfile: ./Dockerfile
    ports:
      - "8082:80"
    depends_on:
      - backend
      - frontend
    volumes:
      - backend-data:/data

  redis:
    restart: always
    image: redis:4.0.11-alpine3.8

  backend:
    stdin_open: true
    tty: true
    image: unicef/hct-mis-backend
    env_file:
      - .env
    environment:
      - REDIS_INSTANCE=redis:6379
    build:
      context: ./backend
      dockerfile: ./Dockerfile
    ports:
      - "8080:8000"
    volumes:
      - ./backend:/code/
      - backend-data:/data
    command: "dev"
    depends_on:
      - db
      - redis
      - cash_assist_datahub_db
      - registration_datahub_db

  #    backend-jobs:
  #        image: unicef/hct-mis-backend
  #        env_file:
  #            - .env
  #        environment:
  #            - REDIS_INSTANCE=redis:6379
  #        build:
  #            context: ./backend
  #            dockerfile: ./Dockerfile
  #            args:
  #                ENV: dev
  #                REQUIREMENT_FILE: dev.pip
  #        volumes:
  #            - ./backend:/code/
  #        depends_on:
  #            - backend
  #        command: bash -c "/./worker-entrypoint.sh"

  db:
    image: mdillon/postgis:9.5-alpine
    volumes:
      - db:/data/postgres
    env_file:
      - .env
    ports:
      - "5433:5432"

  cash_assist_datahub_db:
    image: mdillon/postgis:9.5-alpine
    volumes:
       - db_ca:/data/postgres
    env_file:
      - .env

  registration_datahub_db:
    image: mdillon/postgis:9.5-alpine
    volumes:
       - db_reg:/data/postgres
    env_file:
      - .env

#  airflow_db:
#    image: postgres:9.5.15-alpine
#    volumes:
#       - db_airflow:/data/postgres
#    env_file:
#      - .env
#
#  airflow_webserver:
#     image: unicef/hct-airflow-webserver
#     build:
#         context: ./airflow
#         dockerfile: ./Dockerfile
#     ports:
#         - "4200:8080"
#     env_file:
#       - .env
#     restart: always
#     depends_on:
#         - airflow_db
#         - db
#         - registration_datahub_db
#         - cash_assist_datahub_db
#         - airflow_worker
#     links:
#         - airflow_worker
#     volumes:
#         - ./airflow/connectors:/usr/local/airflow/connectors
#         - ./airflow/dags:/usr/local/airflow/dags
#         - ./backend:/usr/local/airflow/backend
#     logging:  #NOTE: the output of this can be noisy by default, this makes it silent. Comment out if you wish to see logs
#       driver: "none"
#     command: webserver
#
#  airflow_scheduler:
#     image: unicef/hct-airflow-scheduler
#     build:
#         context: ./airflow
#         dockerfile: ./Dockerfile
#     env_file:
#         - .env
#     restart: always
#     logging:  #NOTE: the output of this can be noisy by default, this makes it silent. Comment out if you wish to see logs
#       driver: "none"
#     volumes:
#         - ./airflow/connectors:/usr/local/airflow/connectors
#         - ./airflow/dags:/usr/local/airflow/dags
#         - backend-data:/usr/local/airflow/backend
#     command: scheduler
#     depends_on:
#         - airflow_webserver
#
#  airflow_worker:
#     image: unicef/hct-airflow-worker
#     build:
#         context: ./airflow
#         dockerfile: ./Dockerfile
#     env_file:
#       - .env
#     restart: always
#     volumes:
#         - ./airflow/dags:/usr/local/airflow/dags
#         - ./airflow/connectors:/usr/local/airflow/connectors
#         - ./backend-data:/usr/local/airflow/backend
#     command: worker

  frontend:
    image: unicef/hct-mis-frontend
    env_file:
      - .env
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
      target: dev
      args:
        ENV: dev
    ports:
      - "8088:80"
      - "3000:3000"
    volumes:
      - ./frontend/:/code
      - /code/node_modules
    command: sh -c 'npm start'
